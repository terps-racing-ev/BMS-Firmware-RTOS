
build/debug/BMS-Firmware-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008070  08008190  08008190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08010200  08010200  00009200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010490  08010490  0000a080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08010490  08010490  0000a080  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08010490  08010490  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010490  08010490  00009490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08010498  08010498  00009498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080104a0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004574  20000080  08010520  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045f4  08010520  0000a5f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030001  00000000  00000000  0000a0e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cce  00000000  00000000  0003a0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000182f2  00000000  00000000  0003fdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ec0  00000000  00000000  000580b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b2e  00000000  00000000  00059f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024b3f  00000000  00000000  0005ba9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ad6c  00000000  00000000  000805dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005788  00000000  00000000  0008b34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  00090ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	@ (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	@ (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000080 	.word	0x20000080
 80081ac:	00000000 	.word	0x00000000
 80081b0:	080101e8 	.word	0x080101e8

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	@ (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000084 	.word	0x20000084
 80081cc:	080101e8 	.word	0x080101e8

080081d0 <BQ76952_ReadRegister16>:
  * @note   BQ76952 Direct Commands use single-byte addressing
  *         Data is returned LSB first (little-endian)
  */
static HAL_StatusTypeDef BQ76952_ReadRegister16(I2C_HandleTypeDef *hi2c, uint8_t device_addr, 
                                                 uint16_t reg_addr, uint16_t *value)
{
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	4605      	mov	r5, r0
 80081d6:	461e      	mov	r6, r3
    HAL_StatusTypeDef status;
    uint8_t reg_byte = (uint8_t)(reg_addr & 0xFF);  // Direct commands are 8-bit addresses
 80081d8:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t data[2];
    
    // Write register address
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), &reg_byte, 1, I2C_TIMEOUT_MS);
 80081dc:	004c      	lsls	r4, r1, #1
 80081de:	2264      	movs	r2, #100	@ 0x64
 80081e0:	9200      	str	r2, [sp, #0]
 80081e2:	2301      	movs	r3, #1
 80081e4:	f10d 020f 	add.w	r2, sp, #15
 80081e8:	4621      	mov	r1, r4
 80081ea:	f005 f925 	bl	800d438 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) {
 80081ee:	b108      	cbz	r0, 80081f4 <BQ76952_ReadRegister16+0x24>
    
    // Combine bytes (LSB first)
    *value = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
    
    return HAL_OK;
}
 80081f0:	b004      	add	sp, #16
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_I2C_Master_Receive(hi2c, (device_addr << 1), data, 2, I2C_TIMEOUT_MS);
 80081f4:	2364      	movs	r3, #100	@ 0x64
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	2302      	movs	r3, #2
 80081fa:	aa03      	add	r2, sp, #12
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f005 f9ec 	bl	800d5dc <HAL_I2C_Master_Receive>
    if (status != HAL_OK) {
 8008204:	2800      	cmp	r0, #0
 8008206:	d1f3      	bne.n	80081f0 <BQ76952_ReadRegister16+0x20>
    *value = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
 8008208:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800820c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8008210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008214:	8033      	strh	r3, [r6, #0]
    return HAL_OK;
 8008216:	e7eb      	b.n	80081f0 <BQ76952_ReadRegister16+0x20>

08008218 <BQ_ReadCell>:
    if (hi2c == NULL || voltage_mv == NULL || cell_num < 1 || cell_num > 16) {
 8008218:	2800      	cmp	r0, #0
 800821a:	d03f      	beq.n	800829c <BQ_ReadCell+0x84>
{
 800821c:	b510      	push	{r4, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	461c      	mov	r4, r3
 8008222:	4684      	mov	ip, r0
    if (hi2c == NULL || voltage_mv == NULL || cell_num < 1 || cell_num > 16) {
 8008224:	2b00      	cmp	r3, #0
 8008226:	d03b      	beq.n	80082a0 <BQ_ReadCell+0x88>
 8008228:	2a00      	cmp	r2, #0
 800822a:	d03b      	beq.n	80082a4 <BQ_ReadCell+0x8c>
 800822c:	2a10      	cmp	r2, #16
 800822e:	d83c      	bhi.n	80082aa <BQ_ReadCell+0x92>
    switch (cell_num) {
 8008230:	3a01      	subs	r2, #1
 8008232:	2a0f      	cmp	r2, #15
 8008234:	d83b      	bhi.n	80082ae <BQ_ReadCell+0x96>
 8008236:	e8df f002 	tbb	[pc, r2]
 800823a:	2f08      	.short	0x2f08
 800823c:	19171513 	.word	0x19171513
 8008240:	211f1d1b 	.word	0x211f1d1b
 8008244:	29272523 	.word	0x29272523
 8008248:	2d2b      	.short	0x2d2b
 800824a:	2214      	movs	r2, #20
    status = BQ76952_ReadRegister16(hi2c, device_addr, reg_addr, &raw_value);
 800824c:	f10d 0306 	add.w	r3, sp, #6
 8008250:	4660      	mov	r0, ip
 8008252:	f7ff ffbd 	bl	80081d0 <BQ76952_ReadRegister16>
    if (status == HAL_OK) {
 8008256:	bb30      	cbnz	r0, 80082a6 <BQ_ReadCell+0x8e>
        *voltage_mv = raw_value;
 8008258:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800825c:	8023      	strh	r3, [r4, #0]
 800825e:	e022      	b.n	80082a6 <BQ_ReadCell+0x8e>
        case 3:  reg_addr = Cell3Voltage;  break;
 8008260:	2218      	movs	r2, #24
 8008262:	e7f3      	b.n	800824c <BQ_ReadCell+0x34>
        case 4:  reg_addr = Cell4Voltage;  break;
 8008264:	221a      	movs	r2, #26
 8008266:	e7f1      	b.n	800824c <BQ_ReadCell+0x34>
        case 5:  reg_addr = Cell5Voltage;  break;
 8008268:	221c      	movs	r2, #28
 800826a:	e7ef      	b.n	800824c <BQ_ReadCell+0x34>
        case 6:  reg_addr = Cell6Voltage;  break;
 800826c:	221e      	movs	r2, #30
 800826e:	e7ed      	b.n	800824c <BQ_ReadCell+0x34>
        case 7:  reg_addr = Cell7Voltage;  break;
 8008270:	2220      	movs	r2, #32
 8008272:	e7eb      	b.n	800824c <BQ_ReadCell+0x34>
        case 8:  reg_addr = Cell8Voltage;  break;
 8008274:	2222      	movs	r2, #34	@ 0x22
 8008276:	e7e9      	b.n	800824c <BQ_ReadCell+0x34>
        case 9:  reg_addr = Cell9Voltage;  break;
 8008278:	2224      	movs	r2, #36	@ 0x24
 800827a:	e7e7      	b.n	800824c <BQ_ReadCell+0x34>
        case 10: reg_addr = Cell10Voltage; break;
 800827c:	2226      	movs	r2, #38	@ 0x26
 800827e:	e7e5      	b.n	800824c <BQ_ReadCell+0x34>
        case 11: reg_addr = Cell11Voltage; break;
 8008280:	2228      	movs	r2, #40	@ 0x28
 8008282:	e7e3      	b.n	800824c <BQ_ReadCell+0x34>
        case 12: reg_addr = Cell12Voltage; break;
 8008284:	222a      	movs	r2, #42	@ 0x2a
 8008286:	e7e1      	b.n	800824c <BQ_ReadCell+0x34>
        case 13: reg_addr = Cell13Voltage; break;
 8008288:	222c      	movs	r2, #44	@ 0x2c
 800828a:	e7df      	b.n	800824c <BQ_ReadCell+0x34>
        case 14: reg_addr = Cell14Voltage; break;
 800828c:	222e      	movs	r2, #46	@ 0x2e
 800828e:	e7dd      	b.n	800824c <BQ_ReadCell+0x34>
        case 15: reg_addr = Cell15Voltage; break;
 8008290:	2230      	movs	r2, #48	@ 0x30
 8008292:	e7db      	b.n	800824c <BQ_ReadCell+0x34>
        case 16: reg_addr = Cell16Voltage; break;
 8008294:	2232      	movs	r2, #50	@ 0x32
 8008296:	e7d9      	b.n	800824c <BQ_ReadCell+0x34>
        case 2:  reg_addr = Cell2Voltage;  break;
 8008298:	2216      	movs	r2, #22
 800829a:	e7d7      	b.n	800824c <BQ_ReadCell+0x34>
        return HAL_ERROR;
 800829c:	2001      	movs	r0, #1
}
 800829e:	4770      	bx	lr
        return HAL_ERROR;
 80082a0:	2001      	movs	r0, #1
 80082a2:	e000      	b.n	80082a6 <BQ_ReadCell+0x8e>
 80082a4:	2001      	movs	r0, #1
}
 80082a6:	b002      	add	sp, #8
 80082a8:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 80082aa:	2001      	movs	r0, #1
 80082ac:	e7fb      	b.n	80082a6 <BQ_ReadCell+0x8e>
    switch (cell_num) {
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7f9      	b.n	80082a6 <BQ_ReadCell+0x8e>
	...

080082b4 <BQ_ReadBMS1>:
    if (data == NULL) {
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d042      	beq.n	800833e <BQ_ReadBMS1+0x8a>
{
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	4606      	mov	r6, r0
    if (I2C1Handle != NULL) {
 80082be:	4b23      	ldr	r3, [pc, #140]	@ (800834c <BQ_ReadBMS1+0x98>)
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	b120      	cbz	r0, 80082ce <BQ_ReadBMS1+0x1a>
        if (osMutexAcquire(I2C1Handle, I2C_TIMEOUT_MS) != osOK) {
 80082c4:	2164      	movs	r1, #100	@ 0x64
 80082c6:	f001 f9a4 	bl	8009612 <osMutexAcquire>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d139      	bne.n	8008342 <BQ_ReadBMS1+0x8e>
{
 80082ce:	2500      	movs	r5, #0
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 80082d0:	2d08      	cmp	r5, #8
 80082d2:	d81b      	bhi.n	800830c <BQ_ReadBMS1+0x58>
        uint16_t voltage_mv = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	f8ad 3006 	strh.w	r3, [sp, #6]
        status = BQ_ReadCell(&hi2c1, BQ76952_I2C_ADDR_BMS1, i + 1, &voltage_mv);
 80082da:	1c6c      	adds	r4, r5, #1
 80082dc:	b2e4      	uxtb	r4, r4
 80082de:	f10d 0306 	add.w	r3, sp, #6
 80082e2:	4622      	mov	r2, r4
 80082e4:	2108      	movs	r1, #8
 80082e6:	481a      	ldr	r0, [pc, #104]	@ (8008350 <BQ_ReadBMS1+0x9c>)
 80082e8:	f7ff ff96 	bl	8008218 <BQ_ReadCell>
        if (status == HAL_OK) {
 80082ec:	b928      	cbnz	r0, 80082fa <BQ_ReadBMS1+0x46>
            data->cell_voltage_mv[i] = voltage_mv;
 80082ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80082f2:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 80082f6:	4625      	mov	r5, r4
 80082f8:	e7ea      	b.n	80082d0 <BQ_ReadBMS1+0x1c>
            data->valid = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	7633      	strb	r3, [r6, #24]
            if (I2C1Handle != NULL) {
 80082fe:	4b13      	ldr	r3, [pc, #76]	@ (800834c <BQ_ReadBMS1+0x98>)
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	b108      	cbz	r0, 8008308 <BQ_ReadBMS1+0x54>
                osMutexRelease(I2C1Handle);
 8008304:	f001 f9b4 	bl	8009670 <osMutexRelease>
            return HAL_ERROR;
 8008308:	2001      	movs	r0, #1
 800830a:	e016      	b.n	800833a <BQ_ReadBMS1+0x86>
    if (I2C1Handle != NULL) {
 800830c:	4b0f      	ldr	r3, [pc, #60]	@ (800834c <BQ_ReadBMS1+0x98>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	b108      	cbz	r0, 8008316 <BQ_ReadBMS1+0x62>
        osMutexRelease(I2C1Handle);
 8008312:	f001 f9ad 	bl	8009670 <osMutexRelease>
    if (voltage_mutex != NULL) {
 8008316:	4b0f      	ldr	r3, [pc, #60]	@ (8008354 <BQ_ReadBMS1+0xa0>)
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	b118      	cbz	r0, 8008324 <BQ_ReadBMS1+0x70>
        osMutexAcquire(voltage_mutex, osWaitForever);
 800831c:	f04f 31ff 	mov.w	r1, #4294967295
 8008320:	f001 f977 	bl	8009612 <osMutexAcquire>
    data->last_update_tick = osKernelGetTickCount();
 8008324:	f001 f8b8 	bl	8009498 <osKernelGetTickCount>
 8008328:	6170      	str	r0, [r6, #20]
    data->valid = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	7633      	strb	r3, [r6, #24]
    if (voltage_mutex != NULL) {
 800832e:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <BQ_ReadBMS1+0xa0>)
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	b140      	cbz	r0, 8008346 <BQ_ReadBMS1+0x92>
        osMutexRelease(voltage_mutex);
 8008334:	f001 f99c 	bl	8009670 <osMutexRelease>
    return HAL_OK;
 8008338:	2000      	movs	r0, #0
}
 800833a:	b002      	add	sp, #8
 800833c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800833e:	2001      	movs	r0, #1
}
 8008340:	4770      	bx	lr
            return HAL_ERROR;
 8008342:	2001      	movs	r0, #1
 8008344:	e7f9      	b.n	800833a <BQ_ReadBMS1+0x86>
    return HAL_OK;
 8008346:	2000      	movs	r0, #0
 8008348:	e7f7      	b.n	800833a <BQ_ReadBMS1+0x86>
 800834a:	bf00      	nop
 800834c:	20003c88 	.word	0x20003c88
 8008350:	20003cf4 	.word	0x20003cf4
 8008354:	200000a4 	.word	0x200000a4

08008358 <BQ_SendCANMessage>:
HAL_StatusTypeDef BQ_SendCANMessage(BQ_Data_t *data)
{
    HAL_StatusTypeDef status = HAL_OK;
    uint8_t can_data[8];
    
    if (data == NULL) {
 8008358:	2800      	cmp	r0, #0
 800835a:	d062      	beq.n	8008422 <BQ_SendCANMessage+0xca>
{
 800835c:	b510      	push	{r4, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	4604      	mov	r4, r0
        return HAL_ERROR;
    }
    
    // Message 0: Cells 1-3 (6 bytes)
    can_data[0] = (uint8_t)(data->cell_voltage_mv[0] & 0xFF);
 8008362:	8803      	ldrh	r3, [r0, #0]
 8008364:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[0] >> 8) & 0xFF);
 8008368:	0a1b      	lsrs	r3, r3, #8
 800836a:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[1] & 0xFF);
 800836e:	8843      	ldrh	r3, [r0, #2]
 8008370:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[1] >> 8) & 0xFF);
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[2] & 0xFF);
 800837a:	8883      	ldrh	r3, [r0, #4]
 800837c:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[2] >> 8) & 0xFF);
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 8008386:	2300      	movs	r3, #0
 8008388:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 800838c:	f88d 3007 	strb.w	r3, [sp, #7]
    
    status = CAN_SendMessage(CAN_VOLTAGE_0_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 8008390:	2302      	movs	r3, #2
 8008392:	2206      	movs	r2, #6
 8008394:	4669      	mov	r1, sp
 8008396:	4824      	ldr	r0, [pc, #144]	@ (8008428 <BQ_SendCANMessage+0xd0>)
 8008398:	6800      	ldr	r0, [r0, #0]
 800839a:	f000 fb71 	bl	8008a80 <CAN_SendMessage>
    if (status != HAL_OK) {
 800839e:	b108      	cbz	r0, 80083a4 <BQ_SendCANMessage+0x4c>
    can_data[7] = 0x00;  // Padding
    
    status = CAN_SendMessage(CAN_VOLTAGE_2_ID, can_data, 6, CAN_PRIORITY_NORMAL);
    
    return status;
}
 80083a0:	b002      	add	sp, #8
 80083a2:	bd10      	pop	{r4, pc}
    can_data[0] = (uint8_t)(data->cell_voltage_mv[3] & 0xFF);
 80083a4:	88e3      	ldrh	r3, [r4, #6]
 80083a6:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[3] >> 8) & 0xFF);
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[4] & 0xFF);
 80083b0:	8923      	ldrh	r3, [r4, #8]
 80083b2:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[4] >> 8) & 0xFF);
 80083b6:	0a1b      	lsrs	r3, r3, #8
 80083b8:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[5] & 0xFF);
 80083bc:	8963      	ldrh	r3, [r4, #10]
 80083be:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[5] >> 8) & 0xFF);
 80083c2:	0a1b      	lsrs	r3, r3, #8
 80083c4:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 80083c8:	2300      	movs	r3, #0
 80083ca:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 80083ce:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_1_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 80083d2:	2302      	movs	r3, #2
 80083d4:	2206      	movs	r2, #6
 80083d6:	4669      	mov	r1, sp
 80083d8:	4814      	ldr	r0, [pc, #80]	@ (800842c <BQ_SendCANMessage+0xd4>)
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	f000 fb50 	bl	8008a80 <CAN_SendMessage>
    if (status != HAL_OK) {
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1dd      	bne.n	80083a0 <BQ_SendCANMessage+0x48>
    can_data[0] = (uint8_t)(data->cell_voltage_mv[6] & 0xFF);
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[6] >> 8) & 0xFF);
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[7] & 0xFF);
 80083f0:	89e3      	ldrh	r3, [r4, #14]
 80083f2:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[7] >> 8) & 0xFF);
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[8] & 0xFF);
 80083fc:	8a23      	ldrh	r3, [r4, #16]
 80083fe:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[8] >> 8) & 0xFF);
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 8008408:	2300      	movs	r3, #0
 800840a:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 800840e:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_2_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 8008412:	2302      	movs	r3, #2
 8008414:	2206      	movs	r2, #6
 8008416:	4669      	mov	r1, sp
 8008418:	4805      	ldr	r0, [pc, #20]	@ (8008430 <BQ_SendCANMessage+0xd8>)
 800841a:	6800      	ldr	r0, [r0, #0]
 800841c:	f000 fb30 	bl	8008a80 <CAN_SendMessage>
    return status;
 8008420:	e7be      	b.n	80083a0 <BQ_SendCANMessage+0x48>
        return HAL_ERROR;
 8008422:	2001      	movs	r0, #1
}
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000d48 	.word	0x20000d48
 800842c:	20000d44 	.word	0x20000d44
 8008430:	20000d40 	.word	0x20000d40

08008434 <BQ_CheckLimits>:
  * @note   Sets ERROR_OVER_VOLTAGE or ERROR_UNDER_VOLTAGE if out of range
  *         Sets WARNING_HIGH_VOLTAGE or WARNING_LOW_VOLTAGE if approaching limits
  */
void BQ_CheckLimits(BQ_Data_t *data)
{
    if (data == NULL || !data->valid) {
 8008434:	2800      	cmp	r0, #0
 8008436:	d050      	beq.n	80084da <BQ_CheckLimits+0xa6>
{
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	4601      	mov	r1, r0
    if (data == NULL || !data->valid) {
 800843c:	7e03      	ldrb	r3, [r0, #24]
 800843e:	b3bb      	cbz	r3, 80084b0 <BQ_CheckLimits+0x7c>
    bool under_voltage_detected = false;
    bool high_voltage_warning = false;
    bool low_voltage_warning = false;
    
    // Check all cells in the data structure
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 8008440:	2300      	movs	r3, #0
    bool low_voltage_warning = false;
 8008442:	461e      	mov	r6, r3
    bool high_voltage_warning = false;
 8008444:	461d      	mov	r5, r3
    bool under_voltage_detected = false;
 8008446:	461c      	mov	r4, r3
    bool over_voltage_detected = false;
 8008448:	461f      	mov	r7, r3
 800844a:	e002      	b.n	8008452 <BQ_CheckLimits+0x1e>
            continue;
        }
        
        // Check for over-voltage error (above max limit)
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
            over_voltage_detected = true;
 800844c:	2701      	movs	r7, #1
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 800844e:	3301      	adds	r3, #1
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b08      	cmp	r3, #8
 8008454:	d818      	bhi.n	8008488 <BQ_CheckLimits+0x54>
        uint16_t voltage_mv = data->cell_voltage_mv[i];
 8008456:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
        if (voltage_mv == 0) {
 800845a:	2a00      	cmp	r2, #0
 800845c:	d0f7      	beq.n	800844e <BQ_CheckLimits+0x1a>
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
 800845e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8008462:	4282      	cmp	r2, r0
 8008464:	d8f2      	bhi.n	800844c <BQ_CheckLimits+0x18>
        }
        // Check for under-voltage error (below min limit)
        else if (voltage_mv < CELL_VOLTAGE_MIN_MV) {
 8008466:	f640 10c3 	movw	r0, #2499	@ 0x9c3
 800846a:	4282      	cmp	r2, r0
 800846c:	d908      	bls.n	8008480 <BQ_CheckLimits+0x4c>
            under_voltage_detected = true;
        }
        // Check for high voltage warning (approaching max)
        else if (voltage_mv > CELL_VOLTAGE_WARNING_HIGH_MV) {
 800846e:	f241 0004 	movw	r0, #4100	@ 0x1004
 8008472:	4282      	cmp	r2, r0
 8008474:	d806      	bhi.n	8008484 <BQ_CheckLimits+0x50>
            high_voltage_warning = true;
        }
        // Check for low voltage warning (approaching min)
        else if (voltage_mv < CELL_VOLTAGE_WARNING_LOW_MV) {
 8008476:	f5b2 6f2f 	cmp.w	r2, #2800	@ 0xaf0
 800847a:	d2e8      	bcs.n	800844e <BQ_CheckLimits+0x1a>
            low_voltage_warning = true;
 800847c:	2601      	movs	r6, #1
 800847e:	e7e6      	b.n	800844e <BQ_CheckLimits+0x1a>
            under_voltage_detected = true;
 8008480:	2401      	movs	r4, #1
 8008482:	e7e4      	b.n	800844e <BQ_CheckLimits+0x1a>
            high_voltage_warning = true;
 8008484:	2501      	movs	r5, #1
 8008486:	e7e2      	b.n	800844e <BQ_CheckLimits+0x1a>
        }
    }
    
    // Set or clear error flags
    if (over_voltage_detected) {
 8008488:	b19f      	cbz	r7, 80084b2 <BQ_CheckLimits+0x7e>
        ErrorMgr_SetError(ERROR_OVER_VOLTAGE);
 800848a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800848e:	f001 fc69 	bl	8009d64 <ErrorMgr_SetError>
    } else {
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
    }
    
    if (under_voltage_detected) {
 8008492:	b19c      	cbz	r4, 80084bc <BQ_CheckLimits+0x88>
        ErrorMgr_SetError(ERROR_UNDER_VOLTAGE);
 8008494:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008498:	f001 fc64 	bl	8009d64 <ErrorMgr_SetError>
    } else {
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
    }
    
    // Set or clear warning flags
    if (high_voltage_warning) {
 800849c:	b19d      	cbz	r5, 80084c6 <BQ_CheckLimits+0x92>
        ErrorMgr_SetWarning(WARNING_HIGH_VOLTAGE);
 800849e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084a2:	f001 fcc3 	bl	8009e2c <ErrorMgr_SetWarning>
    } else {
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
    }
    
    if (low_voltage_warning) {
 80084a6:	b19e      	cbz	r6, 80084d0 <BQ_CheckLimits+0x9c>
        ErrorMgr_SetWarning(WARNING_LOW_VOLTAGE);
 80084a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084ac:	f001 fcbe 	bl	8009e2c <ErrorMgr_SetWarning>
    } else {
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
    }
}
 80084b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
 80084b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084b6:	f001 fc7b 	bl	8009db0 <ErrorMgr_ClearError>
 80084ba:	e7ea      	b.n	8008492 <BQ_CheckLimits+0x5e>
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
 80084bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084c0:	f001 fc76 	bl	8009db0 <ErrorMgr_ClearError>
 80084c4:	e7ea      	b.n	800849c <BQ_CheckLimits+0x68>
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
 80084c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084ca:	f001 fcc7 	bl	8009e5c <ErrorMgr_ClearWarning>
 80084ce:	e7ea      	b.n	80084a6 <BQ_CheckLimits+0x72>
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
 80084d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084d4:	f001 fcc2 	bl	8009e5c <ErrorMgr_ClearWarning>
 80084d8:	e7ea      	b.n	80084b0 <BQ_CheckLimits+0x7c>
 80084da:	4770      	bx	lr

080084dc <BQ_ReadBMS2>:
  */
HAL_StatusTypeDef BQ_ReadBMS2(BQ_Data_BMS2_t *data)
{
    HAL_StatusTypeDef status = HAL_OK;
    
    if (data == NULL) {
 80084dc:	2800      	cmp	r0, #0
 80084de:	d04f      	beq.n	8008580 <BQ_ReadBMS2+0xa4>
{
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	4606      	mov	r6, r0
        return HAL_ERROR;
    }
    
    // Acquire I2C3 mutex
    if (I2C3Handle != NULL) {
 80084e6:	4b29      	ldr	r3, [pc, #164]	@ (800858c <BQ_ReadBMS2+0xb0>)
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	b120      	cbz	r0, 80084f6 <BQ_ReadBMS2+0x1a>
        if (osMutexAcquire(I2C3Handle, I2C_TIMEOUT_MS) != osOK) {
 80084ec:	2164      	movs	r1, #100	@ 0x64
 80084ee:	f001 f890 	bl	8009612 <osMutexAcquire>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d146      	bne.n	8008584 <BQ_ReadBMS2+0xa8>
            return HAL_ERROR;
        }
    }
    
    // Check I2C3 error state for diagnostics
    g_last_i2c3_error = HAL_I2C_GetError(&hi2c3);
 80084f6:	4826      	ldr	r0, [pc, #152]	@ (8008590 <BQ_ReadBMS2+0xb4>)
 80084f8:	f005 f9cf 	bl	800d89a <HAL_I2C_GetError>
 80084fc:	4b25      	ldr	r3, [pc, #148]	@ (8008594 <BQ_ReadBMS2+0xb8>)
 80084fe:	6018      	str	r0, [r3, #0]
    
    // If I2C3 has errors, try to clear them
    if (g_last_i2c3_error != HAL_I2C_ERROR_NONE) {
 8008500:	b130      	cbz	r0, 8008510 <BQ_ReadBMS2+0x34>
        __HAL_I2C_CLEAR_FLAG(&hi2c3, I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_AF | I2C_FLAG_OVR);
 8008502:	4b23      	ldr	r3, [pc, #140]	@ (8008590 <BQ_ReadBMS2+0xb4>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 800850a:	61d1      	str	r1, [r2, #28]
        hi2c3.ErrorCode = HAL_I2C_ERROR_NONE;
 800850c:	2200      	movs	r2, #0
 800850e:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8008510:	2500      	movs	r5, #0
    }
    
    // Read cells 10-18 (map to BQ76952 cells 1-9 on second chip)
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 8008512:	2d08      	cmp	r5, #8
 8008514:	d81b      	bhi.n	800854e <BQ_ReadBMS2+0x72>
        uint16_t voltage_mv = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        // Read from BQ76952 cells 1-9 (physical cells 10-18)
        status = BQ_ReadCell(&hi2c3, BQ76952_I2C_ADDR_BMS2, i + 1, &voltage_mv);
 800851c:	1c6c      	adds	r4, r5, #1
 800851e:	b2e4      	uxtb	r4, r4
 8008520:	f10d 0306 	add.w	r3, sp, #6
 8008524:	4622      	mov	r2, r4
 8008526:	2108      	movs	r1, #8
 8008528:	4819      	ldr	r0, [pc, #100]	@ (8008590 <BQ_ReadBMS2+0xb4>)
 800852a:	f7ff fe75 	bl	8008218 <BQ_ReadCell>
        
        if (status == HAL_OK) {
 800852e:	b928      	cbnz	r0, 800853c <BQ_ReadBMS2+0x60>
            data->cell_voltage_mv[i] = voltage_mv;
 8008530:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008534:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 8008538:	4625      	mov	r5, r4
 800853a:	e7ea      	b.n	8008512 <BQ_ReadBMS2+0x36>
        } else {
            // Communication error - mark data as invalid
            data->valid = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	7633      	strb	r3, [r6, #24]
            
            // Release I2C3 mutex
            if (I2C3Handle != NULL) {
 8008540:	4b12      	ldr	r3, [pc, #72]	@ (800858c <BQ_ReadBMS2+0xb0>)
 8008542:	6818      	ldr	r0, [r3, #0]
 8008544:	b108      	cbz	r0, 800854a <BQ_ReadBMS2+0x6e>
                osMutexRelease(I2C3Handle);
 8008546:	f001 f893 	bl	8009670 <osMutexRelease>
            }
            
            return HAL_ERROR;
 800854a:	2001      	movs	r0, #1
 800854c:	e016      	b.n	800857c <BQ_ReadBMS2+0xa0>
        }
    }
    
    // Release I2C3 mutex
    if (I2C3Handle != NULL) {
 800854e:	4b0f      	ldr	r3, [pc, #60]	@ (800858c <BQ_ReadBMS2+0xb0>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	b108      	cbz	r0, 8008558 <BQ_ReadBMS2+0x7c>
        osMutexRelease(I2C3Handle);
 8008554:	f001 f88c 	bl	8009670 <osMutexRelease>
    }
    
    // Update timestamp and mark data as valid
    if (voltage_mutex_bms2 != NULL) {
 8008558:	4b0f      	ldr	r3, [pc, #60]	@ (8008598 <BQ_ReadBMS2+0xbc>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	b118      	cbz	r0, 8008566 <BQ_ReadBMS2+0x8a>
        osMutexAcquire(voltage_mutex_bms2, osWaitForever);
 800855e:	f04f 31ff 	mov.w	r1, #4294967295
 8008562:	f001 f856 	bl	8009612 <osMutexAcquire>
    }
    
    data->last_update_tick = osKernelGetTickCount();
 8008566:	f000 ff97 	bl	8009498 <osKernelGetTickCount>
 800856a:	6170      	str	r0, [r6, #20]
    data->valid = 1;
 800856c:	2301      	movs	r3, #1
 800856e:	7633      	strb	r3, [r6, #24]
    
    if (voltage_mutex_bms2 != NULL) {
 8008570:	4b09      	ldr	r3, [pc, #36]	@ (8008598 <BQ_ReadBMS2+0xbc>)
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	b140      	cbz	r0, 8008588 <BQ_ReadBMS2+0xac>
        osMutexRelease(voltage_mutex_bms2);
 8008576:	f001 f87b 	bl	8009670 <osMutexRelease>
    }
    
    return HAL_OK;
 800857a:	2000      	movs	r0, #0
}
 800857c:	b002      	add	sp, #8
 800857e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008580:	2001      	movs	r0, #1
}
 8008582:	4770      	bx	lr
            return HAL_ERROR;
 8008584:	2001      	movs	r0, #1
 8008586:	e7f9      	b.n	800857c <BQ_ReadBMS2+0xa0>
    return HAL_OK;
 8008588:	2000      	movs	r0, #0
 800858a:	e7f7      	b.n	800857c <BQ_ReadBMS2+0xa0>
 800858c:	20003c84 	.word	0x20003c84
 8008590:	20003ca0 	.word	0x20003ca0
 8008594:	2000009c 	.word	0x2000009c
 8008598:	200000a0 	.word	0x200000a0

0800859c <BQ_SendCANMessage_BMS2>:
HAL_StatusTypeDef BQ_SendCANMessage_BMS2(BQ_Data_BMS2_t *data)
{
    HAL_StatusTypeDef status = HAL_OK;
    uint8_t can_data[8];
    
    if (data == NULL) {
 800859c:	2800      	cmp	r0, #0
 800859e:	d062      	beq.n	8008666 <BQ_SendCANMessage_BMS2+0xca>
{
 80085a0:	b510      	push	{r4, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	4604      	mov	r4, r0
        return HAL_ERROR;
    }
    
    // Message 3: Cells 10-12 (6 bytes)
    can_data[0] = (uint8_t)(data->cell_voltage_mv[0] & 0xFF);
 80085a6:	8803      	ldrh	r3, [r0, #0]
 80085a8:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[0] >> 8) & 0xFF);
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[1] & 0xFF);
 80085b2:	8843      	ldrh	r3, [r0, #2]
 80085b4:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[1] >> 8) & 0xFF);
 80085b8:	0a1b      	lsrs	r3, r3, #8
 80085ba:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[2] & 0xFF);
 80085be:	8883      	ldrh	r3, [r0, #4]
 80085c0:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[2] >> 8) & 0xFF);
 80085c4:	0a1b      	lsrs	r3, r3, #8
 80085c6:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 80085ca:	2300      	movs	r3, #0
 80085cc:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 80085d0:	f88d 3007 	strb.w	r3, [sp, #7]
    
    status = CAN_SendMessage(CAN_VOLTAGE_3_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 80085d4:	2302      	movs	r3, #2
 80085d6:	2206      	movs	r2, #6
 80085d8:	4669      	mov	r1, sp
 80085da:	4824      	ldr	r0, [pc, #144]	@ (800866c <BQ_SendCANMessage_BMS2+0xd0>)
 80085dc:	6800      	ldr	r0, [r0, #0]
 80085de:	f000 fa4f 	bl	8008a80 <CAN_SendMessage>
    if (status != HAL_OK) {
 80085e2:	b108      	cbz	r0, 80085e8 <BQ_SendCANMessage_BMS2+0x4c>
    can_data[7] = 0x00;  // Padding
    
    status = CAN_SendMessage(CAN_VOLTAGE_5_ID, can_data, 6, CAN_PRIORITY_NORMAL);
    
    return status;
}
 80085e4:	b002      	add	sp, #8
 80085e6:	bd10      	pop	{r4, pc}
    can_data[0] = (uint8_t)(data->cell_voltage_mv[3] & 0xFF);
 80085e8:	88e3      	ldrh	r3, [r4, #6]
 80085ea:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[3] >> 8) & 0xFF);
 80085ee:	0a1b      	lsrs	r3, r3, #8
 80085f0:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[4] & 0xFF);
 80085f4:	8923      	ldrh	r3, [r4, #8]
 80085f6:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[4] >> 8) & 0xFF);
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[5] & 0xFF);
 8008600:	8963      	ldrh	r3, [r4, #10]
 8008602:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[5] >> 8) & 0xFF);
 8008606:	0a1b      	lsrs	r3, r3, #8
 8008608:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 800860c:	2300      	movs	r3, #0
 800860e:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 8008612:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_4_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 8008616:	2302      	movs	r3, #2
 8008618:	2206      	movs	r2, #6
 800861a:	4669      	mov	r1, sp
 800861c:	4814      	ldr	r0, [pc, #80]	@ (8008670 <BQ_SendCANMessage_BMS2+0xd4>)
 800861e:	6800      	ldr	r0, [r0, #0]
 8008620:	f000 fa2e 	bl	8008a80 <CAN_SendMessage>
    if (status != HAL_OK) {
 8008624:	2800      	cmp	r0, #0
 8008626:	d1dd      	bne.n	80085e4 <BQ_SendCANMessage_BMS2+0x48>
    can_data[0] = (uint8_t)(data->cell_voltage_mv[6] & 0xFF);
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[6] >> 8) & 0xFF);
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[7] & 0xFF);
 8008634:	89e3      	ldrh	r3, [r4, #14]
 8008636:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[7] >> 8) & 0xFF);
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[8] & 0xFF);
 8008640:	8a23      	ldrh	r3, [r4, #16]
 8008642:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[8] >> 8) & 0xFF);
 8008646:	0a1b      	lsrs	r3, r3, #8
 8008648:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 800864c:	2300      	movs	r3, #0
 800864e:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 8008652:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_5_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 8008656:	2302      	movs	r3, #2
 8008658:	2206      	movs	r2, #6
 800865a:	4669      	mov	r1, sp
 800865c:	4805      	ldr	r0, [pc, #20]	@ (8008674 <BQ_SendCANMessage_BMS2+0xd8>)
 800865e:	6800      	ldr	r0, [r0, #0]
 8008660:	f000 fa0e 	bl	8008a80 <CAN_SendMessage>
    return status;
 8008664:	e7be      	b.n	80085e4 <BQ_SendCANMessage_BMS2+0x48>
        return HAL_ERROR;
 8008666:	2001      	movs	r0, #1
}
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	20000d3c 	.word	0x20000d3c
 8008670:	20000d38 	.word	0x20000d38
 8008674:	20000d34 	.word	0x20000d34

08008678 <BQ_SendChipStatus>:
  * @param  hi2c: I2C handle
  * @param  can_id: CAN message ID to use
  * @retval HAL_StatusTypeDef: HAL_OK on success, HAL_ERROR on failure
  */
HAL_StatusTypeDef BQ_SendChipStatus(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint32_t can_id)
{
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	4606      	mov	r6, r0
 800867e:	460c      	mov	r4, r1
 8008680:	4615      	mov	r5, r2
    HAL_StatusTypeDef status;
    uint16_t stack_voltage = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t alarm_status = 0;
 8008688:	f8ad 300c 	strh.w	r3, [sp, #12]
    int16_t ts2_temp = 0;
 800868c:	f8ad 300a 	strh.w	r3, [sp, #10]
    uint8_t can_data[8];
    
    // Read Stack Voltage (0x34)
    status = BQ76952_ReadRegister16(hi2c, device_addr, StackVoltage, &stack_voltage);
 8008690:	f10d 030e 	add.w	r3, sp, #14
 8008694:	2234      	movs	r2, #52	@ 0x34
 8008696:	f7ff fd9b 	bl	80081d0 <BQ76952_ReadRegister16>
    if (status != HAL_OK) {
 800869a:	4603      	mov	r3, r0
 800869c:	b110      	cbz	r0, 80086a4 <BQ_SendChipStatus+0x2c>
    can_data[5] = (uint8_t)((ts2_temp >> 8) & 0xFF);
    can_data[6] = 0x00;  // Reserved
    can_data[7] = 0x00;  // Reserved
    
    return CAN_SendMessage(can_id, can_data, 8, CAN_PRIORITY_NORMAL);
}
 800869e:	4618      	mov	r0, r3
 80086a0:	b004      	add	sp, #16
 80086a2:	bd70      	pop	{r4, r5, r6, pc}
    status = BQ76952_ReadRegister16(hi2c, device_addr, AlarmStatus, &alarm_status);
 80086a4:	ab03      	add	r3, sp, #12
 80086a6:	2262      	movs	r2, #98	@ 0x62
 80086a8:	4621      	mov	r1, r4
 80086aa:	4630      	mov	r0, r6
 80086ac:	f7ff fd90 	bl	80081d0 <BQ76952_ReadRegister16>
    if (status != HAL_OK) {
 80086b0:	4603      	mov	r3, r0
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d1f3      	bne.n	800869e <BQ_SendChipStatus+0x26>
    status = BQ76952_ReadRegister16(hi2c, device_addr, TS2Temperature, (uint16_t*)&ts2_temp);
 80086b6:	f10d 030a 	add.w	r3, sp, #10
 80086ba:	2272      	movs	r2, #114	@ 0x72
 80086bc:	4621      	mov	r1, r4
 80086be:	4630      	mov	r0, r6
 80086c0:	f7ff fd86 	bl	80081d0 <BQ76952_ReadRegister16>
    if (status != HAL_OK) {
 80086c4:	4603      	mov	r3, r0
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d1e9      	bne.n	800869e <BQ_SendChipStatus+0x26>
    can_data[0] = (uint8_t)(stack_voltage & 0xFF);
 80086ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80086ce:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((stack_voltage >> 8) & 0xFF);
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(alarm_status & 0xFF);
 80086d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80086dc:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((alarm_status >> 8) & 0xFF);
 80086e0:	0a1b      	lsrs	r3, r3, #8
 80086e2:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(ts2_temp & 0xFF);
 80086e6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80086ea:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((ts2_temp >> 8) & 0xFF);
 80086ee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80086f2:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Reserved
 80086f6:	2300      	movs	r3, #0
 80086f8:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Reserved
 80086fc:	f88d 3007 	strb.w	r3, [sp, #7]
    return CAN_SendMessage(can_id, can_data, 8, CAN_PRIORITY_NORMAL);
 8008700:	2302      	movs	r3, #2
 8008702:	2208      	movs	r2, #8
 8008704:	4669      	mov	r1, sp
 8008706:	4628      	mov	r0, r5
 8008708:	f000 f9ba 	bl	8008a80 <CAN_SendMessage>
 800870c:	4603      	mov	r3, r0
 800870e:	e7c6      	b.n	800869e <BQ_SendChipStatus+0x26>

08008710 <BQ_MonitorTask>:
{
 8008710:	b570      	push	{r4, r5, r6, lr}
 8008712:	b084      	sub	sp, #16
    const osMutexAttr_t mutex_attr = {
 8008714:	4b2e      	ldr	r3, [pc, #184]	@ (80087d0 <BQ_MonitorTask+0xc0>)
 8008716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008718:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    voltage_mutex = osMutexNew(&mutex_attr);
 800871c:	4668      	mov	r0, sp
 800871e:	f000 ff2d 	bl	800957c <osMutexNew>
 8008722:	4b2c      	ldr	r3, [pc, #176]	@ (80087d4 <BQ_MonitorTask+0xc4>)
 8008724:	6018      	str	r0, [r3, #0]
    osDelay(500);
 8008726:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800872a:	f000 ff19 	bl	8009560 <osDelay>
    last_read_tick = osKernelGetTickCount();
 800872e:	f000 feb3 	bl	8009498 <osKernelGetTickCount>
 8008732:	4606      	mov	r6, r0
    last_can_tick = osKernelGetTickCount();
 8008734:	f000 feb0 	bl	8009498 <osKernelGetTickCount>
 8008738:	4605      	mov	r5, r0
 800873a:	e03d      	b.n	80087b8 <BQ_MonitorTask+0xa8>
            status = BQ_ReadBMS1(&voltage_data_bms1);
 800873c:	4826      	ldr	r0, [pc, #152]	@ (80087d8 <BQ_MonitorTask+0xc8>)
 800873e:	f7ff fdb9 	bl	80082b4 <BQ_ReadBMS1>
            if (status != HAL_OK) {
 8008742:	b940      	cbnz	r0, 8008756 <BQ_MonitorTask+0x46>
                ErrorMgr_ClearError(ERROR_I2C_BMS1);
 8008744:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008748:	f001 fb32 	bl	8009db0 <ErrorMgr_ClearError>
                BQ_CheckLimits(&voltage_data_bms1);
 800874c:	4822      	ldr	r0, [pc, #136]	@ (80087d8 <BQ_MonitorTask+0xc8>)
 800874e:	f7ff fe71 	bl	8008434 <BQ_CheckLimits>
            last_read_tick = current_tick;
 8008752:	4626      	mov	r6, r4
 8008754:	e037      	b.n	80087c6 <BQ_MonitorTask+0xb6>
                ErrorMgr_SetError(ERROR_I2C_BMS1);
 8008756:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800875a:	f001 fb03 	bl	8009d64 <ErrorMgr_SetError>
                if (voltage_mutex != NULL) {
 800875e:	4b1d      	ldr	r3, [pc, #116]	@ (80087d4 <BQ_MonitorTask+0xc4>)
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	b118      	cbz	r0, 800876c <BQ_MonitorTask+0x5c>
                    osMutexAcquire(voltage_mutex, osWaitForever);
 8008764:	f04f 31ff 	mov.w	r1, #4294967295
 8008768:	f000 ff53 	bl	8009612 <osMutexAcquire>
{
 800876c:	2300      	movs	r3, #0
 800876e:	e005      	b.n	800877c <BQ_MonitorTask+0x6c>
                    voltage_data_bms1.cell_voltage_mv[i] = 0;
 8008770:	4a19      	ldr	r2, [pc, #100]	@ (80087d8 <BQ_MonitorTask+0xc8>)
 8008772:	2100      	movs	r1, #0
 8008774:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 8008778:	3301      	adds	r3, #1
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b08      	cmp	r3, #8
 800877e:	d9f7      	bls.n	8008770 <BQ_MonitorTask+0x60>
                voltage_data_bms1.valid = 0;
 8008780:	4e15      	ldr	r6, [pc, #84]	@ (80087d8 <BQ_MonitorTask+0xc8>)
 8008782:	2300      	movs	r3, #0
 8008784:	7633      	strb	r3, [r6, #24]
                voltage_data_bms1.last_update_tick = osKernelGetTickCount();
 8008786:	f000 fe87 	bl	8009498 <osKernelGetTickCount>
 800878a:	6170      	str	r0, [r6, #20]
                if (voltage_mutex != NULL) {
 800878c:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <BQ_MonitorTask+0xc4>)
 800878e:	6818      	ldr	r0, [r3, #0]
 8008790:	b118      	cbz	r0, 800879a <BQ_MonitorTask+0x8a>
                    osMutexRelease(voltage_mutex);
 8008792:	f000 ff6d 	bl	8009670 <osMutexRelease>
            last_read_tick = current_tick;
 8008796:	4626      	mov	r6, r4
 8008798:	e015      	b.n	80087c6 <BQ_MonitorTask+0xb6>
 800879a:	4626      	mov	r6, r4
 800879c:	e013      	b.n	80087c6 <BQ_MonitorTask+0xb6>
            BQ_SendCANMessage(&voltage_data_bms1);
 800879e:	480e      	ldr	r0, [pc, #56]	@ (80087d8 <BQ_MonitorTask+0xc8>)
 80087a0:	f7ff fdda 	bl	8008358 <BQ_SendCANMessage>
            BQ_SendChipStatus(&hi2c1, BQ76952_I2C_ADDR_BMS1, CAN_BMS1_STATUS_ID);
 80087a4:	4b0d      	ldr	r3, [pc, #52]	@ (80087dc <BQ_MonitorTask+0xcc>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	2108      	movs	r1, #8
 80087aa:	480d      	ldr	r0, [pc, #52]	@ (80087e0 <BQ_MonitorTask+0xd0>)
 80087ac:	f7ff ff64 	bl	8008678 <BQ_SendChipStatus>
            last_can_tick = current_tick;
 80087b0:	4625      	mov	r5, r4
        osDelay(10);
 80087b2:	200a      	movs	r0, #10
 80087b4:	f000 fed4 	bl	8009560 <osDelay>
        current_tick = osKernelGetTickCount();
 80087b8:	f000 fe6e 	bl	8009498 <osKernelGetTickCount>
 80087bc:	4604      	mov	r4, r0
        if ((current_tick - last_read_tick) >= VOLTAGE_READ_INTERVAL_MS) {
 80087be:	1b83      	subs	r3, r0, r6
 80087c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80087c4:	d2ba      	bcs.n	800873c <BQ_MonitorTask+0x2c>
        if ((current_tick - last_can_tick) >= VOLTAGE_CAN_INTERVAL_MS) {
 80087c6:	1b63      	subs	r3, r4, r5
 80087c8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80087cc:	d2e7      	bcs.n	800879e <BQ_MonitorTask+0x8e>
 80087ce:	e7f0      	b.n	80087b2 <BQ_MonitorTask+0xa2>
 80087d0:	08010200 	.word	0x08010200
 80087d4:	200000a4 	.word	0x200000a4
 80087d8:	200000c4 	.word	0x200000c4
 80087dc:	20000d30 	.word	0x20000d30
 80087e0:	20003cf4 	.word	0x20003cf4

080087e4 <BQ_CheckLimits_BMS2>:
  * @note   Sets ERROR_OVER_VOLTAGE or ERROR_UNDER_VOLTAGE if out of range
  *         Sets WARNING_HIGH_VOLTAGE or WARNING_LOW_VOLTAGE if approaching limits
  */
void BQ_CheckLimits_BMS2(BQ_Data_BMS2_t *data)
{
    if (data == NULL || !data->valid) {
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d050      	beq.n	800888a <BQ_CheckLimits_BMS2+0xa6>
{
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	4601      	mov	r1, r0
    if (data == NULL || !data->valid) {
 80087ec:	7e03      	ldrb	r3, [r0, #24]
 80087ee:	b3bb      	cbz	r3, 8008860 <BQ_CheckLimits_BMS2+0x7c>
    bool under_voltage_detected = false;
    bool high_voltage_warning = false;
    bool low_voltage_warning = false;
    
    // Check all cells in the data structure
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 80087f0:	2300      	movs	r3, #0
    bool low_voltage_warning = false;
 80087f2:	461e      	mov	r6, r3
    bool high_voltage_warning = false;
 80087f4:	461d      	mov	r5, r3
    bool under_voltage_detected = false;
 80087f6:	461c      	mov	r4, r3
    bool over_voltage_detected = false;
 80087f8:	461f      	mov	r7, r3
 80087fa:	e002      	b.n	8008802 <BQ_CheckLimits_BMS2+0x1e>
            continue;
        }
        
        // Check for over-voltage error (above max limit)
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
            over_voltage_detected = true;
 80087fc:	2701      	movs	r7, #1
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 80087fe:	3301      	adds	r3, #1
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b08      	cmp	r3, #8
 8008804:	d818      	bhi.n	8008838 <BQ_CheckLimits_BMS2+0x54>
        uint16_t voltage_mv = data->cell_voltage_mv[i];
 8008806:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
        if (voltage_mv == 0) {
 800880a:	2a00      	cmp	r2, #0
 800880c:	d0f7      	beq.n	80087fe <BQ_CheckLimits_BMS2+0x1a>
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
 800880e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8008812:	4282      	cmp	r2, r0
 8008814:	d8f2      	bhi.n	80087fc <BQ_CheckLimits_BMS2+0x18>
        }
        // Check for under-voltage error (below min limit)
        else if (voltage_mv < CELL_VOLTAGE_MIN_MV) {
 8008816:	f640 10c3 	movw	r0, #2499	@ 0x9c3
 800881a:	4282      	cmp	r2, r0
 800881c:	d908      	bls.n	8008830 <BQ_CheckLimits_BMS2+0x4c>
            under_voltage_detected = true;
        }
        // Check for high voltage warning (approaching max)
        else if (voltage_mv > CELL_VOLTAGE_WARNING_HIGH_MV) {
 800881e:	f241 0004 	movw	r0, #4100	@ 0x1004
 8008822:	4282      	cmp	r2, r0
 8008824:	d806      	bhi.n	8008834 <BQ_CheckLimits_BMS2+0x50>
            high_voltage_warning = true;
        }
        // Check for low voltage warning (approaching min)
        else if (voltage_mv < CELL_VOLTAGE_WARNING_LOW_MV) {
 8008826:	f5b2 6f2f 	cmp.w	r2, #2800	@ 0xaf0
 800882a:	d2e8      	bcs.n	80087fe <BQ_CheckLimits_BMS2+0x1a>
            low_voltage_warning = true;
 800882c:	2601      	movs	r6, #1
 800882e:	e7e6      	b.n	80087fe <BQ_CheckLimits_BMS2+0x1a>
            under_voltage_detected = true;
 8008830:	2401      	movs	r4, #1
 8008832:	e7e4      	b.n	80087fe <BQ_CheckLimits_BMS2+0x1a>
            high_voltage_warning = true;
 8008834:	2501      	movs	r5, #1
 8008836:	e7e2      	b.n	80087fe <BQ_CheckLimits_BMS2+0x1a>
        }
    }
    
    // Set or clear error flags
    if (over_voltage_detected) {
 8008838:	b19f      	cbz	r7, 8008862 <BQ_CheckLimits_BMS2+0x7e>
        ErrorMgr_SetError(ERROR_OVER_VOLTAGE);
 800883a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800883e:	f001 fa91 	bl	8009d64 <ErrorMgr_SetError>
    } else {
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
    }
    
    if (under_voltage_detected) {
 8008842:	b19c      	cbz	r4, 800886c <BQ_CheckLimits_BMS2+0x88>
        ErrorMgr_SetError(ERROR_UNDER_VOLTAGE);
 8008844:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008848:	f001 fa8c 	bl	8009d64 <ErrorMgr_SetError>
    } else {
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
    }
    
    // Set or clear warning flags
    if (high_voltage_warning) {
 800884c:	b19d      	cbz	r5, 8008876 <BQ_CheckLimits_BMS2+0x92>
        ErrorMgr_SetWarning(WARNING_HIGH_VOLTAGE);
 800884e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008852:	f001 faeb 	bl	8009e2c <ErrorMgr_SetWarning>
    } else {
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
    }
    
    if (low_voltage_warning) {
 8008856:	b19e      	cbz	r6, 8008880 <BQ_CheckLimits_BMS2+0x9c>
        ErrorMgr_SetWarning(WARNING_LOW_VOLTAGE);
 8008858:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800885c:	f001 fae6 	bl	8009e2c <ErrorMgr_SetWarning>
    } else {
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
    }
}
 8008860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
 8008862:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008866:	f001 faa3 	bl	8009db0 <ErrorMgr_ClearError>
 800886a:	e7ea      	b.n	8008842 <BQ_CheckLimits_BMS2+0x5e>
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
 800886c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008870:	f001 fa9e 	bl	8009db0 <ErrorMgr_ClearError>
 8008874:	e7ea      	b.n	800884c <BQ_CheckLimits_BMS2+0x68>
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
 8008876:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800887a:	f001 faef 	bl	8009e5c <ErrorMgr_ClearWarning>
 800887e:	e7ea      	b.n	8008856 <BQ_CheckLimits_BMS2+0x72>
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
 8008880:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008884:	f001 faea 	bl	8009e5c <ErrorMgr_ClearWarning>
 8008888:	e7ea      	b.n	8008860 <BQ_CheckLimits_BMS2+0x7c>
 800888a:	4770      	bx	lr

0800888c <BQ_MonitorTask_BMS2>:
{
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	b084      	sub	sp, #16
    const osMutexAttr_t mutex_attr = {
 8008890:	4b3a      	ldr	r3, [pc, #232]	@ (800897c <BQ_MonitorTask_BMS2+0xf0>)
 8008892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008894:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    voltage_mutex_bms2 = osMutexNew(&mutex_attr);
 8008898:	4668      	mov	r0, sp
 800889a:	f000 fe6f 	bl	800957c <osMutexNew>
 800889e:	4b38      	ldr	r3, [pc, #224]	@ (8008980 <BQ_MonitorTask_BMS2+0xf4>)
 80088a0:	6018      	str	r0, [r3, #0]
    osDelay(500);
 80088a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80088a6:	f000 fe5b 	bl	8009560 <osDelay>
    if (I2C3Handle != NULL) {
 80088aa:	4b36      	ldr	r3, [pc, #216]	@ (8008984 <BQ_MonitorTask_BMS2+0xf8>)
 80088ac:	6818      	ldr	r0, [r3, #0]
 80088ae:	b118      	cbz	r0, 80088b8 <BQ_MonitorTask_BMS2+0x2c>
        osMutexAcquire(I2C3Handle, osWaitForever);
 80088b0:	f04f 31ff 	mov.w	r1, #4294967295
 80088b4:	f000 fead 	bl	8009612 <osMutexAcquire>
    status = HAL_I2C_IsDeviceReady(&hi2c3, (BQ76952_I2C_ADDR_BMS2 << 1), 3, 100);
 80088b8:	2364      	movs	r3, #100	@ 0x64
 80088ba:	2203      	movs	r2, #3
 80088bc:	2110      	movs	r1, #16
 80088be:	4832      	ldr	r0, [pc, #200]	@ (8008988 <BQ_MonitorTask_BMS2+0xfc>)
 80088c0:	f004 ff4a 	bl	800d758 <HAL_I2C_IsDeviceReady>
    if (status != HAL_OK) {
 80088c4:	b958      	cbnz	r0, 80088de <BQ_MonitorTask_BMS2+0x52>
    if (I2C3Handle != NULL) {
 80088c6:	4b2f      	ldr	r3, [pc, #188]	@ (8008984 <BQ_MonitorTask_BMS2+0xf8>)
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	b108      	cbz	r0, 80088d0 <BQ_MonitorTask_BMS2+0x44>
        osMutexRelease(I2C3Handle);
 80088cc:	f000 fed0 	bl	8009670 <osMutexRelease>
    last_read_tick = osKernelGetTickCount();
 80088d0:	f000 fde2 	bl	8009498 <osKernelGetTickCount>
 80088d4:	4606      	mov	r6, r0
    last_can_tick = osKernelGetTickCount();
 80088d6:	f000 fddf 	bl	8009498 <osKernelGetTickCount>
 80088da:	4605      	mov	r5, r0
 80088dc:	e042      	b.n	8008964 <BQ_MonitorTask_BMS2+0xd8>
        ErrorMgr_SetError(ERROR_I2C_BMS2);
 80088de:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80088e2:	f001 fa3f 	bl	8009d64 <ErrorMgr_SetError>
 80088e6:	e7ee      	b.n	80088c6 <BQ_MonitorTask_BMS2+0x3a>
            status = BQ_ReadBMS2(&voltage_data_bms2);
 80088e8:	4828      	ldr	r0, [pc, #160]	@ (800898c <BQ_MonitorTask_BMS2+0x100>)
 80088ea:	f7ff fdf7 	bl	80084dc <BQ_ReadBMS2>
            if (status != HAL_OK) {
 80088ee:	b940      	cbnz	r0, 8008902 <BQ_MonitorTask_BMS2+0x76>
                ErrorMgr_ClearError(ERROR_I2C_BMS2);
 80088f0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80088f4:	f001 fa5c 	bl	8009db0 <ErrorMgr_ClearError>
                BQ_CheckLimits_BMS2(&voltage_data_bms2);
 80088f8:	4824      	ldr	r0, [pc, #144]	@ (800898c <BQ_MonitorTask_BMS2+0x100>)
 80088fa:	f7ff ff73 	bl	80087e4 <BQ_CheckLimits_BMS2>
            last_read_tick = current_tick;
 80088fe:	4626      	mov	r6, r4
 8008900:	e037      	b.n	8008972 <BQ_MonitorTask_BMS2+0xe6>
                ErrorMgr_SetError(ERROR_I2C_BMS2);
 8008902:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8008906:	f001 fa2d 	bl	8009d64 <ErrorMgr_SetError>
                if (voltage_mutex_bms2 != NULL) {
 800890a:	4b1d      	ldr	r3, [pc, #116]	@ (8008980 <BQ_MonitorTask_BMS2+0xf4>)
 800890c:	6818      	ldr	r0, [r3, #0]
 800890e:	b118      	cbz	r0, 8008918 <BQ_MonitorTask_BMS2+0x8c>
                    osMutexAcquire(voltage_mutex_bms2, osWaitForever);
 8008910:	f04f 31ff 	mov.w	r1, #4294967295
 8008914:	f000 fe7d 	bl	8009612 <osMutexAcquire>
{
 8008918:	2300      	movs	r3, #0
 800891a:	e005      	b.n	8008928 <BQ_MonitorTask_BMS2+0x9c>
                    voltage_data_bms2.cell_voltage_mv[i] = 0;
 800891c:	4a1b      	ldr	r2, [pc, #108]	@ (800898c <BQ_MonitorTask_BMS2+0x100>)
 800891e:	2100      	movs	r1, #0
 8008920:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 8008924:	3301      	adds	r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b08      	cmp	r3, #8
 800892a:	d9f7      	bls.n	800891c <BQ_MonitorTask_BMS2+0x90>
                voltage_data_bms2.valid = 0;
 800892c:	4e17      	ldr	r6, [pc, #92]	@ (800898c <BQ_MonitorTask_BMS2+0x100>)
 800892e:	2300      	movs	r3, #0
 8008930:	7633      	strb	r3, [r6, #24]
                voltage_data_bms2.last_update_tick = osKernelGetTickCount();
 8008932:	f000 fdb1 	bl	8009498 <osKernelGetTickCount>
 8008936:	6170      	str	r0, [r6, #20]
                if (voltage_mutex_bms2 != NULL) {
 8008938:	4b11      	ldr	r3, [pc, #68]	@ (8008980 <BQ_MonitorTask_BMS2+0xf4>)
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	b118      	cbz	r0, 8008946 <BQ_MonitorTask_BMS2+0xba>
                    osMutexRelease(voltage_mutex_bms2);
 800893e:	f000 fe97 	bl	8009670 <osMutexRelease>
            last_read_tick = current_tick;
 8008942:	4626      	mov	r6, r4
 8008944:	e015      	b.n	8008972 <BQ_MonitorTask_BMS2+0xe6>
 8008946:	4626      	mov	r6, r4
 8008948:	e013      	b.n	8008972 <BQ_MonitorTask_BMS2+0xe6>
            BQ_SendCANMessage_BMS2(&voltage_data_bms2);
 800894a:	4810      	ldr	r0, [pc, #64]	@ (800898c <BQ_MonitorTask_BMS2+0x100>)
 800894c:	f7ff fe26 	bl	800859c <BQ_SendCANMessage_BMS2>
            BQ_SendChipStatus(&hi2c3, BQ76952_I2C_ADDR_BMS2, CAN_BMS2_STATUS_ID);
 8008950:	4b0f      	ldr	r3, [pc, #60]	@ (8008990 <BQ_MonitorTask_BMS2+0x104>)
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	2108      	movs	r1, #8
 8008956:	480c      	ldr	r0, [pc, #48]	@ (8008988 <BQ_MonitorTask_BMS2+0xfc>)
 8008958:	f7ff fe8e 	bl	8008678 <BQ_SendChipStatus>
            last_can_tick = current_tick;
 800895c:	4625      	mov	r5, r4
        osDelay(10);
 800895e:	200a      	movs	r0, #10
 8008960:	f000 fdfe 	bl	8009560 <osDelay>
        current_tick = osKernelGetTickCount();
 8008964:	f000 fd98 	bl	8009498 <osKernelGetTickCount>
 8008968:	4604      	mov	r4, r0
        if ((current_tick - last_read_tick) >= VOLTAGE_READ_INTERVAL_MS) {
 800896a:	1b83      	subs	r3, r0, r6
 800896c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008970:	d2ba      	bcs.n	80088e8 <BQ_MonitorTask_BMS2+0x5c>
        if ((current_tick - last_can_tick) >= VOLTAGE_CAN_INTERVAL_MS) {
 8008972:	1b63      	subs	r3, r4, r5
 8008974:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008978:	d2e7      	bcs.n	800894a <BQ_MonitorTask_BMS2+0xbe>
 800897a:	e7f0      	b.n	800895e <BQ_MonitorTask_BMS2+0xd2>
 800897c:	08010210 	.word	0x08010210
 8008980:	200000a0 	.word	0x200000a0
 8008984:	20003c84 	.word	0x20003c84
 8008988:	20003ca0 	.word	0x20003ca0
 800898c:	200000a8 	.word	0x200000a8
 8008990:	20000d2c 	.word	0x20000d2c

08008994 <BQ_ResetChips>:
  * @note   This function pulses the hardware reset pin connected to both BQ76952 chips.
  *         The reset pin is active-high and should be held high for at least 500ms.
  *         Both BMS1 and BMS2 chips share the same reset line.
  */
HAL_StatusTypeDef BQ_ResetChips(void)
{
 8008994:	b510      	push	{r4, lr}
    // Set BMS_RESET pin high to trigger reset
    HAL_GPIO_WritePin(BMS_RESET_GPIO_Port, BMS_RESET_Pin, GPIO_PIN_SET);
 8008996:	4c0a      	ldr	r4, [pc, #40]	@ (80089c0 <BQ_ResetChips+0x2c>)
 8008998:	2201      	movs	r2, #1
 800899a:	2140      	movs	r1, #64	@ 0x40
 800899c:	4620      	mov	r0, r4
 800899e:	f004 fb2d 	bl	800cffc <HAL_GPIO_WritePin>
    
    // Hold reset high for 500ms (as specified)
    osDelay(500);
 80089a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80089a6:	f000 fddb 	bl	8009560 <osDelay>
    
    // Release reset by setting pin low
    HAL_GPIO_WritePin(BMS_RESET_GPIO_Port, BMS_RESET_Pin, GPIO_PIN_RESET);
 80089aa:	2200      	movs	r2, #0
 80089ac:	2140      	movs	r1, #64	@ 0x40
 80089ae:	4620      	mov	r0, r4
 80089b0:	f004 fb24 	bl	800cffc <HAL_GPIO_WritePin>
    
    // Brief delay to allow chips to complete reset sequence
    osDelay(100);
 80089b4:	2064      	movs	r0, #100	@ 0x64
 80089b6:	f000 fdd3 	bl	8009560 <osDelay>
    
    return HAL_OK;
}
 80089ba:	2000      	movs	r0, #0
 80089bc:	bd10      	pop	{r4, pc}
 80089be:	bf00      	nop
 80089c0:	48000400 	.word	0x48000400

080089c4 <BQ_GetLastI2C3Error>:
  * @retval uint32_t: HAL I2C error code
  */
uint32_t BQ_GetLastI2C3Error(void)
{
    return g_last_i2c3_error;
}
 80089c4:	4b01      	ldr	r3, [pc, #4]	@ (80089cc <BQ_GetLastI2C3Error+0x8>)
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	2000009c 	.word	0x2000009c

080089d0 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80089d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80089d4:	4905      	ldr	r1, [pc, #20]	@ (80089ec <__NVIC_SystemReset+0x1c>)
 80089d6:	68ca      	ldr	r2, [r1, #12]
 80089d8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80089dc:	4b04      	ldr	r3, [pc, #16]	@ (80089f0 <__NVIC_SystemReset+0x20>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	60cb      	str	r3, [r1, #12]
 80089e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80089e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80089e8:	e7fd      	b.n	80089e6 <__NVIC_SystemReset+0x16>
 80089ea:	bf00      	nop
 80089ec:	e000ed00 	.word	0xe000ed00
 80089f0:	05fa0004 	.word	0x05fa0004

080089f4 <CAN_TransmitMessage>:
  * @brief  Transmit single message to CAN hardware
  * @param  msg: Pointer to message structure
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef CAN_TransmitMessage(CAN_Message_t *msg)
{
 80089f4:	b530      	push	{r4, r5, lr}
 80089f6:	b089      	sub	sp, #36	@ 0x24
 80089f8:	4605      	mov	r5, r0
    uint32_t TxMailbox;
    HAL_StatusTypeDef status;
    uint8_t retry_count = 0;
    
    // Configure TX header for extended ID
    TxHeader.ExtId = msg->id;
 80089fa:	6803      	ldr	r3, [r0, #0]
 80089fc:	9303      	str	r3, [sp, #12]
    TxHeader.StdId = 0;
 80089fe:	2400      	movs	r4, #0
 8008a00:	9402      	str	r4, [sp, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8008a02:	9405      	str	r4, [sp, #20]
    TxHeader.IDE = CAN_ID_EXT;
 8008a04:	2304      	movs	r3, #4
 8008a06:	9304      	str	r3, [sp, #16]
    TxHeader.DLC = msg->length;
 8008a08:	7b03      	ldrb	r3, [r0, #12]
 8008a0a:	9306      	str	r3, [sp, #24]
    TxHeader.TransmitGlobalTime = DISABLE;
 8008a0c:	f88d 401c 	strb.w	r4, [sp, #28]
    
    // Attempt transmission with retries
    while (retry_count < CAN_MAX_RETRIES) {
 8008a10:	2c02      	cmp	r4, #2
 8008a12:	d814      	bhi.n	8008a3e <CAN_TransmitMessage+0x4a>
        status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, msg->data, &TxMailbox);
 8008a14:	ab01      	add	r3, sp, #4
 8008a16:	1d2a      	adds	r2, r5, #4
 8008a18:	a902      	add	r1, sp, #8
 8008a1a:	480d      	ldr	r0, [pc, #52]	@ (8008a50 <CAN_TransmitMessage+0x5c>)
 8008a1c:	f003 fd20 	bl	800c460 <HAL_CAN_AddTxMessage>
        
        if (status == HAL_OK) {
 8008a20:	4603      	mov	r3, r0
 8008a22:	b138      	cbz	r0, 8008a34 <CAN_TransmitMessage+0x40>
            can_stats.tx_success_count++;
            return HAL_OK;
        }
        
        retry_count++;
 8008a24:	3401      	adds	r4, #1
 8008a26:	b2e4      	uxtb	r4, r4
        
        // Brief delay before retry (1ms)
        if (retry_count < CAN_MAX_RETRIES) {
 8008a28:	2c02      	cmp	r4, #2
 8008a2a:	d808      	bhi.n	8008a3e <CAN_TransmitMessage+0x4a>
            osDelay(1);
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	f000 fd97 	bl	8009560 <osDelay>
 8008a32:	e7ed      	b.n	8008a10 <CAN_TransmitMessage+0x1c>
            can_stats.tx_success_count++;
 8008a34:	4907      	ldr	r1, [pc, #28]	@ (8008a54 <CAN_TransmitMessage+0x60>)
 8008a36:	680a      	ldr	r2, [r1, #0]
 8008a38:	3201      	adds	r2, #1
 8008a3a:	600a      	str	r2, [r1, #0]
            return HAL_OK;
 8008a3c:	e004      	b.n	8008a48 <CAN_TransmitMessage+0x54>
        }
    }
    
    // All retries failed
    can_stats.tx_error_count++;
 8008a3e:	4a05      	ldr	r2, [pc, #20]	@ (8008a54 <CAN_TransmitMessage+0x60>)
 8008a40:	6853      	ldr	r3, [r2, #4]
 8008a42:	3301      	adds	r3, #1
 8008a44:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	b009      	add	sp, #36	@ 0x24
 8008a4c:	bd30      	pop	{r4, r5, pc}
 8008a4e:	bf00      	nop
 8008a50:	20003d6c 	.word	0x20003d6c
 8008a54:	200000e0 	.word	0x200000e0

08008a58 <CAN_ProcessTxQueue>:
/**
  * @brief  Process TX queue and transmit messages
  * @retval None
  */
static void CAN_ProcessTxQueue(void)
{
 8008a58:	b500      	push	{lr}
 8008a5a:	b087      	sub	sp, #28
    CAN_Message_t msg;
    
    // Try to send as many messages as possible
    while (osMessageQueueGet(CANTxQueueHandle, &msg, NULL, 0) == osOK) {
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	461a      	mov	r2, r3
 8008a60:	a901      	add	r1, sp, #4
 8008a62:	4806      	ldr	r0, [pc, #24]	@ (8008a7c <CAN_ProcessTxQueue+0x24>)
 8008a64:	6800      	ldr	r0, [r0, #0]
 8008a66:	f000 ff73 	bl	8009950 <osMessageQueueGet>
 8008a6a:	b920      	cbnz	r0, 8008a76 <CAN_ProcessTxQueue+0x1e>
        // Transmit the message
        if (CAN_TransmitMessage(&msg) != HAL_OK) {
 8008a6c:	a801      	add	r0, sp, #4
 8008a6e:	f7ff ffc1 	bl	80089f4 <CAN_TransmitMessage>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d0f2      	beq.n	8008a5c <CAN_ProcessTxQueue+0x4>
            // If transmission failed, could re-queue message here if desired
            // For now, we just count it as an error
            break;  // Stop processing queue if hardware is busy
        }
    }
}
 8008a76:	b007      	add	sp, #28
 8008a78:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a7c:	20000100 	.word	0x20000100

08008a80 <CAN_SendMessage>:
    if (length > 8 || id > 0x1FFFFFFF) {
 8008a80:	2a08      	cmp	r2, #8
 8008a82:	d82a      	bhi.n	8008ada <CAN_SendMessage+0x5a>
{
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	460e      	mov	r6, r1
 8008a8a:	4614      	mov	r4, r2
 8008a8c:	461d      	mov	r5, r3
    if (length > 8 || id > 0x1FFFFFFF) {
 8008a8e:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8008a92:	d302      	bcc.n	8008a9a <CAN_SendMessage+0x1a>
        return HAL_ERROR;
 8008a94:	2001      	movs	r0, #1
}
 8008a96:	b006      	add	sp, #24
 8008a98:	bd70      	pop	{r4, r5, r6, pc}
    msg.id = id;
 8008a9a:	9001      	str	r0, [sp, #4]
    msg.length = length;
 8008a9c:	f88d 2010 	strb.w	r2, [sp, #16]
    msg.priority = priority;
 8008aa0:	f88d 3011 	strb.w	r3, [sp, #17]
    msg.timestamp = osKernelGetTickCount();
 8008aa4:	f000 fcf8 	bl	8009498 <osKernelGetTickCount>
 8008aa8:	9005      	str	r0, [sp, #20]
    if (data != NULL && length > 0) {
 8008aaa:	b106      	cbz	r6, 8008aae <CAN_SendMessage+0x2e>
 8008aac:	b94c      	cbnz	r4, 8008ac2 <CAN_SendMessage+0x42>
    if (osMessageQueuePut(CANTxQueueHandle, &msg, priority, CAN_TX_TIMEOUT_MS) != osOK) {
 8008aae:	2364      	movs	r3, #100	@ 0x64
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	a901      	add	r1, sp, #4
 8008ab4:	480a      	ldr	r0, [pc, #40]	@ (8008ae0 <CAN_SendMessage+0x60>)
 8008ab6:	6800      	ldr	r0, [r0, #0]
 8008ab8:	f000 ff08 	bl	80098cc <osMessageQueuePut>
 8008abc:	b938      	cbnz	r0, 8008ace <CAN_SendMessage+0x4e>
    return HAL_OK;
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e7e9      	b.n	8008a96 <CAN_SendMessage+0x16>
        memcpy(msg.data, data, length);
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	a802      	add	r0, sp, #8
 8008ac8:	f007 fa50 	bl	800ff6c <memcpy>
 8008acc:	e7ef      	b.n	8008aae <CAN_SendMessage+0x2e>
        can_stats.tx_queue_full_count++;
 8008ace:	4a05      	ldr	r2, [pc, #20]	@ (8008ae4 <CAN_SendMessage+0x64>)
 8008ad0:	6893      	ldr	r3, [r2, #8]
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	6093      	str	r3, [r2, #8]
        return HAL_ERROR;
 8008ad6:	2001      	movs	r0, #1
 8008ad8:	e7dd      	b.n	8008a96 <CAN_SendMessage+0x16>
        return HAL_ERROR;
 8008ada:	2001      	movs	r0, #1
}
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000100 	.word	0x20000100
 8008ae4:	200000e0 	.word	0x200000e0

08008ae8 <CAN_ResetStatistics>:
  * @brief  Reset CAN statistics
  * @retval None
  */
void CAN_ResetStatistics(void)
{
    memset(&can_stats, 0, sizeof(CAN_Statistics_t));
 8008ae8:	4b04      	ldr	r3, [pc, #16]	@ (8008afc <CAN_ResetStatistics+0x14>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
 8008aee:	605a      	str	r2, [r3, #4]
 8008af0:	609a      	str	r2, [r3, #8]
 8008af2:	60da      	str	r2, [r3, #12]
 8008af4:	611a      	str	r2, [r3, #16]
 8008af6:	615a      	str	r2, [r3, #20]
}
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	200000e0 	.word	0x200000e0

08008b00 <CAN_Manager_Init>:
{
 8008b00:	b510      	push	{r4, lr}
    CANTxQueueHandle = osMessageQueueNew(CAN_TX_QUEUE_SIZE, sizeof(CAN_Message_t), NULL);
 8008b02:	2200      	movs	r2, #0
 8008b04:	2114      	movs	r1, #20
 8008b06:	2040      	movs	r0, #64	@ 0x40
 8008b08:	f000 fe95 	bl	8009836 <osMessageQueueNew>
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b44 <CAN_Manager_Init+0x44>)
 8008b0e:	6018      	str	r0, [r3, #0]
    if (CANTxQueueHandle == NULL) {
 8008b10:	b198      	cbz	r0, 8008b3a <CAN_Manager_Init+0x3a>
    CANRxQueueHandle = osMessageQueueNew(CAN_RX_QUEUE_SIZE, sizeof(CAN_Message_t), NULL);
 8008b12:	2200      	movs	r2, #0
 8008b14:	2114      	movs	r1, #20
 8008b16:	2020      	movs	r0, #32
 8008b18:	f000 fe8d 	bl	8009836 <osMessageQueueNew>
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b48 <CAN_Manager_Init+0x48>)
 8008b1e:	6018      	str	r0, [r3, #0]
    if (CANRxQueueHandle == NULL) {
 8008b20:	b170      	cbz	r0, 8008b40 <CAN_Manager_Init+0x40>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | 
 8008b22:	f248 4112 	movw	r1, #33810	@ 0x8412
 8008b26:	4809      	ldr	r0, [pc, #36]	@ (8008b4c <CAN_Manager_Init+0x4c>)
 8008b28:	f003 fdc4 	bl	800c6b4 <HAL_CAN_ActivateNotification>
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	b108      	cbz	r0, 8008b34 <CAN_Manager_Init+0x34>
        return HAL_ERROR;
 8008b30:	2401      	movs	r4, #1
 8008b32:	e003      	b.n	8008b3c <CAN_Manager_Init+0x3c>
    CAN_ResetStatistics();
 8008b34:	f7ff ffd8 	bl	8008ae8 <CAN_ResetStatistics>
    return HAL_OK;
 8008b38:	e000      	b.n	8008b3c <CAN_Manager_Init+0x3c>
        return HAL_ERROR;
 8008b3a:	2401      	movs	r4, #1
}
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8008b40:	2401      	movs	r4, #1
 8008b42:	e7fb      	b.n	8008b3c <CAN_Manager_Init+0x3c>
 8008b44:	20000100 	.word	0x20000100
 8008b48:	200000fc 	.word	0x200000fc
 8008b4c:	20003d6c 	.word	0x20003d6c

08008b50 <CAN_IsMessageForThisModule>:
/**
  * @brief  Check if CAN message is meant for this module through ID
  * @param  hcan: pointer to CAN handle
  * @retval None
  */
bool CAN_IsMessageForThisModule(uint32_t can_id) {
 8008b50:	b510      	push	{r4, lr}
 8008b52:	4604      	mov	r4, r0
    // Module ID is encoded in bits 12:15 of rx can id
    // TODO: handle messages that might not have this format?
    uint8_t this_module_id = Config_GetModuleID();
 8008b54:	f000 ff68 	bl	8009a28 <Config_GetModuleID>
    uint8_t rx_module_id = (can_id >> 12) & 0x0F;
 8008b58:	f3c4 3303 	ubfx	r3, r4, #12, #4
    
    return (
        rx_module_id == this_module_id ||   // Specifically for this module
 8008b5c:	4298      	cmp	r0, r3
 8008b5e:	d006      	beq.n	8008b6e <CAN_IsMessageForThisModule+0x1e>
 8008b60:	4b04      	ldr	r3, [pc, #16]	@ (8008b74 <CAN_IsMessageForThisModule+0x24>)
 8008b62:	429c      	cmp	r4, r3
 8008b64:	d001      	beq.n	8008b6a <CAN_IsMessageForThisModule+0x1a>
 8008b66:	2000      	movs	r0, #0
        can_id == CAN_DEBUG_REQUEST_ID      // Debug ID (all modules)
    );
}
 8008b68:	bd10      	pop	{r4, pc}
        rx_module_id == this_module_id ||   // Specifically for this module
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	e7fc      	b.n	8008b68 <CAN_IsMessageForThisModule+0x18>
 8008b6e:	2001      	movs	r0, #1
 8008b70:	e7fa      	b.n	8008b68 <CAN_IsMessageForThisModule+0x18>
 8008b72:	bf00      	nop
 8008b74:	08f00f10 	.word	0x08f00f10

08008b78 <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8008b78:	b500      	push	{lr}
 8008b7a:	b08d      	sub	sp, #52	@ 0x34
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data) == HAL_OK) {
 8008b7c:	ab01      	add	r3, sp, #4
 8008b7e:	aa05      	add	r2, sp, #20
 8008b80:	2100      	movs	r1, #0
 8008b82:	f003 fce2 	bl	800c54a <HAL_CAN_GetRxMessage>
 8008b86:	b110      	cbz	r0, 8008b8e <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
}
 8008b88:	b00d      	add	sp, #52	@ 0x34
 8008b8a:	f85d fb04 	ldr.w	pc, [sp], #4
        msg.id = RxHeader.ExtId;
 8008b8e:	9b06      	ldr	r3, [sp, #24]
 8008b90:	9300      	str	r3, [sp, #0]
        msg.length = RxHeader.DLC;
 8008b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b94:	f88d 300c 	strb.w	r3, [sp, #12]
        msg.priority = 0;  // RX messages don't have priority
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f88d 300d 	strb.w	r3, [sp, #13]
        msg.timestamp = osKernelGetTickCount();
 8008b9e:	f000 fc7b 	bl	8009498 <osKernelGetTickCount>
 8008ba2:	9004      	str	r0, [sp, #16]
        if (CAN_IsMessageForThisModule(msg.id)) {
 8008ba4:	9800      	ldr	r0, [sp, #0]
 8008ba6:	f7ff ffd3 	bl	8008b50 <CAN_IsMessageForThisModule>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d0ec      	beq.n	8008b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
            if (osMessageQueuePut(CANRxQueueHandle, &msg, 0, 0) != osOK) {
 8008bae:	2300      	movs	r3, #0
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4669      	mov	r1, sp
 8008bb4:	4805      	ldr	r0, [pc, #20]	@ (8008bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8008bb6:	6800      	ldr	r0, [r0, #0]
 8008bb8:	f000 fe88 	bl	80098cc <osMessageQueuePut>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d0e3      	beq.n	8008b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
                can_stats.rx_queue_full_count++;
 8008bc0:	4a03      	ldr	r2, [pc, #12]	@ (8008bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8008bc2:	6913      	ldr	r3, [r2, #16]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	6113      	str	r3, [r2, #16]
}
 8008bc8:	e7de      	b.n	8008b88 <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
 8008bca:	bf00      	nop
 8008bcc:	200000fc 	.word	0x200000fc
 8008bd0:	200000e0 	.word	0x200000e0

08008bd4 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 8008bd4:	b500      	push	{lr}
 8008bd6:	b08d      	sub	sp, #52	@ 0x34
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, msg.data) == HAL_OK) {
 8008bd8:	ab01      	add	r3, sp, #4
 8008bda:	aa05      	add	r2, sp, #20
 8008bdc:	2101      	movs	r1, #1
 8008bde:	f003 fcb4 	bl	800c54a <HAL_CAN_GetRxMessage>
 8008be2:	b110      	cbz	r0, 8008bea <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
}
 8008be4:	b00d      	add	sp, #52	@ 0x34
 8008be6:	f85d fb04 	ldr.w	pc, [sp], #4
        msg.id = RxHeader.ExtId;
 8008bea:	9b06      	ldr	r3, [sp, #24]
 8008bec:	9300      	str	r3, [sp, #0]
        msg.length = RxHeader.DLC;
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	f88d 300c 	strb.w	r3, [sp, #12]
        msg.priority = 0;  // RX messages don't have priority
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f88d 300d 	strb.w	r3, [sp, #13]
        msg.timestamp = osKernelGetTickCount();
 8008bfa:	f000 fc4d 	bl	8009498 <osKernelGetTickCount>
 8008bfe:	9004      	str	r0, [sp, #16]
        if (CAN_IsMessageForThisModule(msg.id)) {
 8008c00:	9800      	ldr	r0, [sp, #0]
 8008c02:	f7ff ffa5 	bl	8008b50 <CAN_IsMessageForThisModule>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	d0ec      	beq.n	8008be4 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
            if (osMessageQueuePut(CANRxQueueHandle, &msg, 0, 0) != osOK) {
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4669      	mov	r1, sp
 8008c10:	4805      	ldr	r0, [pc, #20]	@ (8008c28 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8008c12:	6800      	ldr	r0, [r0, #0]
 8008c14:	f000 fe5a 	bl	80098cc <osMessageQueuePut>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d0e3      	beq.n	8008be4 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
                can_stats.rx_queue_full_count++;
 8008c1c:	4a03      	ldr	r2, [pc, #12]	@ (8008c2c <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8008c1e:	6913      	ldr	r3, [r2, #16]
 8008c20:	3301      	adds	r3, #1
 8008c22:	6113      	str	r3, [r2, #16]
}
 8008c24:	e7de      	b.n	8008be4 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
 8008c26:	bf00      	nop
 8008c28:	200000fc 	.word	0x200000fc
 8008c2c:	200000e0 	.word	0x200000e0

08008c30 <HAL_CAN_ErrorCallback>:
  * @brief  CAN error callback
  * @param  hcan: pointer to CAN handle
  * @retval None
  */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008c30:	b508      	push	{r3, lr}
    uint32_t error = HAL_CAN_GetError(hcan);
 8008c32:	f003 fe83 	bl	800c93c <HAL_CAN_GetError>
    
    // Check for bus-off condition
    if (error & HAL_CAN_ERROR_BOF) {
 8008c36:	f010 0f04 	tst.w	r0, #4
 8008c3a:	d100      	bne.n	8008c3e <HAL_CAN_ErrorCallback+0xe>
        // Attempt to recover from bus-off
        // Note: May need to stop and restart CAN peripheral
    }
    
    // Handle other errors as needed
}
 8008c3c:	bd08      	pop	{r3, pc}
        can_stats.bus_off_count++;
 8008c3e:	4a04      	ldr	r2, [pc, #16]	@ (8008c50 <HAL_CAN_ErrorCallback+0x20>)
 8008c40:	6953      	ldr	r3, [r2, #20]
 8008c42:	3301      	adds	r3, #1
 8008c44:	6153      	str	r3, [r2, #20]
        ErrorMgr_SetError(ERROR_CAN_BUS_OFF);
 8008c46:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8008c4a:	f001 f88b 	bl	8009d64 <ErrorMgr_SetError>
}
 8008c4e:	e7f5      	b.n	8008c3c <HAL_CAN_ErrorCallback+0xc>
 8008c50:	200000e0 	.word	0x200000e0

08008c54 <CAN_SendHeartbeat>:
  *         Byte 5: Warning flags summary (any warnings = 0xFF, none = 0x00)
  *         Byte 6-7: Fault count (16-bit)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendHeartbeat(void)
{
 8008c54:	b500      	push	{lr}
 8008c56:	b089      	sub	sp, #36	@ 0x24
    Error_Manager_t status;
    uint8_t heartbeat_data[8];
    
    // Get current error manager status
    ErrorMgr_GetStatus(&status);
 8008c58:	a803      	add	r0, sp, #12
 8008c5a:	f001 f93b 	bl	8009ed4 <ErrorMgr_GetStatus>
    
    // Pack heartbeat message
    heartbeat_data[0] = (uint8_t)status.state;                    // BMS state
 8008c5e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008c62:	f88d 3004 	strb.w	r3, [sp, #4]
    heartbeat_data[1] = (uint8_t)(status.error_flags & 0xFF);     // Error byte 0
 8008c66:	9b03      	ldr	r3, [sp, #12]
 8008c68:	f88d 3005 	strb.w	r3, [sp, #5]
    heartbeat_data[2] = (uint8_t)((status.error_flags >> 8) & 0xFF);   // Error byte 1
 8008c6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008c70:	f88d 2006 	strb.w	r2, [sp, #6]
    heartbeat_data[3] = (uint8_t)((status.error_flags >> 16) & 0xFF);  // Error byte 2
 8008c74:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008c78:	f88d 2007 	strb.w	r2, [sp, #7]
    heartbeat_data[4] = (uint8_t)((status.error_flags >> 24) & 0xFF);  // Error byte 3
 8008c7c:	0e1b      	lsrs	r3, r3, #24
 8008c7e:	f88d 3008 	strb.w	r3, [sp, #8]
    heartbeat_data[5] = (status.warning_flags != 0) ? 0xFF : 0x00;     // Warning summary
 8008c82:	9b04      	ldr	r3, [sp, #16]
 8008c84:	b193      	cbz	r3, 8008cac <CAN_SendHeartbeat+0x58>
 8008c86:	23ff      	movs	r3, #255	@ 0xff
 8008c88:	f88d 3009 	strb.w	r3, [sp, #9]
    heartbeat_data[6] = (uint8_t)(status.fault_count & 0xFF);          // Fault count low byte
 8008c8c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8008c90:	f88d 300a 	strb.w	r3, [sp, #10]
    heartbeat_data[7] = (uint8_t)((status.fault_count >> 8) & 0xFF);   // Fault count high byte
 8008c94:	2300      	movs	r3, #0
 8008c96:	f88d 300b 	strb.w	r3, [sp, #11]
    
    // Send heartbeat with high priority
    return CAN_SendMessage(CAN_BMS_HEARTBEAT_ID, heartbeat_data, 8, CAN_PRIORITY_CRITICAL);
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	a901      	add	r1, sp, #4
 8008c9e:	4804      	ldr	r0, [pc, #16]	@ (8008cb0 <CAN_SendHeartbeat+0x5c>)
 8008ca0:	6800      	ldr	r0, [r0, #0]
 8008ca2:	f7ff feed 	bl	8008a80 <CAN_SendMessage>
}
 8008ca6:	b009      	add	sp, #36	@ 0x24
 8008ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    heartbeat_data[5] = (status.warning_flags != 0) ? 0xFF : 0x00;     // Warning summary
 8008cac:	2300      	movs	r3, #0
 8008cae:	e7eb      	b.n	8008c88 <CAN_SendHeartbeat+0x34>
 8008cb0:	20000d28 	.word	0x20000d28

08008cb4 <CAN_SendStatistics>:
/**
  * @brief  Send CAN statistics message for diagnostics
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendStatistics(void)
{
 8008cb4:	b500      	push	{lr}
 8008cb6:	b083      	sub	sp, #12
    uint8_t stats_data[8];
    
    // Pack CAN statistics message
    // Bytes 0-1: RX message count (16-bit)
    stats_data[0] = (uint8_t)(can_stats.rx_message_count & 0xFF);
 8008cb8:	4b12      	ldr	r3, [pc, #72]	@ (8008d04 <CAN_SendStatistics+0x50>)
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	f88d 2000 	strb.w	r2, [sp]
    stats_data[1] = (uint8_t)((can_stats.rx_message_count >> 8) & 0xFF);
 8008cc0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008cc4:	f88d 2001 	strb.w	r2, [sp, #1]
    
    // Bytes 2-3: TX success count (16-bit)
    stats_data[2] = (uint8_t)(can_stats.tx_success_count & 0xFF);
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	f88d 2002 	strb.w	r2, [sp, #2]
    stats_data[3] = (uint8_t)((can_stats.tx_success_count >> 8) & 0xFF);
 8008cce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008cd2:	f88d 2003 	strb.w	r2, [sp, #3]
    
    // Byte 4: TX error count
    stats_data[4] = (uint8_t)(can_stats.tx_error_count & 0xFF);
 8008cd6:	791a      	ldrb	r2, [r3, #4]
 8008cd8:	f88d 2004 	strb.w	r2, [sp, #4]
    
    // Byte 5: RX queue full count
    stats_data[5] = (uint8_t)(can_stats.rx_queue_full_count & 0xFF);
 8008cdc:	7c1a      	ldrb	r2, [r3, #16]
 8008cde:	f88d 2005 	strb.w	r2, [sp, #5]
    
    // Byte 6: Bus-off count
    stats_data[6] = (uint8_t)(can_stats.bus_off_count & 0xFF);
 8008ce2:	7d1a      	ldrb	r2, [r3, #20]
 8008ce4:	f88d 2006 	strb.w	r2, [sp, #6]
    
    // Byte 7: TX queue full count
    stats_data[7] = (uint8_t)(can_stats.tx_queue_full_count & 0xFF);
 8008ce8:	7a1b      	ldrb	r3, [r3, #8]
 8008cea:	f88d 3007 	strb.w	r3, [sp, #7]
    
    // Send statistics with normal priority
    return CAN_SendMessage(CAN_BMS_STATS_ID, stats_data, 8, CAN_PRIORITY_NORMAL);
 8008cee:	2302      	movs	r3, #2
 8008cf0:	2208      	movs	r2, #8
 8008cf2:	4669      	mov	r1, sp
 8008cf4:	4804      	ldr	r0, [pc, #16]	@ (8008d08 <CAN_SendStatistics+0x54>)
 8008cf6:	6800      	ldr	r0, [r0, #0]
 8008cf8:	f7ff fec2 	bl	8008a80 <CAN_SendMessage>
}
 8008cfc:	b003      	add	sp, #12
 8008cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d02:	bf00      	nop
 8008d04:	200000e0 	.word	0x200000e0
 8008d08:	20000d24 	.word	0x20000d24

08008d0c <CAN_SendDebugInfo>:
  *         Byte 3: Reserved (CPU usage if implemented)
  *         Bytes 4-7: Uptime in seconds (32-bit)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendDebugInfo(void)
{
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	b082      	sub	sp, #8
    uint8_t debug_data[8];

    // Get current module ID
    extern uint8_t Config_GetModuleID(void);
    uint8_t module_id = Config_GetModuleID();
 8008d10:	f000 fe8a 	bl	8009a28 <Config_GetModuleID>
 8008d14:	4606      	mov	r6, r0

    // Get heap memory statistics (in bytes)
    size_t free_heap = xPortGetFreeHeapSize();
 8008d16:	f001 fa65 	bl	800a1e4 <xPortGetFreeHeapSize>
 8008d1a:	4605      	mov	r5, r0
    size_t min_free_heap = xPortGetMinimumEverFreeHeapSize();
 8008d1c:	f001 fa68 	bl	800a1f0 <xPortGetMinimumEverFreeHeapSize>
 8008d20:	4604      	mov	r4, r0

    // Get uptime in seconds (convert from milliseconds)
    uint32_t uptime_sec = osKernelGetTickCount() / 1000;
 8008d22:	f000 fbb9 	bl	8009498 <osKernelGetTickCount>
 8008d26:	4a13      	ldr	r2, [pc, #76]	@ (8008d74 <CAN_SendDebugInfo+0x68>)
 8008d28:	fba2 2300 	umull	r2, r3, r2, r0

    // Pack debug information message
    debug_data[0] = module_id;                              // Byte 0: Module ID
 8008d2c:	f88d 6000 	strb.w	r6, [sp]
    debug_data[1] = (uint8_t)((free_heap >> 8) & 0xFF);     // Byte 1: Free heap MSB (in 256-byte units)
 8008d30:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8008d34:	f88d 5001 	strb.w	r5, [sp, #1]
    debug_data[2] = (uint8_t)((min_free_heap >> 8) & 0xFF); // Byte 2: Min free heap MSB (in 256-byte units)
 8008d38:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008d3c:	f88d 4002 	strb.w	r4, [sp, #2]
    debug_data[3] = 0;                                      // Byte 3: Reserved
 8008d40:	2200      	movs	r2, #0
 8008d42:	f88d 2003 	strb.w	r2, [sp, #3]
    debug_data[4] = (uint8_t)(uptime_sec & 0xFF);           // Byte 4: Uptime LSB
 8008d46:	f3c3 1287 	ubfx	r2, r3, #6, #8
 8008d4a:	f88d 2004 	strb.w	r2, [sp, #4]
    debug_data[5] = (uint8_t)((uptime_sec >> 8) & 0xFF);    // Byte 5: Uptime
 8008d4e:	f3c3 3287 	ubfx	r2, r3, #14, #8
 8008d52:	f88d 2005 	strb.w	r2, [sp, #5]
    debug_data[6] = (uint8_t)((uptime_sec >> 16) & 0xFF);   // Byte 6: Uptime
 8008d56:	0d9b      	lsrs	r3, r3, #22
 8008d58:	f88d 3006 	strb.w	r3, [sp, #6]
    debug_data[7] = (uint8_t)((uptime_sec >> 24) & 0xFF);   // Byte 7: Uptime MSB
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f88d 3007 	strb.w	r3, [sp, #7]

    // Send debug info with high priority
    return CAN_SendMessage(CAN_DEBUG_RESPONSE_ID, debug_data, 8, CAN_PRIORITY_HIGH);
 8008d62:	2301      	movs	r3, #1
 8008d64:	2208      	movs	r2, #8
 8008d66:	4669      	mov	r1, sp
 8008d68:	4803      	ldr	r0, [pc, #12]	@ (8008d78 <CAN_SendDebugInfo+0x6c>)
 8008d6a:	6800      	ldr	r0, [r0, #0]
 8008d6c:	f7ff fe88 	bl	8008a80 <CAN_SendMessage>
}
 8008d70:	b002      	add	sp, #8
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	10624dd3 	.word	0x10624dd3
 8008d78:	20000d10 	.word	0x20000d10

08008d7c <CAN_SendI2CDiagnostics>:
  *         Byte 3: I2C3 state (HAL_I2C_STATE_*)
  *         Bytes 4-7: Reserved for future use
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendI2CDiagnostics(void)
{
 8008d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d80:	b082      	sub	sp, #8
    uint8_t diag_data[8] = {0};
 8008d82:	2400      	movs	r4, #0
 8008d84:	9400      	str	r4, [sp, #0]
 8008d86:	9401      	str	r4, [sp, #4]
    // Get I2C error codes for diagnostics
    extern I2C_HandleTypeDef hi2c1;
    extern I2C_HandleTypeDef hi2c3;
    extern uint32_t BQ_GetLastI2C3Error(void);
    
    uint32_t i2c1_error = HAL_I2C_GetError(&hi2c1);
 8008d88:	4d14      	ldr	r5, [pc, #80]	@ (8008ddc <CAN_SendI2CDiagnostics+0x60>)
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	f004 fd85 	bl	800d89a <HAL_I2C_GetError>
 8008d90:	4607      	mov	r7, r0
    uint32_t i2c3_error = BQ_GetLastI2C3Error();
 8008d92:	f7ff fe17 	bl	80089c4 <BQ_GetLastI2C3Error>
 8008d96:	4606      	mov	r6, r0
    
    HAL_I2C_StateTypeDef i2c1_state = HAL_I2C_GetState(&hi2c1);
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f004 fd7b 	bl	800d894 <HAL_I2C_GetState>
 8008d9e:	4605      	mov	r5, r0
    HAL_I2C_StateTypeDef i2c3_state = HAL_I2C_GetState(&hi2c3);
 8008da0:	480f      	ldr	r0, [pc, #60]	@ (8008de0 <CAN_SendI2CDiagnostics+0x64>)
 8008da2:	f004 fd77 	bl	800d894 <HAL_I2C_GetState>
    
    // Pack I2C diagnostics message
    diag_data[0] = (uint8_t)(i2c1_error & 0xFF);        // Byte 0: I2C1 error code
 8008da6:	f88d 7000 	strb.w	r7, [sp]
    diag_data[1] = (uint8_t)(i2c3_error & 0xFF);        // Byte 1: I2C3 error code
 8008daa:	f88d 6001 	strb.w	r6, [sp, #1]
    diag_data[2] = (uint8_t)(i2c1_state & 0xFF);        // Byte 2: I2C1 state
 8008dae:	f88d 5002 	strb.w	r5, [sp, #2]
    diag_data[3] = (uint8_t)(i2c3_state & 0xFF);        // Byte 3: I2C3 state
 8008db2:	f88d 0003 	strb.w	r0, [sp, #3]
    diag_data[4] = 0;                                   // Byte 4: Reserved
 8008db6:	f88d 4004 	strb.w	r4, [sp, #4]
    diag_data[5] = 0;                                   // Byte 5: Reserved
 8008dba:	f88d 4005 	strb.w	r4, [sp, #5]
    diag_data[6] = 0;                                   // Byte 6: Reserved
 8008dbe:	f88d 4006 	strb.w	r4, [sp, #6]
    diag_data[7] = 0;                                   // Byte 7: Reserved
 8008dc2:	f88d 4007 	strb.w	r4, [sp, #7]
    
    // Send I2C diagnostics with high priority
    return CAN_SendMessage(CAN_I2C_DIAG_ID, diag_data, 8, CAN_PRIORITY_HIGH);
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	2208      	movs	r2, #8
 8008dca:	4669      	mov	r1, sp
 8008dcc:	4805      	ldr	r0, [pc, #20]	@ (8008de4 <CAN_SendI2CDiagnostics+0x68>)
 8008dce:	6800      	ldr	r0, [r0, #0]
 8008dd0:	f7ff fe56 	bl	8008a80 <CAN_SendMessage>
 8008dd4:	b002      	add	sp, #8
 8008dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dda:	bf00      	nop
 8008ddc:	20003cf4 	.word	0x20003cf4
 8008de0:	20003ca0 	.word	0x20003ca0
 8008de4:	20000d0c 	.word	0x20000d0c

08008de8 <CAN_ProcessRxMessage>:
{
 8008de8:	b500      	push	{lr}
 8008dea:	b083      	sub	sp, #12
    can_stats.rx_message_count++;
 8008dec:	4a26      	ldr	r2, [pc, #152]	@ (8008e88 <CAN_ProcessRxMessage+0xa0>)
 8008dee:	68d3      	ldr	r3, [r2, #12]
 8008df0:	3301      	adds	r3, #1
 8008df2:	60d3      	str	r3, [r2, #12]
    if (msg->id == CAN_DEBUG_REQUEST_ID) {
 8008df4:	6803      	ldr	r3, [r0, #0]
 8008df6:	4a25      	ldr	r2, [pc, #148]	@ (8008e8c <CAN_ProcessRxMessage+0xa4>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d011      	beq.n	8008e20 <CAN_ProcessRxMessage+0x38>
    uint32_t base_id = msg->id & 0xFFFF0FFF;
 8008dfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
    if (base_id == (CAN_CONFIG_CMD_BASE & 0xFFFF0FFF)) {
 8008e00:	4a23      	ldr	r2, [pc, #140]	@ (8008e90 <CAN_ProcessRxMessage+0xa8>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d011      	beq.n	8008e2a <CAN_ProcessRxMessage+0x42>
    if (base_id == (CAN_RESET_CMD_BASE & 0xFFFF0FFF)) {
 8008e06:	4a23      	ldr	r2, [pc, #140]	@ (8008e94 <CAN_ProcessRxMessage+0xac>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d013      	beq.n	8008e34 <CAN_ProcessRxMessage+0x4c>
    if (base_id == (CAN_BMS_RESET_CMD_BASE & 0xFFFF0FFF)) {
 8008e0c:	4a22      	ldr	r2, [pc, #136]	@ (8008e98 <CAN_ProcessRxMessage+0xb0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d012      	beq.n	8008e38 <CAN_ProcessRxMessage+0x50>
    if (rx_callback != NULL) {
 8008e12:	4b22      	ldr	r3, [pc, #136]	@ (8008e9c <CAN_ProcessRxMessage+0xb4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <CAN_ProcessRxMessage+0x32>
        rx_callback(msg);
 8008e18:	4798      	blx	r3
}
 8008e1a:	b003      	add	sp, #12
 8008e1c:	f85d fb04 	ldr.w	pc, [sp], #4
        CAN_SendDebugInfo();
 8008e20:	f7ff ff74 	bl	8008d0c <CAN_SendDebugInfo>
        CAN_SendI2CDiagnostics();
 8008e24:	f7ff ffaa 	bl	8008d7c <CAN_SendI2CDiagnostics>
        return;
 8008e28:	e7f7      	b.n	8008e1a <CAN_ProcessRxMessage+0x32>
        Config_ProcessCANCommand(msg->data, msg->length);
 8008e2a:	7b01      	ldrb	r1, [r0, #12]
 8008e2c:	3004      	adds	r0, #4
 8008e2e:	f000 ff05 	bl	8009c3c <Config_ProcessCANCommand>
        return;
 8008e32:	e7f2      	b.n	8008e1a <CAN_ProcessRxMessage+0x32>
        NVIC_SystemReset();
 8008e34:	f7ff fdcc 	bl	80089d0 <__NVIC_SystemReset>
        uint8_t ack_data[8] = {0};
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	9301      	str	r3, [sp, #4]
        if (BMSResetSemHandle != NULL) {
 8008e3e:	4b18      	ldr	r3, [pc, #96]	@ (8008ea0 <CAN_ProcessRxMessage+0xb8>)
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	b1e8      	cbz	r0, 8008e80 <CAN_ProcessRxMessage+0x98>
            sem_result = osSemaphoreRelease(BMSResetSemHandle);
 8008e44:	f000 fcc8 	bl	80097d8 <osSemaphoreRelease>
        ack_data[0] = (sem_result == osOK) ? 0x00 : 0x01;
 8008e48:	3800      	subs	r0, #0
 8008e4a:	bf18      	it	ne
 8008e4c:	2001      	movne	r0, #1
 8008e4e:	f88d 0000 	strb.w	r0, [sp]
        ack_data[1] = 0x00;
 8008e52:	2300      	movs	r3, #0
 8008e54:	f88d 3001 	strb.w	r3, [sp, #1]
        ack_data[2] = 0x00;
 8008e58:	f88d 3002 	strb.w	r3, [sp, #2]
        ack_data[3] = 0x00;
 8008e5c:	f88d 3003 	strb.w	r3, [sp, #3]
        ack_data[4] = 0x00;
 8008e60:	f88d 3004 	strb.w	r3, [sp, #4]
        ack_data[5] = 0x00;
 8008e64:	f88d 3005 	strb.w	r3, [sp, #5]
        ack_data[6] = 0x00;
 8008e68:	f88d 3006 	strb.w	r3, [sp, #6]
        ack_data[7] = 0x00;
 8008e6c:	f88d 3007 	strb.w	r3, [sp, #7]
        CAN_SendMessage(CAN_BMS_RESET_ACK_ID, ack_data, 8, CAN_PRIORITY_HIGH);
 8008e70:	2301      	movs	r3, #1
 8008e72:	2208      	movs	r2, #8
 8008e74:	4669      	mov	r1, sp
 8008e76:	480b      	ldr	r0, [pc, #44]	@ (8008ea4 <CAN_ProcessRxMessage+0xbc>)
 8008e78:	6800      	ldr	r0, [r0, #0]
 8008e7a:	f7ff fe01 	bl	8008a80 <CAN_SendMessage>
        return;
 8008e7e:	e7cc      	b.n	8008e1a <CAN_ProcessRxMessage+0x32>
            sem_result = osError;
 8008e80:	f04f 30ff 	mov.w	r0, #4294967295
 8008e84:	e7e0      	b.n	8008e48 <CAN_ProcessRxMessage+0x60>
 8008e86:	bf00      	nop
 8008e88:	200000e0 	.word	0x200000e0
 8008e8c:	08f00f10 	.word	0x08f00f10
 8008e90:	08f00f00 	.word	0x08f00f00
 8008e94:	08f00f02 	.word	0x08f00f02
 8008e98:	08f00f03 	.word	0x08f00f03
 8008e9c:	200000f8 	.word	0x200000f8
 8008ea0:	20003c7c 	.word	0x20003c7c
 8008ea4:	20000d14 	.word	0x20000d14

08008ea8 <CAN_ManagerTask>:
{
 8008ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eac:	b086      	sub	sp, #24
    osDelay(100);
 8008eae:	2064      	movs	r0, #100	@ 0x64
 8008eb0:	f000 fb56 	bl	8009560 <osDelay>
    last_heartbeat_tick = osKernelGetTickCount();
 8008eb4:	f000 faf0 	bl	8009498 <osKernelGetTickCount>
 8008eb8:	4680      	mov	r8, r0
    last_stats_tick = osKernelGetTickCount();
 8008eba:	f000 faed 	bl	8009498 <osKernelGetTickCount>
 8008ebe:	4607      	mov	r7, r0
    last_uptime_tick = osKernelGetTickCount();
 8008ec0:	f000 faea 	bl	8009498 <osKernelGetTickCount>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	e020      	b.n	8008f0a <CAN_ManagerTask+0x62>
            CAN_ProcessRxMessage(&rx_msg);
 8008ec8:	a801      	add	r0, sp, #4
 8008eca:	f7ff ff8d 	bl	8008de8 <CAN_ProcessRxMessage>
        while (osMessageQueueGet(CANRxQueueHandle, &rx_msg, NULL, 0) == osOK) {
 8008ece:	2300      	movs	r3, #0
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	a901      	add	r1, sp, #4
 8008ed4:	4c13      	ldr	r4, [pc, #76]	@ (8008f24 <CAN_ManagerTask+0x7c>)
 8008ed6:	6820      	ldr	r0, [r4, #0]
 8008ed8:	f000 fd3a 	bl	8009950 <osMessageQueueGet>
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d0f3      	beq.n	8008ec8 <CAN_ManagerTask+0x20>
        CAN_ProcessTxQueue();
 8008ee0:	f7ff fdba 	bl	8008a58 <CAN_ProcessTxQueue>
        if ((current_tick - last_heartbeat_tick) >= CAN_HEARTBEAT_INTERVAL_MS) {
 8008ee4:	eba5 0308 	sub.w	r3, r5, r8
 8008ee8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008eec:	d211      	bcs.n	8008f12 <CAN_ManagerTask+0x6a>
        if ((current_tick - last_stats_tick) >= 1000) {
 8008eee:	1beb      	subs	r3, r5, r7
 8008ef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ef4:	d211      	bcs.n	8008f1a <CAN_ManagerTask+0x72>
        if ((current_tick - last_uptime_tick) >= 1000) {
 8008ef6:	1bab      	subs	r3, r5, r6
 8008ef8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008efc:	d302      	bcc.n	8008f04 <CAN_ManagerTask+0x5c>
            ErrorMgr_UpdateUptime();
 8008efe:	f001 f82b 	bl	8009f58 <ErrorMgr_UpdateUptime>
            last_uptime_tick = current_tick;
 8008f02:	462e      	mov	r6, r5
        osDelay(10);
 8008f04:	200a      	movs	r0, #10
 8008f06:	f000 fb2b 	bl	8009560 <osDelay>
        current_tick = osKernelGetTickCount();
 8008f0a:	f000 fac5 	bl	8009498 <osKernelGetTickCount>
 8008f0e:	4605      	mov	r5, r0
        while (osMessageQueueGet(CANRxQueueHandle, &rx_msg, NULL, 0) == osOK) {
 8008f10:	e7dd      	b.n	8008ece <CAN_ManagerTask+0x26>
            CAN_SendHeartbeat();
 8008f12:	f7ff fe9f 	bl	8008c54 <CAN_SendHeartbeat>
            last_heartbeat_tick = current_tick;
 8008f16:	46a8      	mov	r8, r5
 8008f18:	e7e9      	b.n	8008eee <CAN_ManagerTask+0x46>
            CAN_SendStatistics();
 8008f1a:	f7ff fecb 	bl	8008cb4 <CAN_SendStatistics>
            last_stats_tick = current_tick;
 8008f1e:	462f      	mov	r7, r5
 8008f20:	e7e9      	b.n	8008ef6 <CAN_ManagerTask+0x4e>
 8008f22:	bf00      	nop
 8008f24:	200000fc 	.word	0x200000fc

08008f28 <CellTemp_IsADCEnabled>:
  * @param  adc_index: ADC channel index (0-6)
  * @retval 1 if enabled, 0 if disabled
  */
static uint8_t CellTemp_IsADCEnabled(uint8_t adc_index)
{
    if (adc_index >= NUM_ADC_CHANNELS) {
 8008f28:	2806      	cmp	r0, #6
 8008f2a:	d802      	bhi.n	8008f32 <CellTemp_IsADCEnabled+0xa>
        return 0;
    }
    return adc_channel_enabled[adc_index];
 8008f2c:	4b02      	ldr	r3, [pc, #8]	@ (8008f38 <CellTemp_IsADCEnabled+0x10>)
 8008f2e:	5c18      	ldrb	r0, [r3, r0]
 8008f30:	4770      	bx	lr
        return 0;
 8008f32:	2000      	movs	r0, #0
}
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	080102fc 	.word	0x080102fc

08008f3c <CellTemp_ConfigureADCChannel>:
{
 8008f3c:	b500      	push	{lr}
 8008f3e:	b087      	sub	sp, #28
    ADC_ChannelConfTypeDef sConfig = {0};
 8008f40:	4669      	mov	r1, sp
 8008f42:	2300      	movs	r3, #0
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	9302      	str	r3, [sp, #8]
 8008f4a:	9303      	str	r3, [sp, #12]
 8008f4c:	9304      	str	r3, [sp, #16]
 8008f4e:	9305      	str	r3, [sp, #20]
    sConfig.Channel = channel;
 8008f50:	9000      	str	r0, [sp, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8008f52:	2306      	movs	r3, #6
 8008f54:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; // Long sampling for high impedance
 8008f56:	2307      	movs	r3, #7
 8008f58:	9302      	str	r3, [sp, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008f5a:	237f      	movs	r3, #127	@ 0x7f
 8008f5c:	9303      	str	r3, [sp, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008f5e:	2304      	movs	r3, #4
 8008f60:	9304      	str	r3, [sp, #16]
    return HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008f62:	4803      	ldr	r0, [pc, #12]	@ (8008f70 <CellTemp_ConfigureADCChannel+0x34>)
 8008f64:	f002 fd22 	bl	800b9ac <HAL_ADC_ConfigChannel>
}
 8008f68:	b007      	add	sp, #28
 8008f6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008f6e:	bf00      	nop
 8008f70:	20003d94 	.word	0x20003d94

08008f74 <CellTemp_SendTemperatureMessage>:
  * @param  msg_index: Message index (0-13, for 14 messages total)
  * @param  start_therm_idx: Starting thermistor index
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef CellTemp_SendTemperatureMessage(uint8_t msg_index, uint8_t start_therm_idx)
{
 8008f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f76:	b083      	sub	sp, #12
 8008f78:	4606      	mov	r6, r0
 8008f7a:	460d      	mov	r5, r1
    uint8_t TxData[8];
    
    // Check if this message corresponds to a disabled ADC channel
    // Each message covers 4 thermistors, determine which ADC channel(s) it uses
    uint8_t first_adc = start_therm_idx / MUX_CHANNELS;
 8008f7c:	08cc      	lsrs	r4, r1, #3
    uint8_t last_adc = (start_therm_idx + 3) / MUX_CHANNELS;
 8008f7e:	1ccf      	adds	r7, r1, #3
 8008f80:	08ff      	lsrs	r7, r7, #3
    
    // Skip message if all ADC channels for this message are disabled
    uint8_t any_enabled = 0;
    for (uint8_t adc = first_adc; adc <= last_adc && adc < NUM_ADC_CHANNELS; adc++) {
 8008f82:	e001      	b.n	8008f88 <CellTemp_SendTemperatureMessage+0x14>
 8008f84:	3401      	adds	r4, #1
 8008f86:	b2e4      	uxtb	r4, r4
 8008f88:	42bc      	cmp	r4, r7
 8008f8a:	d80a      	bhi.n	8008fa2 <CellTemp_SendTemperatureMessage+0x2e>
 8008f8c:	2c06      	cmp	r4, #6
 8008f8e:	d806      	bhi.n	8008f9e <CellTemp_SendTemperatureMessage+0x2a>
        if (CellTemp_IsADCEnabled(adc)) {
 8008f90:	4620      	mov	r0, r4
 8008f92:	f7ff ffc9 	bl	8008f28 <CellTemp_IsADCEnabled>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d0f4      	beq.n	8008f84 <CellTemp_SendTemperatureMessage+0x10>
            any_enabled = 1;
 8008f9a:	2001      	movs	r0, #1
 8008f9c:	e002      	b.n	8008fa4 <CellTemp_SendTemperatureMessage+0x30>
    uint8_t any_enabled = 0;
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	e000      	b.n	8008fa4 <CellTemp_SendTemperatureMessage+0x30>
 8008fa2:	2000      	movs	r0, #0
            break;
        }
    }
    
    if (!any_enabled) {
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	d03d      	beq.n	8009024 <CellTemp_SendTemperatureMessage+0xb0>
    }
    
    // Prepare CAN message with 4 thermistor readings per message
    // Temperature format: temp_celsius * 10 (0.1°C resolution), little endian
    
    for (uint8_t i = 0; i < 4; i++) {
 8008fa8:	2400      	movs	r4, #0
 8008faa:	e00d      	b.n	8008fc8 <CellTemp_SendTemperatureMessage+0x54>
        uint8_t therm_idx = start_therm_idx + i;
        int16_t temp_data = 0x8000; // Default invalid temperature marker
 8008fac:	4b1e      	ldr	r3, [pc, #120]	@ (8009028 <CellTemp_SendTemperatureMessage+0xb4>)
                temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
            }
        }
        
        // Pack temperature data (little endian)
        TxData[i * 2] = temp_data & 0xFF;         // LSB
 8008fae:	0062      	lsls	r2, r4, #1
 8008fb0:	a902      	add	r1, sp, #8
 8008fb2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8008fb6:	f801 3c08 	strb.w	r3, [r1, #-8]
        TxData[i * 2 + 1] = (temp_data >> 8) & 0xFF; // MSB
 8008fba:	3209      	adds	r2, #9
 8008fbc:	446a      	add	r2, sp
 8008fbe:	121b      	asrs	r3, r3, #8
 8008fc0:	f802 3c08 	strb.w	r3, [r2, #-8]
    for (uint8_t i = 0; i < 4; i++) {
 8008fc4:	3401      	adds	r4, #1
 8008fc6:	b2e4      	uxtb	r4, r4
 8008fc8:	2c03      	cmp	r4, #3
 8008fca:	d823      	bhi.n	8009014 <CellTemp_SendTemperatureMessage+0xa0>
        uint8_t therm_idx = start_therm_idx + i;
 8008fcc:	1967      	adds	r7, r4, r5
 8008fce:	b2ff      	uxtb	r7, r7
        if (therm_idx < TOTAL_THERMISTORS) {
 8008fd0:	2f37      	cmp	r7, #55	@ 0x37
 8008fd2:	d8eb      	bhi.n	8008fac <CellTemp_SendTemperatureMessage+0x38>
            if (CellTemp_IsADCEnabled(therm_adc) && 
 8008fd4:	08f8      	lsrs	r0, r7, #3
 8008fd6:	f7ff ffa7 	bl	8008f28 <CellTemp_IsADCEnabled>
 8008fda:	b1b8      	cbz	r0, 800900c <CellTemp_SendTemperatureMessage+0x98>
                temp_state.thermistors[therm_idx].temperature > -126.0f) {
 8008fdc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008fe0:	4b12      	ldr	r3, [pc, #72]	@ (800902c <CellTemp_SendTemperatureMessage+0xb8>)
 8008fe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008fe6:	edd3 7a01 	vldr	s15, [r3, #4]
            if (CellTemp_IsADCEnabled(therm_adc) && 
 8008fea:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8009030 <CellTemp_SendTemperatureMessage+0xbc>
 8008fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff6:	dd0b      	ble.n	8009010 <CellTemp_SendTemperatureMessage+0x9c>
                temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
 8008ff8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009004:	ee17 3a90 	vmov	r3, s15
 8009008:	b21b      	sxth	r3, r3
 800900a:	e7d0      	b.n	8008fae <CellTemp_SendTemperatureMessage+0x3a>
        int16_t temp_data = 0x8000; // Default invalid temperature marker
 800900c:	4b06      	ldr	r3, [pc, #24]	@ (8009028 <CellTemp_SendTemperatureMessage+0xb4>)
 800900e:	e7ce      	b.n	8008fae <CellTemp_SendTemperatureMessage+0x3a>
 8009010:	4b05      	ldr	r3, [pc, #20]	@ (8009028 <CellTemp_SendTemperatureMessage+0xb4>)
 8009012:	e7cc      	b.n	8008fae <CellTemp_SendTemperatureMessage+0x3a>
    }
    
    // Send via CAN Manager (non-blocking, queued)
    // CAN_TEMP_ID already has module offset applied from Config_Init()
    uint32_t can_id = CAN_TEMP_ID + msg_index;
 8009014:	4b07      	ldr	r3, [pc, #28]	@ (8009034 <CellTemp_SendTemperatureMessage+0xc0>)
 8009016:	6818      	ldr	r0, [r3, #0]
    return CAN_SendMessage(can_id, TxData, 8, CAN_PRIORITY_NORMAL);
 8009018:	2302      	movs	r3, #2
 800901a:	2208      	movs	r2, #8
 800901c:	4669      	mov	r1, sp
 800901e:	4430      	add	r0, r6
 8009020:	f7ff fd2e 	bl	8008a80 <CAN_SendMessage>
}
 8009024:	b003      	add	sp, #12
 8009026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009028:	ffff8000 	.word	0xffff8000
 800902c:	20000104 	.word	0x20000104
 8009030:	c2fc0000 	.word	0xc2fc0000
 8009034:	20000d50 	.word	0x20000d50

08009038 <CellTemp_Init>:
{
 8009038:	b510      	push	{r4, lr}
    memset(&temp_state, 0, sizeof(temp_monitor_state_t));
 800903a:	f240 524c 	movw	r2, #1356	@ 0x54c
 800903e:	2100      	movs	r1, #0
 8009040:	481a      	ldr	r0, [pc, #104]	@ (80090ac <CellTemp_Init+0x74>)
 8009042:	f006 ff60 	bl	800ff06 <memset>
    for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8009046:	2300      	movs	r3, #0
 8009048:	e019      	b.n	800907e <CellTemp_Init+0x46>
        temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 800904a:	4a18      	ldr	r2, [pc, #96]	@ (80090ac <CellTemp_Init+0x74>)
 800904c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009050:	00c8      	lsls	r0, r1, #3
 8009052:	1811      	adds	r1, r2, r0
 8009054:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8009058:	f802 c000 	strb.w	ip, [r2, r0]
        temp_state.thermistors[i].mux_channel = i % MUX_CHANNELS;
 800905c:	f003 0007 	and.w	r0, r3, #7
 8009060:	7048      	strb	r0, [r1, #1]
        temp_state.thermistors[i].temperature = -127.0f; // Invalid temperature marker
 8009062:	4813      	ldr	r0, [pc, #76]	@ (80090b0 <CellTemp_Init+0x78>)
 8009064:	6048      	str	r0, [r1, #4]
        temp_state.thermistors[i].raw_adc = 0;
 8009066:	2000      	movs	r0, #0
 8009068:	8108      	strh	r0, [r1, #8]
        temp_state.thermistors[i].last_read_time = 0;
 800906a:	60c8      	str	r0, [r1, #12]
        temp_state.thermistors[i].adc_accumulator = 0;
 800906c:	6108      	str	r0, [r1, #16]
        temp_state.thermistors[i].sample_count = 0;
 800906e:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8009072:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 8009076:	440a      	add	r2, r1
 8009078:	8290      	strh	r0, [r2, #20]
    for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 800907a:	3301      	adds	r3, #1
 800907c:	b2db      	uxtb	r3, r3
 800907e:	2b37      	cmp	r3, #55	@ 0x37
 8009080:	d9e3      	bls.n	800904a <CellTemp_Init+0x12>
    HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 8009082:	4c0c      	ldr	r4, [pc, #48]	@ (80090b4 <CellTemp_Init+0x7c>)
 8009084:	2200      	movs	r2, #0
 8009086:	2102      	movs	r1, #2
 8009088:	4620      	mov	r0, r4
 800908a:	f003 ffb7 	bl	800cffc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 800908e:	2200      	movs	r2, #0
 8009090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009094:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009098:	f003 ffb0 	bl	800cffc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 800909c:	2200      	movs	r2, #0
 800909e:	2120      	movs	r1, #32
 80090a0:	4620      	mov	r0, r4
 80090a2:	f003 ffab 	bl	800cffc <HAL_GPIO_WritePin>
}
 80090a6:	2000      	movs	r0, #0
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	bf00      	nop
 80090ac:	20000104 	.word	0x20000104
 80090b0:	c2fe0000 	.word	0xc2fe0000
 80090b4:	48000400 	.word	0x48000400

080090b8 <CellTemp_ReadADC>:
{
 80090b8:	b510      	push	{r4, lr}
    if (CellTemp_ConfigureADCChannel(adc_channel) != HAL_OK) {
 80090ba:	f7ff ff3f 	bl	8008f3c <CellTemp_ConfigureADCChannel>
 80090be:	b110      	cbz	r0, 80090c6 <CellTemp_ReadADC+0xe>
        return 0;
 80090c0:	2400      	movs	r4, #0
}
 80090c2:	4620      	mov	r0, r4
 80090c4:	bd10      	pop	{r4, pc}
    if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 80090c6:	480b      	ldr	r0, [pc, #44]	@ (80090f4 <CellTemp_ReadADC+0x3c>)
 80090c8:	f002 ff76 	bl	800bfb8 <HAL_ADC_Start>
 80090cc:	b108      	cbz	r0, 80090d2 <CellTemp_ReadADC+0x1a>
    uint16_t adc_value = 0;
 80090ce:	2400      	movs	r4, #0
 80090d0:	e7f7      	b.n	80090c2 <CellTemp_ReadADC+0xa>
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80090d2:	f04f 31ff 	mov.w	r1, #4294967295
 80090d6:	4807      	ldr	r0, [pc, #28]	@ (80090f4 <CellTemp_ReadADC+0x3c>)
 80090d8:	f002 fc0a 	bl	800b8f0 <HAL_ADC_PollForConversion>
 80090dc:	b120      	cbz	r0, 80090e8 <CellTemp_ReadADC+0x30>
    uint16_t adc_value = 0;
 80090de:	2400      	movs	r4, #0
        HAL_ADC_Stop(&hadc1);
 80090e0:	4804      	ldr	r0, [pc, #16]	@ (80090f4 <CellTemp_ReadADC+0x3c>)
 80090e2:	f002 fff9 	bl	800c0d8 <HAL_ADC_Stop>
 80090e6:	e7ec      	b.n	80090c2 <CellTemp_ReadADC+0xa>
            adc_value = HAL_ADC_GetValue(&hadc1);
 80090e8:	4802      	ldr	r0, [pc, #8]	@ (80090f4 <CellTemp_ReadADC+0x3c>)
 80090ea:	f002 fc5b 	bl	800b9a4 <HAL_ADC_GetValue>
 80090ee:	b284      	uxth	r4, r0
 80090f0:	e7f6      	b.n	80090e0 <CellTemp_ReadADC+0x28>
 80090f2:	bf00      	nop
 80090f4:	20003d94 	.word	0x20003d94

080090f8 <CellTemp_SetMuxChannel>:
    if (channel > 7) {
 80090f8:	2807      	cmp	r0, #7
 80090fa:	d833      	bhi.n	8009164 <CellTemp_SetMuxChannel+0x6c>
{
 80090fc:	b510      	push	{r4, lr}
 80090fe:	4604      	mov	r4, r0
    if (channel & 0x01) {
 8009100:	f010 0f01 	tst.w	r0, #1
 8009104:	d01a      	beq.n	800913c <CellTemp_SetMuxChannel+0x44>
        HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_SET);
 8009106:	2201      	movs	r2, #1
 8009108:	2102      	movs	r1, #2
 800910a:	4817      	ldr	r0, [pc, #92]	@ (8009168 <CellTemp_SetMuxChannel+0x70>)
 800910c:	f003 ff76 	bl	800cffc <HAL_GPIO_WritePin>
    if (channel & 0x02) {
 8009110:	f014 0f02 	tst.w	r4, #2
 8009114:	d018      	beq.n	8009148 <CellTemp_SetMuxChannel+0x50>
        HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_SET);
 8009116:	2201      	movs	r2, #1
 8009118:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800911c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009120:	f003 ff6c 	bl	800cffc <HAL_GPIO_WritePin>
    if (channel & 0x04) {
 8009124:	f014 0f04 	tst.w	r4, #4
 8009128:	d016      	beq.n	8009158 <CellTemp_SetMuxChannel+0x60>
        HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_SET);
 800912a:	2201      	movs	r2, #1
 800912c:	2120      	movs	r1, #32
 800912e:	480e      	ldr	r0, [pc, #56]	@ (8009168 <CellTemp_SetMuxChannel+0x70>)
 8009130:	f003 ff64 	bl	800cffc <HAL_GPIO_WritePin>
    osDelay(2);
 8009134:	2002      	movs	r0, #2
 8009136:	f000 fa13 	bl	8009560 <osDelay>
}
 800913a:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 800913c:	2200      	movs	r2, #0
 800913e:	2102      	movs	r1, #2
 8009140:	4809      	ldr	r0, [pc, #36]	@ (8009168 <CellTemp_SetMuxChannel+0x70>)
 8009142:	f003 ff5b 	bl	800cffc <HAL_GPIO_WritePin>
 8009146:	e7e3      	b.n	8009110 <CellTemp_SetMuxChannel+0x18>
        HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 8009148:	2200      	movs	r2, #0
 800914a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800914e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009152:	f003 ff53 	bl	800cffc <HAL_GPIO_WritePin>
 8009156:	e7e5      	b.n	8009124 <CellTemp_SetMuxChannel+0x2c>
        HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 8009158:	2200      	movs	r2, #0
 800915a:	2120      	movs	r1, #32
 800915c:	4802      	ldr	r0, [pc, #8]	@ (8009168 <CellTemp_SetMuxChannel+0x70>)
 800915e:	f003 ff4d 	bl	800cffc <HAL_GPIO_WritePin>
 8009162:	e7e7      	b.n	8009134 <CellTemp_SetMuxChannel+0x3c>
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	48000400 	.word	0x48000400

0800916c <CellTemp_CalculateTemperature>:
    float voltage = ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 800916c:	ee07 0a90 	vmov	s15, r0
 8009170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009174:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800921c <CellTemp_CalculateTemperature+0xb0>
 8009178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800917c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8009220 <CellTemp_CalculateTemperature+0xb4>
 8009180:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (adc_value < 10) {  // Less than ~8mV indicates disconnected sensor
 8009184:	2809      	cmp	r0, #9
 8009186:	d940      	bls.n	800920a <CellTemp_CalculateTemperature+0x9e>
    if (voltage >= 3.29f) {  // Close to 3.3V limit, very high resistance (cold)
 8009188:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009224 <CellTemp_CalculateTemperature+0xb8>
 800918c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009194:	da36      	bge.n	8009204 <CellTemp_CalculateTemperature+0x98>
        r_thermistor = (voltage * PULLUP_RESISTOR) / (ADC_VREF - voltage);
 8009196:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8009228 <CellTemp_CalculateTemperature+0xbc>
 800919a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800919e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8009220 <CellTemp_CalculateTemperature+0xb4>
 80091a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    if (r_thermistor <= 0) {
 80091aa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80091ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b2:	d92d      	bls.n	8009210 <CellTemp_CalculateTemperature+0xa4>
{
 80091b4:	b508      	push	{r3, lr}
    float ln_ratio = logf(r_thermistor / THERMISTOR_R25);
 80091b6:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8009228 <CellTemp_CalculateTemperature+0xbc>
 80091ba:	ee87 0a00 	vdiv.f32	s0, s14, s0
 80091be:	f006 fee3 	bl	800ff88 <logf>
    float temp_kelvin = 1.0f / ((1.0f / REFERENCE_TEMP_K) + (ln_ratio / THERMISTOR_B_VALUE));
 80091c2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 800922c <CellTemp_CalculateTemperature+0xc0>
 80091c6:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80091ca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009230 <CellTemp_CalculateTemperature+0xc4>
 80091ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d6:	ee87 0a27 	vdiv.f32	s0, s14, s15
    float temp_celsius = temp_kelvin - 273.15f;
 80091da:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8009234 <CellTemp_CalculateTemperature+0xc8>
 80091de:	ee30 0a67 	vsub.f32	s0, s0, s15
    if (temp_celsius < -40.0f) {
 80091e2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009238 <CellTemp_CalculateTemperature+0xcc>
 80091e6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80091ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ee:	d412      	bmi.n	8009216 <CellTemp_CalculateTemperature+0xaa>
    } else if (temp_celsius > 125.0f) {
 80091f0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800923c <CellTemp_CalculateTemperature+0xd0>
 80091f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80091f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091fc:	dd0d      	ble.n	800921a <CellTemp_CalculateTemperature+0xae>
        temp_celsius = 125.0f;
 80091fe:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800923c <CellTemp_CalculateTemperature+0xd0>
 8009202:	e00a      	b.n	800921a <CellTemp_CalculateTemperature+0xae>
        r_thermistor = PULLUP_RESISTOR * 100.0f;  // Assume very high resistance
 8009204:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009240 <CellTemp_CalculateTemperature+0xd4>
 8009208:	e7d4      	b.n	80091b4 <CellTemp_CalculateTemperature+0x48>
        return -127.0f;  // Return obvious error value
 800920a:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8009244 <CellTemp_CalculateTemperature+0xd8>
 800920e:	4770      	bx	lr
        return 125.0f; // Return maximum temperature for very low resistance
 8009210:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800923c <CellTemp_CalculateTemperature+0xd0>
}
 8009214:	4770      	bx	lr
        temp_celsius = -40.0f;
 8009216:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009238 <CellTemp_CalculateTemperature+0xcc>
}
 800921a:	bd08      	pop	{r3, pc}
 800921c:	457ff000 	.word	0x457ff000
 8009220:	40533333 	.word	0x40533333
 8009224:	40528f5c 	.word	0x40528f5c
 8009228:	461c4000 	.word	0x461c4000
 800922c:	4556b000 	.word	0x4556b000
 8009230:	3b5bcf0f 	.word	0x3b5bcf0f
 8009234:	43889333 	.word	0x43889333
 8009238:	c2200000 	.word	0xc2200000
 800923c:	42fa0000 	.word	0x42fa0000
 8009240:	49742400 	.word	0x49742400
 8009244:	c2fe0000 	.word	0xc2fe0000

08009248 <CellTemp_MonitorTask>:
{
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (CellTemp_Init() != HAL_OK) {
 800924c:	f7ff fef4 	bl	8009038 <CellTemp_Init>
 8009250:	4607      	mov	r7, r0
 8009252:	2800      	cmp	r0, #0
 8009254:	f000 80ac 	beq.w	80093b0 <CellTemp_MonitorTask+0x168>
            osDelay(1000);  // Wait 1 second (1000 ticks at 1ms tick rate)
 8009258:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800925c:	f000 f980 	bl	8009560 <osDelay>
        while(1) {
 8009260:	e7fa      	b.n	8009258 <CellTemp_MonitorTask+0x10>
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009262:	3401      	adds	r4, #1
 8009264:	b2e4      	uxtb	r4, r4
 8009266:	2c06      	cmp	r4, #6
 8009268:	d813      	bhi.n	8009292 <CellTemp_MonitorTask+0x4a>
            if (CellTemp_IsADCEnabled(adc)) {
 800926a:	4620      	mov	r0, r4
 800926c:	f7ff fe5c 	bl	8008f28 <CellTemp_IsADCEnabled>
 8009270:	2800      	cmp	r0, #0
 8009272:	d0f6      	beq.n	8009262 <CellTemp_MonitorTask+0x1a>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009274:	00e3      	lsls	r3, r4, #3
 8009276:	b2db      	uxtb	r3, r3
 8009278:	4a67      	ldr	r2, [pc, #412]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 800927a:	f892 1541 	ldrb.w	r1, [r2, #1345]	@ 0x541
 800927e:	440b      	add	r3, r1
 8009280:	b2db      	uxtb	r3, r3
                temp_state.thermistors[therm_idx].adc_accumulator = 0;
 8009282:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009286:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800928a:	2000      	movs	r0, #0
 800928c:	6108      	str	r0, [r1, #16]
                temp_state.thermistors[therm_idx].sample_count = 0;
 800928e:	8288      	strh	r0, [r1, #20]
 8009290:	e7e7      	b.n	8009262 <CellTemp_MonitorTask+0x1a>
        for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 8009292:	2600      	movs	r6, #0
 8009294:	e02b      	b.n	80092ee <CellTemp_MonitorTask+0xa6>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009296:	3401      	adds	r4, #1
 8009298:	b2e4      	uxtb	r4, r4
 800929a:	2c06      	cmp	r4, #6
 800929c:	d822      	bhi.n	80092e4 <CellTemp_MonitorTask+0x9c>
                if (CellTemp_IsADCEnabled(adc)) {
 800929e:	4620      	mov	r0, r4
 80092a0:	f7ff fe42 	bl	8008f28 <CellTemp_IsADCEnabled>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d0f6      	beq.n	8009296 <CellTemp_MonitorTask+0x4e>
                    uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 80092a8:	00e5      	lsls	r5, r4, #3
 80092aa:	b2ed      	uxtb	r5, r5
 80092ac:	4b5a      	ldr	r3, [pc, #360]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 80092ae:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80092b2:	441d      	add	r5, r3
 80092b4:	b2ed      	uxtb	r5, r5
                    uint16_t adc_value = CellTemp_ReadADC(adc_channels[adc]);
 80092b6:	4b59      	ldr	r3, [pc, #356]	@ (800941c <CellTemp_MonitorTask+0x1d4>)
 80092b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80092bc:	f7ff fefc 	bl	80090b8 <CellTemp_ReadADC>
                    if (adc_value >= 10) {  // Valid reading threshold
 80092c0:	2809      	cmp	r0, #9
 80092c2:	d9e8      	bls.n	8009296 <CellTemp_MonitorTask+0x4e>
                        therm->adc_accumulator += adc_value;
 80092c4:	4a54      	ldr	r2, [pc, #336]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 80092c6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80092ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092ce:	6919      	ldr	r1, [r3, #16]
 80092d0:	4408      	add	r0, r1
 80092d2:	6118      	str	r0, [r3, #16]
                        therm->sample_count++;
 80092d4:	8a9b      	ldrh	r3, [r3, #20]
 80092d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092da:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80092de:	3301      	adds	r3, #1
 80092e0:	8293      	strh	r3, [r2, #20]
 80092e2:	e7d8      	b.n	8009296 <CellTemp_MonitorTask+0x4e>
            osDelay(TEMP_SAMPLE_INTERVAL_MS);
 80092e4:	200a      	movs	r0, #10
 80092e6:	f000 f93b 	bl	8009560 <osDelay>
        for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 80092ea:	3601      	adds	r6, #1
 80092ec:	b2b6      	uxth	r6, r6
 80092ee:	2e0b      	cmp	r6, #11
 80092f0:	d801      	bhi.n	80092f6 <CellTemp_MonitorTask+0xae>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80092f2:	463c      	mov	r4, r7
 80092f4:	e7d1      	b.n	800929a <CellTemp_MonitorTask+0x52>
        uint32_t current_time = osKernelGetTickCount();
 80092f6:	f000 f8cf 	bl	8009498 <osKernelGetTickCount>
 80092fa:	4606      	mov	r6, r0
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80092fc:	463c      	mov	r4, r7
 80092fe:	e01e      	b.n	800933e <CellTemp_MonitorTask+0xf6>
                    therm->raw_adc = (uint16_t)(therm->adc_accumulator / therm->sample_count);
 8009300:	4698      	mov	r8, r3
 8009302:	691b      	ldr	r3, [r3, #16]
 8009304:	fbb3 f3f2 	udiv	r3, r3, r2
 8009308:	b298      	uxth	r0, r3
 800930a:	f8a8 0008 	strh.w	r0, [r8, #8]
                    therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 800930e:	f7ff ff2d 	bl	800916c <CellTemp_CalculateTemperature>
 8009312:	ed88 0a01 	vstr	s0, [r8, #4]
                    therm->last_read_time = current_time;
 8009316:	f8c8 600c 	str.w	r6, [r8, #12]
 800931a:	e00e      	b.n	800933a <CellTemp_MonitorTask+0xf2>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 800931c:	00e3      	lsls	r3, r4, #3
 800931e:	b2db      	uxtb	r3, r3
 8009320:	4a3d      	ldr	r2, [pc, #244]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 8009322:	f892 1541 	ldrb.w	r1, [r2, #1345]	@ 0x541
 8009326:	440b      	add	r3, r1
 8009328:	b2db      	uxtb	r3, r3
                temp_state.thermistors[therm_idx].temperature = -127.0f;
 800932a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800932e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009332:	483b      	ldr	r0, [pc, #236]	@ (8009420 <CellTemp_MonitorTask+0x1d8>)
 8009334:	6048      	str	r0, [r1, #4]
                temp_state.thermistors[therm_idx].raw_adc = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	810b      	strh	r3, [r1, #8]
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 800933a:	3401      	adds	r4, #1
 800933c:	b2e4      	uxtb	r4, r4
 800933e:	2c06      	cmp	r4, #6
 8009340:	d81d      	bhi.n	800937e <CellTemp_MonitorTask+0x136>
            if (CellTemp_IsADCEnabled(adc)) {
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff fdf0 	bl	8008f28 <CellTemp_IsADCEnabled>
 8009348:	2800      	cmp	r0, #0
 800934a:	d0e7      	beq.n	800931c <CellTemp_MonitorTask+0xd4>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 800934c:	00e5      	lsls	r5, r4, #3
 800934e:	b2ed      	uxtb	r5, r5
 8009350:	4b31      	ldr	r3, [pc, #196]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 8009352:	f893 2541 	ldrb.w	r2, [r3, #1345]	@ 0x541
 8009356:	4415      	add	r5, r2
 8009358:	b2ed      	uxtb	r5, r5
                if (therm->sample_count > 0) {
 800935a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800935e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009362:	8a9a      	ldrh	r2, [r3, #20]
 8009364:	2a00      	cmp	r2, #0
 8009366:	d1cb      	bne.n	8009300 <CellTemp_MonitorTask+0xb8>
                    therm->raw_adc = 0;
 8009368:	4b2b      	ldr	r3, [pc, #172]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 800936a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800936e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8009372:	2100      	movs	r1, #0
 8009374:	8111      	strh	r1, [r2, #8]
                    therm->temperature = -127.0f;
 8009376:	4613      	mov	r3, r2
 8009378:	4a29      	ldr	r2, [pc, #164]	@ (8009420 <CellTemp_MonitorTask+0x1d8>)
 800937a:	605a      	str	r2, [r3, #4]
 800937c:	e7dd      	b.n	800933a <CellTemp_MonitorTask+0xf2>
        if (temp_state.current_mux == 3 || temp_state.current_mux == 7) {
 800937e:	4b26      	ldr	r3, [pc, #152]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 8009380:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8009384:	2b03      	cmp	r3, #3
 8009386:	d042      	beq.n	800940e <CellTemp_MonitorTask+0x1c6>
 8009388:	2b07      	cmp	r3, #7
 800938a:	d042      	beq.n	8009412 <CellTemp_MonitorTask+0x1ca>
        temp_state.current_mux++;
 800938c:	4a22      	ldr	r2, [pc, #136]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 800938e:	f892 3541 	ldrb.w	r3, [r2, #1345]	@ 0x541
 8009392:	3301      	adds	r3, #1
 8009394:	b2db      	uxtb	r3, r3
 8009396:	f882 3541 	strb.w	r3, [r2, #1345]	@ 0x541
        if (temp_state.current_mux >= MUX_CHANNELS) {
 800939a:	2b07      	cmp	r3, #7
 800939c:	d908      	bls.n	80093b0 <CellTemp_MonitorTask+0x168>
            temp_state.current_mux = 0;
 800939e:	4613      	mov	r3, r2
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2541 	strb.w	r2, [r3, #1345]	@ 0x541
            temp_state.cycle_count++;
 80093a6:	f8d3 2544 	ldr.w	r2, [r3, #1348]	@ 0x544
 80093aa:	3201      	adds	r2, #1
 80093ac:	f8c3 2544 	str.w	r2, [r3, #1348]	@ 0x544
        CellTemp_SetMuxChannel(temp_state.current_mux);
 80093b0:	4b19      	ldr	r3, [pc, #100]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 80093b2:	f893 0541 	ldrb.w	r0, [r3, #1345]	@ 0x541
 80093b6:	f7ff fe9f 	bl	80090f8 <CellTemp_SetMuxChannel>
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80093ba:	463c      	mov	r4, r7
 80093bc:	e753      	b.n	8009266 <CellTemp_MonitorTask+0x1e>
                        uint8_t msg_idx = adc * 2;
 80093be:	0060      	lsls	r0, r4, #1
                        uint8_t start_therm_idx = adc * MUX_CHANNELS;
 80093c0:	00e1      	lsls	r1, r4, #3
                        CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 80093c2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80093c6:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 80093ca:	f7ff fdd3 	bl	8008f74 <CellTemp_SendTemperatureMessage>
                        osDelay(2); // Small delay between messages
 80093ce:	2002      	movs	r0, #2
 80093d0:	f000 f8c6 	bl	8009560 <osDelay>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80093d4:	3401      	adds	r4, #1
 80093d6:	b2e4      	uxtb	r4, r4
 80093d8:	2c06      	cmp	r4, #6
 80093da:	d8d7      	bhi.n	800938c <CellTemp_MonitorTask+0x144>
                if (CellTemp_IsADCEnabled(adc)) {
 80093dc:	4620      	mov	r0, r4
 80093de:	f7ff fda3 	bl	8008f28 <CellTemp_IsADCEnabled>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d0f6      	beq.n	80093d4 <CellTemp_MonitorTask+0x18c>
                    if (temp_state.current_mux == 3) {
 80093e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009418 <CellTemp_MonitorTask+0x1d0>)
 80093e8:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d0e6      	beq.n	80093be <CellTemp_MonitorTask+0x176>
                        uint8_t msg_idx = adc * 2 + 1;
 80093f0:	0060      	lsls	r0, r4, #1
 80093f2:	b2c0      	uxtb	r0, r0
 80093f4:	3001      	adds	r0, #1
                        uint8_t start_therm_idx = adc * MUX_CHANNELS + 4;
 80093f6:	00e1      	lsls	r1, r4, #3
 80093f8:	b2c9      	uxtb	r1, r1
 80093fa:	3104      	adds	r1, #4
                        CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 80093fc:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8009400:	b2c0      	uxtb	r0, r0
 8009402:	f7ff fdb7 	bl	8008f74 <CellTemp_SendTemperatureMessage>
                        osDelay(2); // Small delay between messages
 8009406:	2002      	movs	r0, #2
 8009408:	f000 f8aa 	bl	8009560 <osDelay>
 800940c:	e7e2      	b.n	80093d4 <CellTemp_MonitorTask+0x18c>
 800940e:	463c      	mov	r4, r7
 8009410:	e7e2      	b.n	80093d8 <CellTemp_MonitorTask+0x190>
 8009412:	463c      	mov	r4, r7
 8009414:	e7e0      	b.n	80093d8 <CellTemp_MonitorTask+0x190>
 8009416:	bf00      	nop
 8009418:	20000104 	.word	0x20000104
 800941c:	08010304 	.word	0x08010304
 8009420:	c2fe0000 	.word	0xc2fe0000

08009424 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009424:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8009426:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800942a:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800942c:	f006 fa16 	bl	800f85c <xTaskGetSchedulerState>
 8009430:	2801      	cmp	r0, #1
 8009432:	d100      	bne.n	8009436 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8009434:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8009436:	f001 fa6d 	bl	800a914 <xPortSysTickHandler>
}
 800943a:	e7fb      	b.n	8009434 <SysTick_Handler+0x10>

0800943c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800943c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009440:	b92b      	cbnz	r3, 800944e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009442:	4b06      	ldr	r3, [pc, #24]	@ (800945c <osKernelInitialize+0x20>)
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	b928      	cbnz	r0, 8009454 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009448:	2201      	movs	r2, #1
 800944a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800944c:	4770      	bx	lr
    stat = osErrorISR;
 800944e:	f06f 0005 	mvn.w	r0, #5
 8009452:	4770      	bx	lr
    } else {
      stat = osError;
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	20000d08 	.word	0x20000d08

08009460 <osKernelStart>:
 8009460:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009464:	b973      	cbnz	r3, 8009484 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009466:	4b0a      	ldr	r3, [pc, #40]	@ (8009490 <osKernelStart+0x30>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d10d      	bne.n	800948a <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 800946e:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009470:	2400      	movs	r4, #0
 8009472:	4b08      	ldr	r3, [pc, #32]	@ (8009494 <osKernelStart+0x34>)
 8009474:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009476:	4b06      	ldr	r3, [pc, #24]	@ (8009490 <osKernelStart+0x30>)
 8009478:	2202      	movs	r2, #2
 800947a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800947c:	f005 ff3c 	bl	800f2f8 <vTaskStartScheduler>
      stat = osOK;
 8009480:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009482:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009484:	f06f 0005 	mvn.w	r0, #5
 8009488:	4770      	bx	lr
      stat = osError;
 800948a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800948e:	4770      	bx	lr
 8009490:	20000d08 	.word	0x20000d08
 8009494:	e000ed00 	.word	0xe000ed00

08009498 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009498:	b508      	push	{r3, lr}
 800949a:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 800949e:	b113      	cbz	r3, 80094a6 <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 80094a0:	f005 ff84 	bl	800f3ac <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 80094a4:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 80094a6:	f005 ff7b 	bl	800f3a0 <xTaskGetTickCount>
  return (ticks);
 80094aa:	e7fb      	b.n	80094a4 <osKernelGetTickCount+0xc>

080094ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80094ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ae:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80094b0:	2400      	movs	r4, #0
 80094b2:	9405      	str	r4, [sp, #20]
 80094b4:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80094b8:	bb04      	cbnz	r4, 80094fc <osThreadNew+0x50>
 80094ba:	b1f8      	cbz	r0, 80094fc <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80094bc:	2a00      	cmp	r2, #0
 80094be:	d034      	beq.n	800952a <osThreadNew+0x7e>
      if (attr->name != NULL) {
 80094c0:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80094c2:	6993      	ldr	r3, [r2, #24]
 80094c4:	b12b      	cbz	r3, 80094d2 <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 80094c6:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094c8:	3b01      	subs	r3, #1
 80094ca:	2b37      	cmp	r3, #55	@ 0x37
 80094cc:	d902      	bls.n	80094d4 <osThreadNew+0x28>
        return (NULL);
 80094ce:	2000      	movs	r0, #0
 80094d0:	e015      	b.n	80094fe <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 80094d2:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094d4:	6853      	ldr	r3, [r2, #4]
 80094d6:	f013 0f01 	tst.w	r3, #1
 80094da:	d13f      	bne.n	800955c <osThreadNew+0xb0>
      }

      if (attr->stack_size > 0U) {
 80094dc:	6954      	ldr	r4, [r2, #20]
 80094de:	b184      	cbz	r4, 8009502 <osThreadNew+0x56>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80094e0:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094e4:	6893      	ldr	r3, [r2, #8]
 80094e6:	b12b      	cbz	r3, 80094f4 <osThreadNew+0x48>
 80094e8:	68d7      	ldr	r7, [r2, #12]
 80094ea:	2f5b      	cmp	r7, #91	@ 0x5b
 80094ec:	d902      	bls.n	80094f4 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094ee:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80094f0:	b107      	cbz	r7, 80094f4 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80094f2:	b984      	cbnz	r4, 8009516 <osThreadNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80094f4:	b143      	cbz	r3, 8009508 <osThreadNew+0x5c>
    mem  = -1;
 80094f6:	f04f 33ff 	mov.w	r3, #4294967295
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80094fa:	b30b      	cbz	r3, 8009540 <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80094fc:	9805      	ldr	r0, [sp, #20]
}
 80094fe:	b007      	add	sp, #28
 8009500:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8009502:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8009506:	e7ed      	b.n	80094e4 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009508:	68d3      	ldr	r3, [r2, #12]
 800950a:	b9a3      	cbnz	r3, 8009536 <osThreadNew+0x8a>
 800950c:	6913      	ldr	r3, [r2, #16]
 800950e:	b1ab      	cbz	r3, 800953c <osThreadNew+0x90>
    mem  = -1;
 8009510:	f04f 33ff 	mov.w	r3, #4294967295
 8009514:	e7f1      	b.n	80094fa <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009516:	9302      	str	r3, [sp, #8]
 8009518:	9701      	str	r7, [sp, #4]
 800951a:	9600      	str	r6, [sp, #0]
 800951c:	460b      	mov	r3, r1
 800951e:	4662      	mov	r2, ip
 8009520:	4629      	mov	r1, r5
 8009522:	f005 fe7b 	bl	800f21c <xTaskCreateStatic>
 8009526:	9005      	str	r0, [sp, #20]
 8009528:	e7e8      	b.n	80094fc <osThreadNew+0x50>
    name = NULL;
 800952a:	4615      	mov	r5, r2
      mem = 0;
 800952c:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 800952e:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8009530:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8009534:	e7e1      	b.n	80094fa <osThreadNew+0x4e>
    mem  = -1;
 8009536:	f04f 33ff 	mov.w	r3, #4294967295
 800953a:	e7de      	b.n	80094fa <osThreadNew+0x4e>
          mem = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	e7dc      	b.n	80094fa <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009540:	ab05      	add	r3, sp, #20
 8009542:	9301      	str	r3, [sp, #4]
 8009544:	9600      	str	r6, [sp, #0]
 8009546:	460b      	mov	r3, r1
 8009548:	fa1f f28c 	uxth.w	r2, ip
 800954c:	4629      	mov	r1, r5
 800954e:	f005 fea0 	bl	800f292 <xTaskCreate>
 8009552:	2801      	cmp	r0, #1
 8009554:	d0d2      	beq.n	80094fc <osThreadNew+0x50>
            hTask = NULL;
 8009556:	2300      	movs	r3, #0
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	e7cf      	b.n	80094fc <osThreadNew+0x50>
        return (NULL);
 800955c:	2000      	movs	r0, #0
 800955e:	e7ce      	b.n	80094fe <osThreadNew+0x52>

08009560 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009560:	b508      	push	{r3, lr}
 8009562:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009566:	b933      	cbnz	r3, 8009576 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009568:	b908      	cbnz	r0, 800956e <osDelay+0xe>
    stat = osOK;
 800956a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800956c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800956e:	f006 f82d 	bl	800f5cc <vTaskDelay>
    stat = osOK;
 8009572:	2000      	movs	r0, #0
 8009574:	e7fa      	b.n	800956c <osDelay+0xc>
    stat = osErrorISR;
 8009576:	f06f 0005 	mvn.w	r0, #5
 800957a:	e7f7      	b.n	800956c <osDelay+0xc>

0800957c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8009582:	2e00      	cmp	r6, #0
 8009584:	d13e      	bne.n	8009604 <osMutexNew+0x88>
 8009586:	4604      	mov	r4, r0
    if (attr != NULL) {
 8009588:	b308      	cbz	r0, 80095ce <osMutexNew+0x52>
      type = attr->attr_bits;
 800958a:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800958c:	f013 0601 	ands.w	r6, r3, #1
 8009590:	d000      	beq.n	8009594 <osMutexNew+0x18>
      rmtx = 1U;
 8009592:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009594:	f013 0f08 	tst.w	r3, #8
 8009598:	d137      	bne.n	800960a <osMutexNew+0x8e>
      mem = -1;

      if (attr != NULL) {
 800959a:	b354      	cbz	r4, 80095f2 <osMutexNew+0x76>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800959c:	68a1      	ldr	r1, [r4, #8]
 800959e:	b111      	cbz	r1, 80095a6 <osMutexNew+0x2a>
 80095a0:	68e3      	ldr	r3, [r4, #12]
 80095a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80095a4:	d81a      	bhi.n	80095dc <osMutexNew+0x60>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095a6:	b1a1      	cbz	r1, 80095d2 <osMutexNew+0x56>
      mem = -1;
 80095a8:	f04f 33ff 	mov.w	r3, #4294967295
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80095ac:	bb7b      	cbnz	r3, 800960e <osMutexNew+0x92>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80095ae:	b326      	cbz	r6, 80095fa <osMutexNew+0x7e>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80095b0:	2004      	movs	r0, #4
 80095b2:	f001 fd0d 	bl	800afd0 <xQueueCreateMutex>
 80095b6:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80095b8:	b32d      	cbz	r5, 8009606 <osMutexNew+0x8a>
        if (attr != NULL) {
 80095ba:	b104      	cbz	r4, 80095be <osMutexNew+0x42>
          name = attr->name;
 80095bc:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80095be:	4621      	mov	r1, r4
 80095c0:	4628      	mov	r0, r5
 80095c2:	f001 fff9 	bl	800b5b8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80095c6:	b1f6      	cbz	r6, 8009606 <osMutexNew+0x8a>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80095c8:	f045 0501 	orr.w	r5, r5, #1
 80095cc:	e01b      	b.n	8009606 <osMutexNew+0x8a>
      type = 0U;
 80095ce:	4633      	mov	r3, r6
 80095d0:	e7e0      	b.n	8009594 <osMutexNew+0x18>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80095d2:	68e3      	ldr	r3, [r4, #12]
 80095d4:	b17b      	cbz	r3, 80095f6 <osMutexNew+0x7a>
      mem = -1;
 80095d6:	f04f 33ff 	mov.w	r3, #4294967295
 80095da:	e7e7      	b.n	80095ac <osMutexNew+0x30>
          if (rmtx != 0U) {
 80095dc:	b126      	cbz	r6, 80095e8 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80095de:	2004      	movs	r0, #4
 80095e0:	f001 fd01 	bl	800afe6 <xQueueCreateMutexStatic>
 80095e4:	4605      	mov	r5, r0
 80095e6:	e7e7      	b.n	80095b8 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80095e8:	2001      	movs	r0, #1
 80095ea:	f001 fcfc 	bl	800afe6 <xQueueCreateMutexStatic>
 80095ee:	4605      	mov	r5, r0
 80095f0:	e7e2      	b.n	80095b8 <osMutexNew+0x3c>
        mem = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	e7da      	b.n	80095ac <osMutexNew+0x30>
            mem = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	e7d8      	b.n	80095ac <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 80095fa:	2001      	movs	r0, #1
 80095fc:	f001 fce8 	bl	800afd0 <xQueueCreateMutex>
 8009600:	4605      	mov	r5, r0
 8009602:	e7d9      	b.n	80095b8 <osMutexNew+0x3c>
  hMutex = NULL;
 8009604:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8009606:	4628      	mov	r0, r5
 8009608:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 800960a:	2500      	movs	r5, #0
 800960c:	e7fb      	b.n	8009606 <osMutexNew+0x8a>
 800960e:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8009610:	e7f9      	b.n	8009606 <osMutexNew+0x8a>

08009612 <osMutexAcquire>:
 8009612:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8009616:	b9da      	cbnz	r2, 8009650 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009618:	b510      	push	{r4, lr}
 800961a:	4603      	mov	r3, r0
 800961c:	460c      	mov	r4, r1
 800961e:	f020 0001 	bic.w	r0, r0, #1
 8009622:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8009626:	2b01      	cmp	r3, #1
 8009628:	d915      	bls.n	8009656 <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800962a:	b141      	cbz	r1, 800963e <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800962c:	4621      	mov	r1, r4
 800962e:	f001 ff4b 	bl	800b4c8 <xQueueTakeMutexRecursive>
 8009632:	2801      	cmp	r0, #1
 8009634:	d012      	beq.n	800965c <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8009636:	b19c      	cbz	r4, 8009660 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8009638:	f06f 0001 	mvn.w	r0, #1
 800963c:	e00f      	b.n	800965e <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800963e:	4621      	mov	r1, r4
 8009640:	f001 fe6f 	bl	800b322 <xQueueSemaphoreTake>
 8009644:	2801      	cmp	r0, #1
 8009646:	d00e      	beq.n	8009666 <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8009648:	b17c      	cbz	r4, 800966a <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 800964a:	f06f 0001 	mvn.w	r0, #1
 800964e:	e006      	b.n	800965e <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8009650:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8009654:	4770      	bx	lr
    stat = osErrorParameter;
 8009656:	f06f 0003 	mvn.w	r0, #3
 800965a:	e000      	b.n	800965e <osMutexAcquire+0x4c>
  stat = osOK;
 800965c:	2000      	movs	r0, #0
}
 800965e:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8009660:	f06f 0002 	mvn.w	r0, #2
 8009664:	e7fb      	b.n	800965e <osMutexAcquire+0x4c>
  stat = osOK;
 8009666:	2000      	movs	r0, #0
 8009668:	e7f9      	b.n	800965e <osMutexAcquire+0x4c>
          stat = osErrorResource;
 800966a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800966e:	e7f6      	b.n	800965e <osMutexAcquire+0x4c>

08009670 <osMutexRelease>:
 8009670:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8009674:	b9ba      	cbnz	r2, 80096a6 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009676:	b508      	push	{r3, lr}
 8009678:	4603      	mov	r3, r0
 800967a:	f020 0001 	bic.w	r0, r0, #1
 800967e:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8009682:	2b01      	cmp	r3, #1
 8009684:	d912      	bls.n	80096ac <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8009686:	b129      	cbz	r1, 8009694 <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009688:	f001 fcbc 	bl	800b004 <xQueueGiveMutexRecursive>
 800968c:	2801      	cmp	r0, #1
 800968e:	d110      	bne.n	80096b2 <osMutexRelease+0x42>
  stat = osOK;
 8009690:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009692:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009694:	2300      	movs	r3, #0
 8009696:	461a      	mov	r2, r3
 8009698:	4619      	mov	r1, r3
 800969a:	f001 fbc9 	bl	800ae30 <xQueueGenericSend>
 800969e:	2801      	cmp	r0, #1
 80096a0:	d10a      	bne.n	80096b8 <osMutexRelease+0x48>
  stat = osOK;
 80096a2:	2000      	movs	r0, #0
 80096a4:	e7f5      	b.n	8009692 <osMutexRelease+0x22>
    stat = osErrorISR;
 80096a6:	f06f 0005 	mvn.w	r0, #5
}
 80096aa:	4770      	bx	lr
    stat = osErrorParameter;
 80096ac:	f06f 0003 	mvn.w	r0, #3
 80096b0:	e7ef      	b.n	8009692 <osMutexRelease+0x22>
        stat = osErrorResource;
 80096b2:	f06f 0002 	mvn.w	r0, #2
 80096b6:	e7ec      	b.n	8009692 <osMutexRelease+0x22>
        stat = osErrorResource;
 80096b8:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80096bc:	e7e9      	b.n	8009692 <osMutexRelease+0x22>

080096be <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80096be:	b570      	push	{r4, r5, r6, lr}
 80096c0:	b082      	sub	sp, #8
 80096c2:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d148      	bne.n	800975c <osSemaphoreNew+0x9e>
 80096ca:	460e      	mov	r6, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d048      	beq.n	8009764 <osSemaphoreNew+0xa6>
 80096d2:	4288      	cmp	r0, r1
 80096d4:	d348      	bcc.n	8009768 <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 80096d6:	b14a      	cbz	r2, 80096ec <osSemaphoreNew+0x2e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80096d8:	6895      	ldr	r5, [r2, #8]
 80096da:	b115      	cbz	r5, 80096e2 <osSemaphoreNew+0x24>
 80096dc:	68d3      	ldr	r3, [r2, #12]
 80096de:	2b4f      	cmp	r3, #79	@ 0x4f
 80096e0:	d814      	bhi.n	800970c <osSemaphoreNew+0x4e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80096e2:	2d00      	cmp	r5, #0
 80096e4:	d142      	bne.n	800976c <osSemaphoreNew+0xae>
 80096e6:	68e3      	ldr	r3, [r4, #12]
 80096e8:	b10b      	cbz	r3, 80096ee <osSemaphoreNew+0x30>
 80096ea:	e038      	b.n	800975e <osSemaphoreNew+0xa0>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 80096ec:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80096ee:	2801      	cmp	r0, #1
 80096f0:	d00e      	beq.n	8009710 <osSemaphoreNew+0x52>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 80096f2:	bb6b      	cbnz	r3, 8009750 <osSemaphoreNew+0x92>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80096f4:	4631      	mov	r1, r6
 80096f6:	f001 fb7d 	bl	800adf4 <xQueueCreateCountingSemaphore>
 80096fa:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80096fc:	b37d      	cbz	r5, 800975e <osSemaphoreNew+0xa0>
        if (attr != NULL) {
 80096fe:	b104      	cbz	r4, 8009702 <osSemaphoreNew+0x44>
          name = attr->name;
 8009700:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009702:	4621      	mov	r1, r4
 8009704:	4628      	mov	r0, r5
 8009706:	f001 ff57 	bl	800b5b8 <vQueueAddToRegistry>
 800970a:	e028      	b.n	800975e <osSemaphoreNew+0xa0>
        mem = 1;
 800970c:	2301      	movs	r3, #1
 800970e:	e7ee      	b.n	80096ee <osSemaphoreNew+0x30>
        if (mem == 1) {
 8009710:	b9ab      	cbnz	r3, 800973e <osSemaphoreNew+0x80>
            hSemaphore = xSemaphoreCreateBinary();
 8009712:	2203      	movs	r2, #3
 8009714:	2100      	movs	r1, #0
 8009716:	2001      	movs	r0, #1
 8009718:	f001 fb25 	bl	800ad66 <xQueueGenericCreate>
 800971c:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800971e:	b1f5      	cbz	r5, 800975e <osSemaphoreNew+0xa0>
 8009720:	2e00      	cmp	r6, #0
 8009722:	d0eb      	beq.n	80096fc <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009724:	2300      	movs	r3, #0
 8009726:	461a      	mov	r2, r3
 8009728:	4619      	mov	r1, r3
 800972a:	4628      	mov	r0, r5
 800972c:	f001 fb80 	bl	800ae30 <xQueueGenericSend>
 8009730:	2801      	cmp	r0, #1
 8009732:	d0e3      	beq.n	80096fc <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8009734:	4628      	mov	r0, r5
 8009736:	f001 ff69 	bl	800b60c <vQueueDelete>
            hSemaphore = NULL;
 800973a:	2500      	movs	r5, #0
 800973c:	e00f      	b.n	800975e <osSemaphoreNew+0xa0>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800973e:	68a3      	ldr	r3, [r4, #8]
 8009740:	2203      	movs	r2, #3
 8009742:	9200      	str	r2, [sp, #0]
 8009744:	2200      	movs	r2, #0
 8009746:	4611      	mov	r1, r2
 8009748:	f001 fac3 	bl	800acd2 <xQueueGenericCreateStatic>
 800974c:	4605      	mov	r5, r0
 800974e:	e7e6      	b.n	800971e <osSemaphoreNew+0x60>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009750:	68a2      	ldr	r2, [r4, #8]
 8009752:	4631      	mov	r1, r6
 8009754:	f001 fb2b 	bl	800adae <xQueueCreateCountingSemaphoreStatic>
 8009758:	4605      	mov	r5, r0
 800975a:	e7cf      	b.n	80096fc <osSemaphoreNew+0x3e>
  hSemaphore = NULL;
 800975c:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800975e:	4628      	mov	r0, r5
 8009760:	b002      	add	sp, #8
 8009762:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8009764:	2500      	movs	r5, #0
 8009766:	e7fa      	b.n	800975e <osSemaphoreNew+0xa0>
 8009768:	2500      	movs	r5, #0
 800976a:	e7f8      	b.n	800975e <osSemaphoreNew+0xa0>
 800976c:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800976e:	e7f6      	b.n	800975e <osSemaphoreNew+0xa0>

08009770 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009770:	b320      	cbz	r0, 80097bc <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009772:	b510      	push	{r4, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	460c      	mov	r4, r1
 8009778:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800977c:	b1b3      	cbz	r3, 80097ac <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800977e:	bb01      	cbnz	r1, 80097c2 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8009780:	2100      	movs	r1, #0
 8009782:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009784:	aa01      	add	r2, sp, #4
 8009786:	f001 febf 	bl	800b508 <xQueueReceiveFromISR>
 800978a:	2801      	cmp	r0, #1
 800978c:	d11c      	bne.n	80097c8 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800978e:	9801      	ldr	r0, [sp, #4]
 8009790:	b150      	cbz	r0, 80097a8 <osSemaphoreAcquire+0x38>
 8009792:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800979a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800979e:	f3bf 8f4f 	dsb	sy
 80097a2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80097a6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80097a8:	b002      	add	sp, #8
 80097aa:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80097ac:	f001 fdb9 	bl	800b322 <xQueueSemaphoreTake>
 80097b0:	2801      	cmp	r0, #1
 80097b2:	d00c      	beq.n	80097ce <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 80097b4:	b16c      	cbz	r4, 80097d2 <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 80097b6:	f06f 0001 	mvn.w	r0, #1
 80097ba:	e7f5      	b.n	80097a8 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 80097bc:	f06f 0003 	mvn.w	r0, #3
}
 80097c0:	4770      	bx	lr
      stat = osErrorParameter;
 80097c2:	f06f 0003 	mvn.w	r0, #3
 80097c6:	e7ef      	b.n	80097a8 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 80097c8:	f06f 0002 	mvn.w	r0, #2
 80097cc:	e7ec      	b.n	80097a8 <osSemaphoreAcquire+0x38>
  stat = osOK;
 80097ce:	2000      	movs	r0, #0
 80097d0:	e7ea      	b.n	80097a8 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 80097d2:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80097d6:	e7e7      	b.n	80097a8 <osSemaphoreAcquire+0x38>

080097d8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80097d8:	b320      	cbz	r0, 8009824 <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80097da:	b500      	push	{lr}
 80097dc:	b083      	sub	sp, #12
 80097de:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80097e2:	b1a3      	cbz	r3, 800980e <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 80097e4:	2300      	movs	r3, #0
 80097e6:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80097e8:	a901      	add	r1, sp, #4
 80097ea:	f001 fc92 	bl	800b112 <xQueueGiveFromISR>
 80097ee:	2801      	cmp	r0, #1
 80097f0:	d11b      	bne.n	800982a <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80097f2:	9801      	ldr	r0, [sp, #4]
 80097f4:	b198      	cbz	r0, 800981e <osSemaphoreRelease+0x46>
 80097f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80097fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800980a:	2000      	movs	r0, #0
 800980c:	e007      	b.n	800981e <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800980e:	2300      	movs	r3, #0
 8009810:	461a      	mov	r2, r3
 8009812:	4619      	mov	r1, r3
 8009814:	f001 fb0c 	bl	800ae30 <xQueueGenericSend>
 8009818:	2801      	cmp	r0, #1
 800981a:	d109      	bne.n	8009830 <osSemaphoreRelease+0x58>
  stat = osOK;
 800981c:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800981e:	b003      	add	sp, #12
 8009820:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 8009824:	f06f 0003 	mvn.w	r0, #3
}
 8009828:	4770      	bx	lr
      stat = osErrorResource;
 800982a:	f06f 0002 	mvn.w	r0, #2
 800982e:	e7f6      	b.n	800981e <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 8009830:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009834:	e7f3      	b.n	800981e <osSemaphoreRelease+0x46>

08009836 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009836:	b570      	push	{r4, r5, r6, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800983e:	2b00      	cmp	r3, #0
 8009840:	d13a      	bne.n	80098b8 <osMessageQueueNew+0x82>
 8009842:	4614      	mov	r4, r2
 8009844:	2800      	cmp	r0, #0
 8009846:	d03b      	beq.n	80098c0 <osMessageQueueNew+0x8a>
 8009848:	2900      	cmp	r1, #0
 800984a:	d03b      	beq.n	80098c4 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 800984c:	b36a      	cbz	r2, 80098aa <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800984e:	6893      	ldr	r3, [r2, #8]
 8009850:	b14b      	cbz	r3, 8009866 <osMessageQueueNew+0x30>
 8009852:	68d2      	ldr	r2, [r2, #12]
 8009854:	2a4f      	cmp	r2, #79	@ 0x4f
 8009856:	d906      	bls.n	8009866 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009858:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800985a:	b122      	cbz	r2, 8009866 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800985c:	fb01 f500 	mul.w	r5, r1, r0
 8009860:	6966      	ldr	r6, [r4, #20]
 8009862:	42ae      	cmp	r6, r5
 8009864:	d21b      	bcs.n	800989e <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009866:	b173      	cbz	r3, 8009886 <osMessageQueueNew+0x50>
    mem = -1;
 8009868:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800986c:	bb63      	cbnz	r3, 80098c8 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800986e:	2200      	movs	r2, #0
 8009870:	f001 fa79 	bl	800ad66 <xQueueGenericCreate>
 8009874:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009876:	b305      	cbz	r5, 80098ba <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8009878:	b104      	cbz	r4, 800987c <osMessageQueueNew+0x46>
        name = attr->name;
 800987a:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f001 fe9a 	bl	800b5b8 <vQueueAddToRegistry>
 8009884:	e019      	b.n	80098ba <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009886:	68e3      	ldr	r3, [r4, #12]
 8009888:	b98b      	cbnz	r3, 80098ae <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800988a:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800988c:	b113      	cbz	r3, 8009894 <osMessageQueueNew+0x5e>
    mem = -1;
 800988e:	f04f 33ff 	mov.w	r3, #4294967295
 8009892:	e7eb      	b.n	800986c <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009894:	6963      	ldr	r3, [r4, #20]
 8009896:	b16b      	cbz	r3, 80098b4 <osMessageQueueNew+0x7e>
    mem = -1;
 8009898:	f04f 33ff 	mov.w	r3, #4294967295
 800989c:	e7e6      	b.n	800986c <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800989e:	2500      	movs	r5, #0
 80098a0:	9500      	str	r5, [sp, #0]
 80098a2:	f001 fa16 	bl	800acd2 <xQueueGenericCreateStatic>
 80098a6:	4605      	mov	r5, r0
 80098a8:	e7e5      	b.n	8009876 <osMessageQueueNew+0x40>
      mem = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	e7de      	b.n	800986c <osMessageQueueNew+0x36>
    mem = -1;
 80098ae:	f04f 33ff 	mov.w	r3, #4294967295
 80098b2:	e7db      	b.n	800986c <osMessageQueueNew+0x36>
          mem = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	e7d9      	b.n	800986c <osMessageQueueNew+0x36>
  hQueue = NULL;
 80098b8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80098ba:	4628      	mov	r0, r5
 80098bc:	b002      	add	sp, #8
 80098be:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 80098c0:	2500      	movs	r5, #0
 80098c2:	e7fa      	b.n	80098ba <osMessageQueueNew+0x84>
 80098c4:	2500      	movs	r5, #0
 80098c6:	e7f8      	b.n	80098ba <osMessageQueueNew+0x84>
 80098c8:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 80098ca:	e7f6      	b.n	80098ba <osMessageQueueNew+0x84>

080098cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80098cc:	b510      	push	{r4, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	461c      	mov	r4, r3
 80098d2:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80098d6:	b1c3      	cbz	r3, 800990a <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80098d8:	b318      	cbz	r0, 8009922 <osMessageQueuePut+0x56>
 80098da:	b329      	cbz	r1, 8009928 <osMessageQueuePut+0x5c>
 80098dc:	bb3c      	cbnz	r4, 800992e <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80098de:	2300      	movs	r3, #0
 80098e0:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80098e2:	aa01      	add	r2, sp, #4
 80098e4:	f001 fbae 	bl	800b044 <xQueueGenericSendFromISR>
 80098e8:	2801      	cmp	r0, #1
 80098ea:	d123      	bne.n	8009934 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80098ec:	9801      	ldr	r0, [sp, #4]
 80098ee:	b150      	cbz	r0, 8009906 <osMessageQueuePut+0x3a>
 80098f0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80098f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009904:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009906:	b002      	add	sp, #8
 8009908:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800990a:	b1b0      	cbz	r0, 800993a <osMessageQueuePut+0x6e>
 800990c:	b1c1      	cbz	r1, 8009940 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800990e:	2300      	movs	r3, #0
 8009910:	4622      	mov	r2, r4
 8009912:	f001 fa8d 	bl	800ae30 <xQueueGenericSend>
 8009916:	2801      	cmp	r0, #1
 8009918:	d015      	beq.n	8009946 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 800991a:	b1b4      	cbz	r4, 800994a <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 800991c:	f06f 0001 	mvn.w	r0, #1
 8009920:	e7f1      	b.n	8009906 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8009922:	f06f 0003 	mvn.w	r0, #3
 8009926:	e7ee      	b.n	8009906 <osMessageQueuePut+0x3a>
 8009928:	f06f 0003 	mvn.w	r0, #3
 800992c:	e7eb      	b.n	8009906 <osMessageQueuePut+0x3a>
 800992e:	f06f 0003 	mvn.w	r0, #3
 8009932:	e7e8      	b.n	8009906 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8009934:	f06f 0002 	mvn.w	r0, #2
 8009938:	e7e5      	b.n	8009906 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 800993a:	f06f 0003 	mvn.w	r0, #3
 800993e:	e7e2      	b.n	8009906 <osMessageQueuePut+0x3a>
 8009940:	f06f 0003 	mvn.w	r0, #3
 8009944:	e7df      	b.n	8009906 <osMessageQueuePut+0x3a>
  stat = osOK;
 8009946:	2000      	movs	r0, #0
 8009948:	e7dd      	b.n	8009906 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 800994a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800994e:	e7da      	b.n	8009906 <osMessageQueuePut+0x3a>

08009950 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009950:	b510      	push	{r4, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	461c      	mov	r4, r3
 8009956:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800995a:	b1c3      	cbz	r3, 800998e <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800995c:	b310      	cbz	r0, 80099a4 <osMessageQueueGet+0x54>
 800995e:	b321      	cbz	r1, 80099aa <osMessageQueueGet+0x5a>
 8009960:	bb34      	cbnz	r4, 80099b0 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8009962:	2300      	movs	r3, #0
 8009964:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009966:	aa01      	add	r2, sp, #4
 8009968:	f001 fdce 	bl	800b508 <xQueueReceiveFromISR>
 800996c:	2801      	cmp	r0, #1
 800996e:	d122      	bne.n	80099b6 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009970:	9801      	ldr	r0, [sp, #4]
 8009972:	b150      	cbz	r0, 800998a <osMessageQueueGet+0x3a>
 8009974:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800997c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009988:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800998a:	b002      	add	sp, #8
 800998c:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800998e:	b1a8      	cbz	r0, 80099bc <osMessageQueueGet+0x6c>
 8009990:	b1b9      	cbz	r1, 80099c2 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009992:	4622      	mov	r2, r4
 8009994:	f001 fc16 	bl	800b1c4 <xQueueReceive>
 8009998:	2801      	cmp	r0, #1
 800999a:	d015      	beq.n	80099c8 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 800999c:	b1b4      	cbz	r4, 80099cc <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 800999e:	f06f 0001 	mvn.w	r0, #1
 80099a2:	e7f2      	b.n	800998a <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80099a4:	f06f 0003 	mvn.w	r0, #3
 80099a8:	e7ef      	b.n	800998a <osMessageQueueGet+0x3a>
 80099aa:	f06f 0003 	mvn.w	r0, #3
 80099ae:	e7ec      	b.n	800998a <osMessageQueueGet+0x3a>
 80099b0:	f06f 0003 	mvn.w	r0, #3
 80099b4:	e7e9      	b.n	800998a <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 80099b6:	f06f 0002 	mvn.w	r0, #2
 80099ba:	e7e6      	b.n	800998a <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80099bc:	f06f 0003 	mvn.w	r0, #3
 80099c0:	e7e3      	b.n	800998a <osMessageQueueGet+0x3a>
 80099c2:	f06f 0003 	mvn.w	r0, #3
 80099c6:	e7e0      	b.n	800998a <osMessageQueueGet+0x3a>
  stat = osOK;
 80099c8:	2000      	movs	r0, #0
 80099ca:	e7de      	b.n	800998a <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 80099cc:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 80099d0:	e7db      	b.n	800998a <osMessageQueueGet+0x3a>
	...

080099d4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099d4:	4b03      	ldr	r3, [pc, #12]	@ (80099e4 <vApplicationGetIdleTaskMemory+0x10>)
 80099d6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099d8:	4b03      	ldr	r3, [pc, #12]	@ (80099e8 <vApplicationGetIdleTaskMemory+0x14>)
 80099da:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099dc:	2380      	movs	r3, #128	@ 0x80
 80099de:	6013      	str	r3, [r2, #0]
}
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000cac 	.word	0x20000cac
 80099e8:	20000aac 	.word	0x20000aac

080099ec <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099ec:	4b03      	ldr	r3, [pc, #12]	@ (80099fc <vApplicationGetTimerTaskMemory+0x10>)
 80099ee:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099f0:	4b03      	ldr	r3, [pc, #12]	@ (8009a00 <vApplicationGetTimerTaskMemory+0x14>)
 80099f2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80099f8:	6013      	str	r3, [r2, #0]
}
 80099fa:	4770      	bx	lr
 80099fc:	20000a50 	.word	0x20000a50
 8009a00:	20000650 	.word	0x20000650

08009a04 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8009a04:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009a08:	4905      	ldr	r1, [pc, #20]	@ (8009a20 <__NVIC_SystemReset+0x1c>)
 8009a0a:	68ca      	ldr	r2, [r1, #12]
 8009a0c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009a10:	4b04      	ldr	r3, [pc, #16]	@ (8009a24 <__NVIC_SystemReset+0x20>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60cb      	str	r3, [r1, #12]
 8009a16:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009a1a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009a1c:	e7fd      	b.n	8009a1a <__NVIC_SystemReset+0x16>
 8009a1e:	bf00      	nop
 8009a20:	e000ed00 	.word	0xe000ed00
 8009a24:	05fa0004 	.word	0x05fa0004

08009a28 <Config_GetModuleID>:
/**
  * @brief  Get current module ID
  * @retval Current module ID (0-15)
  */
uint8_t Config_GetModuleID(void)
{
 8009a28:	b510      	push	{r4, lr}
    uint8_t id;
    
    // Thread-safe read
    if (config_mutex != NULL) {
 8009a2a:	4b08      	ldr	r3, [pc, #32]	@ (8009a4c <Config_GetModuleID+0x24>)
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	b118      	cbz	r0, 8009a38 <Config_GetModuleID+0x10>
        osMutexAcquire(config_mutex, osWaitForever);
 8009a30:	f04f 31ff 	mov.w	r1, #4294967295
 8009a34:	f7ff fded 	bl	8009612 <osMutexAcquire>
    }
    
    id = module_id;
 8009a38:	4b05      	ldr	r3, [pc, #20]	@ (8009a50 <Config_GetModuleID+0x28>)
 8009a3a:	781c      	ldrb	r4, [r3, #0]
    
    if (config_mutex != NULL) {
 8009a3c:	4b03      	ldr	r3, [pc, #12]	@ (8009a4c <Config_GetModuleID+0x24>)
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	b108      	cbz	r0, 8009a46 <Config_GetModuleID+0x1e>
        osMutexRelease(config_mutex);
 8009a42:	f7ff fe15 	bl	8009670 <osMutexRelease>
    }
    
    return id;
}
 8009a46:	4620      	mov	r0, r4
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	bf00      	nop
 8009a4c:	20000d54 	.word	0x20000d54
 8009a50:	20000d58 	.word	0x20000d58

08009a54 <Config_ReadModuleIDFromFlash>:
  * @retval Module ID from flash, or CONFIG_MODULE_ID_DEFAULT if uninitialized
  */
uint8_t Config_ReadModuleIDFromFlash(void)
{
    // Read 32-bit word from flash
    uint32_t flash_value = *(__IO uint32_t*)CONFIG_FLASH_MODULE_ADDR;
 8009a54:	4b05      	ldr	r3, [pc, #20]	@ (8009a6c <Config_ReadModuleIDFromFlash+0x18>)
 8009a56:	6818      	ldr	r0, [r3, #0]
    
    // Check if magic value is present (upper 16 bits)
    if ((flash_value & CONFIG_FLASH_MAGIC_MASK) == CONFIG_FLASH_MAGIC) {
 8009a58:	0c02      	lsrs	r2, r0, #16
 8009a5a:	0412      	lsls	r2, r2, #16
 8009a5c:	4b04      	ldr	r3, [pc, #16]	@ (8009a70 <Config_ReadModuleIDFromFlash+0x1c>)
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d001      	beq.n	8009a66 <Config_ReadModuleIDFromFlash+0x12>
            return stored_module_id;
        }
    }
    
    // Flash uninitialized or invalid, return default
    return CONFIG_MODULE_ID_DEFAULT;
 8009a62:	2000      	movs	r0, #0
}
 8009a64:	4770      	bx	lr
        uint8_t stored_module_id = (uint8_t)(flash_value & CONFIG_FLASH_MODULE_MASK);
 8009a66:	f000 000f 	and.w	r0, r0, #15
            return stored_module_id;
 8009a6a:	4770      	bx	lr
 8009a6c:	0803c000 	.word	0x0803c000
 8009a70:	beef0000 	.word	0xbeef0000

08009a74 <Config_WriteModuleIDToFlash>:
int8_t Config_WriteModuleIDToFlash(uint8_t module_id)
{
    HAL_StatusTypeDef status;
    
    // Validate module ID range
    if (module_id > CONFIG_MODULE_ID_MAX) {
 8009a74:	280f      	cmp	r0, #15
 8009a76:	d826      	bhi.n	8009ac6 <Config_WriteModuleIDToFlash+0x52>
{
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	b086      	sub	sp, #24
        return -1;
    }
    
    // Prepare flash value: magic + module ID
    uint32_t flash_value = CONFIG_FLASH_MAGIC | (uint32_t)module_id;
 8009a7c:	f040 443e 	orr.w	r4, r0, #3187671040	@ 0xbe000000
 8009a80:	f444 046f 	orr.w	r4, r4, #15663104	@ 0xef0000
    
    // Unlock flash
    status = HAL_FLASH_Unlock();
 8009a84:	f003 f866 	bl	800cb54 <HAL_FLASH_Unlock>
    if (status != HAL_OK) {
 8009a88:	bb00      	cbnz	r0, 8009acc <Config_WriteModuleIDToFlash+0x58>
    }
    
    // Erase the page containing our address
    // STM32L432 has 2KB pages, need to erase page before writing
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9301      	str	r3, [sp, #4]
    
    // Calculate page number (page size = 2048 bytes = 0x800)
    uint32_t page_address = CONFIG_FLASH_MODULE_ADDR;
    uint32_t page_number = (page_address - FLASH_BASE) / FLASH_PAGE_SIZE;
    
    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8009a8e:	9302      	str	r3, [sp, #8]
    erase_init.Page = page_number;
 8009a90:	2378      	movs	r3, #120	@ 0x78
 8009a92:	9304      	str	r3, [sp, #16]
    erase_init.NbPages = 1;
 8009a94:	2301      	movs	r3, #1
 8009a96:	9305      	str	r3, [sp, #20]
    
    status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8009a98:	a901      	add	r1, sp, #4
 8009a9a:	a802      	add	r0, sp, #8
 8009a9c:	f003 f95e 	bl	800cd5c <HAL_FLASHEx_Erase>
    if (status != HAL_OK) {
 8009aa0:	b960      	cbnz	r0, 8009abc <Config_WriteModuleIDToFlash+0x48>
    
    // Program the double-word (64-bit) - STM32L4 requires double-word programming
    // We'll write our 32-bit value twice to make 64 bits
    uint64_t data = ((uint64_t)flash_value << 32) | (uint64_t)flash_value;
    
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, CONFIG_FLASH_MODULE_ADDR, data);
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	490c      	ldr	r1, [pc, #48]	@ (8009ad8 <Config_WriteModuleIDToFlash+0x64>)
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f003 f8a9 	bl	800cc00 <HAL_FLASH_Program>
 8009aae:	4604      	mov	r4, r0
    
    // Lock flash
    HAL_FLASH_Lock();
 8009ab0:	f003 f868 	bl	800cb84 <HAL_FLASH_Lock>
    
    return (status == HAL_OK) ? 0 : -1;
 8009ab4:	b96c      	cbnz	r4, 8009ad2 <Config_WriteModuleIDToFlash+0x5e>
 8009ab6:	2000      	movs	r0, #0
}
 8009ab8:	b006      	add	sp, #24
 8009aba:	bd10      	pop	{r4, pc}
        HAL_FLASH_Lock();
 8009abc:	f003 f862 	bl	800cb84 <HAL_FLASH_Lock>
        return -1;
 8009ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ac4:	e7f8      	b.n	8009ab8 <Config_WriteModuleIDToFlash+0x44>
        return -1;
 8009ac6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009aca:	4770      	bx	lr
        return -1;
 8009acc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad0:	e7f2      	b.n	8009ab8 <Config_WriteModuleIDToFlash+0x44>
    return (status == HAL_OK) ? 0 : -1;
 8009ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad6:	e7ef      	b.n	8009ab8 <Config_WriteModuleIDToFlash+0x44>
 8009ad8:	0803c000 	.word	0x0803c000

08009adc <Config_SetModuleID>:
    if (module_id_new > CONFIG_MODULE_ID_MAX) {
 8009adc:	280f      	cmp	r0, #15
 8009ade:	d803      	bhi.n	8009ae8 <Config_SetModuleID+0xc>
{
 8009ae0:	b508      	push	{r3, lr}
    int8_t result = Config_WriteModuleIDToFlash(module_id_new);
 8009ae2:	f7ff ffc7 	bl	8009a74 <Config_WriteModuleIDToFlash>
}
 8009ae6:	bd08      	pop	{r3, pc}
        return -1;
 8009ae8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009aec:	4770      	bx	lr
	...

08009af0 <Config_InitCANIDs>:
  * @brief  Initialize all CAN IDs with module offset
  * @note   Called during Config_Init() after module ID is read
  * @retval None
  */
void Config_InitCANIDs(void)
{
 8009af0:	b508      	push	{r3, lr}
    uint8_t mod_id = Config_GetModuleID();
 8009af2:	f7ff ff99 	bl	8009a28 <Config_GetModuleID>
    
    // Initialize all CAN IDs with module offset
    CAN_TEMP_ID = CAN_ID(CAN_TEMP_BASE, mod_id);
 8009af6:	0300      	lsls	r0, r0, #12
 8009af8:	f040 630f 	orr.w	r3, r0, #149946368	@ 0x8f00000
 8009afc:	4a23      	ldr	r2, [pc, #140]	@ (8009b8c <Config_InitCANIDs+0x9c>)
 8009afe:	6013      	str	r3, [r2, #0]
    CAN_TEMP_RAW_ID = CAN_ID(CAN_TEMP_RAW_BASE, mod_id);
 8009b00:	f443 7180 	orr.w	r1, r3, #256	@ 0x100
 8009b04:	4a22      	ldr	r2, [pc, #136]	@ (8009b90 <Config_InitCANIDs+0xa0>)
 8009b06:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_0_ID = CAN_ID(CAN_VOLTAGE_0_BASE, mod_id);
 8009b08:	f443 7100 	orr.w	r1, r3, #512	@ 0x200
 8009b0c:	4a21      	ldr	r2, [pc, #132]	@ (8009b94 <Config_InitCANIDs+0xa4>)
 8009b0e:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_1_ID = CAN_ID(CAN_VOLTAGE_1_BASE, mod_id);
 8009b10:	4a21      	ldr	r2, [pc, #132]	@ (8009b98 <Config_InitCANIDs+0xa8>)
 8009b12:	4302      	orrs	r2, r0
 8009b14:	4921      	ldr	r1, [pc, #132]	@ (8009b9c <Config_InitCANIDs+0xac>)
 8009b16:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_2_ID = CAN_ID(CAN_VOLTAGE_2_BASE, mod_id);
 8009b18:	4a21      	ldr	r2, [pc, #132]	@ (8009ba0 <Config_InitCANIDs+0xb0>)
 8009b1a:	4302      	orrs	r2, r0
 8009b1c:	4921      	ldr	r1, [pc, #132]	@ (8009ba4 <Config_InitCANIDs+0xb4>)
 8009b1e:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_3_ID = CAN_ID(CAN_VOLTAGE_3_BASE, mod_id);
 8009b20:	4a21      	ldr	r2, [pc, #132]	@ (8009ba8 <Config_InitCANIDs+0xb8>)
 8009b22:	4302      	orrs	r2, r0
 8009b24:	4921      	ldr	r1, [pc, #132]	@ (8009bac <Config_InitCANIDs+0xbc>)
 8009b26:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_4_ID = CAN_ID(CAN_VOLTAGE_4_BASE, mod_id);
 8009b28:	f443 7101 	orr.w	r1, r3, #516	@ 0x204
 8009b2c:	4a20      	ldr	r2, [pc, #128]	@ (8009bb0 <Config_InitCANIDs+0xc0>)
 8009b2e:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_5_ID = CAN_ID(CAN_VOLTAGE_5_BASE, mod_id);
 8009b30:	4a20      	ldr	r2, [pc, #128]	@ (8009bb4 <Config_InitCANIDs+0xc4>)
 8009b32:	4302      	orrs	r2, r0
 8009b34:	4920      	ldr	r1, [pc, #128]	@ (8009bb8 <Config_InitCANIDs+0xc8>)
 8009b36:	600a      	str	r2, [r1, #0]
    CAN_BMS1_STATUS_ID = CAN_ID(CAN_BMS1_STATUS_BASE, mod_id);
 8009b38:	4a20      	ldr	r2, [pc, #128]	@ (8009bbc <Config_InitCANIDs+0xcc>)
 8009b3a:	4302      	orrs	r2, r0
 8009b3c:	4920      	ldr	r1, [pc, #128]	@ (8009bc0 <Config_InitCANIDs+0xd0>)
 8009b3e:	600a      	str	r2, [r1, #0]
    CAN_BMS2_STATUS_ID = CAN_ID(CAN_BMS2_STATUS_BASE, mod_id);
 8009b40:	4a20      	ldr	r2, [pc, #128]	@ (8009bc4 <Config_InitCANIDs+0xd4>)
 8009b42:	4302      	orrs	r2, r0
 8009b44:	4920      	ldr	r1, [pc, #128]	@ (8009bc8 <Config_InitCANIDs+0xd8>)
 8009b46:	600a      	str	r2, [r1, #0]
    CAN_BMS_HEARTBEAT_ID = CAN_ID(CAN_BMS_HEARTBEAT_BASE, mod_id);
 8009b48:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bcc <Config_InitCANIDs+0xdc>)
 8009b4e:	6013      	str	r3, [r2, #0]
    CAN_BMS_STATS_ID = CAN_ID(CAN_BMS_STATS_BASE, mod_id);
 8009b50:	4b1f      	ldr	r3, [pc, #124]	@ (8009bd0 <Config_InitCANIDs+0xe0>)
 8009b52:	4303      	orrs	r3, r0
 8009b54:	4a1f      	ldr	r2, [pc, #124]	@ (8009bd4 <Config_InitCANIDs+0xe4>)
 8009b56:	6013      	str	r3, [r2, #0]
    CAN_CONFIG_ACK_ID = CAN_ID(CAN_CONFIG_ACK_BASE, mod_id);
 8009b58:	4b1f      	ldr	r3, [pc, #124]	@ (8009bd8 <Config_InitCANIDs+0xe8>)
 8009b5a:	4303      	orrs	r3, r0
 8009b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bdc <Config_InitCANIDs+0xec>)
 8009b5e:	6013      	str	r3, [r2, #0]
    CAN_RESET_CMD_ID = CAN_ID(CAN_RESET_CMD_BASE, mod_id);
 8009b60:	4b1f      	ldr	r3, [pc, #124]	@ (8009be0 <Config_InitCANIDs+0xf0>)
 8009b62:	4303      	orrs	r3, r0
 8009b64:	4a1f      	ldr	r2, [pc, #124]	@ (8009be4 <Config_InitCANIDs+0xf4>)
 8009b66:	6013      	str	r3, [r2, #0]
    CAN_BMS_RESET_CMD_ID = CAN_ID(CAN_BMS_RESET_CMD_BASE, mod_id);
 8009b68:	4b1f      	ldr	r3, [pc, #124]	@ (8009be8 <Config_InitCANIDs+0xf8>)
 8009b6a:	4303      	orrs	r3, r0
 8009b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bec <Config_InitCANIDs+0xfc>)
 8009b6e:	6013      	str	r3, [r2, #0]
    CAN_BMS_RESET_ACK_ID = CAN_ID(CAN_BMS_RESET_ACK_BASE, mod_id);
 8009b70:	4b1f      	ldr	r3, [pc, #124]	@ (8009bf0 <Config_InitCANIDs+0x100>)
 8009b72:	4303      	orrs	r3, r0
 8009b74:	4a1f      	ldr	r2, [pc, #124]	@ (8009bf4 <Config_InitCANIDs+0x104>)
 8009b76:	6013      	str	r3, [r2, #0]
    CAN_DEBUG_RESPONSE_ID = CAN_ID(CAN_DEBUG_RESPONSE_BASE, mod_id);
 8009b78:	4b1f      	ldr	r3, [pc, #124]	@ (8009bf8 <Config_InitCANIDs+0x108>)
 8009b7a:	4303      	orrs	r3, r0
 8009b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bfc <Config_InitCANIDs+0x10c>)
 8009b7e:	6013      	str	r3, [r2, #0]
    CAN_I2C_DIAG_ID = CAN_ID(CAN_I2C_DIAG_BASE, mod_id);
 8009b80:	4b1f      	ldr	r3, [pc, #124]	@ (8009c00 <Config_InitCANIDs+0x110>)
 8009b82:	4303      	orrs	r3, r0
 8009b84:	4a1f      	ldr	r2, [pc, #124]	@ (8009c04 <Config_InitCANIDs+0x114>)
 8009b86:	6013      	str	r3, [r2, #0]
}
 8009b88:	bd08      	pop	{r3, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20000d50 	.word	0x20000d50
 8009b90:	20000d4c 	.word	0x20000d4c
 8009b94:	20000d48 	.word	0x20000d48
 8009b98:	08f00201 	.word	0x08f00201
 8009b9c:	20000d44 	.word	0x20000d44
 8009ba0:	08f00202 	.word	0x08f00202
 8009ba4:	20000d40 	.word	0x20000d40
 8009ba8:	08f00203 	.word	0x08f00203
 8009bac:	20000d3c 	.word	0x20000d3c
 8009bb0:	20000d38 	.word	0x20000d38
 8009bb4:	08f00205 	.word	0x08f00205
 8009bb8:	20000d34 	.word	0x20000d34
 8009bbc:	08f00206 	.word	0x08f00206
 8009bc0:	20000d30 	.word	0x20000d30
 8009bc4:	08f00207 	.word	0x08f00207
 8009bc8:	20000d2c 	.word	0x20000d2c
 8009bcc:	20000d28 	.word	0x20000d28
 8009bd0:	08f00301 	.word	0x08f00301
 8009bd4:	20000d24 	.word	0x20000d24
 8009bd8:	08f00f01 	.word	0x08f00f01
 8009bdc:	20000d20 	.word	0x20000d20
 8009be0:	08f00f02 	.word	0x08f00f02
 8009be4:	20000d1c 	.word	0x20000d1c
 8009be8:	08f00f03 	.word	0x08f00f03
 8009bec:	20000d18 	.word	0x20000d18
 8009bf0:	08f00f04 	.word	0x08f00f04
 8009bf4:	20000d14 	.word	0x20000d14
 8009bf8:	08f00f11 	.word	0x08f00f11
 8009bfc:	20000d10 	.word	0x20000d10
 8009c00:	08f00f12 	.word	0x08f00f12
 8009c04:	20000d0c 	.word	0x20000d0c

08009c08 <Config_Init>:
{
 8009c08:	b500      	push	{lr}
 8009c0a:	b085      	sub	sp, #20
    const osMutexAttr_t mutex_attr = {
 8009c0c:	4b08      	ldr	r3, [pc, #32]	@ (8009c30 <Config_Init+0x28>)
 8009c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009c10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    config_mutex = osMutexNew(&mutex_attr);
 8009c14:	4668      	mov	r0, sp
 8009c16:	f7ff fcb1 	bl	800957c <osMutexNew>
 8009c1a:	4b06      	ldr	r3, [pc, #24]	@ (8009c34 <Config_Init+0x2c>)
 8009c1c:	6018      	str	r0, [r3, #0]
    module_id = Config_ReadModuleIDFromFlash();
 8009c1e:	f7ff ff19 	bl	8009a54 <Config_ReadModuleIDFromFlash>
 8009c22:	4b05      	ldr	r3, [pc, #20]	@ (8009c38 <Config_Init+0x30>)
 8009c24:	7018      	strb	r0, [r3, #0]
    Config_InitCANIDs();
 8009c26:	f7ff ff63 	bl	8009af0 <Config_InitCANIDs>
}
 8009c2a:	b005      	add	sp, #20
 8009c2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c30:	08010220 	.word	0x08010220
 8009c34:	20000d54 	.word	0x20000d54
 8009c38:	20000d58 	.word	0x20000d58

08009c3c <Config_ProcessCANCommand>:
  * @retval None
  * @note   Sends acknowledgement message, then resets device if successful
  */
void Config_ProcessCANCommand(uint8_t *data, uint8_t length)
{
    if (data == NULL || length < 2) {
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d036      	beq.n	8009cae <Config_ProcessCANCommand+0x72>
 8009c40:	2901      	cmp	r1, #1
 8009c42:	d934      	bls.n	8009cae <Config_ProcessCANCommand+0x72>
{
 8009c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c46:	b083      	sub	sp, #12
        return;
    }
    
    uint8_t command = data[0];
 8009c48:	7804      	ldrb	r4, [r0, #0]
    uint8_t value = data[1];
 8009c4a:	7845      	ldrb	r5, [r0, #1]
    uint8_t ack_data[8] = {0};
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	9301      	str	r3, [sp, #4]
    uint8_t status = CONFIG_STATUS_FAIL;
    
    switch (command) {
 8009c52:	2c01      	cmp	r4, #1
 8009c54:	d001      	beq.n	8009c5a <Config_ProcessCANCommand+0x1e>
            
        default:
            // Unknown command, ignore (no ACK sent)
            break;
    }
}
 8009c56:	b003      	add	sp, #12
 8009c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint8_t old_module_id = Config_GetModuleID();
 8009c5a:	f7ff fee5 	bl	8009a28 <Config_GetModuleID>
 8009c5e:	4606      	mov	r6, r0
            int8_t result = Config_SetModuleID(value);
 8009c60:	4628      	mov	r0, r5
 8009c62:	f7ff ff3b 	bl	8009adc <Config_SetModuleID>
            if (result == 0) {
 8009c66:	4607      	mov	r7, r0
 8009c68:	b9f8      	cbnz	r0, 8009caa <Config_ProcessCANCommand+0x6e>
                status = CONFIG_STATUS_RESET_REQUIRED; // Success - reset needed
 8009c6a:	2302      	movs	r3, #2
            ack_data[0] = command;
 8009c6c:	f88d 4000 	strb.w	r4, [sp]
            ack_data[1] = status;
 8009c70:	f88d 3001 	strb.w	r3, [sp, #1]
            ack_data[2] = old_module_id;
 8009c74:	f88d 6002 	strb.w	r6, [sp, #2]
            ack_data[3] = value;
 8009c78:	f88d 5003 	strb.w	r5, [sp, #3]
            ack_data[4] = 0x00;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f88d 3004 	strb.w	r3, [sp, #4]
            ack_data[5] = 0x00;
 8009c82:	f88d 3005 	strb.w	r3, [sp, #5]
            ack_data[6] = 0x00;
 8009c86:	f88d 3006 	strb.w	r3, [sp, #6]
            ack_data[7] = 0x00;
 8009c8a:	f88d 3007 	strb.w	r3, [sp, #7]
            CAN_SendMessage(CAN_CONFIG_ACK_ID, ack_data, 8, 1);
 8009c8e:	2301      	movs	r3, #1
 8009c90:	2208      	movs	r2, #8
 8009c92:	4669      	mov	r1, sp
 8009c94:	4806      	ldr	r0, [pc, #24]	@ (8009cb0 <Config_ProcessCANCommand+0x74>)
 8009c96:	6800      	ldr	r0, [r0, #0]
 8009c98:	f7fe fef2 	bl	8008a80 <CAN_SendMessage>
            if (result == 0) {
 8009c9c:	2f00      	cmp	r7, #0
 8009c9e:	d1da      	bne.n	8009c56 <Config_ProcessCANCommand+0x1a>
                osDelay(100); // Give time for CAN message to transmit
 8009ca0:	2064      	movs	r0, #100	@ 0x64
 8009ca2:	f7ff fc5d 	bl	8009560 <osDelay>
                NVIC_SystemReset(); // Reset the microcontroller
 8009ca6:	f7ff fead 	bl	8009a04 <__NVIC_SystemReset>
                status = CONFIG_STATUS_FAIL;
 8009caa:	4623      	mov	r3, r4
 8009cac:	e7de      	b.n	8009c6c <Config_ProcessCANCommand+0x30>
 8009cae:	4770      	bx	lr
 8009cb0:	20000d20 	.word	0x20000d20

08009cb4 <RotateByteBits>:
  * @param  rotation_index: Pointer to rotation index for this byte
  * @retval Rotated byte with only one bit set
  */
static uint8_t RotateByteBits(uint8_t byte_value, uint8_t *rotation_index)
{
    if (byte_value == 0) {
 8009cb4:	4684      	mov	ip, r0
 8009cb6:	b110      	cbz	r0, 8009cbe <RotateByteBits+0xa>
        return 0;
    }
    
    // Count active bits in this byte
    uint8_t active_bit_count = 0;
    for (uint8_t bit = 0; bit < 8; bit++) {
 8009cb8:	2300      	movs	r3, #0
    uint8_t active_bit_count = 0;
 8009cba:	4618      	mov	r0, r3
 8009cbc:	e004      	b.n	8009cc8 <RotateByteBits+0x14>
        *rotation_index = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	700b      	strb	r3, [r1, #0]
        return 0;
 8009cc2:	4770      	bx	lr
    for (uint8_t bit = 0; bit < 8; bit++) {
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b07      	cmp	r3, #7
 8009cca:	d807      	bhi.n	8009cdc <RotateByteBits+0x28>
        if (byte_value & (1 << bit)) {
 8009ccc:	fa4c f203 	asr.w	r2, ip, r3
 8009cd0:	f012 0f01 	tst.w	r2, #1
 8009cd4:	d0f6      	beq.n	8009cc4 <RotateByteBits+0x10>
            active_bit_count++;
 8009cd6:	3001      	adds	r0, #1
 8009cd8:	b2c0      	uxtb	r0, r0
 8009cda:	e7f3      	b.n	8009cc4 <RotateByteBits+0x10>
        }
    }
    
    // Find the Nth active bit
    if (active_bit_count > 0) {
 8009cdc:	b9f0      	cbnz	r0, 8009d1c <RotateByteBits+0x68>
 8009cde:	4770      	bx	lr
                if (current_index == *rotation_index) {
                    // Update rotation for next call
                    *rotation_index = (*rotation_index + 1) % active_bit_count;
                    return (1 << bit);
                }
                current_index++;
 8009ce0:	3201      	adds	r2, #1
 8009ce2:	b2d2      	uxtb	r2, r2
        for (uint8_t bit = 0; bit < 8; bit++) {
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b07      	cmp	r3, #7
 8009cea:	d815      	bhi.n	8009d18 <RotateByteBits+0x64>
            if (byte_value & (1 << bit)) {
 8009cec:	461c      	mov	r4, r3
 8009cee:	fa4c fe03 	asr.w	lr, ip, r3
 8009cf2:	f01e 0f01 	tst.w	lr, #1
 8009cf6:	d0f5      	beq.n	8009ce4 <RotateByteBits+0x30>
                if (current_index == *rotation_index) {
 8009cf8:	f891 e000 	ldrb.w	lr, [r1]
 8009cfc:	4596      	cmp	lr, r2
 8009cfe:	d1ef      	bne.n	8009ce0 <RotateByteBits+0x2c>
                    *rotation_index = (*rotation_index + 1) % active_bit_count;
 8009d00:	f10e 0e01 	add.w	lr, lr, #1
 8009d04:	fb9e f3f0 	sdiv	r3, lr, r0
 8009d08:	fb00 ee13 	mls	lr, r0, r3, lr
 8009d0c:	f881 e000 	strb.w	lr, [r1]
                    return (1 << bit);
 8009d10:	2001      	movs	r0, #1
 8009d12:	40a0      	lsls	r0, r4
 8009d14:	b2c0      	uxtb	r0, r0
 8009d16:	e000      	b.n	8009d1a <RotateByteBits+0x66>
            }
        }
    }
    
    return 0;
 8009d18:	2000      	movs	r0, #0
}
 8009d1a:	bd10      	pop	{r4, pc}
        for (uint8_t bit = 0; bit < 8; bit++) {
 8009d1c:	2300      	movs	r3, #0
        uint8_t current_index = 0;
 8009d1e:	461a      	mov	r2, r3
        for (uint8_t bit = 0; bit < 8; bit++) {
 8009d20:	2b07      	cmp	r3, #7
 8009d22:	d801      	bhi.n	8009d28 <RotateByteBits+0x74>
{
 8009d24:	b510      	push	{r4, lr}
 8009d26:	e7e1      	b.n	8009cec <RotateByteBits+0x38>
    return 0;
 8009d28:	2000      	movs	r0, #0
}
 8009d2a:	4770      	bx	lr

08009d2c <ErrorMgr_Init>:
{
 8009d2c:	b510      	push	{r4, lr}
    memset(&error_mgr, 0, sizeof(Error_Manager_t));
 8009d2e:	4c0a      	ldr	r4, [pc, #40]	@ (8009d58 <ErrorMgr_Init+0x2c>)
 8009d30:	2300      	movs	r3, #0
 8009d32:	6023      	str	r3, [r4, #0]
 8009d34:	6063      	str	r3, [r4, #4]
 8009d36:	60a3      	str	r3, [r4, #8]
 8009d38:	60e3      	str	r3, [r4, #12]
 8009d3a:	6123      	str	r3, [r4, #16]
    error_mgr.last_heartbeat = osKernelGetTickCount();
 8009d3c:	f7ff fbac 	bl	8009498 <osKernelGetTickCount>
 8009d40:	6120      	str	r0, [r4, #16]
    error_mutex = osMutexNew(&error_mutex_attributes);
 8009d42:	4806      	ldr	r0, [pc, #24]	@ (8009d5c <ErrorMgr_Init+0x30>)
 8009d44:	f7ff fc1a 	bl	800957c <osMutexNew>
 8009d48:	4b05      	ldr	r3, [pc, #20]	@ (8009d60 <ErrorMgr_Init+0x34>)
 8009d4a:	6018      	str	r0, [r3, #0]
    if (error_mutex == NULL) {
 8009d4c:	b108      	cbz	r0, 8009d52 <ErrorMgr_Init+0x26>
    return HAL_OK;
 8009d4e:	2000      	movs	r0, #0
}
 8009d50:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8009d52:	2001      	movs	r0, #1
 8009d54:	e7fc      	b.n	8009d50 <ErrorMgr_Init+0x24>
 8009d56:	bf00      	nop
 8009d58:	20000d64 	.word	0x20000d64
 8009d5c:	08010320 	.word	0x08010320
 8009d60:	20000d60 	.word	0x20000d60

08009d64 <ErrorMgr_SetError>:
{
 8009d64:	b510      	push	{r4, lr}
 8009d66:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009d68:	f04f 31ff 	mov.w	r1, #4294967295
 8009d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8009da4 <ErrorMgr_SetError+0x40>)
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	f7ff fc4f 	bl	8009612 <osMutexAcquire>
 8009d74:	b9a0      	cbnz	r0, 8009da0 <ErrorMgr_SetError+0x3c>
        if (!(error_mgr.error_flags & error_flag)) {
 8009d76:	4b0c      	ldr	r3, [pc, #48]	@ (8009da8 <ErrorMgr_SetError+0x44>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4223      	tst	r3, r4
 8009d7c:	d109      	bne.n	8009d92 <ErrorMgr_SetError+0x2e>
            error_mgr.fault_count++;
 8009d7e:	490a      	ldr	r1, [pc, #40]	@ (8009da8 <ErrorMgr_SetError+0x44>)
 8009d80:	7a4a      	ldrb	r2, [r1, #9]
 8009d82:	3201      	adds	r2, #1
 8009d84:	724a      	strb	r2, [r1, #9]
            if (error_flag & (ERROR_OVER_TEMP | ERROR_UNDER_VOLTAGE | 
 8009d86:	4a09      	ldr	r2, [pc, #36]	@ (8009dac <ErrorMgr_SetError+0x48>)
 8009d88:	4214      	tst	r4, r2
 8009d8a:	d002      	beq.n	8009d92 <ErrorMgr_SetError+0x2e>
                error_mgr.state = BMS_STATE_ERROR;
 8009d8c:	460a      	mov	r2, r1
 8009d8e:	2105      	movs	r1, #5
 8009d90:	7211      	strb	r1, [r2, #8]
        error_mgr.error_flags |= error_flag;
 8009d92:	4323      	orrs	r3, r4
 8009d94:	4a04      	ldr	r2, [pc, #16]	@ (8009da8 <ErrorMgr_SetError+0x44>)
 8009d96:	6013      	str	r3, [r2, #0]
        osMutexRelease(error_mutex);
 8009d98:	4b02      	ldr	r3, [pc, #8]	@ (8009da4 <ErrorMgr_SetError+0x40>)
 8009d9a:	6818      	ldr	r0, [r3, #0]
 8009d9c:	f7ff fc68 	bl	8009670 <osMutexRelease>
}
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	bf00      	nop
 8009da4:	20000d60 	.word	0x20000d60
 8009da8:	20000d64 	.word	0x20000d64
 8009dac:	00080301 	.word	0x00080301

08009db0 <ErrorMgr_ClearError>:
{
 8009db0:	b510      	push	{r4, lr}
 8009db2:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009db4:	f04f 31ff 	mov.w	r1, #4294967295
 8009db8:	4b1a      	ldr	r3, [pc, #104]	@ (8009e24 <ErrorMgr_ClearError+0x74>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	f7ff fc29 	bl	8009612 <osMutexAcquire>
 8009dc0:	b980      	cbnz	r0, 8009de4 <ErrorMgr_ClearError+0x34>
        if (error_mgr.error_flags & error_flag) {
 8009dc2:	4b19      	ldr	r3, [pc, #100]	@ (8009e28 <ErrorMgr_ClearError+0x78>)
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	ea10 0c04 	ands.w	ip, r0, r4
 8009dca:	d118      	bne.n	8009dfe <ErrorMgr_ClearError+0x4e>
        error_mgr.error_flags &= ~error_flag;
 8009dcc:	ea20 0004 	bic.w	r0, r0, r4
 8009dd0:	4b15      	ldr	r3, [pc, #84]	@ (8009e28 <ErrorMgr_ClearError+0x78>)
 8009dd2:	6018      	str	r0, [r3, #0]
        if (error_mgr.error_flags == 0 && error_mgr.state == BMS_STATE_ERROR) {
 8009dd4:	b910      	cbnz	r0, 8009ddc <ErrorMgr_ClearError+0x2c>
 8009dd6:	7a1b      	ldrb	r3, [r3, #8]
 8009dd8:	2b05      	cmp	r3, #5
 8009dda:	d01f      	beq.n	8009e1c <ErrorMgr_ClearError+0x6c>
        osMutexRelease(error_mutex);
 8009ddc:	4b11      	ldr	r3, [pc, #68]	@ (8009e24 <ErrorMgr_ClearError+0x74>)
 8009dde:	6818      	ldr	r0, [r3, #0]
 8009de0:	f7ff fc46 	bl	8009670 <osMutexRelease>
}
 8009de4:	bd10      	pop	{r4, pc}
            for (uint8_t bit = 0; bit < 32; bit++) {
 8009de6:	3301      	adds	r3, #1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b1f      	cmp	r3, #31
 8009dec:	d80a      	bhi.n	8009e04 <ErrorMgr_ClearError+0x54>
                if (cleared_bits & (1 << bit)) {
 8009dee:	2201      	movs	r2, #1
 8009df0:	409a      	lsls	r2, r3
 8009df2:	ea1c 0f02 	tst.w	ip, r2
 8009df6:	d0f6      	beq.n	8009de6 <ErrorMgr_ClearError+0x36>
                    cleared_count++;
 8009df8:	3101      	adds	r1, #1
 8009dfa:	b2c9      	uxtb	r1, r1
 8009dfc:	e7f3      	b.n	8009de6 <ErrorMgr_ClearError+0x36>
            for (uint8_t bit = 0; bit < 32; bit++) {
 8009dfe:	2300      	movs	r3, #0
            uint8_t cleared_count = 0;
 8009e00:	4619      	mov	r1, r3
 8009e02:	e7f2      	b.n	8009dea <ErrorMgr_ClearError+0x3a>
            if (error_mgr.fault_count >= cleared_count) {
 8009e04:	4b08      	ldr	r3, [pc, #32]	@ (8009e28 <ErrorMgr_ClearError+0x78>)
 8009e06:	7a5b      	ldrb	r3, [r3, #9]
 8009e08:	428b      	cmp	r3, r1
 8009e0a:	d303      	bcc.n	8009e14 <ErrorMgr_ClearError+0x64>
                error_mgr.fault_count -= cleared_count;
 8009e0c:	1a5b      	subs	r3, r3, r1
 8009e0e:	4a06      	ldr	r2, [pc, #24]	@ (8009e28 <ErrorMgr_ClearError+0x78>)
 8009e10:	7253      	strb	r3, [r2, #9]
 8009e12:	e7db      	b.n	8009dcc <ErrorMgr_ClearError+0x1c>
                error_mgr.fault_count = 0;  // Safety check
 8009e14:	4b04      	ldr	r3, [pc, #16]	@ (8009e28 <ErrorMgr_ClearError+0x78>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	725a      	strb	r2, [r3, #9]
 8009e1a:	e7d7      	b.n	8009dcc <ErrorMgr_ClearError+0x1c>
            error_mgr.state = BMS_STATE_IDLE;
 8009e1c:	4b02      	ldr	r3, [pc, #8]	@ (8009e28 <ErrorMgr_ClearError+0x78>)
 8009e1e:	2201      	movs	r2, #1
 8009e20:	721a      	strb	r2, [r3, #8]
 8009e22:	e7db      	b.n	8009ddc <ErrorMgr_ClearError+0x2c>
 8009e24:	20000d60 	.word	0x20000d60
 8009e28:	20000d64 	.word	0x20000d64

08009e2c <ErrorMgr_SetWarning>:
{
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009e30:	f04f 31ff 	mov.w	r1, #4294967295
 8009e34:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <ErrorMgr_SetWarning+0x28>)
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	f7ff fbeb 	bl	8009612 <osMutexAcquire>
 8009e3c:	b100      	cbz	r0, 8009e40 <ErrorMgr_SetWarning+0x14>
}
 8009e3e:	bd10      	pop	{r4, pc}
        error_mgr.warning_flags |= warning_flag;
 8009e40:	4a05      	ldr	r2, [pc, #20]	@ (8009e58 <ErrorMgr_SetWarning+0x2c>)
 8009e42:	6853      	ldr	r3, [r2, #4]
 8009e44:	4323      	orrs	r3, r4
 8009e46:	6053      	str	r3, [r2, #4]
        osMutexRelease(error_mutex);
 8009e48:	4b02      	ldr	r3, [pc, #8]	@ (8009e54 <ErrorMgr_SetWarning+0x28>)
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	f7ff fc10 	bl	8009670 <osMutexRelease>
}
 8009e50:	e7f5      	b.n	8009e3e <ErrorMgr_SetWarning+0x12>
 8009e52:	bf00      	nop
 8009e54:	20000d60 	.word	0x20000d60
 8009e58:	20000d64 	.word	0x20000d64

08009e5c <ErrorMgr_ClearWarning>:
{
 8009e5c:	b510      	push	{r4, lr}
 8009e5e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009e60:	f04f 31ff 	mov.w	r1, #4294967295
 8009e64:	4b07      	ldr	r3, [pc, #28]	@ (8009e84 <ErrorMgr_ClearWarning+0x28>)
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	f7ff fbd3 	bl	8009612 <osMutexAcquire>
 8009e6c:	b100      	cbz	r0, 8009e70 <ErrorMgr_ClearWarning+0x14>
}
 8009e6e:	bd10      	pop	{r4, pc}
        error_mgr.warning_flags &= ~warning_flag;
 8009e70:	4a05      	ldr	r2, [pc, #20]	@ (8009e88 <ErrorMgr_ClearWarning+0x2c>)
 8009e72:	6853      	ldr	r3, [r2, #4]
 8009e74:	ea23 0304 	bic.w	r3, r3, r4
 8009e78:	6053      	str	r3, [r2, #4]
        osMutexRelease(error_mutex);
 8009e7a:	4b02      	ldr	r3, [pc, #8]	@ (8009e84 <ErrorMgr_ClearWarning+0x28>)
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	f7ff fbf7 	bl	8009670 <osMutexRelease>
}
 8009e82:	e7f4      	b.n	8009e6e <ErrorMgr_ClearWarning+0x12>
 8009e84:	20000d60 	.word	0x20000d60
 8009e88:	20000d64 	.word	0x20000d64

08009e8c <ErrorMgr_SetState>:
{
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009e90:	f04f 31ff 	mov.w	r1, #4294967295
 8009e94:	4b0d      	ldr	r3, [pc, #52]	@ (8009ecc <ErrorMgr_SetState+0x40>)
 8009e96:	6818      	ldr	r0, [r3, #0]
 8009e98:	f7ff fbbb 	bl	8009612 <osMutexAcquire>
 8009e9c:	b980      	cbnz	r0, 8009ec0 <ErrorMgr_SetState+0x34>
        if (error_mgr.state == BMS_STATE_ERROR && error_mgr.error_flags != 0) {
 8009e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ed0 <ErrorMgr_SetState+0x44>)
 8009ea0:	7a1b      	ldrb	r3, [r3, #8]
 8009ea2:	2b05      	cmp	r3, #5
 8009ea4:	d106      	bne.n	8009eb4 <ErrorMgr_SetState+0x28>
 8009ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ed0 <ErrorMgr_SetState+0x44>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	b11b      	cbz	r3, 8009eb4 <ErrorMgr_SetState+0x28>
            if (state != BMS_STATE_ERROR && state != BMS_STATE_SHUTDOWN) {
 8009eac:	1f63      	subs	r3, r4, #5
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d806      	bhi.n	8009ec2 <ErrorMgr_SetState+0x36>
        error_mgr.state = state;
 8009eb4:	4b06      	ldr	r3, [pc, #24]	@ (8009ed0 <ErrorMgr_SetState+0x44>)
 8009eb6:	721c      	strb	r4, [r3, #8]
        osMutexRelease(error_mutex);
 8009eb8:	4b04      	ldr	r3, [pc, #16]	@ (8009ecc <ErrorMgr_SetState+0x40>)
 8009eba:	6818      	ldr	r0, [r3, #0]
 8009ebc:	f7ff fbd8 	bl	8009670 <osMutexRelease>
}
 8009ec0:	bd10      	pop	{r4, pc}
                osMutexRelease(error_mutex);
 8009ec2:	4b02      	ldr	r3, [pc, #8]	@ (8009ecc <ErrorMgr_SetState+0x40>)
 8009ec4:	6818      	ldr	r0, [r3, #0]
 8009ec6:	f7ff fbd3 	bl	8009670 <osMutexRelease>
                return;
 8009eca:	e7f9      	b.n	8009ec0 <ErrorMgr_SetState+0x34>
 8009ecc:	20000d60 	.word	0x20000d60
 8009ed0:	20000d64 	.word	0x20000d64

08009ed4 <ErrorMgr_GetStatus>:
    static uint8_t byte0_rotation = 0;
    static uint8_t byte1_rotation = 0;
    static uint8_t byte2_rotation = 0;
    static uint8_t byte3_rotation = 0;
    
    if (mgr == NULL) {
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d032      	beq.n	8009f3e <ErrorMgr_GetStatus+0x6a>
{
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4604      	mov	r4, r0
        return;
    }

    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009edc:	f04f 31ff 	mov.w	r1, #4294967295
 8009ee0:	4b17      	ldr	r3, [pc, #92]	@ (8009f40 <ErrorMgr_GetStatus+0x6c>)
 8009ee2:	6818      	ldr	r0, [r3, #0]
 8009ee4:	f7ff fb95 	bl	8009612 <osMutexAcquire>
 8009ee8:	b100      	cbz	r0, 8009eec <ErrorMgr_GetStatus+0x18>
        error_bytes[2] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 16) & 0xFF), &byte2_rotation);
        error_bytes[3] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 24) & 0xFF), &byte3_rotation);
        
        osMutexRelease(error_mutex);
    }
}/**
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(mgr, &error_mgr, sizeof(Error_Manager_t));
 8009eec:	4d15      	ldr	r5, [pc, #84]	@ (8009f44 <ErrorMgr_GetStatus+0x70>)
 8009eee:	46ac      	mov	ip, r5
 8009ef0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ef4:	6020      	str	r0, [r4, #0]
 8009ef6:	6061      	str	r1, [r4, #4]
 8009ef8:	60a2      	str	r2, [r4, #8]
 8009efa:	60e3      	str	r3, [r4, #12]
 8009efc:	f8dc 0000 	ldr.w	r0, [ip]
 8009f00:	6120      	str	r0, [r4, #16]
        if (error_mgr.fault_count > 0) {
 8009f02:	7a6b      	ldrb	r3, [r5, #9]
 8009f04:	b10b      	cbz	r3, 8009f0a <ErrorMgr_GetStatus+0x36>
            mgr->state = BMS_STATE_ERROR;
 8009f06:	2305      	movs	r3, #5
 8009f08:	7223      	strb	r3, [r4, #8]
        error_bytes[0] = RotateByteBits((uint8_t)(error_mgr.error_flags & 0xFF), &byte0_rotation);
 8009f0a:	4d0e      	ldr	r5, [pc, #56]	@ (8009f44 <ErrorMgr_GetStatus+0x70>)
 8009f0c:	490e      	ldr	r1, [pc, #56]	@ (8009f48 <ErrorMgr_GetStatus+0x74>)
 8009f0e:	7828      	ldrb	r0, [r5, #0]
 8009f10:	f7ff fed0 	bl	8009cb4 <RotateByteBits>
 8009f14:	7020      	strb	r0, [r4, #0]
        error_bytes[1] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 8) & 0xFF), &byte1_rotation);
 8009f16:	490d      	ldr	r1, [pc, #52]	@ (8009f4c <ErrorMgr_GetStatus+0x78>)
 8009f18:	7868      	ldrb	r0, [r5, #1]
 8009f1a:	f7ff fecb 	bl	8009cb4 <RotateByteBits>
 8009f1e:	7060      	strb	r0, [r4, #1]
        error_bytes[2] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 16) & 0xFF), &byte2_rotation);
 8009f20:	490b      	ldr	r1, [pc, #44]	@ (8009f50 <ErrorMgr_GetStatus+0x7c>)
 8009f22:	78a8      	ldrb	r0, [r5, #2]
 8009f24:	f7ff fec6 	bl	8009cb4 <RotateByteBits>
 8009f28:	70a0      	strb	r0, [r4, #2]
        error_bytes[3] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 24) & 0xFF), &byte3_rotation);
 8009f2a:	490a      	ldr	r1, [pc, #40]	@ (8009f54 <ErrorMgr_GetStatus+0x80>)
 8009f2c:	78e8      	ldrb	r0, [r5, #3]
 8009f2e:	f7ff fec1 	bl	8009cb4 <RotateByteBits>
 8009f32:	70e0      	strb	r0, [r4, #3]
        osMutexRelease(error_mutex);
 8009f34:	4b02      	ldr	r3, [pc, #8]	@ (8009f40 <ErrorMgr_GetStatus+0x6c>)
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	f7ff fb9a 	bl	8009670 <osMutexRelease>
 8009f3c:	e7d5      	b.n	8009eea <ErrorMgr_GetStatus+0x16>
 8009f3e:	4770      	bx	lr
 8009f40:	20000d60 	.word	0x20000d60
 8009f44:	20000d64 	.word	0x20000d64
 8009f48:	20000d5c 	.word	0x20000d5c
 8009f4c:	20000d5b 	.word	0x20000d5b
 8009f50:	20000d5a 	.word	0x20000d5a
 8009f54:	20000d59 	.word	0x20000d59

08009f58 <ErrorMgr_UpdateUptime>:
  * @brief  Update system uptime (call every second)
  * @retval None
  */
void ErrorMgr_UpdateUptime(void)
{
 8009f58:	b508      	push	{r3, lr}
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8009f5e:	4b07      	ldr	r3, [pc, #28]	@ (8009f7c <ErrorMgr_UpdateUptime+0x24>)
 8009f60:	6818      	ldr	r0, [r3, #0]
 8009f62:	f7ff fb56 	bl	8009612 <osMutexAcquire>
 8009f66:	b100      	cbz	r0, 8009f6a <ErrorMgr_UpdateUptime+0x12>
        error_mgr.uptime_seconds++;
        osMutexRelease(error_mutex);
    }
}
 8009f68:	bd08      	pop	{r3, pc}
        error_mgr.uptime_seconds++;
 8009f6a:	4a05      	ldr	r2, [pc, #20]	@ (8009f80 <ErrorMgr_UpdateUptime+0x28>)
 8009f6c:	68d3      	ldr	r3, [r2, #12]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	60d3      	str	r3, [r2, #12]
        osMutexRelease(error_mutex);
 8009f72:	4b02      	ldr	r3, [pc, #8]	@ (8009f7c <ErrorMgr_UpdateUptime+0x24>)
 8009f74:	6818      	ldr	r0, [r3, #0]
 8009f76:	f7ff fb7b 	bl	8009670 <osMutexRelease>
}
 8009f7a:	e7f5      	b.n	8009f68 <ErrorMgr_UpdateUptime+0x10>
 8009f7c:	20000d60 	.word	0x20000d60
 8009f80:	20000d64 	.word	0x20000d64

08009f84 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f84:	4a13      	ldr	r2, [pc, #76]	@ (8009fd4 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f86:	f012 0f07 	tst.w	r2, #7
 8009f8a:	d01f      	beq.n	8009fcc <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f8c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f8e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f92:	f5c1 533b 	rsb	r3, r1, #11968	@ 0x2ec0
 8009f96:	3320      	adds	r3, #32
 8009f98:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f9a:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f9c:	480e      	ldr	r0, [pc, #56]	@ (8009fd8 <prvHeapInit+0x54>)
 8009f9e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fa4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009fa6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fa8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8009fac:	480b      	ldr	r0, [pc, #44]	@ (8009fdc <prvHeapInit+0x58>)
 8009fae:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009fb0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fb2:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fb4:	1a99      	subs	r1, r3, r2
 8009fb6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fb8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fba:	4b09      	ldr	r3, [pc, #36]	@ (8009fe0 <prvHeapInit+0x5c>)
 8009fbc:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fbe:	4b09      	ldr	r3, [pc, #36]	@ (8009fe4 <prvHeapInit+0x60>)
 8009fc0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fc2:	4b09      	ldr	r3, [pc, #36]	@ (8009fe8 <prvHeapInit+0x64>)
 8009fc4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009fc8:	601a      	str	r2, [r3, #0]
}
 8009fca:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fcc:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8009fd0:	e7e4      	b.n	8009f9c <prvHeapInit+0x18>
 8009fd2:	bf00      	nop
 8009fd4:	20000d98 	.word	0x20000d98
 8009fd8:	20000d90 	.word	0x20000d90
 8009fdc:	20000d8c 	.word	0x20000d8c
 8009fe0:	20000d84 	.word	0x20000d84
 8009fe4:	20000d88 	.word	0x20000d88
 8009fe8:	20000d78 	.word	0x20000d78

08009fec <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fec:	4b16      	ldr	r3, [pc, #88]	@ (800a048 <prvInsertBlockIntoFreeList+0x5c>)
 8009fee:	461a      	mov	r2, r3
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4283      	cmp	r3, r0
 8009ff4:	d3fb      	bcc.n	8009fee <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ff6:	6851      	ldr	r1, [r2, #4]
 8009ff8:	eb02 0c01 	add.w	ip, r2, r1
 8009ffc:	4584      	cmp	ip, r0
 8009ffe:	d009      	beq.n	800a014 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a000:	6841      	ldr	r1, [r0, #4]
 800a002:	eb00 0c01 	add.w	ip, r0, r1
 800a006:	4563      	cmp	r3, ip
 800a008:	d009      	beq.n	800a01e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a00a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a00c:	4290      	cmp	r0, r2
 800a00e:	d019      	beq.n	800a044 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a010:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800a012:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a014:	6840      	ldr	r0, [r0, #4]
 800a016:	4401      	add	r1, r0
 800a018:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800a01a:	4610      	mov	r0, r2
 800a01c:	e7f0      	b.n	800a000 <prvInsertBlockIntoFreeList+0x14>
{
 800a01e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a020:	4c0a      	ldr	r4, [pc, #40]	@ (800a04c <prvInsertBlockIntoFreeList+0x60>)
 800a022:	6824      	ldr	r4, [r4, #0]
 800a024:	42a3      	cmp	r3, r4
 800a026:	d00b      	beq.n	800a040 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	4419      	add	r1, r3
 800a02c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a02e:	6813      	ldr	r3, [r2, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800a034:	4290      	cmp	r0, r2
 800a036:	d000      	beq.n	800a03a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a038:	6010      	str	r0, [r2, #0]
	}
}
 800a03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a03e:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a040:	6004      	str	r4, [r0, #0]
 800a042:	e7f7      	b.n	800a034 <prvInsertBlockIntoFreeList+0x48>
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	20000d90 	.word	0x20000d90
 800a04c:	20000d8c 	.word	0x20000d8c

0800a050 <pvPortMalloc>:
{
 800a050:	b538      	push	{r3, r4, r5, lr}
 800a052:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a054:	f005 f99c 	bl	800f390 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a058:	4b3d      	ldr	r3, [pc, #244]	@ (800a150 <pvPortMalloc+0x100>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	b1ab      	cbz	r3, 800a08a <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a05e:	4b3d      	ldr	r3, [pc, #244]	@ (800a154 <pvPortMalloc+0x104>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	421c      	tst	r4, r3
 800a064:	d114      	bne.n	800a090 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800a066:	2c00      	cmp	r4, #0
 800a068:	d06a      	beq.n	800a140 <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
 800a06a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a06e:	f014 0f07 	tst.w	r4, #7
 800a072:	d002      	beq.n	800a07a <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a074:	f022 0207 	bic.w	r2, r2, #7
 800a078:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a07a:	b1d2      	cbz	r2, 800a0b2 <pvPortMalloc+0x62>
 800a07c:	4b36      	ldr	r3, [pc, #216]	@ (800a158 <pvPortMalloc+0x108>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4293      	cmp	r3, r2
 800a082:	d31a      	bcc.n	800a0ba <pvPortMalloc+0x6a>
				pxBlock = xStart.pxNextFreeBlock;
 800a084:	4935      	ldr	r1, [pc, #212]	@ (800a15c <pvPortMalloc+0x10c>)
 800a086:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a088:	e01d      	b.n	800a0c6 <pvPortMalloc+0x76>
			prvHeapInit();
 800a08a:	f7ff ff7b 	bl	8009f84 <prvHeapInit>
 800a08e:	e7e6      	b.n	800a05e <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 800a090:	f005 fa20 	bl	800f4d4 <xTaskResumeAll>
void *pvReturn = NULL;
 800a094:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
 800a096:	f000 f965 	bl	800a364 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a09a:	f015 0f07 	tst.w	r5, #7
 800a09e:	d055      	beq.n	800a14c <pvPortMalloc+0xfc>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	e7fe      	b.n	800a0b0 <pvPortMalloc+0x60>
	( void ) xTaskResumeAll();
 800a0b2:	f005 fa0f 	bl	800f4d4 <xTaskResumeAll>
void *pvReturn = NULL;
 800a0b6:	2500      	movs	r5, #0
 800a0b8:	e7ed      	b.n	800a096 <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800a0ba:	f005 fa0b 	bl	800f4d4 <xTaskResumeAll>
void *pvReturn = NULL;
 800a0be:	2500      	movs	r5, #0
 800a0c0:	e7e9      	b.n	800a096 <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800a0c2:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0c4:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0c6:	6863      	ldr	r3, [r4, #4]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d202      	bcs.n	800a0d2 <pvPortMalloc+0x82>
 800a0cc:	6823      	ldr	r3, [r4, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1f7      	bne.n	800a0c2 <pvPortMalloc+0x72>
				if( pxBlock != pxEnd )
 800a0d2:	4b1f      	ldr	r3, [pc, #124]	@ (800a150 <pvPortMalloc+0x100>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	42a3      	cmp	r3, r4
 800a0d8:	d014      	beq.n	800a104 <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0da:	680d      	ldr	r5, [r1, #0]
 800a0dc:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0e2:	6863      	ldr	r3, [r4, #4]
 800a0e4:	1a9b      	subs	r3, r3, r2
 800a0e6:	2b10      	cmp	r3, #16
 800a0e8:	d914      	bls.n	800a114 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0ea:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0ec:	f010 0f07 	tst.w	r0, #7
 800a0f0:	d00c      	beq.n	800a10c <pvPortMalloc+0xbc>
 800a0f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	e7fe      	b.n	800a102 <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800a104:	f005 f9e6 	bl	800f4d4 <xTaskResumeAll>
void *pvReturn = NULL;
 800a108:	2500      	movs	r5, #0
 800a10a:	e7c4      	b.n	800a096 <pvPortMalloc+0x46>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a10c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a10e:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a110:	f7ff ff6c 	bl	8009fec <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a114:	6862      	ldr	r2, [r4, #4]
 800a116:	4910      	ldr	r1, [pc, #64]	@ (800a158 <pvPortMalloc+0x108>)
 800a118:	680b      	ldr	r3, [r1, #0]
 800a11a:	1a9b      	subs	r3, r3, r2
 800a11c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a11e:	4910      	ldr	r1, [pc, #64]	@ (800a160 <pvPortMalloc+0x110>)
 800a120:	6809      	ldr	r1, [r1, #0]
 800a122:	428b      	cmp	r3, r1
 800a124:	d201      	bcs.n	800a12a <pvPortMalloc+0xda>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a126:	490e      	ldr	r1, [pc, #56]	@ (800a160 <pvPortMalloc+0x110>)
 800a128:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a12a:	4b0a      	ldr	r3, [pc, #40]	@ (800a154 <pvPortMalloc+0x104>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4313      	orrs	r3, r2
 800a130:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800a136:	4a0b      	ldr	r2, [pc, #44]	@ (800a164 <pvPortMalloc+0x114>)
 800a138:	6813      	ldr	r3, [r2, #0]
 800a13a:	3301      	adds	r3, #1
 800a13c:	6013      	str	r3, [r2, #0]
 800a13e:	e000      	b.n	800a142 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 800a140:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800a142:	f005 f9c7 	bl	800f4d4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800a146:	2d00      	cmp	r5, #0
 800a148:	d1a7      	bne.n	800a09a <pvPortMalloc+0x4a>
 800a14a:	e7a4      	b.n	800a096 <pvPortMalloc+0x46>
}
 800a14c:	4628      	mov	r0, r5
 800a14e:	bd38      	pop	{r3, r4, r5, pc}
 800a150:	20000d8c 	.word	0x20000d8c
 800a154:	20000d78 	.word	0x20000d78
 800a158:	20000d88 	.word	0x20000d88
 800a15c:	20000d90 	.word	0x20000d90
 800a160:	20000d84 	.word	0x20000d84
 800a164:	20000d80 	.word	0x20000d80

0800a168 <vPortFree>:
	if( pv != NULL )
 800a168:	2800      	cmp	r0, #0
 800a16a:	d034      	beq.n	800a1d6 <vPortFree+0x6e>
{
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a170:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a174:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a178:	4a17      	ldr	r2, [pc, #92]	@ (800a1d8 <vPortFree+0x70>)
 800a17a:	6812      	ldr	r2, [r2, #0]
 800a17c:	4213      	tst	r3, r2
 800a17e:	d108      	bne.n	800a192 <vPortFree+0x2a>
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	e7fe      	b.n	800a190 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a192:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a196:	b141      	cbz	r1, 800a1aa <vPortFree+0x42>
 800a198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	e7fe      	b.n	800a1a8 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1aa:	ea23 0302 	bic.w	r3, r3, r2
 800a1ae:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a1b2:	f005 f8ed 	bl	800f390 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1b6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a1ba:	4a08      	ldr	r2, [pc, #32]	@ (800a1dc <vPortFree+0x74>)
 800a1bc:	6813      	ldr	r3, [r2, #0]
 800a1be:	440b      	add	r3, r1
 800a1c0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f7ff ff12 	bl	8009fec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a1c8:	4a05      	ldr	r2, [pc, #20]	@ (800a1e0 <vPortFree+0x78>)
 800a1ca:	6813      	ldr	r3, [r2, #0]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800a1d0:	f005 f980 	bl	800f4d4 <xTaskResumeAll>
}
 800a1d4:	bd38      	pop	{r3, r4, r5, pc}
 800a1d6:	4770      	bx	lr
 800a1d8:	20000d78 	.word	0x20000d78
 800a1dc:	20000d88 	.word	0x20000d88
 800a1e0:	20000d7c 	.word	0x20000d7c

0800a1e4 <xPortGetFreeHeapSize>:
}
 800a1e4:	4b01      	ldr	r3, [pc, #4]	@ (800a1ec <xPortGetFreeHeapSize+0x8>)
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	20000d88 	.word	0x20000d88

0800a1f0 <xPortGetMinimumEverFreeHeapSize>:
}
 800a1f0:	4b01      	ldr	r3, [pc, #4]	@ (800a1f8 <xPortGetMinimumEverFreeHeapSize+0x8>)
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	20000d84 	.word	0x20000d84

0800a1fc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1fc:	f100 0308 	add.w	r3, r0, #8
 800a200:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a202:	f04f 32ff 	mov.w	r2, #4294967295
 800a206:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a208:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a20a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a20c:	2300      	movs	r3, #0
 800a20e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a210:	4770      	bx	lr

0800a212 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a216:	4770      	bx	lr

0800a218 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800a218:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a21a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a21c:	689a      	ldr	r2, [r3, #8]
 800a21e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a220:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a222:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a224:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800a226:	6803      	ldr	r3, [r0, #0]
 800a228:	3301      	adds	r3, #1
 800a22a:	6003      	str	r3, [r0, #0]
}
 800a22c:	4770      	bx	lr

0800a22e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a22e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a230:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a232:	f1b5 3fff 	cmp.w	r5, #4294967295
 800a236:	d011      	beq.n	800a25c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a238:	f100 0308 	add.w	r3, r0, #8
 800a23c:	461c      	mov	r4, r3
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	42aa      	cmp	r2, r5
 800a244:	d9fa      	bls.n	800a23c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a246:	6863      	ldr	r3, [r4, #4]
 800a248:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a24a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a24c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800a24e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a250:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800a252:	6803      	ldr	r3, [r0, #0]
 800a254:	3301      	adds	r3, #1
 800a256:	6003      	str	r3, [r0, #0]
}
 800a258:	bc30      	pop	{r4, r5}
 800a25a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800a25c:	6904      	ldr	r4, [r0, #16]
 800a25e:	e7f2      	b.n	800a246 <vListInsert+0x18>

0800a260 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a260:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a262:	6841      	ldr	r1, [r0, #4]
 800a264:	6882      	ldr	r2, [r0, #8]
 800a266:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a268:	6841      	ldr	r1, [r0, #4]
 800a26a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	4282      	cmp	r2, r0
 800a270:	d006      	beq.n	800a280 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a272:	2200      	movs	r2, #0
 800a274:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	3a01      	subs	r2, #1
 800a27a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a27c:	6818      	ldr	r0, [r3, #0]
}
 800a27e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a280:	6882      	ldr	r2, [r0, #8]
 800a282:	605a      	str	r2, [r3, #4]
 800a284:	e7f5      	b.n	800a272 <uxListRemove+0x12>
	...

0800a288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a28a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a28c:	ad03      	add	r5, sp, #12
 800a28e:	2400      	movs	r4, #0
 800a290:	9403      	str	r4, [sp, #12]
 800a292:	9404      	str	r4, [sp, #16]
 800a294:	9405      	str	r4, [sp, #20]
 800a296:	9406      	str	r4, [sp, #24]
 800a298:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a29a:	4b20      	ldr	r3, [pc, #128]	@ (800a31c <MX_GPIO_Init+0x94>)
 800a29c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a29e:	f042 0201 	orr.w	r2, r2, #1
 800a2a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a2a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2a6:	f002 0201 	and.w	r2, r2, #1
 800a2aa:	9201      	str	r2, [sp, #4]
 800a2ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2b0:	f042 0202 	orr.w	r2, r2, #2
 800a2b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a2b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2b8:	f003 0302 	and.w	r3, r3, #2
 800a2bc:	9302      	str	r3, [sp, #8]
 800a2be:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SIG1_Pin|MUX_SIG3_Pin|BMS_RESET_Pin, GPIO_PIN_RESET);
 800a2c0:	4e17      	ldr	r6, [pc, #92]	@ (800a320 <MX_GPIO_Init+0x98>)
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	2162      	movs	r1, #98	@ 0x62
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f002 fe98 	bl	800cffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SIG2_GPIO_Port, MUX_SIG2_Pin, GPIO_PIN_RESET);
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a2d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a2d6:	f002 fe91 	bl	800cffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_SIG1_Pin MUX_SIG3_Pin BMS_RESET_Pin */
  GPIO_InitStruct.Pin = MUX_SIG1_Pin|MUX_SIG3_Pin|BMS_RESET_Pin;
 800a2da:	2362      	movs	r3, #98	@ 0x62
 800a2dc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2de:	2701      	movs	r7, #1
 800a2e0:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2e2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2e4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f002 fdaf 	bl	800ce4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_SIG2_Pin */
  GPIO_InitStruct.Pin = MUX_SIG2_Pin;
 800a2ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2f2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2f4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2f8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(MUX_SIG2_GPIO_Port, &GPIO_InitStruct);
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a300:	f002 fda4 	bl	800ce4c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALERT_IN_Pin */
  GPIO_InitStruct.Pin = ALERT_IN_Pin;
 800a304:	2380      	movs	r3, #128	@ 0x80
 800a306:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800a308:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800a30c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a30e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ALERT_IN_GPIO_Port, &GPIO_InitStruct);
 800a310:	4629      	mov	r1, r5
 800a312:	4630      	mov	r0, r6
 800a314:	f002 fd9a 	bl	800ce4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800a318:	b009      	add	sp, #36	@ 0x24
 800a31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a31c:	40021000 	.word	0x40021000
 800a320:	48000400 	.word	0x48000400

0800a324 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a324:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a326:	2001      	movs	r0, #1
 800a328:	f7ff f91a 	bl	8009560 <osDelay>
  for(;;)
 800a32c:	e7fb      	b.n	800a326 <StartDefaultTask+0x2>

0800a32e <ReadBQBMS1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellVoltageBMS1 */
void ReadBQBMS1(void *argument)
{
 800a32e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellVoltageBMS1 */
  /* Call the BMS1 cell voltage monitoring task */
  BQ_MonitorTask(argument);
 800a330:	f7fe f9ee 	bl	8008710 <BQ_MonitorTask>
  /* USER CODE END ReadCellVoltageBMS1 */
}
 800a334:	bd08      	pop	{r3, pc}

0800a336 <ReadBQBMS2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellVoltageBMS2 */
void ReadBQBMS2(void *argument)
{
 800a336:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellVoltageBMS2 */
  /* Call the BMS2 cell voltage monitoring task */
  BQ_MonitorTask_BMS2(argument);
 800a338:	f7fe faa8 	bl	800888c <BQ_MonitorTask_BMS2>
  /* USER CODE END ReadCellVoltageBMS2 */
}
 800a33c:	bd08      	pop	{r3, pc}

0800a33e <ReadCellTemps>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellTemps */
void ReadCellTemps(void *argument)
{
 800a33e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellTemps */
  /* Call the cell temperature monitoring task */
  CellTemp_MonitorTask(argument);
 800a340:	f7fe ff82 	bl	8009248 <CellTemp_MonitorTask>
  /* USER CODE END ReadCellTemps */
}
 800a344:	bd08      	pop	{r3, pc}
	...

0800a348 <BMSResetHandlerTask>:
*        Using a dedicated task prevents blocking the CAN manager during
*        the 600ms reset sequence (500ms + 100ms delays).
*/
/* USER CODE END Header_BMSResetHandlerTask */
void BMSResetHandlerTask(void *argument)
{
 800a348:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BMSResetHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    // Wait indefinitely for reset semaphore signal
    if (osSemaphoreAcquire(BMSResetSemHandle, osWaitForever) == osOK)
 800a34a:	f04f 31ff 	mov.w	r1, #4294967295
 800a34e:	4b04      	ldr	r3, [pc, #16]	@ (800a360 <BMSResetHandlerTask+0x18>)
 800a350:	6818      	ldr	r0, [r3, #0]
 800a352:	f7ff fa0d 	bl	8009770 <osSemaphoreAcquire>
 800a356:	2800      	cmp	r0, #0
 800a358:	d1f7      	bne.n	800a34a <BMSResetHandlerTask+0x2>
    {
      // Perform the chip reset (blocks for 600ms total)
      BQ_ResetChips();
 800a35a:	f7fe fb1b 	bl	8008994 <BQ_ResetChips>
 800a35e:	e7f4      	b.n	800a34a <BMSResetHandlerTask+0x2>
 800a360:	20003c7c 	.word	0x20003c7c

0800a364 <vApplicationMallocFailedHook>:
{
 800a364:	b500      	push	{lr}
 800a366:	b083      	sub	sp, #12
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
    HAL_GPIO_TogglePin(GPIOB, MUX_SIG1_Pin);
 800a378:	2102      	movs	r1, #2
 800a37a:	4806      	ldr	r0, [pc, #24]	@ (800a394 <vApplicationMallocFailedHook+0x30>)
 800a37c:	f002 fe43 	bl	800d006 <HAL_GPIO_TogglePin>
    for(volatile uint32_t i = 0; i < 100000; i++);  // Busy wait
 800a380:	2300      	movs	r3, #0
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	9a01      	ldr	r2, [sp, #4]
 800a386:	4b04      	ldr	r3, [pc, #16]	@ (800a398 <vApplicationMallocFailedHook+0x34>)
 800a388:	429a      	cmp	r2, r3
 800a38a:	d8f5      	bhi.n	800a378 <vApplicationMallocFailedHook+0x14>
 800a38c:	9b01      	ldr	r3, [sp, #4]
 800a38e:	3301      	adds	r3, #1
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	e7f7      	b.n	800a384 <vApplicationMallocFailedHook+0x20>
 800a394:	48000400 	.word	0x48000400
 800a398:	0001869f 	.word	0x0001869f

0800a39c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a39c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800a39e:	6802      	ldr	r2, [r0, #0]
 800a3a0:	4b03      	ldr	r3, [pc, #12]	@ (800a3b0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d000      	beq.n	800a3a8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a3a6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800a3a8:	f001 f97e 	bl	800b6a8 <HAL_IncTick>
}
 800a3ac:	e7fb      	b.n	800a3a6 <HAL_TIM_PeriodElapsedCallback+0xa>
 800a3ae:	bf00      	nop
 800a3b0:	40001000 	.word	0x40001000

0800a3b4 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a3b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a3b6:	e7fe      	b.n	800a3b6 <Error_Handler+0x2>

0800a3b8 <MX_ADC1_Init>:
{
 800a3b8:	b500      	push	{lr}
 800a3ba:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	9302      	str	r3, [sp, #8]
 800a3c4:	9303      	str	r3, [sp, #12]
 800a3c6:	9304      	str	r3, [sp, #16]
 800a3c8:	9305      	str	r3, [sp, #20]
  hadc1.Instance = ADC1;
 800a3ca:	4818      	ldr	r0, [pc, #96]	@ (800a42c <MX_ADC1_Init+0x74>)
 800a3cc:	4a18      	ldr	r2, [pc, #96]	@ (800a430 <MX_ADC1_Init+0x78>)
 800a3ce:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a3d0:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a3d2:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a3d4:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a3d6:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a3d8:	2204      	movs	r2, #4
 800a3da:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a3dc:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a3de:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a3e4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a3e8:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a3ea:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a3ec:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a3f0:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800a3f2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a3f6:	f001 f997 	bl	800b728 <HAL_ADC_Init>
 800a3fa:	b998      	cbnz	r0, 800a424 <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_5;  // ADC1 (PA0) - first thermistor channel
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a434 <MX_ADC1_Init+0x7c>)
 800a3fe:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a400:	2306      	movs	r3, #6
 800a402:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;  // Longer sampling for high impedance thermistors
 800a404:	2307      	movs	r3, #7
 800a406:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a408:	237f      	movs	r3, #127	@ 0x7f
 800a40a:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a40c:	2304      	movs	r3, #4
 800a40e:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a414:	4669      	mov	r1, sp
 800a416:	4805      	ldr	r0, [pc, #20]	@ (800a42c <MX_ADC1_Init+0x74>)
 800a418:	f001 fac8 	bl	800b9ac <HAL_ADC_ConfigChannel>
 800a41c:	b920      	cbnz	r0, 800a428 <MX_ADC1_Init+0x70>
}
 800a41e:	b007      	add	sp, #28
 800a420:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a424:	f7ff ffc6 	bl	800a3b4 <Error_Handler>
    Error_Handler();
 800a428:	f7ff ffc4 	bl	800a3b4 <Error_Handler>
 800a42c:	20003d94 	.word	0x20003d94
 800a430:	50040000 	.word	0x50040000
 800a434:	14f00020 	.word	0x14f00020

0800a438 <MX_CAN1_Init>:
{
 800a438:	b500      	push	{lr}
 800a43a:	b08b      	sub	sp, #44	@ 0x2c
  hcan1.Instance = CAN1;
 800a43c:	4818      	ldr	r0, [pc, #96]	@ (800a4a0 <MX_CAN1_Init+0x68>)
 800a43e:	4b19      	ldr	r3, [pc, #100]	@ (800a4a4 <MX_CAN1_Init+0x6c>)
 800a440:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 10;
 800a442:	230a      	movs	r3, #10
 800a444:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800a446:	2300      	movs	r3, #0
 800a448:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a44a:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800a44c:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800a450:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800a452:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a456:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800a458:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800a45a:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800a45c:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800a45e:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800a460:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800a462:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800a464:	f001 fea5 	bl	800c1b2 <HAL_CAN_Init>
 800a468:	b9a8      	cbnz	r0, 800a496 <MX_CAN1_Init+0x5e>
  filterConfig.FilterBank = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	9305      	str	r3, [sp, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800a46e:	9306      	str	r3, [sp, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800a470:	2201      	movs	r2, #1
 800a472:	9207      	str	r2, [sp, #28]
  filterConfig.FilterIdHigh = 0x0000;
 800a474:	9300      	str	r3, [sp, #0]
  filterConfig.FilterIdLow = 0x0004;   // Only IDE bit set (extended ID)
 800a476:	2104      	movs	r1, #4
 800a478:	9101      	str	r1, [sp, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;  // Don't care about any ID bits
 800a47a:	9302      	str	r3, [sp, #8]
  filterConfig.FilterMaskIdLow = 0x0004;   // But we DO care about IDE bit (only extended)
 800a47c:	9103      	str	r1, [sp, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800a47e:	9304      	str	r3, [sp, #16]
  filterConfig.FilterActivation = ENABLE;
 800a480:	9208      	str	r2, [sp, #32]
  filterConfig.SlaveStartFilterBank = 14;
 800a482:	230e      	movs	r3, #14
 800a484:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &filterConfig) != HAL_OK)
 800a486:	4669      	mov	r1, sp
 800a488:	4805      	ldr	r0, [pc, #20]	@ (800a4a0 <MX_CAN1_Init+0x68>)
 800a48a:	f001 ff38 	bl	800c2fe <HAL_CAN_ConfigFilter>
 800a48e:	b920      	cbnz	r0, 800a49a <MX_CAN1_Init+0x62>
}
 800a490:	b00b      	add	sp, #44	@ 0x2c
 800a492:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a496:	f7ff ff8d 	bl	800a3b4 <Error_Handler>
    Error_Handler();
 800a49a:	f7ff ff8b 	bl	800a3b4 <Error_Handler>
 800a49e:	bf00      	nop
 800a4a0:	20003d6c 	.word	0x20003d6c
 800a4a4:	40006400 	.word	0x40006400

0800a4a8 <MX_CRC_Init>:
{
 800a4a8:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800a4aa:	4808      	ldr	r0, [pc, #32]	@ (800a4cc <MX_CRC_Init+0x24>)
 800a4ac:	4b08      	ldr	r3, [pc, #32]	@ (800a4d0 <MX_CRC_Init+0x28>)
 800a4ae:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a4b4:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800a4b6:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800a4b8:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a4be:	f002 faa7 	bl	800ca10 <HAL_CRC_Init>
 800a4c2:	b900      	cbnz	r0, 800a4c6 <MX_CRC_Init+0x1e>
}
 800a4c4:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a4c6:	f7ff ff75 	bl	800a3b4 <Error_Handler>
 800a4ca:	bf00      	nop
 800a4cc:	20003d48 	.word	0x20003d48
 800a4d0:	40023000 	.word	0x40023000

0800a4d4 <MX_I2C1_Init>:
{
 800a4d4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800a4d6:	4811      	ldr	r0, [pc, #68]	@ (800a51c <MX_I2C1_Init+0x48>)
 800a4d8:	4b11      	ldr	r3, [pc, #68]	@ (800a520 <MX_I2C1_Init+0x4c>)
 800a4da:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800a4dc:	4b11      	ldr	r3, [pc, #68]	@ (800a524 <MX_I2C1_Init+0x50>)
 800a4de:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a4e8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a4ea:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a4ec:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a4ee:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a4f0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a4f2:	f002 ff3c 	bl	800d36e <HAL_I2C_Init>
 800a4f6:	b950      	cbnz	r0, 800a50e <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	4808      	ldr	r0, [pc, #32]	@ (800a51c <MX_I2C1_Init+0x48>)
 800a4fc:	f003 f9cf 	bl	800d89e <HAL_I2CEx_ConfigAnalogFilter>
 800a500:	b938      	cbnz	r0, 800a512 <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a502:	2100      	movs	r1, #0
 800a504:	4805      	ldr	r0, [pc, #20]	@ (800a51c <MX_I2C1_Init+0x48>)
 800a506:	f003 f9f7 	bl	800d8f8 <HAL_I2CEx_ConfigDigitalFilter>
 800a50a:	b920      	cbnz	r0, 800a516 <MX_I2C1_Init+0x42>
}
 800a50c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a50e:	f7ff ff51 	bl	800a3b4 <Error_Handler>
    Error_Handler();
 800a512:	f7ff ff4f 	bl	800a3b4 <Error_Handler>
    Error_Handler();
 800a516:	f7ff ff4d 	bl	800a3b4 <Error_Handler>
 800a51a:	bf00      	nop
 800a51c:	20003cf4 	.word	0x20003cf4
 800a520:	40005400 	.word	0x40005400
 800a524:	00503d58 	.word	0x00503d58

0800a528 <MX_I2C3_Init>:
{
 800a528:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 800a52a:	4811      	ldr	r0, [pc, #68]	@ (800a570 <MX_I2C3_Init+0x48>)
 800a52c:	4b11      	ldr	r3, [pc, #68]	@ (800a574 <MX_I2C3_Init+0x4c>)
 800a52e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00503D58;
 800a530:	4b11      	ldr	r3, [pc, #68]	@ (800a578 <MX_I2C3_Init+0x50>)
 800a532:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a538:	2201      	movs	r2, #1
 800a53a:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a53c:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800a53e:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a540:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a542:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a544:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a546:	f002 ff12 	bl	800d36e <HAL_I2C_Init>
 800a54a:	b950      	cbnz	r0, 800a562 <MX_I2C3_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a54c:	2100      	movs	r1, #0
 800a54e:	4808      	ldr	r0, [pc, #32]	@ (800a570 <MX_I2C3_Init+0x48>)
 800a550:	f003 f9a5 	bl	800d89e <HAL_I2CEx_ConfigAnalogFilter>
 800a554:	b938      	cbnz	r0, 800a566 <MX_I2C3_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a556:	2100      	movs	r1, #0
 800a558:	4805      	ldr	r0, [pc, #20]	@ (800a570 <MX_I2C3_Init+0x48>)
 800a55a:	f003 f9cd 	bl	800d8f8 <HAL_I2CEx_ConfigDigitalFilter>
 800a55e:	b920      	cbnz	r0, 800a56a <MX_I2C3_Init+0x42>
}
 800a560:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a562:	f7ff ff27 	bl	800a3b4 <Error_Handler>
    Error_Handler();
 800a566:	f7ff ff25 	bl	800a3b4 <Error_Handler>
    Error_Handler();
 800a56a:	f7ff ff23 	bl	800a3b4 <Error_Handler>
 800a56e:	bf00      	nop
 800a570:	20003ca0 	.word	0x20003ca0
 800a574:	40005c00 	.word	0x40005c00
 800a578:	00503d58 	.word	0x00503d58

0800a57c <SystemClock_Config>:
{
 800a57c:	b500      	push	{lr}
 800a57e:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a580:	2244      	movs	r2, #68	@ 0x44
 800a582:	2100      	movs	r1, #0
 800a584:	a805      	add	r0, sp, #20
 800a586:	f005 fcbe 	bl	800ff06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a58a:	2300      	movs	r3, #0
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	9302      	str	r3, [sp, #8]
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a596:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a59a:	f003 fb67 	bl	800dc6c <HAL_PWREx_ControlVoltageScaling>
 800a59e:	bb18      	cbnz	r0, 800a5e8 <SystemClock_Config+0x6c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a5a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a5a8:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a5aa:	2210      	movs	r2, #16
 800a5ac:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a5ae:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a5b0:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800a5b2:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800a5b4:	2214      	movs	r2, #20
 800a5b6:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800a5b8:	2207      	movs	r2, #7
 800a5ba:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a5bc:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a5be:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a5c0:	a805      	add	r0, sp, #20
 800a5c2:	f003 fc37 	bl	800de34 <HAL_RCC_OscConfig>
 800a5c6:	b988      	cbnz	r0, 800a5ec <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a5c8:	230f      	movs	r3, #15
 800a5ca:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a5d4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a5d6:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a5d8:	2104      	movs	r1, #4
 800a5da:	4668      	mov	r0, sp
 800a5dc:	f003 ff60 	bl	800e4a0 <HAL_RCC_ClockConfig>
 800a5e0:	b930      	cbnz	r0, 800a5f0 <SystemClock_Config+0x74>
}
 800a5e2:	b017      	add	sp, #92	@ 0x5c
 800a5e4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a5e8:	f7ff fee4 	bl	800a3b4 <Error_Handler>
    Error_Handler();
 800a5ec:	f7ff fee2 	bl	800a3b4 <Error_Handler>
    Error_Handler();  
 800a5f0:	f7ff fee0 	bl	800a3b4 <Error_Handler>

0800a5f4 <main>:
{
 800a5f4:	b508      	push	{r3, lr}
 800a5f6:	b672      	cpsid	i
  SysTick->CTRL = 0;
 800a5f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	611a      	str	r2, [r3, #16]
  SysTick->LOAD = 0;
 800a600:	615a      	str	r2, [r3, #20]
  SysTick->VAL = 0;
 800a602:	619a      	str	r2, [r3, #24]
  HAL_Init();
 800a604:	f001 f841 	bl	800b68a <HAL_Init>
  SystemClock_Config();
 800a608:	f7ff ffb8 	bl	800a57c <SystemClock_Config>
  MX_GPIO_Init();
 800a60c:	f7ff fe3c 	bl	800a288 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a610:	f7ff fed2 	bl	800a3b8 <MX_ADC1_Init>
  MX_CAN1_Init();
 800a614:	f7ff ff10 	bl	800a438 <MX_CAN1_Init>
  MX_CRC_Init();
 800a618:	f7ff ff46 	bl	800a4a8 <MX_CRC_Init>
  MX_I2C1_Init();
 800a61c:	f7ff ff5a 	bl	800a4d4 <MX_I2C1_Init>
  MX_I2C3_Init();
 800a620:	f7ff ff82 	bl	800a528 <MX_I2C3_Init>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800a624:	217f      	movs	r1, #127	@ 0x7f
 800a626:	4831      	ldr	r0, [pc, #196]	@ (800a6ec <main+0xf8>)
 800a628:	f001 fd77 	bl	800c11a <HAL_ADCEx_Calibration_Start>
 800a62c:	b108      	cbz	r0, 800a632 <main+0x3e>
    Error_Handler();
 800a62e:	f7ff fec1 	bl	800a3b4 <Error_Handler>
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800a632:	482f      	ldr	r0, [pc, #188]	@ (800a6f0 <main+0xfc>)
 800a634:	f001 fee6 	bl	800c404 <HAL_CAN_Start>
 800a638:	b108      	cbz	r0, 800a63e <main+0x4a>
    Error_Handler();
 800a63a:	f7ff febb 	bl	800a3b4 <Error_Handler>
  osKernelInitialize();
 800a63e:	f7fe fefd 	bl	800943c <osKernelInitialize>
  I2C1Handle = osMutexNew(&I2C1_attributes);
 800a642:	482c      	ldr	r0, [pc, #176]	@ (800a6f4 <main+0x100>)
 800a644:	f7fe ff9a 	bl	800957c <osMutexNew>
 800a648:	4b2b      	ldr	r3, [pc, #172]	@ (800a6f8 <main+0x104>)
 800a64a:	6018      	str	r0, [r3, #0]
  I2C3Handle = osMutexNew(&I2C3_attributes);
 800a64c:	482b      	ldr	r0, [pc, #172]	@ (800a6fc <main+0x108>)
 800a64e:	f7fe ff95 	bl	800957c <osMutexNew>
 800a652:	4b2b      	ldr	r3, [pc, #172]	@ (800a700 <main+0x10c>)
 800a654:	6018      	str	r0, [r3, #0]
  CANHandle = osMutexNew(&CAN_attributes);
 800a656:	482b      	ldr	r0, [pc, #172]	@ (800a704 <main+0x110>)
 800a658:	f7fe ff90 	bl	800957c <osMutexNew>
 800a65c:	4b2a      	ldr	r3, [pc, #168]	@ (800a708 <main+0x114>)
 800a65e:	6018      	str	r0, [r3, #0]
  BMSResetSemHandle = osSemaphoreNew(1, 0, &BMSResetSem_attributes);
 800a660:	4a2a      	ldr	r2, [pc, #168]	@ (800a70c <main+0x118>)
 800a662:	2100      	movs	r1, #0
 800a664:	2001      	movs	r0, #1
 800a666:	f7ff f82a 	bl	80096be <osSemaphoreNew>
 800a66a:	4b29      	ldr	r3, [pc, #164]	@ (800a710 <main+0x11c>)
 800a66c:	6018      	str	r0, [r3, #0]
  if (BMSResetSemHandle == NULL)
 800a66e:	b130      	cbz	r0, 800a67e <main+0x8a>
  Config_Init();
 800a670:	f7ff faca 	bl	8009c08 <Config_Init>
  if (ErrorMgr_Init() != HAL_OK)
 800a674:	f7ff fb5a 	bl	8009d2c <ErrorMgr_Init>
 800a678:	b118      	cbz	r0, 800a682 <main+0x8e>
    Error_Handler();
 800a67a:	f7ff fe9b 	bl	800a3b4 <Error_Handler>
    Error_Handler();
 800a67e:	f7ff fe99 	bl	800a3b4 <Error_Handler>
  if (CAN_Manager_Init() != HAL_OK)
 800a682:	f7fe fa3d 	bl	8008b00 <CAN_Manager_Init>
 800a686:	b108      	cbz	r0, 800a68c <main+0x98>
    Error_Handler();
 800a688:	f7ff fe94 	bl	800a3b4 <Error_Handler>
  ErrorMgr_SetState(BMS_STATE_IDLE);
 800a68c:	2001      	movs	r0, #1
 800a68e:	f7ff fbfd 	bl	8009e8c <ErrorMgr_SetState>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800a692:	4a20      	ldr	r2, [pc, #128]	@ (800a714 <main+0x120>)
 800a694:	2100      	movs	r1, #0
 800a696:	4820      	ldr	r0, [pc, #128]	@ (800a718 <main+0x124>)
 800a698:	f7fe ff08 	bl	80094ac <osThreadNew>
 800a69c:	4b1f      	ldr	r3, [pc, #124]	@ (800a71c <main+0x128>)
 800a69e:	6018      	str	r0, [r3, #0]
  CellVoltageBMS1Handle = osThreadNew(ReadBQBMS1, NULL, &CellVoltageBMS1_attributes);
 800a6a0:	4a1f      	ldr	r2, [pc, #124]	@ (800a720 <main+0x12c>)
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	481f      	ldr	r0, [pc, #124]	@ (800a724 <main+0x130>)
 800a6a6:	f7fe ff01 	bl	80094ac <osThreadNew>
 800a6aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a728 <main+0x134>)
 800a6ac:	6018      	str	r0, [r3, #0]
  CellVoltageBMS2Handle = osThreadNew(ReadBQBMS2, NULL, &CellVoltageBMS2_attributes);
 800a6ae:	4a1f      	ldr	r2, [pc, #124]	@ (800a72c <main+0x138>)
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	481f      	ldr	r0, [pc, #124]	@ (800a730 <main+0x13c>)
 800a6b4:	f7fe fefa 	bl	80094ac <osThreadNew>
 800a6b8:	4b1e      	ldr	r3, [pc, #120]	@ (800a734 <main+0x140>)
 800a6ba:	6018      	str	r0, [r3, #0]
  CellTemperatureHandle = osThreadNew(ReadCellTemps, NULL, &CellTemperature_attributes);
 800a6bc:	4a1e      	ldr	r2, [pc, #120]	@ (800a738 <main+0x144>)
 800a6be:	2100      	movs	r1, #0
 800a6c0:	481e      	ldr	r0, [pc, #120]	@ (800a73c <main+0x148>)
 800a6c2:	f7fe fef3 	bl	80094ac <osThreadNew>
 800a6c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a740 <main+0x14c>)
 800a6c8:	6018      	str	r0, [r3, #0]
  CANManagerHandle = osThreadNew(CAN_ManagerTask, NULL, &CANManager_attributes);
 800a6ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a744 <main+0x150>)
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	481e      	ldr	r0, [pc, #120]	@ (800a748 <main+0x154>)
 800a6d0:	f7fe feec 	bl	80094ac <osThreadNew>
 800a6d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a74c <main+0x158>)
 800a6d6:	6018      	str	r0, [r3, #0]
  BMSResetHandlerHandle = osThreadNew(BMSResetHandlerTask, NULL, &BMSResetHandler_attributes);
 800a6d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a750 <main+0x15c>)
 800a6da:	2100      	movs	r1, #0
 800a6dc:	481d      	ldr	r0, [pc, #116]	@ (800a754 <main+0x160>)
 800a6de:	f7fe fee5 	bl	80094ac <osThreadNew>
 800a6e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a758 <main+0x164>)
 800a6e4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800a6e6:	f7fe febb 	bl	8009460 <osKernelStart>
  while (1)
 800a6ea:	e7fe      	b.n	800a6ea <main+0xf6>
 800a6ec:	20003d94 	.word	0x20003d94
 800a6f0:	20003d6c 	.word	0x20003d6c
 800a6f4:	08010384 	.word	0x08010384
 800a6f8:	20003c88 	.word	0x20003c88
 800a6fc:	08010374 	.word	0x08010374
 800a700:	20003c84 	.word	0x20003c84
 800a704:	08010364 	.word	0x08010364
 800a708:	20003c80 	.word	0x20003c80
 800a70c:	08010354 	.word	0x08010354
 800a710:	20003c7c 	.word	0x20003c7c
 800a714:	08010424 	.word	0x08010424
 800a718:	0800a325 	.word	0x0800a325
 800a71c:	20003c9c 	.word	0x20003c9c
 800a720:	08010400 	.word	0x08010400
 800a724:	0800a32f 	.word	0x0800a32f
 800a728:	20003c98 	.word	0x20003c98
 800a72c:	080103dc 	.word	0x080103dc
 800a730:	0800a337 	.word	0x0800a337
 800a734:	20003c94 	.word	0x20003c94
 800a738:	080103b8 	.word	0x080103b8
 800a73c:	0800a33f 	.word	0x0800a33f
 800a740:	20003c90 	.word	0x20003c90
 800a744:	08010394 	.word	0x08010394
 800a748:	08008ea9 	.word	0x08008ea9
 800a74c:	20003c8c 	.word	0x20003c8c
 800a750:	08010330 	.word	0x08010330
 800a754:	0800a349 	.word	0x0800a349
 800a758:	20003c78 	.word	0x20003c78

0800a75c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a75c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a762:	4b0d      	ldr	r3, [pc, #52]	@ (800a798 <prvTaskExitError+0x3c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a76a:	d008      	beq.n	800a77e <prvTaskExitError+0x22>
 800a76c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a770:	f383 8811 	msr	BASEPRI, r3
 800a774:	f3bf 8f6f 	isb	sy
 800a778:	f3bf 8f4f 	dsb	sy
 800a77c:	e7fe      	b.n	800a77c <prvTaskExitError+0x20>
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0fc      	beq.n	800a78e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a794:	b002      	add	sp, #8
 800a796:	4770      	bx	lr
 800a798:	20000000 	.word	0x20000000

0800a79c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a79c:	4808      	ldr	r0, [pc, #32]	@ (800a7c0 <prvPortStartFirstTask+0x24>)
 800a79e:	6800      	ldr	r0, [r0, #0]
 800a7a0:	6800      	ldr	r0, [r0, #0]
 800a7a2:	f380 8808 	msr	MSP, r0
 800a7a6:	f04f 0000 	mov.w	r0, #0
 800a7aa:	f380 8814 	msr	CONTROL, r0
 800a7ae:	b662      	cpsie	i
 800a7b0:	b661      	cpsie	f
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	df00      	svc	0
 800a7bc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7be:	0000      	.short	0x0000
 800a7c0:	e000ed08 	.word	0xe000ed08

0800a7c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a7d4 <vPortEnableVFP+0x10>
 800a7c8:	6801      	ldr	r1, [r0, #0]
 800a7ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a7ce:	6001      	str	r1, [r0, #0]
 800a7d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7d2:	0000      	.short	0x0000
 800a7d4:	e000ed88 	.word	0xe000ed88

0800a7d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a7d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a7dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a7e0:	f021 0101 	bic.w	r1, r1, #1
 800a7e4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7e8:	4b05      	ldr	r3, [pc, #20]	@ (800a800 <pxPortInitialiseStack+0x28>)
 800a7ea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7ee:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7f2:	f06f 0302 	mvn.w	r3, #2
 800a7f6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a7fa:	3844      	subs	r0, #68	@ 0x44
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	0800a75d 	.word	0x0800a75d
	...

0800a810 <SVC_Handler>:
	__asm volatile (
 800a810:	4b07      	ldr	r3, [pc, #28]	@ (800a830 <pxCurrentTCBConst2>)
 800a812:	6819      	ldr	r1, [r3, #0]
 800a814:	6808      	ldr	r0, [r1, #0]
 800a816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81a:	f380 8809 	msr	PSP, r0
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f04f 0000 	mov.w	r0, #0
 800a826:	f380 8811 	msr	BASEPRI, r0
 800a82a:	4770      	bx	lr
 800a82c:	f3af 8000 	nop.w

0800a830 <pxCurrentTCBConst2>:
 800a830:	2000438c 	.word	0x2000438c

0800a834 <vPortEnterCritical>:
 800a834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a844:	4a0b      	ldr	r2, [pc, #44]	@ (800a874 <vPortEnterCritical+0x40>)
 800a846:	6813      	ldr	r3, [r2, #0]
 800a848:	3301      	adds	r3, #1
 800a84a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d000      	beq.n	800a852 <vPortEnterCritical+0x1e>
}
 800a850:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a852:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a856:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800a85a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800a85e:	d0f7      	beq.n	800a850 <vPortEnterCritical+0x1c>
 800a860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	e7fe      	b.n	800a870 <vPortEnterCritical+0x3c>
 800a872:	bf00      	nop
 800a874:	20000000 	.word	0x20000000

0800a878 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a878:	4b09      	ldr	r3, [pc, #36]	@ (800a8a0 <vPortExitCritical+0x28>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	b943      	cbnz	r3, 800a890 <vPortExitCritical+0x18>
 800a87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	e7fe      	b.n	800a88e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a890:	3b01      	subs	r3, #1
 800a892:	4a03      	ldr	r2, [pc, #12]	@ (800a8a0 <vPortExitCritical+0x28>)
 800a894:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a896:	b90b      	cbnz	r3, 800a89c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a898:	f383 8811 	msr	BASEPRI, r3
}
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20000000 	.word	0x20000000
	...

0800a8b0 <PendSV_Handler>:
	__asm volatile
 800a8b0:	f3ef 8009 	mrs	r0, PSP
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	4b15      	ldr	r3, [pc, #84]	@ (800a910 <pxCurrentTCBConst>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	f01e 0f10 	tst.w	lr, #16
 800a8c0:	bf08      	it	eq
 800a8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	6010      	str	r0, [r2, #0]
 800a8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a8d4:	f380 8811 	msr	BASEPRI, r0
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	f3bf 8f6f 	isb	sy
 800a8e0:	f004 fe9a 	bl	800f618 <vTaskSwitchContext>
 800a8e4:	f04f 0000 	mov.w	r0, #0
 800a8e8:	f380 8811 	msr	BASEPRI, r0
 800a8ec:	bc09      	pop	{r0, r3}
 800a8ee:	6819      	ldr	r1, [r3, #0]
 800a8f0:	6808      	ldr	r0, [r1, #0]
 800a8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f6:	f01e 0f10 	tst.w	lr, #16
 800a8fa:	bf08      	it	eq
 800a8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a900:	f380 8809 	msr	PSP, r0
 800a904:	f3bf 8f6f 	isb	sy
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	f3af 8000 	nop.w

0800a910 <pxCurrentTCBConst>:
 800a910:	2000438c 	.word	0x2000438c

0800a914 <xPortSysTickHandler>:
{
 800a914:	b508      	push	{r3, lr}
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a91a:	f383 8811 	msr	BASEPRI, r3
 800a91e:	f3bf 8f6f 	isb	sy
 800a922:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a926:	f004 fd49 	bl	800f3bc <xTaskIncrementTick>
 800a92a:	b128      	cbz	r0, 800a938 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a92c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a934:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800a938:	2300      	movs	r3, #0
 800a93a:	f383 8811 	msr	BASEPRI, r3
}
 800a93e:	bd08      	pop	{r3, pc}

0800a940 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a940:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800a944:	2300      	movs	r3, #0
 800a946:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a948:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a94a:	4b05      	ldr	r3, [pc, #20]	@ (800a960 <vPortSetupTimerInterrupt+0x20>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4905      	ldr	r1, [pc, #20]	@ (800a964 <vPortSetupTimerInterrupt+0x24>)
 800a950:	fba1 1303 	umull	r1, r3, r1, r3
 800a954:	099b      	lsrs	r3, r3, #6
 800a956:	3b01      	subs	r3, #1
 800a958:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a95a:	2307      	movs	r3, #7
 800a95c:	6113      	str	r3, [r2, #16]
}
 800a95e:	4770      	bx	lr
 800a960:	2000002c 	.word	0x2000002c
 800a964:	10624dd3 	.word	0x10624dd3

0800a968 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a968:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a96c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800a970:	4b3d      	ldr	r3, [pc, #244]	@ (800aa68 <xPortStartScheduler+0x100>)
 800a972:	429a      	cmp	r2, r3
 800a974:	d01c      	beq.n	800a9b0 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a976:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a97a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800a97e:	4b3b      	ldr	r3, [pc, #236]	@ (800aa6c <xPortStartScheduler+0x104>)
 800a980:	429a      	cmp	r2, r3
 800a982:	d01e      	beq.n	800a9c2 <xPortStartScheduler+0x5a>
{
 800a984:	b530      	push	{r4, r5, lr}
 800a986:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a988:	4b39      	ldr	r3, [pc, #228]	@ (800aa70 <xPortStartScheduler+0x108>)
 800a98a:	781a      	ldrb	r2, [r3, #0]
 800a98c:	b2d2      	uxtb	r2, r2
 800a98e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a990:	22ff      	movs	r2, #255	@ 0xff
 800a992:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	b2db      	uxtb	r3, r3
 800a998:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a99c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a9a0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a9a4:	4a33      	ldr	r2, [pc, #204]	@ (800aa74 <xPortStartScheduler+0x10c>)
 800a9a6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a9a8:	4b33      	ldr	r3, [pc, #204]	@ (800aa78 <xPortStartScheduler+0x110>)
 800a9aa:	2207      	movs	r2, #7
 800a9ac:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9ae:	e01b      	b.n	800a9e8 <xPortStartScheduler+0x80>
	__asm volatile
 800a9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9c0:	e7fe      	b.n	800a9c0 <xPortStartScheduler+0x58>
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a9d2:	e7fe      	b.n	800a9d2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800a9d4:	4a28      	ldr	r2, [pc, #160]	@ (800aa78 <xPortStartScheduler+0x110>)
 800a9d6:	6813      	ldr	r3, [r2, #0]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a9dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a9e0:	005b      	lsls	r3, r3, #1
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a9e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a9ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9f0:	d1f0      	bne.n	800a9d4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a9f2:	4b21      	ldr	r3, [pc, #132]	@ (800aa78 <xPortStartScheduler+0x110>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	d008      	beq.n	800aa0c <xPortStartScheduler+0xa4>
 800a9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	e7fe      	b.n	800aa0a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	4a1a      	ldr	r2, [pc, #104]	@ (800aa78 <xPortStartScheduler+0x110>)
 800aa10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa12:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aa16:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa18:	9b01      	ldr	r3, [sp, #4]
 800aa1a:	b2db      	uxtb	r3, r3
 800aa1c:	4a14      	ldr	r2, [pc, #80]	@ (800aa70 <xPortStartScheduler+0x108>)
 800aa1e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa20:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800aa24:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800aa28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800aa2c:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aa30:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800aa34:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800aa38:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800aa3c:	f7ff ff80 	bl	800a940 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800aa40:	2500      	movs	r5, #0
 800aa42:	4b0e      	ldr	r3, [pc, #56]	@ (800aa7c <xPortStartScheduler+0x114>)
 800aa44:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800aa46:	f7ff febd 	bl	800a7c4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aa4a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800aa4e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800aa52:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800aa56:	f7ff fea1 	bl	800a79c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800aa5a:	f004 fddd 	bl	800f618 <vTaskSwitchContext>
	prvTaskExitError();
 800aa5e:	f7ff fe7d 	bl	800a75c <prvTaskExitError>
}
 800aa62:	4628      	mov	r0, r5
 800aa64:	b003      	add	sp, #12
 800aa66:	bd30      	pop	{r4, r5, pc}
 800aa68:	410fc271 	.word	0x410fc271
 800aa6c:	410fc270 	.word	0x410fc270
 800aa70:	e000e400 	.word	0xe000e400
 800aa74:	20003dfc 	.word	0x20003dfc
 800aa78:	20003df8 	.word	0x20003df8
 800aa7c:	20000000 	.word	0x20000000

0800aa80 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa80:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aa84:	2b0f      	cmp	r3, #15
 800aa86:	d90e      	bls.n	800aaa6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aa88:	4a11      	ldr	r2, [pc, #68]	@ (800aad0 <vPortValidateInterruptPriority+0x50>)
 800aa8a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aa8c:	4b11      	ldr	r3, [pc, #68]	@ (800aad4 <vPortValidateInterruptPriority+0x54>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d208      	bcs.n	800aaa6 <vPortValidateInterruptPriority+0x26>
 800aa94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	e7fe      	b.n	800aaa4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aaa6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800aaaa:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800aaae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aab2:	4a09      	ldr	r2, [pc, #36]	@ (800aad8 <vPortValidateInterruptPriority+0x58>)
 800aab4:	6812      	ldr	r2, [r2, #0]
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d908      	bls.n	800aacc <vPortValidateInterruptPriority+0x4c>
 800aaba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	e7fe      	b.n	800aaca <vPortValidateInterruptPriority+0x4a>
	}
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	e000e3f0 	.word	0xe000e3f0
 800aad4:	20003dfc 	.word	0x20003dfc
 800aad8:	20003df8 	.word	0x20003df8

0800aadc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aadc:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aade:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800aae0:	b118      	cbz	r0, 800aaea <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae4:	6818      	ldr	r0, [r3, #0]
 800aae6:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800aaea:	4770      	bx	lr

0800aaec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aaec:	b510      	push	{r4, lr}
 800aaee:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaf0:	f7ff fea0 	bl	800a834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aaf4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800aaf6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d004      	beq.n	800ab06 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800aafc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800aafe:	f7ff febb 	bl	800a878 <vPortExitCritical>

	return xReturn;
}
 800ab02:	4620      	mov	r0, r4
 800ab04:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800ab06:	2401      	movs	r4, #1
 800ab08:	e7f9      	b.n	800aafe <prvIsQueueFull+0x12>

0800ab0a <prvIsQueueEmpty>:
{
 800ab0a:	b510      	push	{r4, lr}
 800ab0c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ab0e:	f7ff fe91 	bl	800a834 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab12:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ab14:	b923      	cbnz	r3, 800ab20 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800ab16:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800ab18:	f7ff feae 	bl	800a878 <vPortExitCritical>
}
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800ab20:	2400      	movs	r4, #0
 800ab22:	e7f9      	b.n	800ab18 <prvIsQueueEmpty+0xe>

0800ab24 <prvCopyDataToQueue>:
{
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	4604      	mov	r4, r0
 800ab28:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab2a:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab2c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800ab2e:	b95a      	cbnz	r2, 800ab48 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab30:	6803      	ldr	r3, [r0, #0]
 800ab32:	b11b      	cbz	r3, 800ab3c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800ab34:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab36:	3601      	adds	r6, #1
 800ab38:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab3c:	6880      	ldr	r0, [r0, #8]
 800ab3e:	f004 fee9 	bl	800f914 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60a3      	str	r3, [r4, #8]
 800ab46:	e7f6      	b.n	800ab36 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800ab48:	b96d      	cbnz	r5, 800ab66 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab4a:	6840      	ldr	r0, [r0, #4]
 800ab4c:	f005 fa0e 	bl	800ff6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab50:	6863      	ldr	r3, [r4, #4]
 800ab52:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ab54:	4413      	add	r3, r2
 800ab56:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab58:	68a2      	ldr	r2, [r4, #8]
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d319      	bcc.n	800ab92 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800ab62:	4628      	mov	r0, r5
 800ab64:	e7e7      	b.n	800ab36 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab66:	68c0      	ldr	r0, [r0, #12]
 800ab68:	f005 fa00 	bl	800ff6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab6c:	68e3      	ldr	r3, [r4, #12]
 800ab6e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ab70:	4251      	negs	r1, r2
 800ab72:	1a9b      	subs	r3, r3, r2
 800ab74:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d202      	bcs.n	800ab82 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab7c:	68a3      	ldr	r3, [r4, #8]
 800ab7e:	440b      	add	r3, r1
 800ab80:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800ab82:	2d02      	cmp	r5, #2
 800ab84:	d001      	beq.n	800ab8a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800ab86:	2000      	movs	r0, #0
 800ab88:	e7d5      	b.n	800ab36 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab8a:	b126      	cbz	r6, 800ab96 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800ab8c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800ab8e:	2000      	movs	r0, #0
 800ab90:	e7d1      	b.n	800ab36 <prvCopyDataToQueue+0x12>
 800ab92:	4628      	mov	r0, r5
 800ab94:	e7cf      	b.n	800ab36 <prvCopyDataToQueue+0x12>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e7cd      	b.n	800ab36 <prvCopyDataToQueue+0x12>

0800ab9a <prvCopyDataFromQueue>:
{
 800ab9a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ab9c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800ab9e:	b16a      	cbz	r2, 800abbc <prvCopyDataFromQueue+0x22>
{
 800aba0:	b510      	push	{r4, lr}
 800aba2:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aba4:	68d9      	ldr	r1, [r3, #12]
 800aba6:	4411      	add	r1, r2
 800aba8:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abaa:	689c      	ldr	r4, [r3, #8]
 800abac:	42a1      	cmp	r1, r4
 800abae:	d301      	bcc.n	800abb4 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abb0:	6819      	ldr	r1, [r3, #0]
 800abb2:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abb4:	68d9      	ldr	r1, [r3, #12]
 800abb6:	f005 f9d9 	bl	800ff6c <memcpy>
}
 800abba:	bd10      	pop	{r4, pc}
 800abbc:	4770      	bx	lr

0800abbe <prvUnlockQueue>:
{
 800abbe:	b538      	push	{r3, r4, r5, lr}
 800abc0:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800abc2:	f7ff fe37 	bl	800a834 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800abc6:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800abca:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abcc:	e001      	b.n	800abd2 <prvUnlockQueue+0x14>
			--cTxLock;
 800abce:	3c01      	subs	r4, #1
 800abd0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800abd2:	2c00      	cmp	r4, #0
 800abd4:	dd0a      	ble.n	800abec <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abd6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800abd8:	b143      	cbz	r3, 800abec <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abda:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800abde:	f004 fd9b 	bl	800f718 <xTaskRemoveFromEventList>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d0f3      	beq.n	800abce <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800abe6:	f004 fe2d 	bl	800f844 <vTaskMissedYield>
 800abea:	e7f0      	b.n	800abce <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800abec:	23ff      	movs	r3, #255	@ 0xff
 800abee:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800abf2:	f7ff fe41 	bl	800a878 <vPortExitCritical>
	taskENTER_CRITICAL();
 800abf6:	f7ff fe1d 	bl	800a834 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800abfa:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800abfe:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac00:	e001      	b.n	800ac06 <prvUnlockQueue+0x48>
				--cRxLock;
 800ac02:	3c01      	subs	r4, #1
 800ac04:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac06:	2c00      	cmp	r4, #0
 800ac08:	dd0a      	ble.n	800ac20 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac0a:	692b      	ldr	r3, [r5, #16]
 800ac0c:	b143      	cbz	r3, 800ac20 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac0e:	f105 0010 	add.w	r0, r5, #16
 800ac12:	f004 fd81 	bl	800f718 <xTaskRemoveFromEventList>
 800ac16:	2800      	cmp	r0, #0
 800ac18:	d0f3      	beq.n	800ac02 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800ac1a:	f004 fe13 	bl	800f844 <vTaskMissedYield>
 800ac1e:	e7f0      	b.n	800ac02 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800ac20:	23ff      	movs	r3, #255	@ 0xff
 800ac22:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800ac26:	f7ff fe27 	bl	800a878 <vPortExitCritical>
}
 800ac2a:	bd38      	pop	{r3, r4, r5, pc}

0800ac2c <xQueueGenericReset>:
{
 800ac2c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800ac2e:	b1e0      	cbz	r0, 800ac6a <xQueueGenericReset+0x3e>
 800ac30:	460d      	mov	r5, r1
 800ac32:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ac34:	f7ff fdfe 	bl	800a834 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ac3c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800ac3e:	fb01 3002 	mla	r0, r1, r2, r3
 800ac42:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ac44:	2000      	movs	r0, #0
 800ac46:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac48:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac4a:	3a01      	subs	r2, #1
 800ac4c:	fb02 3301 	mla	r3, r2, r1, r3
 800ac50:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac52:	23ff      	movs	r3, #255	@ 0xff
 800ac54:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac58:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800ac5c:	b9fd      	cbnz	r5, 800ac9e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac5e:	6923      	ldr	r3, [r4, #16]
 800ac60:	b963      	cbnz	r3, 800ac7c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800ac62:	f7ff fe09 	bl	800a878 <vPortExitCritical>
}
 800ac66:	2001      	movs	r0, #1
 800ac68:	bd38      	pop	{r3, r4, r5, pc}
 800ac6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ac7a:	e7fe      	b.n	800ac7a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac7c:	f104 0010 	add.w	r0, r4, #16
 800ac80:	f004 fd4a 	bl	800f718 <xTaskRemoveFromEventList>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	d0ec      	beq.n	800ac62 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800ac88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ac8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac90:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	e7e1      	b.n	800ac62 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac9e:	f104 0010 	add.w	r0, r4, #16
 800aca2:	f7ff faab 	bl	800a1fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aca6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800acaa:	f7ff faa7 	bl	800a1fc <vListInitialise>
 800acae:	e7d8      	b.n	800ac62 <xQueueGenericReset+0x36>

0800acb0 <prvInitialiseNewQueue>:
{
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	461d      	mov	r5, r3
 800acb4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800acb6:	460b      	mov	r3, r1
 800acb8:	b949      	cbnz	r1, 800acce <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acba:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800acbc:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acbe:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acc0:	2101      	movs	r1, #1
 800acc2:	4620      	mov	r0, r4
 800acc4:	f7ff ffb2 	bl	800ac2c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800acc8:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800accc:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acce:	6022      	str	r2, [r4, #0]
 800acd0:	e7f4      	b.n	800acbc <prvInitialiseNewQueue+0xc>

0800acd2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800acd2:	b940      	cbnz	r0, 800ace6 <xQueueGenericCreateStatic+0x14>
 800acd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	e7fe      	b.n	800ace4 <xQueueGenericCreateStatic+0x12>
	{
 800ace6:	b510      	push	{r4, lr}
 800ace8:	b084      	sub	sp, #16
 800acea:	461c      	mov	r4, r3
 800acec:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800acee:	b153      	cbz	r3, 800ad06 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acf0:	b192      	cbz	r2, 800ad18 <xQueueGenericCreateStatic+0x46>
 800acf2:	b989      	cbnz	r1, 800ad18 <xQueueGenericCreateStatic+0x46>
 800acf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	e7fe      	b.n	800ad04 <xQueueGenericCreateStatic+0x32>
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800ad16:	e7fe      	b.n	800ad16 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad18:	b16a      	cbz	r2, 800ad36 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad1a:	2350      	movs	r3, #80	@ 0x50
 800ad1c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	2b50      	cmp	r3, #80	@ 0x50
 800ad22:	d013      	beq.n	800ad4c <xQueueGenericCreateStatic+0x7a>
 800ad24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad28:	f383 8811 	msr	BASEPRI, r3
 800ad2c:	f3bf 8f6f 	isb	sy
 800ad30:	f3bf 8f4f 	dsb	sy
 800ad34:	e7fe      	b.n	800ad34 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ad36:	2900      	cmp	r1, #0
 800ad38:	d0ef      	beq.n	800ad1a <xQueueGenericCreateStatic+0x48>
 800ad3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	e7fe      	b.n	800ad4a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad4c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad54:	9400      	str	r4, [sp, #0]
 800ad56:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ad5a:	4660      	mov	r0, ip
 800ad5c:	f7ff ffa8 	bl	800acb0 <prvInitialiseNewQueue>
	}
 800ad60:	4620      	mov	r0, r4
 800ad62:	b004      	add	sp, #16
 800ad64:	bd10      	pop	{r4, pc}

0800ad66 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad66:	b940      	cbnz	r0, 800ad7a <xQueueGenericCreate+0x14>
 800ad68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	e7fe      	b.n	800ad78 <xQueueGenericCreate+0x12>
	{
 800ad7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad7c:	b083      	sub	sp, #12
 800ad7e:	460d      	mov	r5, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad84:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad88:	3050      	adds	r0, #80	@ 0x50
 800ad8a:	f7ff f961 	bl	800a050 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800ad8e:	4607      	mov	r7, r0
 800ad90:	b150      	cbz	r0, 800ada8 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad98:	9000      	str	r0, [sp, #0]
 800ad9a:	4623      	mov	r3, r4
 800ad9c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800ada0:	4629      	mov	r1, r5
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7ff ff84 	bl	800acb0 <prvInitialiseNewQueue>
	}
 800ada8:	4638      	mov	r0, r7
 800adaa:	b003      	add	sp, #12
 800adac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800adae <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800adae:	b940      	cbnz	r0, 800adc2 <xQueueCreateCountingSemaphoreStatic+0x14>
 800adb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	e7fe      	b.n	800adc0 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800adc2:	b510      	push	{r4, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800adc8:	4288      	cmp	r0, r1
 800adca:	d208      	bcs.n	800adde <xQueueCreateCountingSemaphoreStatic+0x30>
 800adcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	e7fe      	b.n	800addc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800adde:	2302      	movs	r3, #2
 800ade0:	9300      	str	r3, [sp, #0]
 800ade2:	4613      	mov	r3, r2
 800ade4:	2200      	movs	r2, #0
 800ade6:	4611      	mov	r1, r2
 800ade8:	f7ff ff73 	bl	800acd2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800adec:	b100      	cbz	r0, 800adf0 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800adee:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800adf0:	b002      	add	sp, #8
 800adf2:	bd10      	pop	{r4, pc}

0800adf4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800adf4:	b940      	cbnz	r0, 800ae08 <xQueueCreateCountingSemaphore+0x14>
 800adf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	e7fe      	b.n	800ae06 <xQueueCreateCountingSemaphore+0x12>
	{
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae0c:	4288      	cmp	r0, r1
 800ae0e:	d208      	bcs.n	800ae22 <xQueueCreateCountingSemaphore+0x2e>
 800ae10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	e7fe      	b.n	800ae20 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae22:	2202      	movs	r2, #2
 800ae24:	2100      	movs	r1, #0
 800ae26:	f7ff ff9e 	bl	800ad66 <xQueueGenericCreate>
		if( xHandle != NULL )
 800ae2a:	b100      	cbz	r0, 800ae2e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ae2c:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800ae2e:	bd10      	pop	{r4, pc}

0800ae30 <xQueueGenericSend>:
{
 800ae30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae32:	b085      	sub	sp, #20
 800ae34:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ae36:	b188      	cbz	r0, 800ae5c <xQueueGenericSend+0x2c>
 800ae38:	460f      	mov	r7, r1
 800ae3a:	461d      	mov	r5, r3
 800ae3c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae3e:	b1b1      	cbz	r1, 800ae6e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae40:	2d02      	cmp	r5, #2
 800ae42:	d120      	bne.n	800ae86 <xQueueGenericSend+0x56>
 800ae44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d01d      	beq.n	800ae86 <xQueueGenericSend+0x56>
 800ae4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	e7fe      	b.n	800ae5a <xQueueGenericSend+0x2a>
 800ae5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ae6c:	e7fe      	b.n	800ae6c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae6e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d0e5      	beq.n	800ae40 <xQueueGenericSend+0x10>
 800ae74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	e7fe      	b.n	800ae84 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae86:	f004 fce9 	bl	800f85c <xTaskGetSchedulerState>
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	b958      	cbnz	r0, 800aea6 <xQueueGenericSend+0x76>
 800ae8e:	9b01      	ldr	r3, [sp, #4]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d048      	beq.n	800af26 <xQueueGenericSend+0xf6>
 800ae94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae98:	f383 8811 	msr	BASEPRI, r3
 800ae9c:	f3bf 8f6f 	isb	sy
 800aea0:	f3bf 8f4f 	dsb	sy
 800aea4:	e7fe      	b.n	800aea4 <xQueueGenericSend+0x74>
 800aea6:	2600      	movs	r6, #0
 800aea8:	e03d      	b.n	800af26 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aeaa:	462a      	mov	r2, r5
 800aeac:	4639      	mov	r1, r7
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f7ff fe38 	bl	800ab24 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeb4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aeb6:	b97b      	cbnz	r3, 800aed8 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800aeb8:	b148      	cbz	r0, 800aece <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800aeba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800aebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aec2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800aece:	f7ff fcd3 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 800aed2:	2001      	movs	r0, #1
}
 800aed4:	b005      	add	sp, #20
 800aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aed8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800aedc:	f004 fc1c 	bl	800f718 <xTaskRemoveFromEventList>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d0f4      	beq.n	800aece <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800aee4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800aee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800aef0:	f3bf 8f4f 	dsb	sy
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	e7e9      	b.n	800aece <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800aefa:	f7ff fcbd 	bl	800a878 <vPortExitCritical>
					return errQUEUE_FULL;
 800aefe:	2000      	movs	r0, #0
 800af00:	e7e8      	b.n	800aed4 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af02:	a802      	add	r0, sp, #8
 800af04:	f004 fc4e 	bl	800f7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af08:	2601      	movs	r6, #1
 800af0a:	e019      	b.n	800af40 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800af0c:	2300      	movs	r3, #0
 800af0e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800af12:	e021      	b.n	800af58 <xQueueGenericSend+0x128>
 800af14:	2300      	movs	r3, #0
 800af16:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800af1a:	e023      	b.n	800af64 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800af1c:	4620      	mov	r0, r4
 800af1e:	f7ff fe4e 	bl	800abbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af22:	f004 fad7 	bl	800f4d4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800af26:	f7ff fc85 	bl	800a834 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af2a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800af2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800af2e:	429a      	cmp	r2, r3
 800af30:	d3bb      	bcc.n	800aeaa <xQueueGenericSend+0x7a>
 800af32:	2d02      	cmp	r5, #2
 800af34:	d0b9      	beq.n	800aeaa <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d0de      	beq.n	800aefa <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	d0e0      	beq.n	800af02 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800af40:	f7ff fc9a 	bl	800a878 <vPortExitCritical>
		vTaskSuspendAll();
 800af44:	f004 fa24 	bl	800f390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af48:	f7ff fc74 	bl	800a834 <vPortEnterCritical>
 800af4c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800af50:	b252      	sxtb	r2, r2
 800af52:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af56:	d0d9      	beq.n	800af0c <xQueueGenericSend+0xdc>
 800af58:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800af5c:	b252      	sxtb	r2, r2
 800af5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af62:	d0d7      	beq.n	800af14 <xQueueGenericSend+0xe4>
 800af64:	f7ff fc88 	bl	800a878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af68:	a901      	add	r1, sp, #4
 800af6a:	a802      	add	r0, sp, #8
 800af6c:	f004 fc26 	bl	800f7bc <xTaskCheckForTimeOut>
 800af70:	b9d8      	cbnz	r0, 800afaa <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af72:	4620      	mov	r0, r4
 800af74:	f7ff fdba 	bl	800aaec <prvIsQueueFull>
 800af78:	2800      	cmp	r0, #0
 800af7a:	d0cf      	beq.n	800af1c <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af7c:	9901      	ldr	r1, [sp, #4]
 800af7e:	f104 0010 	add.w	r0, r4, #16
 800af82:	f004 fb95 	bl	800f6b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af86:	4620      	mov	r0, r4
 800af88:	f7ff fe19 	bl	800abbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af8c:	f004 faa2 	bl	800f4d4 <xTaskResumeAll>
 800af90:	2800      	cmp	r0, #0
 800af92:	d1c8      	bne.n	800af26 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800af94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800af98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800afa0:	f3bf 8f4f 	dsb	sy
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	e7bd      	b.n	800af26 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800afaa:	4620      	mov	r0, r4
 800afac:	f7ff fe07 	bl	800abbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800afb0:	f004 fa90 	bl	800f4d4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800afb4:	2000      	movs	r0, #0
 800afb6:	e78d      	b.n	800aed4 <xQueueGenericSend+0xa4>

0800afb8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800afb8:	b148      	cbz	r0, 800afce <prvInitialiseMutex+0x16>
	{
 800afba:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800afbc:	2100      	movs	r1, #0
 800afbe:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800afc0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800afc2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800afc4:	460b      	mov	r3, r1
 800afc6:	460a      	mov	r2, r1
 800afc8:	f7ff ff32 	bl	800ae30 <xQueueGenericSend>
	}
 800afcc:	bd08      	pop	{r3, pc}
 800afce:	4770      	bx	lr

0800afd0 <xQueueCreateMutex>:
	{
 800afd0:	b510      	push	{r4, lr}
 800afd2:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800afd4:	2100      	movs	r1, #0
 800afd6:	2001      	movs	r0, #1
 800afd8:	f7ff fec5 	bl	800ad66 <xQueueGenericCreate>
 800afdc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800afde:	f7ff ffeb 	bl	800afb8 <prvInitialiseMutex>
	}
 800afe2:	4620      	mov	r0, r4
 800afe4:	bd10      	pop	{r4, pc}

0800afe6 <xQueueCreateMutexStatic>:
	{
 800afe6:	b510      	push	{r4, lr}
 800afe8:	b082      	sub	sp, #8
 800afea:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800afec:	9000      	str	r0, [sp, #0]
 800afee:	2200      	movs	r2, #0
 800aff0:	4611      	mov	r1, r2
 800aff2:	2001      	movs	r0, #1
 800aff4:	f7ff fe6d 	bl	800acd2 <xQueueGenericCreateStatic>
 800aff8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800affa:	f7ff ffdd 	bl	800afb8 <prvInitialiseMutex>
	}
 800affe:	4620      	mov	r0, r4
 800b000:	b002      	add	sp, #8
 800b002:	bd10      	pop	{r4, pc}

0800b004 <xQueueGiveMutexRecursive>:
	{
 800b004:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800b006:	b138      	cbz	r0, 800b018 <xQueueGiveMutexRecursive+0x14>
 800b008:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b00a:	6885      	ldr	r5, [r0, #8]
 800b00c:	f004 fc20 	bl	800f850 <xTaskGetCurrentTaskHandle>
 800b010:	4285      	cmp	r5, r0
 800b012:	d00a      	beq.n	800b02a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800b014:	2000      	movs	r0, #0
	}
 800b016:	bd38      	pop	{r3, r4, r5, pc}
 800b018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800b028:	e7fe      	b.n	800b028 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b02a:	68e3      	ldr	r3, [r4, #12]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b030:	b10b      	cbz	r3, 800b036 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800b032:	2001      	movs	r0, #1
		return xReturn;
 800b034:	e7ef      	b.n	800b016 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b036:	461a      	mov	r2, r3
 800b038:	4619      	mov	r1, r3
 800b03a:	4620      	mov	r0, r4
 800b03c:	f7ff fef8 	bl	800ae30 <xQueueGenericSend>
			xReturn = pdPASS;
 800b040:	2001      	movs	r0, #1
 800b042:	e7e8      	b.n	800b016 <xQueueGiveMutexRecursive+0x12>

0800b044 <xQueueGenericSendFromISR>:
{
 800b044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800b048:	b190      	cbz	r0, 800b070 <xQueueGenericSendFromISR+0x2c>
 800b04a:	460f      	mov	r7, r1
 800b04c:	4616      	mov	r6, r2
 800b04e:	461c      	mov	r4, r3
 800b050:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b052:	b1b1      	cbz	r1, 800b082 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b054:	2c02      	cmp	r4, #2
 800b056:	d120      	bne.n	800b09a <xQueueGenericSendFromISR+0x56>
 800b058:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d01d      	beq.n	800b09a <xQueueGenericSendFromISR+0x56>
 800b05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b062:	f383 8811 	msr	BASEPRI, r3
 800b066:	f3bf 8f6f 	isb	sy
 800b06a:	f3bf 8f4f 	dsb	sy
 800b06e:	e7fe      	b.n	800b06e <xQueueGenericSendFromISR+0x2a>
 800b070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800b080:	e7fe      	b.n	800b080 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b082:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0e5      	beq.n	800b054 <xQueueGenericSendFromISR+0x10>
 800b088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	e7fe      	b.n	800b098 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b09a:	f7ff fcf1 	bl	800aa80 <vPortValidateInterruptPriority>
	__asm volatile
 800b09e:	f3ef 8811 	mrs	r8, BASEPRI
 800b0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0b2:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800b0b4:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d306      	bcc.n	800b0c8 <xQueueGenericSendFromISR+0x84>
 800b0ba:	2c02      	cmp	r4, #2
 800b0bc:	d004      	beq.n	800b0c8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800b0be:	2000      	movs	r0, #0
	__asm volatile
 800b0c0:	f388 8811 	msr	BASEPRI, r8
}
 800b0c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0c8:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800b0cc:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0d0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0d2:	4622      	mov	r2, r4
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	f7ff fd24 	bl	800ab24 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800b0dc:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b0e0:	d006      	beq.n	800b0f0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b0e2:	f109 0301 	add.w	r3, r9, #1
 800b0e6:	b25b      	sxtb	r3, r3
 800b0e8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800b0ec:	2001      	movs	r0, #1
 800b0ee:	e7e7      	b.n	800b0c0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0f0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b0f2:	b90b      	cbnz	r3, 800b0f8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800b0f4:	2001      	movs	r0, #1
 800b0f6:	e7e3      	b.n	800b0c0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0f8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800b0fc:	f004 fb0c 	bl	800f718 <xTaskRemoveFromEventList>
 800b100:	b118      	cbz	r0, 800b10a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800b102:	b126      	cbz	r6, 800b10e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b104:	2001      	movs	r0, #1
 800b106:	6030      	str	r0, [r6, #0]
 800b108:	e7da      	b.n	800b0c0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800b10a:	2001      	movs	r0, #1
 800b10c:	e7d8      	b.n	800b0c0 <xQueueGenericSendFromISR+0x7c>
 800b10e:	2001      	movs	r0, #1
 800b110:	e7d6      	b.n	800b0c0 <xQueueGenericSendFromISR+0x7c>

0800b112 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800b112:	b168      	cbz	r0, 800b130 <xQueueGiveFromISR+0x1e>
{
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	460c      	mov	r4, r1
 800b118:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800b11a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b11c:	b18b      	cbz	r3, 800b142 <xQueueGiveFromISR+0x30>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	e7fe      	b.n	800b12e <xQueueGiveFromISR+0x1c>
 800b130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800b140:	e7fe      	b.n	800b140 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b142:	6803      	ldr	r3, [r0, #0]
 800b144:	b1eb      	cbz	r3, 800b182 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b146:	f7ff fc9b 	bl	800aa80 <vPortValidateInterruptPriority>
	__asm volatile
 800b14a:	f3ef 8611 	mrs	r6, BASEPRI
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b15e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b160:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800b162:	4293      	cmp	r3, r2
 800b164:	d926      	bls.n	800b1b4 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800b166:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800b16a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b16c:	3201      	adds	r2, #1
 800b16e:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800b170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b174:	d011      	beq.n	800b19a <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b176:	3301      	adds	r3, #1
 800b178:	b25b      	sxtb	r3, r3
 800b17a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800b17e:	2001      	movs	r0, #1
 800b180:	e019      	b.n	800b1b6 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b182:	6883      	ldr	r3, [r0, #8]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0de      	beq.n	800b146 <xQueueGiveFromISR+0x34>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18c:	f383 8811 	msr	BASEPRI, r3
 800b190:	f3bf 8f6f 	isb	sy
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	e7fe      	b.n	800b198 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b19a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b19c:	b90b      	cbnz	r3, 800b1a2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800b19e:	2001      	movs	r0, #1
 800b1a0:	e009      	b.n	800b1b6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1a2:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800b1a6:	f004 fab7 	bl	800f718 <xTaskRemoveFromEventList>
 800b1aa:	b138      	cbz	r0, 800b1bc <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800b1ac:	b144      	cbz	r4, 800b1c0 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1ae:	2001      	movs	r0, #1
 800b1b0:	6020      	str	r0, [r4, #0]
 800b1b2:	e000      	b.n	800b1b6 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800b1b4:	2000      	movs	r0, #0
	__asm volatile
 800b1b6:	f386 8811 	msr	BASEPRI, r6
}
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800b1bc:	2001      	movs	r0, #1
 800b1be:	e7fa      	b.n	800b1b6 <xQueueGiveFromISR+0xa4>
 800b1c0:	2001      	movs	r0, #1
 800b1c2:	e7f8      	b.n	800b1b6 <xQueueGiveFromISR+0xa4>

0800b1c4 <xQueueReceive>:
{
 800b1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b1ca:	b190      	cbz	r0, 800b1f2 <xQueueReceive+0x2e>
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1d0:	b1c1      	cbz	r1, 800b204 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1d2:	f004 fb43 	bl	800f85c <xTaskGetSchedulerState>
 800b1d6:	4606      	mov	r6, r0
 800b1d8:	bb00      	cbnz	r0, 800b21c <xQueueReceive+0x58>
 800b1da:	9b01      	ldr	r3, [sp, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d05e      	beq.n	800b29e <xQueueReceive+0xda>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	e7fe      	b.n	800b1f0 <xQueueReceive+0x2c>
 800b1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800b202:	e7fe      	b.n	800b202 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b204:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b206:	2b00      	cmp	r3, #0
 800b208:	d0e3      	beq.n	800b1d2 <xQueueReceive+0xe>
 800b20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	e7fe      	b.n	800b21a <xQueueReceive+0x56>
 800b21c:	2600      	movs	r6, #0
 800b21e:	e03e      	b.n	800b29e <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b220:	4639      	mov	r1, r7
 800b222:	4620      	mov	r0, r4
 800b224:	f7ff fcb9 	bl	800ab9a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b228:	3d01      	subs	r5, #1
 800b22a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b22c:	6923      	ldr	r3, [r4, #16]
 800b22e:	b923      	cbnz	r3, 800b23a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800b230:	f7ff fb22 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 800b234:	2001      	movs	r0, #1
}
 800b236:	b005      	add	sp, #20
 800b238:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b23a:	f104 0010 	add.w	r0, r4, #16
 800b23e:	f004 fa6b 	bl	800f718 <xTaskRemoveFromEventList>
 800b242:	2800      	cmp	r0, #0
 800b244:	d0f4      	beq.n	800b230 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800b246:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b24a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b24e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	e7e9      	b.n	800b230 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800b25c:	f7ff fb0c 	bl	800a878 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b260:	2000      	movs	r0, #0
 800b262:	e7e8      	b.n	800b236 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b264:	a802      	add	r0, sp, #8
 800b266:	f004 fa9d 	bl	800f7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b26a:	2601      	movs	r6, #1
 800b26c:	e021      	b.n	800b2b2 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800b26e:	2300      	movs	r3, #0
 800b270:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b274:	e029      	b.n	800b2ca <xQueueReceive+0x106>
 800b276:	2300      	movs	r3, #0
 800b278:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b27c:	e02b      	b.n	800b2d6 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800b27e:	4620      	mov	r0, r4
 800b280:	f7ff fc9d 	bl	800abbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b284:	f004 f926 	bl	800f4d4 <xTaskResumeAll>
 800b288:	e009      	b.n	800b29e <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7ff fc97 	bl	800abbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b290:	f004 f920 	bl	800f4d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b294:	4620      	mov	r0, r4
 800b296:	f7ff fc38 	bl	800ab0a <prvIsQueueEmpty>
 800b29a:	2800      	cmp	r0, #0
 800b29c:	d13f      	bne.n	800b31e <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800b29e:	f7ff fac9 	bl	800a834 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2a2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2a4:	2d00      	cmp	r5, #0
 800b2a6:	d1bb      	bne.n	800b220 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b2a8:	9b01      	ldr	r3, [sp, #4]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d0d6      	beq.n	800b25c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800b2ae:	2e00      	cmp	r6, #0
 800b2b0:	d0d8      	beq.n	800b264 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800b2b2:	f7ff fae1 	bl	800a878 <vPortExitCritical>
		vTaskSuspendAll();
 800b2b6:	f004 f86b 	bl	800f390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b2ba:	f7ff fabb 	bl	800a834 <vPortEnterCritical>
 800b2be:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b2c2:	b25b      	sxtb	r3, r3
 800b2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c8:	d0d1      	beq.n	800b26e <xQueueReceive+0xaa>
 800b2ca:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b2ce:	b25b      	sxtb	r3, r3
 800b2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d4:	d0cf      	beq.n	800b276 <xQueueReceive+0xb2>
 800b2d6:	f7ff facf 	bl	800a878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2da:	a901      	add	r1, sp, #4
 800b2dc:	a802      	add	r0, sp, #8
 800b2de:	f004 fa6d 	bl	800f7bc <xTaskCheckForTimeOut>
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d1d1      	bne.n	800b28a <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f7ff fc0f 	bl	800ab0a <prvIsQueueEmpty>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d0c6      	beq.n	800b27e <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2f0:	9901      	ldr	r1, [sp, #4]
 800b2f2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800b2f6:	f004 f9db 	bl	800f6b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f7ff fc5f 	bl	800abbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b300:	f004 f8e8 	bl	800f4d4 <xTaskResumeAll>
 800b304:	2800      	cmp	r0, #0
 800b306:	d1ca      	bne.n	800b29e <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800b308:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b30c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b310:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	e7bf      	b.n	800b29e <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800b31e:	2000      	movs	r0, #0
 800b320:	e789      	b.n	800b236 <xQueueReceive+0x72>

0800b322 <xQueueSemaphoreTake>:
{
 800b322:	b570      	push	{r4, r5, r6, lr}
 800b324:	b084      	sub	sp, #16
 800b326:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800b328:	b158      	cbz	r0, 800b342 <xQueueSemaphoreTake+0x20>
 800b32a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800b32c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b32e:	b18b      	cbz	r3, 800b354 <xQueueSemaphoreTake+0x32>
 800b330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	e7fe      	b.n	800b340 <xQueueSemaphoreTake+0x1e>
 800b342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800b352:	e7fe      	b.n	800b352 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b354:	f004 fa82 	bl	800f85c <xTaskGetSchedulerState>
 800b358:	4605      	mov	r5, r0
 800b35a:	b950      	cbnz	r0, 800b372 <xQueueSemaphoreTake+0x50>
 800b35c:	9b01      	ldr	r3, [sp, #4]
 800b35e:	b15b      	cbz	r3, 800b378 <xQueueSemaphoreTake+0x56>
 800b360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b364:	f383 8811 	msr	BASEPRI, r3
 800b368:	f3bf 8f6f 	isb	sy
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	e7fe      	b.n	800b370 <xQueueSemaphoreTake+0x4e>
 800b372:	2600      	movs	r6, #0
 800b374:	4635      	mov	r5, r6
 800b376:	e055      	b.n	800b424 <xQueueSemaphoreTake+0x102>
 800b378:	4606      	mov	r6, r0
 800b37a:	e053      	b.n	800b424 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b37c:	3b01      	subs	r3, #1
 800b37e:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b380:	6823      	ldr	r3, [r4, #0]
 800b382:	b13b      	cbz	r3, 800b394 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b384:	6923      	ldr	r3, [r4, #16]
 800b386:	b94b      	cbnz	r3, 800b39c <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800b388:	f7ff fa76 	bl	800a878 <vPortExitCritical>
				return pdPASS;
 800b38c:	2601      	movs	r6, #1
}
 800b38e:	4630      	mov	r0, r6
 800b390:	b004      	add	sp, #16
 800b392:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b394:	f004 fb56 	bl	800fa44 <pvTaskIncrementMutexHeldCount>
 800b398:	60a0      	str	r0, [r4, #8]
 800b39a:	e7f3      	b.n	800b384 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b39c:	f104 0010 	add.w	r0, r4, #16
 800b3a0:	f004 f9ba 	bl	800f718 <xTaskRemoveFromEventList>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d0ef      	beq.n	800b388 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800b3a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b3ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b3b4:	f3bf 8f4f 	dsb	sy
 800b3b8:	f3bf 8f6f 	isb	sy
 800b3bc:	e7e4      	b.n	800b388 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b3be:	b146      	cbz	r6, 800b3d2 <xQueueSemaphoreTake+0xb0>
 800b3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	e7fe      	b.n	800b3d0 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800b3d2:	f7ff fa51 	bl	800a878 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800b3d6:	e7da      	b.n	800b38e <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3d8:	a802      	add	r0, sp, #8
 800b3da:	f004 f9e3 	bl	800f7a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3de:	2501      	movs	r5, #1
 800b3e0:	e02a      	b.n	800b438 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b3e8:	e032      	b.n	800b450 <xQueueSemaphoreTake+0x12e>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b3f0:	e034      	b.n	800b45c <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800b3f2:	f7ff fa1f 	bl	800a834 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b3f6:	68a0      	ldr	r0, [r4, #8]
 800b3f8:	f004 fa40 	bl	800f87c <xTaskPriorityInherit>
 800b3fc:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800b3fe:	f7ff fa3b 	bl	800a878 <vPortExitCritical>
 800b402:	e03b      	b.n	800b47c <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800b404:	4620      	mov	r0, r4
 800b406:	f7ff fbda 	bl	800abbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b40a:	f004 f863 	bl	800f4d4 <xTaskResumeAll>
 800b40e:	e009      	b.n	800b424 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800b410:	4620      	mov	r0, r4
 800b412:	f7ff fbd4 	bl	800abbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b416:	f004 f85d 	bl	800f4d4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b41a:	4620      	mov	r0, r4
 800b41c:	f7ff fb75 	bl	800ab0a <prvIsQueueEmpty>
 800b420:	2800      	cmp	r0, #0
 800b422:	d142      	bne.n	800b4aa <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800b424:	f7ff fa06 	bl	800a834 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b428:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1a6      	bne.n	800b37c <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b42e:	9b01      	ldr	r3, [sp, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d0c4      	beq.n	800b3be <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800b434:	2d00      	cmp	r5, #0
 800b436:	d0cf      	beq.n	800b3d8 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800b438:	f7ff fa1e 	bl	800a878 <vPortExitCritical>
		vTaskSuspendAll();
 800b43c:	f003 ffa8 	bl	800f390 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b440:	f7ff f9f8 	bl	800a834 <vPortEnterCritical>
 800b444:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b448:	b25b      	sxtb	r3, r3
 800b44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44e:	d0c8      	beq.n	800b3e2 <xQueueSemaphoreTake+0xc0>
 800b450:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b454:	b25b      	sxtb	r3, r3
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45a:	d0c6      	beq.n	800b3ea <xQueueSemaphoreTake+0xc8>
 800b45c:	f7ff fa0c 	bl	800a878 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b460:	a901      	add	r1, sp, #4
 800b462:	a802      	add	r0, sp, #8
 800b464:	f004 f9aa 	bl	800f7bc <xTaskCheckForTimeOut>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d1d1      	bne.n	800b410 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b46c:	4620      	mov	r0, r4
 800b46e:	f7ff fb4c 	bl	800ab0a <prvIsQueueEmpty>
 800b472:	2800      	cmp	r0, #0
 800b474:	d0c6      	beq.n	800b404 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d0ba      	beq.n	800b3f2 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b47c:	9901      	ldr	r1, [sp, #4]
 800b47e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800b482:	f004 f915 	bl	800f6b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b486:	4620      	mov	r0, r4
 800b488:	f7ff fb99 	bl	800abbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b48c:	f004 f822 	bl	800f4d4 <xTaskResumeAll>
 800b490:	2800      	cmp	r0, #0
 800b492:	d1c7      	bne.n	800b424 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800b494:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b49c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	e7bc      	b.n	800b424 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800b4aa:	b90e      	cbnz	r6, 800b4b0 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800b4ac:	2600      	movs	r6, #0
 800b4ae:	e76e      	b.n	800b38e <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800b4b0:	f7ff f9c0 	bl	800a834 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f7ff fb11 	bl	800aadc <prvGetDisinheritPriorityAfterTimeout>
 800b4ba:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b4bc:	68a0      	ldr	r0, [r4, #8]
 800b4be:	f004 fa71 	bl	800f9a4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b4c2:	f7ff f9d9 	bl	800a878 <vPortExitCritical>
 800b4c6:	e7f1      	b.n	800b4ac <xQueueSemaphoreTake+0x18a>

0800b4c8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800b4c8:	b180      	cbz	r0, 800b4ec <xQueueTakeMutexRecursive+0x24>
	{
 800b4ca:	b570      	push	{r4, r5, r6, lr}
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b4d0:	6886      	ldr	r6, [r0, #8]
 800b4d2:	f004 f9bd 	bl	800f850 <xTaskGetCurrentTaskHandle>
 800b4d6:	4286      	cmp	r6, r0
 800b4d8:	d011      	beq.n	800b4fe <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b4da:	4621      	mov	r1, r4
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f7ff ff20 	bl	800b322 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800b4e2:	b180      	cbz	r0, 800b506 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b4e4:	68eb      	ldr	r3, [r5, #12]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	60eb      	str	r3, [r5, #12]
		return xReturn;
 800b4ea:	e00c      	b.n	800b506 <xQueueTakeMutexRecursive+0x3e>
 800b4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f0:	f383 8811 	msr	BASEPRI, r3
 800b4f4:	f3bf 8f6f 	isb	sy
 800b4f8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800b4fc:	e7fe      	b.n	800b4fc <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b4fe:	68eb      	ldr	r3, [r5, #12]
 800b500:	3301      	adds	r3, #1
 800b502:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 800b504:	2001      	movs	r0, #1
	}
 800b506:	bd70      	pop	{r4, r5, r6, pc}

0800b508 <xQueueReceiveFromISR>:
{
 800b508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800b50c:	b1b0      	cbz	r0, 800b53c <xQueueReceiveFromISR+0x34>
 800b50e:	460d      	mov	r5, r1
 800b510:	4690      	mov	r8, r2
 800b512:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b514:	b1d9      	cbz	r1, 800b54e <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b516:	f7ff fab3 	bl	800aa80 <vPortValidateInterruptPriority>
	__asm volatile
 800b51a:	f3ef 8711 	mrs	r7, BASEPRI
 800b51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b52e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b530:	b9ce      	cbnz	r6, 800b566 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800b532:	2000      	movs	r0, #0
	__asm volatile
 800b534:	f387 8811 	msr	BASEPRI, r7
}
 800b538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800b54c:	e7fe      	b.n	800b54c <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b54e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	d0e0      	beq.n	800b516 <xQueueReceiveFromISR+0xe>
 800b554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	e7fe      	b.n	800b564 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800b566:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800b56a:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b56e:	4629      	mov	r1, r5
 800b570:	4620      	mov	r0, r4
 800b572:	f7ff fb12 	bl	800ab9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b576:	1e73      	subs	r3, r6, #1
 800b578:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800b57a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b57e:	d006      	beq.n	800b58e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b580:	f109 0301 	add.w	r3, r9, #1
 800b584:	b25b      	sxtb	r3, r3
 800b586:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800b58a:	2001      	movs	r0, #1
 800b58c:	e7d2      	b.n	800b534 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b58e:	6923      	ldr	r3, [r4, #16]
 800b590:	b90b      	cbnz	r3, 800b596 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800b592:	2001      	movs	r0, #1
 800b594:	e7ce      	b.n	800b534 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b596:	f104 0010 	add.w	r0, r4, #16
 800b59a:	f004 f8bd 	bl	800f718 <xTaskRemoveFromEventList>
 800b59e:	b130      	cbz	r0, 800b5ae <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800b5a0:	f1b8 0f00 	cmp.w	r8, #0
 800b5a4:	d005      	beq.n	800b5b2 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	f8c8 0000 	str.w	r0, [r8]
 800b5ac:	e7c2      	b.n	800b534 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	e7c0      	b.n	800b534 <xQueueReceiveFromISR+0x2c>
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	e7be      	b.n	800b534 <xQueueReceiveFromISR+0x2c>
	...

0800b5b8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	2b07      	cmp	r3, #7
 800b5bc:	d80c      	bhi.n	800b5d8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b5be:	4a07      	ldr	r2, [pc, #28]	@ (800b5dc <vQueueAddToRegistry+0x24>)
 800b5c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b5c4:	b10a      	cbz	r2, 800b5ca <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	e7f7      	b.n	800b5ba <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b5ca:	4a04      	ldr	r2, [pc, #16]	@ (800b5dc <vQueueAddToRegistry+0x24>)
 800b5cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b5d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b5d4:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b5d6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20003e00 	.word	0x20003e00

0800b5e0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	2b07      	cmp	r3, #7
 800b5e4:	d80f      	bhi.n	800b606 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b5e6:	4a08      	ldr	r2, [pc, #32]	@ (800b608 <vQueueUnregisterQueue+0x28>)
 800b5e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b5ec:	6852      	ldr	r2, [r2, #4]
 800b5ee:	4282      	cmp	r2, r0
 800b5f0:	d001      	beq.n	800b5f6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	e7f5      	b.n	800b5e2 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b5f6:	4a04      	ldr	r2, [pc, #16]	@ (800b608 <vQueueUnregisterQueue+0x28>)
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b5fe:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b602:	6051      	str	r1, [r2, #4]
				break;
 800b604:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b606:	4770      	bx	lr
 800b608:	20003e00 	.word	0x20003e00

0800b60c <vQueueDelete>:
	configASSERT( pxQueue );
 800b60c:	b138      	cbz	r0, 800b61e <vQueueDelete+0x12>
{
 800b60e:	b510      	push	{r4, lr}
 800b610:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800b612:	f7ff ffe5 	bl	800b5e0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b616:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b61a:	b14b      	cbz	r3, 800b630 <vQueueDelete+0x24>
}
 800b61c:	bd10      	pop	{r4, pc}
 800b61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800b62e:	e7fe      	b.n	800b62e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800b630:	4620      	mov	r0, r4
 800b632:	f7fe fd99 	bl	800a168 <vPortFree>
}
 800b636:	e7f1      	b.n	800b61c <vQueueDelete+0x10>

0800b638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	4604      	mov	r4, r0
 800b63c:	460d      	mov	r5, r1
 800b63e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b640:	f7ff f8f8 	bl	800a834 <vPortEnterCritical>
 800b644:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b648:	b25b      	sxtb	r3, r3
 800b64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b64e:	d00d      	beq.n	800b66c <vQueueWaitForMessageRestricted+0x34>
 800b650:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b654:	b25b      	sxtb	r3, r3
 800b656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b65a:	d00b      	beq.n	800b674 <vQueueWaitForMessageRestricted+0x3c>
 800b65c:	f7ff f90c 	bl	800a878 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b660:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b662:	b15b      	cbz	r3, 800b67c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b664:	4620      	mov	r0, r4
 800b666:	f7ff faaa 	bl	800abbe <prvUnlockQueue>
	}
 800b66a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800b66c:	2300      	movs	r3, #0
 800b66e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b672:	e7ed      	b.n	800b650 <vQueueWaitForMessageRestricted+0x18>
 800b674:	2300      	movs	r3, #0
 800b676:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b67a:	e7ef      	b.n	800b65c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b67c:	4632      	mov	r2, r6
 800b67e:	4629      	mov	r1, r5
 800b680:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800b684:	f004 f82c 	bl	800f6e0 <vTaskPlaceOnEventListRestricted>
 800b688:	e7ec      	b.n	800b664 <vQueueWaitForMessageRestricted+0x2c>

0800b68a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b68a:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b68c:	2003      	movs	r0, #3
 800b68e:	f001 f999 	bl	800c9c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b692:	200f      	movs	r0, #15
 800b694:	f003 fb98 	bl	800edc8 <HAL_InitTick>
 800b698:	b110      	cbz	r0, 800b6a0 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800b69a:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800b69c:	4620      	mov	r0, r4
 800b69e:	bd10      	pop	{r4, pc}
 800b6a0:	4604      	mov	r4, r0
    HAL_MspInit();
 800b6a2:	f002 f955 	bl	800d950 <HAL_MspInit>
 800b6a6:	e7f9      	b.n	800b69c <HAL_Init+0x12>

0800b6a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800b6a8:	4b03      	ldr	r3, [pc, #12]	@ (800b6b8 <HAL_IncTick+0x10>)
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	4a03      	ldr	r2, [pc, #12]	@ (800b6bc <HAL_IncTick+0x14>)
 800b6ae:	6811      	ldr	r1, [r2, #0]
 800b6b0:	440b      	add	r3, r1
 800b6b2:	6013      	str	r3, [r2, #0]
}
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	20000004 	.word	0x20000004
 800b6bc:	20003e40 	.word	0x20003e40

0800b6c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b6c0:	4b01      	ldr	r3, [pc, #4]	@ (800b6c8 <HAL_GetTick+0x8>)
 800b6c2:	6818      	ldr	r0, [r3, #0]
}
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	20003e40 	.word	0x20003e40

0800b6cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b6cc:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b6ce:	3030      	adds	r0, #48	@ 0x30
 800b6d0:	0a0b      	lsrs	r3, r1, #8
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b6d8:	58c4      	ldr	r4, [r0, r3]
 800b6da:	f001 011f 	and.w	r1, r1, #31
 800b6de:	f04f 0c1f 	mov.w	ip, #31
 800b6e2:	fa0c fc01 	lsl.w	ip, ip, r1
 800b6e6:	ea24 0c0c 	bic.w	ip, r4, ip
 800b6ea:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800b6ee:	408a      	lsls	r2, r1
 800b6f0:	ea4c 0202 	orr.w	r2, ip, r2
 800b6f4:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b6fc:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b6fe:	3014      	adds	r0, #20
 800b700:	0e4b      	lsrs	r3, r1, #25
 800b702:	009b      	lsls	r3, r3, #2
 800b704:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b708:	58c4      	ldr	r4, [r0, r3]
 800b70a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800b70e:	f04f 0c07 	mov.w	ip, #7
 800b712:	fa0c fc01 	lsl.w	ip, ip, r1
 800b716:	ea24 0c0c 	bic.w	ip, r4, ip
 800b71a:	408a      	lsls	r2, r1
 800b71c:	ea4c 0202 	orr.w	r2, ip, r2
 800b720:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b722:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b728:	b530      	push	{r4, r5, lr}
 800b72a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b72c:	2300      	movs	r3, #0
 800b72e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800b730:	2800      	cmp	r0, #0
 800b732:	f000 80d0 	beq.w	800b8d6 <HAL_ADC_Init+0x1ae>
 800b736:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b738:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b73a:	b313      	cbz	r3, 800b782 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b73c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b73e:	689a      	ldr	r2, [r3, #8]
 800b740:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 800b744:	d005      	beq.n	800b752 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 800b74c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800b750:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b752:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b754:	6893      	ldr	r3, [r2, #8]
 800b756:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800b75a:	d11f      	bne.n	800b79c <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 800b75c:	6893      	ldr	r3, [r2, #8]
 800b75e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b762:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b76a:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b76c:	4b5b      	ldr	r3, [pc, #364]	@ (800b8dc <HAL_ADC_Init+0x1b4>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	099b      	lsrs	r3, r3, #6
 800b772:	4a5b      	ldr	r2, [pc, #364]	@ (800b8e0 <HAL_ADC_Init+0x1b8>)
 800b774:	fba2 2303 	umull	r2, r3, r2, r3
 800b778:	099b      	lsrs	r3, r3, #6
 800b77a:	3301      	adds	r3, #1
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800b780:	e009      	b.n	800b796 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800b782:	f002 f905 	bl	800d990 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800b786:	2300      	movs	r3, #0
 800b788:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800b78a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800b78e:	e7d5      	b.n	800b73c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800b790:	9b01      	ldr	r3, [sp, #4]
 800b792:	3b01      	subs	r3, #1
 800b794:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800b796:	9b01      	ldr	r3, [sp, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f9      	bne.n	800b790 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b79c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b79e:	6893      	ldr	r3, [r2, #8]
 800b7a0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800b7a4:	d170      	bne.n	800b888 <HAL_ADC_Init+0x160>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b7a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b7a8:	f043 0310 	orr.w	r3, r3, #16
 800b7ac:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b7ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b7b0:	f043 0301 	orr.w	r3, r3, #1
 800b7b4:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b7b6:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b7b8:	6893      	ldr	r3, [r2, #8]
 800b7ba:	f013 0304 	ands.w	r3, r3, #4
 800b7be:	d000      	beq.n	800b7c2 <HAL_ADC_Init+0x9a>
 800b7c0:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b7c2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b7c4:	f011 0f10 	tst.w	r1, #16
 800b7c8:	d17e      	bne.n	800b8c8 <HAL_ADC_Init+0x1a0>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d17c      	bne.n	800b8c8 <HAL_ADC_Init+0x1a0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b7ce:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b7d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b7d4:	f043 0302 	orr.w	r3, r3, #2
 800b7d8:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b7da:	6893      	ldr	r3, [r2, #8]
 800b7dc:	f013 0f01 	tst.w	r3, #1
 800b7e0:	d10b      	bne.n	800b7fa <HAL_ADC_Init+0xd2>
 800b7e2:	4b40      	ldr	r3, [pc, #256]	@ (800b8e4 <HAL_ADC_Init+0x1bc>)
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	f013 0f01 	tst.w	r3, #1
 800b7ea:	d106      	bne.n	800b7fa <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b7ec:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b7ee:	493e      	ldr	r1, [pc, #248]	@ (800b8e8 <HAL_ADC_Init+0x1c0>)
 800b7f0:	688a      	ldr	r2, [r1, #8]
 800b7f2:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b7fa:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 800b7fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b7fe:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 800b802:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 800b804:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 800b806:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 800b808:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b80a:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b80e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b812:	2a01      	cmp	r2, #1
 800b814:	d03a      	beq.n	800b88c <HAL_ADC_Init+0x164>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b816:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b818:	b122      	cbz	r2, 800b824 <HAL_ADC_Init+0xfc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b81a:	f402 7270 	and.w	r2, r2, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b81e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b820:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b822:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b824:	6821      	ldr	r1, [r4, #0]
 800b826:	68cd      	ldr	r5, [r1, #12]
 800b828:	4a30      	ldr	r2, [pc, #192]	@ (800b8ec <HAL_ADC_Init+0x1c4>)
 800b82a:	402a      	ands	r2, r5
 800b82c:	431a      	orrs	r2, r3
 800b82e:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b830:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b832:	6893      	ldr	r3, [r2, #8]
 800b834:	f013 0308 	ands.w	r3, r3, #8
 800b838:	d000      	beq.n	800b83c <HAL_ADC_Init+0x114>
 800b83a:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b83c:	b9ab      	cbnz	r3, 800b86a <HAL_ADC_Init+0x142>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b83e:	7e23      	ldrb	r3, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b840:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800b844:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b846:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b84a:	68d3      	ldr	r3, [r2, #12]
 800b84c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b850:	f023 0302 	bic.w	r3, r3, #2
 800b854:	430b      	orrs	r3, r1
 800b856:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b858:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d01a      	beq.n	800b896 <HAL_ADC_Init+0x16e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b860:	6822      	ldr	r2, [r4, #0]
 800b862:	6913      	ldr	r3, [r2, #16]
 800b864:	f023 0301 	bic.w	r3, r3, #1
 800b868:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d022      	beq.n	800b8b6 <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b870:	6822      	ldr	r2, [r4, #0]
 800b872:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800b874:	f023 030f 	bic.w	r3, r3, #15
 800b878:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b87a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b87c:	f023 0303 	bic.w	r3, r3, #3
 800b880:	f043 0301 	orr.w	r3, r3, #1
 800b884:	6563      	str	r3, [r4, #84]	@ 0x54
 800b886:	e024      	b.n	800b8d2 <HAL_ADC_Init+0x1aa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b888:	2000      	movs	r0, #0
 800b88a:	e795      	b.n	800b7b8 <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b88c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b88e:	3a01      	subs	r2, #1
 800b890:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800b894:	e7bf      	b.n	800b816 <HAL_ADC_Init+0xee>
        MODIFY_REG(hadc->Instance->CFGR2,
 800b896:	6821      	ldr	r1, [r4, #0]
 800b898:	690b      	ldr	r3, [r1, #16]
 800b89a:	f36f 038a 	bfc	r3, #2, #9
 800b89e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b8a0:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b8a2:	432a      	orrs	r2, r5
 800b8a4:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 800b8a6:	432a      	orrs	r2, r5
 800b8a8:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800b8aa:	432a      	orrs	r2, r5
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	610b      	str	r3, [r1, #16]
 800b8b4:	e7d9      	b.n	800b86a <HAL_ADC_Init+0x142>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b8b6:	6821      	ldr	r1, [r4, #0]
 800b8b8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800b8ba:	f023 030f 	bic.w	r3, r3, #15
 800b8be:	69e2      	ldr	r2, [r4, #28]
 800b8c0:	3a01      	subs	r2, #1
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	630b      	str	r3, [r1, #48]	@ 0x30
 800b8c6:	e7d8      	b.n	800b87a <HAL_ADC_Init+0x152>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b8c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b8ca:	f043 0310 	orr.w	r3, r3, #16
 800b8ce:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b8d0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 800b8d2:	b003      	add	sp, #12
 800b8d4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	e7fb      	b.n	800b8d2 <HAL_ADC_Init+0x1aa>
 800b8da:	bf00      	nop
 800b8dc:	2000002c 	.word	0x2000002c
 800b8e0:	053e2d63 	.word	0x053e2d63
 800b8e4:	50040000 	.word	0x50040000
 800b8e8:	50040300 	.word	0x50040300
 800b8ec:	fff0c007 	.word	0xfff0c007

0800b8f0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b8f6:	6945      	ldr	r5, [r0, #20]
 800b8f8:	2d08      	cmp	r5, #8
 800b8fa:	d005      	beq.n	800b908 <HAL_ADC_PollForConversion+0x18>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b8fc:	6803      	ldr	r3, [r0, #0]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	f013 0f01 	tst.w	r3, #1
 800b904:	d11e      	bne.n	800b944 <HAL_ADC_PollForConversion+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800b906:	2504      	movs	r5, #4
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800b908:	f7ff feda 	bl	800b6c0 <HAL_GetTick>
 800b90c:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b90e:	6823      	ldr	r3, [r4, #0]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	422a      	tst	r2, r5
 800b914:	d11c      	bne.n	800b950 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800b916:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b91a:	d0f8      	beq.n	800b90e <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800b91c:	f7ff fed0 	bl	800b6c0 <HAL_GetTick>
 800b920:	1bc3      	subs	r3, r0, r7
 800b922:	42b3      	cmp	r3, r6
 800b924:	d801      	bhi.n	800b92a <HAL_ADC_PollForConversion+0x3a>
 800b926:	2e00      	cmp	r6, #0
 800b928:	d1f1      	bne.n	800b90e <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	422b      	tst	r3, r5
 800b930:	d1ed      	bne.n	800b90e <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b932:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b934:	f043 0304 	orr.w	r3, r3, #4
 800b938:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b93a:	2300      	movs	r3, #0
 800b93c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

          return HAL_TIMEOUT;
 800b940:	2003      	movs	r0, #3
 800b942:	e004      	b.n	800b94e <HAL_ADC_PollForConversion+0x5e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b944:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b946:	f043 0320 	orr.w	r3, r3, #32
 800b94a:	6543      	str	r3, [r0, #84]	@ 0x54
      return HAL_ERROR;
 800b94c:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800b94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b950:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b956:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b958:	68da      	ldr	r2, [r3, #12]
 800b95a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800b95e:	d111      	bne.n	800b984 <HAL_ADC_PollForConversion+0x94>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800b960:	7e62      	ldrb	r2, [r4, #25]
 800b962:	b97a      	cbnz	r2, 800b984 <HAL_ADC_PollForConversion+0x94>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	f012 0f08 	tst.w	r2, #8
 800b96a:	d00b      	beq.n	800b984 <HAL_ADC_PollForConversion+0x94>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b96c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b96e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b972:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b974:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b976:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800b97a:	d103      	bne.n	800b984 <HAL_ADC_PollForConversion+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b97c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b97e:	f042 0201 	orr.w	r2, r2, #1
 800b982:	6562      	str	r2, [r4, #84]	@ 0x54
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800b984:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800b986:	2d08      	cmp	r5, #8
 800b988:	d006      	beq.n	800b998 <HAL_ADC_PollForConversion+0xa8>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800b98a:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800b98e:	d107      	bne.n	800b9a0 <HAL_ADC_PollForConversion+0xb0>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b990:	220c      	movs	r2, #12
 800b992:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b994:	2000      	movs	r0, #0
 800b996:	e7da      	b.n	800b94e <HAL_ADC_PollForConversion+0x5e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800b998:	2208      	movs	r2, #8
 800b99a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b99c:	2000      	movs	r0, #0
 800b99e:	e7d6      	b.n	800b94e <HAL_ADC_PollForConversion+0x5e>
 800b9a0:	2000      	movs	r0, #0
 800b9a2:	e7d4      	b.n	800b94e <HAL_ADC_PollForConversion+0x5e>

0800b9a4 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800b9a4:	6803      	ldr	r3, [r0, #0]
 800b9a6:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800b9a8:	4770      	bx	lr
	...

0800b9ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ae:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b9b4:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	f000 8203 	beq.w	800bdc4 <HAL_ADC_ConfigChannel+0x418>
 800b9be:	4604      	mov	r4, r0
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b9c8:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b9ca:	6883      	ldr	r3, [r0, #8]
 800b9cc:	f013 0f04 	tst.w	r3, #4
 800b9d0:	d009      	beq.n	800b9e6 <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b9d2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b9d4:	f043 0320 	orr.w	r3, r3, #32
 800b9d8:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b9da:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800b9e2:	b003      	add	sp, #12
 800b9e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t config_rank = pConfig->Rank;
 800b9e6:	6849      	ldr	r1, [r1, #4]
    if (pConfig->Rank <= 5U)
 800b9e8:	2905      	cmp	r1, #5
 800b9ea:	d807      	bhi.n	800b9fc <HAL_ADC_ConfigChannel+0x50>
      switch (pConfig->Rank)
 800b9ec:	3902      	subs	r1, #2
 800b9ee:	2903      	cmp	r1, #3
 800b9f0:	d84e      	bhi.n	800ba90 <HAL_ADC_ConfigChannel+0xe4>
 800b9f2:	e8df f001 	tbb	[pc, r1]
 800b9f6:	4f02      	.short	0x4f02
 800b9f8:	4a48      	.short	0x4a48
 800b9fa:	210c      	movs	r1, #12
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800b9fc:	682a      	ldr	r2, [r5, #0]
 800b9fe:	f7ff fe65 	bl	800b6cc <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ba02:	6820      	ldr	r0, [r4, #0]
 800ba04:	6883      	ldr	r3, [r0, #8]
 800ba06:	f013 0304 	ands.w	r3, r3, #4
 800ba0a:	d000      	beq.n	800ba0e <HAL_ADC_ConfigChannel+0x62>
 800ba0c:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800ba0e:	6882      	ldr	r2, [r0, #8]
 800ba10:	f012 0208 	ands.w	r2, r2, #8
 800ba14:	d000      	beq.n	800ba18 <HAL_ADC_ConfigChannel+0x6c>
 800ba16:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ba18:	b90b      	cbnz	r3, 800ba1e <HAL_ADC_ConfigChannel+0x72>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	d03c      	beq.n	800ba98 <HAL_ADC_ConfigChannel+0xec>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ba1e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ba20:	6893      	ldr	r3, [r2, #8]
 800ba22:	f013 0f01 	tst.w	r3, #1
 800ba26:	d117      	bne.n	800ba58 <HAL_ADC_ConfigChannel+0xac>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800ba2c:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 800ba30:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800ba34:	ea21 0106 	bic.w	r1, r1, r6
 800ba38:	f000 0c18 	and.w	ip, r0, #24
 800ba3c:	48a8      	ldr	r0, [pc, #672]	@ (800bce0 <HAL_ADC_ConfigChannel+0x334>)
 800ba3e:	fa20 f00c 	lsr.w	r0, r0, ip
 800ba42:	4003      	ands	r3, r0
 800ba44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ba4e:	68ea      	ldr	r2, [r5, #12]
 800ba50:	4ba4      	ldr	r3, [pc, #656]	@ (800bce4 <HAL_ADC_ConfigChannel+0x338>)
 800ba52:	429a      	cmp	r2, r3
 800ba54:	f000 80a5 	beq.w	800bba2 <HAL_ADC_ConfigChannel+0x1f6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	4aa3      	ldr	r2, [pc, #652]	@ (800bce8 <HAL_ADC_ConfigChannel+0x33c>)
 800ba5c:	4213      	tst	r3, r2
 800ba5e:	f000 81ad 	beq.w	800bdbc <HAL_ADC_ConfigChannel+0x410>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ba62:	4aa2      	ldr	r2, [pc, #648]	@ (800bcec <HAL_ADC_ConfigChannel+0x340>)
 800ba64:	6892      	ldr	r2, [r2, #8]
 800ba66:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800ba6a:	49a1      	ldr	r1, [pc, #644]	@ (800bcf0 <HAL_ADC_ConfigChannel+0x344>)
 800ba6c:	428b      	cmp	r3, r1
 800ba6e:	f000 8158 	beq.w	800bd22 <HAL_ADC_ConfigChannel+0x376>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800ba72:	49a0      	ldr	r1, [pc, #640]	@ (800bcf4 <HAL_ADC_ConfigChannel+0x348>)
 800ba74:	428b      	cmp	r3, r1
 800ba76:	f000 817a 	beq.w	800bd6e <HAL_ADC_ConfigChannel+0x3c2>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ba7a:	499f      	ldr	r1, [pc, #636]	@ (800bcf8 <HAL_ADC_ConfigChannel+0x34c>)
 800ba7c:	428b      	cmp	r3, r1
 800ba7e:	f000 818a 	beq.w	800bd96 <HAL_ADC_ConfigChannel+0x3ea>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ba82:	2000      	movs	r0, #0
 800ba84:	e7aa      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
          config_rank = ADC_REGULAR_RANK_4;
 800ba86:	2118      	movs	r1, #24
          break;
 800ba88:	e7b8      	b.n	800b9fc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_5;
 800ba8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
          break;
 800ba8e:	e7b5      	b.n	800b9fc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_1;
 800ba90:	2106      	movs	r1, #6
          break;
 800ba92:	e7b3      	b.n	800b9fc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_3;
 800ba94:	2112      	movs	r1, #18
 800ba96:	e7b1      	b.n	800b9fc <HAL_ADC_ConfigChannel+0x50>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800ba98:	68aa      	ldr	r2, [r5, #8]
 800ba9a:	6829      	ldr	r1, [r5, #0]
 800ba9c:	f7ff fe2e 	bl	800b6fc <LL_ADC_SetChannelSamplingTime>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800baa0:	6969      	ldr	r1, [r5, #20]
 800baa2:	6822      	ldr	r2, [r4, #0]
 800baa4:	68d3      	ldr	r3, [r2, #12]
 800baa6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800baaa:	005b      	lsls	r3, r3, #1
 800baac:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800baae:	6928      	ldr	r0, [r5, #16]
 800bab0:	2804      	cmp	r0, #4
 800bab2:	d00e      	beq.n	800bad2 <HAL_ADC_ConfigChannel+0x126>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800bab4:	682e      	ldr	r6, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bab6:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 800bab8:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 800babc:	4b8f      	ldr	r3, [pc, #572]	@ (800bcfc <HAL_ADC_ConfigChannel+0x350>)
 800babe:	403b      	ands	r3, r7
 800bac0:	f006 46f8 	and.w	r6, r6, #2080374784	@ 0x7c000000
 800bac4:	4331      	orrs	r1, r6
 800bac6:	430b      	orrs	r3, r1
 800bac8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bacc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800bad0:	e7a5      	b.n	800ba1e <HAL_ADC_ConfigChannel+0x72>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800bad2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800bad4:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bad6:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bada:	682b      	ldr	r3, [r5, #0]
 800badc:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800bae0:	bb80      	cbnz	r0, 800bb44 <HAL_ADC_ConfigChannel+0x198>
 800bae2:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bae6:	4299      	cmp	r1, r3
 800bae8:	d034      	beq.n	800bb54 <HAL_ADC_ConfigChannel+0x1a8>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800baea:	6821      	ldr	r1, [r4, #0]
 800baec:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800baee:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 800baf0:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800bafa:	bb80      	cbnz	r0, 800bb5e <HAL_ADC_ConfigChannel+0x1b2>
 800bafc:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d034      	beq.n	800bb6e <HAL_ADC_ConfigChannel+0x1c2>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bb04:	6821      	ldr	r1, [r4, #0]
 800bb06:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 800bb08:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 800bb0a:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bb0e:	682b      	ldr	r3, [r5, #0]
 800bb10:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800bb14:	bb80      	cbnz	r0, 800bb78 <HAL_ADC_ConfigChannel+0x1cc>
 800bb16:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d034      	beq.n	800bb88 <HAL_ADC_ConfigChannel+0x1dc>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bb1e:	6821      	ldr	r1, [r4, #0]
 800bb20:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800bb22:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 800bb24:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800bb2e:	bb80      	cbnz	r0, 800bb92 <HAL_ADC_ConfigChannel+0x1e6>
 800bb30:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bb34:	429a      	cmp	r2, r3
 800bb36:	f47f af72 	bne.w	800ba1e <HAL_ADC_ConfigChannel+0x72>
  MODIFY_REG(*preg,
 800bb3a:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800bb3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb40:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 800bb42:	e76c      	b.n	800ba1e <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb44:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bb48:	b113      	cbz	r3, 800bb50 <HAL_ADC_ConfigChannel+0x1a4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800bb4a:	fab3 f383 	clz	r3, r3
 800bb4e:	e7ca      	b.n	800bae6 <HAL_ADC_ConfigChannel+0x13a>
    return 32U;
 800bb50:	2320      	movs	r3, #32
 800bb52:	e7c8      	b.n	800bae6 <HAL_ADC_ConfigChannel+0x13a>
  MODIFY_REG(*preg,
 800bb54:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800bb56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb5a:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800bb5c:	e7c5      	b.n	800baea <HAL_ADC_ConfigChannel+0x13e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb5e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800bb62:	b113      	cbz	r3, 800bb6a <HAL_ADC_ConfigChannel+0x1be>
  return __builtin_clz(value);
 800bb64:	fab3 f383 	clz	r3, r3
 800bb68:	e7ca      	b.n	800bb00 <HAL_ADC_ConfigChannel+0x154>
    return 32U;
 800bb6a:	2320      	movs	r3, #32
 800bb6c:	e7c8      	b.n	800bb00 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(*preg,
 800bb6e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800bb70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb74:	664b      	str	r3, [r1, #100]	@ 0x64
}
 800bb76:	e7c5      	b.n	800bb04 <HAL_ADC_ConfigChannel+0x158>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb78:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800bb7c:	b113      	cbz	r3, 800bb84 <HAL_ADC_ConfigChannel+0x1d8>
  return __builtin_clz(value);
 800bb7e:	fab3 f383 	clz	r3, r3
 800bb82:	e7ca      	b.n	800bb1a <HAL_ADC_ConfigChannel+0x16e>
    return 32U;
 800bb84:	2320      	movs	r3, #32
 800bb86:	e7c8      	b.n	800bb1a <HAL_ADC_ConfigChannel+0x16e>
  MODIFY_REG(*preg,
 800bb88:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 800bb8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb8e:	668b      	str	r3, [r1, #104]	@ 0x68
}
 800bb90:	e7c5      	b.n	800bb1e <HAL_ADC_ConfigChannel+0x172>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb92:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800bb96:	b113      	cbz	r3, 800bb9e <HAL_ADC_ConfigChannel+0x1f2>
  return __builtin_clz(value);
 800bb98:	fab3 f383 	clz	r3, r3
 800bb9c:	e7ca      	b.n	800bb34 <HAL_ADC_ConfigChannel+0x188>
    return 32U;
 800bb9e:	2320      	movs	r3, #32
 800bba0:	e7c8      	b.n	800bb34 <HAL_ADC_ConfigChannel+0x188>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bba2:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800bbaa:	bb3e      	cbnz	r6, 800bbfc <HAL_ADC_ConfigChannel+0x250>
 800bbac:	0e9a      	lsrs	r2, r3, #26
 800bbae:	3201      	adds	r2, #1
 800bbb0:	f002 021f 	and.w	r2, r2, #31
 800bbb4:	2a09      	cmp	r2, #9
 800bbb6:	bf8c      	ite	hi
 800bbb8:	2200      	movhi	r2, #0
 800bbba:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bbbc:	2a00      	cmp	r2, #0
 800bbbe:	d055      	beq.n	800bc6c <HAL_ADC_ConfigChannel+0x2c0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bbc0:	bb5e      	cbnz	r6, 800bc1a <HAL_ADC_ConfigChannel+0x26e>
 800bbc2:	0e99      	lsrs	r1, r3, #26
 800bbc4:	3101      	adds	r1, #1
 800bbc6:	0689      	lsls	r1, r1, #26
 800bbc8:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800bbcc:	bb8e      	cbnz	r6, 800bc32 <HAL_ADC_ConfigChannel+0x286>
 800bbce:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800bbd2:	f10c 0c01 	add.w	ip, ip, #1
 800bbd6:	f00c 0c1f 	and.w	ip, ip, #31
 800bbda:	2201      	movs	r2, #1
 800bbdc:	fa02 f20c 	lsl.w	r2, r2, ip
 800bbe0:	4311      	orrs	r1, r2
 800bbe2:	bbae      	cbnz	r6, 800bc50 <HAL_ADC_ConfigChannel+0x2a4>
 800bbe4:	0e9b      	lsrs	r3, r3, #26
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	f003 031f 	and.w	r3, r3, #31
 800bbec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bbf0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bbf2:	4319      	orrs	r1, r3
 800bbf4:	68aa      	ldr	r2, [r5, #8]
 800bbf6:	f7ff fd81 	bl	800b6fc <LL_ADC_SetChannelSamplingTime>
 800bbfa:	e72d      	b.n	800ba58 <HAL_ADC_ConfigChannel+0xac>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbfc:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800bc00:	b14a      	cbz	r2, 800bc16 <HAL_ADC_ConfigChannel+0x26a>
  return __builtin_clz(value);
 800bc02:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bc06:	3201      	adds	r2, #1
 800bc08:	f002 021f 	and.w	r2, r2, #31
 800bc0c:	2a09      	cmp	r2, #9
 800bc0e:	bf8c      	ite	hi
 800bc10:	2200      	movhi	r2, #0
 800bc12:	2201      	movls	r2, #1
 800bc14:	e7d2      	b.n	800bbbc <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 800bc16:	2220      	movs	r2, #32
 800bc18:	e7f5      	b.n	800bc06 <HAL_ADC_ConfigChannel+0x25a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc1a:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800bc1e:	b131      	cbz	r1, 800bc2e <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 800bc20:	fab1 f181 	clz	r1, r1
 800bc24:	3101      	adds	r1, #1
 800bc26:	0689      	lsls	r1, r1, #26
 800bc28:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800bc2c:	e7ce      	b.n	800bbcc <HAL_ADC_ConfigChannel+0x220>
    return 32U;
 800bc2e:	2120      	movs	r1, #32
 800bc30:	e7f8      	b.n	800bc24 <HAL_ADC_ConfigChannel+0x278>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc32:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800bc36:	b14a      	cbz	r2, 800bc4c <HAL_ADC_ConfigChannel+0x2a0>
  return __builtin_clz(value);
 800bc38:	fab2 f282 	clz	r2, r2
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	f002 021f 	and.w	r2, r2, #31
 800bc42:	f04f 0c01 	mov.w	ip, #1
 800bc46:	fa0c f202 	lsl.w	r2, ip, r2
 800bc4a:	e7c9      	b.n	800bbe0 <HAL_ADC_ConfigChannel+0x234>
    return 32U;
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	e7f5      	b.n	800bc3c <HAL_ADC_ConfigChannel+0x290>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc50:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800bc54:	b143      	cbz	r3, 800bc68 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800bc56:	fab3 f383 	clz	r3, r3
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	f003 031f 	and.w	r3, r3, #31
 800bc60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bc64:	051b      	lsls	r3, r3, #20
 800bc66:	e7c4      	b.n	800bbf2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800bc68:	2320      	movs	r3, #32
 800bc6a:	e7f6      	b.n	800bc5a <HAL_ADC_ConfigChannel+0x2ae>
 800bc6c:	b9e6      	cbnz	r6, 800bca8 <HAL_ADC_ConfigChannel+0x2fc>
 800bc6e:	0e99      	lsrs	r1, r3, #26
 800bc70:	3101      	adds	r1, #1
 800bc72:	0689      	lsls	r1, r1, #26
 800bc74:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800bc78:	bb16      	cbnz	r6, 800bcc0 <HAL_ADC_ConfigChannel+0x314>
 800bc7a:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800bc7e:	f10c 0c01 	add.w	ip, ip, #1
 800bc82:	f00c 0c1f 	and.w	ip, ip, #31
 800bc86:	2201      	movs	r2, #1
 800bc88:	fa02 f20c 	lsl.w	r2, r2, ip
 800bc8c:	4311      	orrs	r1, r2
 800bc8e:	bbbe      	cbnz	r6, 800bd00 <HAL_ADC_ConfigChannel+0x354>
 800bc90:	0e9b      	lsrs	r3, r3, #26
 800bc92:	3301      	adds	r3, #1
 800bc94:	f003 031f 	and.w	r3, r3, #31
 800bc98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bc9c:	3b1e      	subs	r3, #30
 800bc9e:	051b      	lsls	r3, r3, #20
 800bca0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bca4:	4319      	orrs	r1, r3
 800bca6:	e7a5      	b.n	800bbf4 <HAL_ADC_ConfigChannel+0x248>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bca8:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800bcac:	b131      	cbz	r1, 800bcbc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800bcae:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bcb2:	3101      	adds	r1, #1
 800bcb4:	0689      	lsls	r1, r1, #26
 800bcb6:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800bcba:	e7dd      	b.n	800bc78 <HAL_ADC_ConfigChannel+0x2cc>
    return 32U;
 800bcbc:	2120      	movs	r1, #32
 800bcbe:	e7f8      	b.n	800bcb2 <HAL_ADC_ConfigChannel+0x306>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcc0:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800bcc4:	b14a      	cbz	r2, 800bcda <HAL_ADC_ConfigChannel+0x32e>
  return __builtin_clz(value);
 800bcc6:	fab2 f282 	clz	r2, r2
 800bcca:	3201      	adds	r2, #1
 800bccc:	f002 021f 	and.w	r2, r2, #31
 800bcd0:	f04f 0c01 	mov.w	ip, #1
 800bcd4:	fa0c f202 	lsl.w	r2, ip, r2
 800bcd8:	e7d8      	b.n	800bc8c <HAL_ADC_ConfigChannel+0x2e0>
    return 32U;
 800bcda:	2220      	movs	r2, #32
 800bcdc:	e7f5      	b.n	800bcca <HAL_ADC_ConfigChannel+0x31e>
 800bcde:	bf00      	nop
 800bce0:	0007ffff 	.word	0x0007ffff
 800bce4:	407f0000 	.word	0x407f0000
 800bce8:	80080000 	.word	0x80080000
 800bcec:	50040300 	.word	0x50040300
 800bcf0:	c7520000 	.word	0xc7520000
 800bcf4:	cb840000 	.word	0xcb840000
 800bcf8:	80000001 	.word	0x80000001
 800bcfc:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd00:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800bd04:	b15b      	cbz	r3, 800bd1e <HAL_ADC_ConfigChannel+0x372>
  return __builtin_clz(value);
 800bd06:	fab3 f383 	clz	r3, r3
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	f003 031f 	and.w	r3, r3, #31
 800bd10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bd14:	3b1e      	subs	r3, #30
 800bd16:	051b      	lsls	r3, r3, #20
 800bd18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bd1c:	e7c2      	b.n	800bca4 <HAL_ADC_ConfigChannel+0x2f8>
    return 32U;
 800bd1e:	2320      	movs	r3, #32
 800bd20:	e7f3      	b.n	800bd0a <HAL_ADC_ConfigChannel+0x35e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bd22:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 800bd26:	f47f aea4 	bne.w	800ba72 <HAL_ADC_ConfigChannel+0xc6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	4b26      	ldr	r3, [pc, #152]	@ (800bdc8 <HAL_ADC_ConfigChannel+0x41c>)
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d001      	beq.n	800bd36 <HAL_ADC_ConfigChannel+0x38a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bd32:	2000      	movs	r0, #0
 800bd34:	e652      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd36:	f440 0300 	orr.w	r3, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800bd3a:	4924      	ldr	r1, [pc, #144]	@ (800bdcc <HAL_ADC_ConfigChannel+0x420>)
 800bd3c:	688a      	ldr	r2, [r1, #8]
 800bd3e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800bd42:	4313      	orrs	r3, r2
 800bd44:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bd46:	4b22      	ldr	r3, [pc, #136]	@ (800bdd0 <HAL_ADC_ConfigChannel+0x424>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	099b      	lsrs	r3, r3, #6
 800bd4c:	4a21      	ldr	r2, [pc, #132]	@ (800bdd4 <HAL_ADC_ConfigChannel+0x428>)
 800bd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd52:	099b      	lsrs	r3, r3, #6
 800bd54:	3301      	adds	r3, #1
 800bd56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800bd5e:	9b01      	ldr	r3, [sp, #4]
 800bd60:	b11b      	cbz	r3, 800bd6a <HAL_ADC_ConfigChannel+0x3be>
            wait_loop_index--;
 800bd62:	9b01      	ldr	r3, [sp, #4]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	9301      	str	r3, [sp, #4]
 800bd68:	e7f9      	b.n	800bd5e <HAL_ADC_ConfigChannel+0x3b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e636      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bd6e:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 800bd72:	f47f ae82 	bne.w	800ba7a <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd76:	6822      	ldr	r2, [r4, #0]
 800bd78:	4b13      	ldr	r3, [pc, #76]	@ (800bdc8 <HAL_ADC_ConfigChannel+0x41c>)
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d001      	beq.n	800bd82 <HAL_ADC_ConfigChannel+0x3d6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bd7e:	2000      	movs	r0, #0
 800bd80:	e62c      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd82:	f040 7380 	orr.w	r3, r0, #16777216	@ 0x1000000
 800bd86:	4911      	ldr	r1, [pc, #68]	@ (800bdcc <HAL_ADC_ConfigChannel+0x420>)
 800bd88:	688a      	ldr	r2, [r1, #8]
 800bd8a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bd92:	2000      	movs	r0, #0
}
 800bd94:	e622      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bd96:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800bd9a:	d111      	bne.n	800bdc0 <HAL_ADC_ConfigChannel+0x414>
        if (ADC_VREFINT_INSTANCE(hadc))
 800bd9c:	6822      	ldr	r2, [r4, #0]
 800bd9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc8 <HAL_ADC_ConfigChannel+0x41c>)
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d001      	beq.n	800bda8 <HAL_ADC_ConfigChannel+0x3fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bda4:	2000      	movs	r0, #0
 800bda6:	e619      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bda8:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800bdac:	4907      	ldr	r1, [pc, #28]	@ (800bdcc <HAL_ADC_ConfigChannel+0x420>)
 800bdae:	688a      	ldr	r2, [r1, #8]
 800bdb0:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bdb8:	2000      	movs	r0, #0
}
 800bdba:	e60f      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	e60d      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e60b      	b.n	800b9dc <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800bdc4:	2002      	movs	r0, #2
 800bdc6:	e60c      	b.n	800b9e2 <HAL_ADC_ConfigChannel+0x36>
 800bdc8:	50040000 	.word	0x50040000
 800bdcc:	50040300 	.word	0x50040300
 800bdd0:	2000002c 	.word	0x2000002c
 800bdd4:	053e2d63 	.word	0x053e2d63

0800bdd8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800bddc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bdde:	689a      	ldr	r2, [r3, #8]
 800bde0:	f012 0204 	ands.w	r2, r2, #4
 800bde4:	d000      	beq.n	800bde8 <ADC_ConversionStop+0x10>
 800bde6:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800bde8:	6898      	ldr	r0, [r3, #8]
 800bdea:	f010 0008 	ands.w	r0, r0, #8
 800bdee:	d000      	beq.n	800bdf2 <ADC_ConversionStop+0x1a>
 800bdf0:	2001      	movs	r0, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800bdf2:	b90a      	cbnz	r2, 800bdf8 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d06d      	beq.n	800bed4 <ADC_ConversionStop+0xfc>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800bdfe:	d004      	beq.n	800be0a <ADC_ConversionStop+0x32>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800be00:	8b20      	ldrh	r0, [r4, #24]
 800be02:	f240 1201 	movw	r2, #257	@ 0x101
 800be06:	4290      	cmp	r0, r2
 800be08:	d04e      	beq.n	800bea8 <ADC_ConversionStop+0xd0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800be0a:	2902      	cmp	r1, #2
 800be0c:	d012      	beq.n	800be34 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800be0e:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800be10:	689a      	ldr	r2, [r3, #8]
 800be12:	f012 0f04 	tst.w	r2, #4
 800be16:	d00b      	beq.n	800be30 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	f012 0f02 	tst.w	r2, #2
 800be1e:	d107      	bne.n	800be30 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 800be20:	689a      	ldr	r2, [r3, #8]
 800be22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800be26:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800be2a:	f042 0210 	orr.w	r2, r2, #16
 800be2e:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800be30:	2901      	cmp	r1, #1
 800be32:	d047      	beq.n	800bec4 <ADC_ConversionStop+0xec>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800be34:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800be36:	689a      	ldr	r2, [r3, #8]
 800be38:	f012 0f08 	tst.w	r2, #8
 800be3c:	d00b      	beq.n	800be56 <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800be3e:	689a      	ldr	r2, [r3, #8]
 800be40:	f012 0f02 	tst.w	r2, #2
 800be44:	d107      	bne.n	800be56 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800be46:	689a      	ldr	r2, [r3, #8]
 800be48:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800be4c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800be50:	f042 0220 	orr.w	r2, r2, #32
 800be54:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800be56:	2902      	cmp	r1, #2
 800be58:	d036      	beq.n	800bec8 <ADC_ConversionStop+0xf0>
 800be5a:	2903      	cmp	r1, #3
 800be5c:	d136      	bne.n	800becc <ADC_ConversionStop+0xf4>
 800be5e:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800be60:	f7ff fc2e 	bl	800b6c0 <HAL_GetTick>
 800be64:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800be66:	6823      	ldr	r3, [r4, #0]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	422b      	tst	r3, r5
 800be6c:	d030      	beq.n	800bed0 <ADC_ConversionStop+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800be6e:	f7ff fc27 	bl	800b6c0 <HAL_GetTick>
 800be72:	1b80      	subs	r0, r0, r6
 800be74:	2805      	cmp	r0, #5
 800be76:	d9f6      	bls.n	800be66 <ADC_ConversionStop+0x8e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	422b      	tst	r3, r5
 800be7e:	d0f2      	beq.n	800be66 <ADC_ConversionStop+0x8e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800be80:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800be82:	f043 0310 	orr.w	r3, r3, #16
 800be86:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be8a:	f043 0301 	orr.w	r3, r3, #1
 800be8e:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800be90:	2001      	movs	r0, #1
 800be92:	e01e      	b.n	800bed2 <ADC_ConversionStop+0xfa>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800be94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800be96:	f043 0310 	orr.w	r3, r3, #16
 800be9a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800be9e:	f043 0301 	orr.w	r3, r3, #1
 800bea2:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 800bea4:	2001      	movs	r0, #1
 800bea6:	e014      	b.n	800bed2 <ADC_ConversionStop+0xfa>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800bea8:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800beaa:	6819      	ldr	r1, [r3, #0]
 800beac:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800beb0:	d104      	bne.n	800bebc <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800beb2:	4909      	ldr	r1, [pc, #36]	@ (800bed8 <ADC_ConversionStop+0x100>)
 800beb4:	428a      	cmp	r2, r1
 800beb6:	d8ed      	bhi.n	800be94 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 800beb8:	3201      	adds	r2, #1
 800beba:	e7f6      	b.n	800beaa <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800bebc:	2240      	movs	r2, #64	@ 0x40
 800bebe:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800bec0:	2101      	movs	r1, #1
 800bec2:	e7a4      	b.n	800be0e <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800bec4:	2504      	movs	r5, #4
 800bec6:	e7cb      	b.n	800be60 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800bec8:	2508      	movs	r5, #8
 800beca:	e7c9      	b.n	800be60 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800becc:	2504      	movs	r5, #4
 800bece:	e7c7      	b.n	800be60 <ADC_ConversionStop+0x88>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800bed0:	2000      	movs	r0, #0
}
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800bed4:	2000      	movs	r0, #0
 800bed6:	e7fc      	b.n	800bed2 <ADC_ConversionStop+0xfa>
 800bed8:	a33fffff 	.word	0xa33fffff

0800bedc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bedc:	b530      	push	{r4, r5, lr}
 800bede:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800bee0:	2300      	movs	r3, #0
 800bee2:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bee4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bee6:	689a      	ldr	r2, [r3, #8]
 800bee8:	f012 0f01 	tst.w	r2, #1
 800beec:	d158      	bne.n	800bfa0 <ADC_Enable+0xc4>
 800beee:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800bef0:	6899      	ldr	r1, [r3, #8]
 800bef2:	4a2d      	ldr	r2, [pc, #180]	@ (800bfa8 <ADC_Enable+0xcc>)
 800bef4:	4211      	tst	r1, r2
 800bef6:	d119      	bne.n	800bf2c <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 800bef8:	689a      	ldr	r2, [r3, #8]
 800befa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800befe:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800bf02:	f042 0201 	orr.w	r2, r2, #1
 800bf06:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800bf08:	4b28      	ldr	r3, [pc, #160]	@ (800bfac <ADC_Enable+0xd0>)
 800bf0a:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800bf0c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800bf10:	d01c      	beq.n	800bf4c <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bf12:	4b27      	ldr	r3, [pc, #156]	@ (800bfb0 <ADC_Enable+0xd4>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	099b      	lsrs	r3, r3, #6
 800bf18:	4a26      	ldr	r2, [pc, #152]	@ (800bfb4 <ADC_Enable+0xd8>)
 800bf1a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf1e:	099b      	lsrs	r3, r3, #6
 800bf20:	3301      	adds	r3, #1
 800bf22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800bf2a:	e00c      	b.n	800bf46 <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf2c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800bf2e:	f043 0310 	orr.w	r3, r3, #16
 800bf32:	6543      	str	r3, [r0, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf34:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800bf36:	f043 0301 	orr.w	r3, r3, #1
 800bf3a:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 800bf3c:	2001      	movs	r0, #1
 800bf3e:	e030      	b.n	800bfa2 <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 800bf40:	9b01      	ldr	r3, [sp, #4]
 800bf42:	3b01      	subs	r3, #1
 800bf44:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800bf46:	9b01      	ldr	r3, [sp, #4]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1f9      	bne.n	800bf40 <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800bf4c:	f7ff fbb8 	bl	800b6c0 <HAL_GetTick>
 800bf50:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	f012 0f01 	tst.w	r2, #1
 800bf5a:	d11f      	bne.n	800bf9c <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bf5c:	689a      	ldr	r2, [r3, #8]
 800bf5e:	f012 0f01 	tst.w	r2, #1
 800bf62:	d107      	bne.n	800bf74 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 800bf64:	689a      	ldr	r2, [r3, #8]
 800bf66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800bf6a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800bf6e:	f042 0201 	orr.w	r2, r2, #1
 800bf72:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800bf74:	f7ff fba4 	bl	800b6c0 <HAL_GetTick>
 800bf78:	1b43      	subs	r3, r0, r5
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d9e9      	bls.n	800bf52 <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bf7e:	6823      	ldr	r3, [r4, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f013 0f01 	tst.w	r3, #1
 800bf86:	d1e4      	bne.n	800bf52 <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bf8a:	f043 0310 	orr.w	r3, r3, #16
 800bf8e:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf92:	f043 0301 	orr.w	r3, r3, #1
 800bf96:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800bf98:	2001      	movs	r0, #1
 800bf9a:	e002      	b.n	800bfa2 <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bf9c:	2000      	movs	r0, #0
 800bf9e:	e000      	b.n	800bfa2 <ADC_Enable+0xc6>
 800bfa0:	2000      	movs	r0, #0
}
 800bfa2:	b003      	add	sp, #12
 800bfa4:	bd30      	pop	{r4, r5, pc}
 800bfa6:	bf00      	nop
 800bfa8:	8000003f 	.word	0x8000003f
 800bfac:	50040300 	.word	0x50040300
 800bfb0:	2000002c 	.word	0x2000002c
 800bfb4:	053e2d63 	.word	0x053e2d63

0800bfb8 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bfb8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f013 0f04 	tst.w	r3, #4
 800bfc0:	d13c      	bne.n	800c03c <HAL_ADC_Start+0x84>
{
 800bfc2:	b510      	push	{r4, lr}
 800bfc4:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800bfc6:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d038      	beq.n	800c040 <HAL_ADC_Start+0x88>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800bfd4:	f7ff ff82 	bl	800bedc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800bfd8:	bb60      	cbnz	r0, 800c034 <HAL_ADC_Start+0x7c>
      ADC_STATE_CLR_SET(hadc->State,
 800bfda:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bfdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bfe0:	f023 0301 	bic.w	r3, r3, #1
 800bfe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bfe8:	6563      	str	r3, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bfea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bfec:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800bff0:	d01d      	beq.n	800c02e <HAL_ADC_Start+0x76>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800bff2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bff4:	f023 0306 	bic.w	r3, r3, #6
 800bff8:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800bffa:	6823      	ldr	r3, [r4, #0]
 800bffc:	221c      	movs	r2, #28
 800bffe:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800c000:	2300      	movs	r3, #0
 800c002:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800c006:	6822      	ldr	r2, [r4, #0]
 800c008:	68d3      	ldr	r3, [r2, #12]
 800c00a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c00e:	d005      	beq.n	800c01c <HAL_ADC_Start+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c010:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c012:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c016:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c01a:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 800c01c:	6893      	ldr	r3, [r2, #8]
 800c01e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c022:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c026:	f043 0304 	orr.w	r3, r3, #4
 800c02a:	6093      	str	r3, [r2, #8]
}
 800c02c:	bd10      	pop	{r4, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 800c02e:	2300      	movs	r3, #0
 800c030:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c032:	e7e2      	b.n	800bffa <HAL_ADC_Start+0x42>
      __HAL_UNLOCK(hadc);
 800c034:	2300      	movs	r3, #0
 800c036:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800c03a:	e7f7      	b.n	800c02c <HAL_ADC_Start+0x74>
    tmp_hal_status = HAL_BUSY;
 800c03c:	2002      	movs	r0, #2
}
 800c03e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800c040:	2002      	movs	r0, #2
 800c042:	e7f3      	b.n	800c02c <HAL_ADC_Start+0x74>

0800c044 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c048:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800c04a:	6893      	ldr	r3, [r2, #8]
 800c04c:	f013 0302 	ands.w	r3, r3, #2
 800c050:	d000      	beq.n	800c054 <ADC_Disable+0x10>
 800c052:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c054:	6891      	ldr	r1, [r2, #8]
 800c056:	f011 0f01 	tst.w	r1, #1
 800c05a:	d039      	beq.n	800c0d0 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d139      	bne.n	800c0d4 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c060:	6893      	ldr	r3, [r2, #8]
 800c062:	f003 030d 	and.w	r3, r3, #13
 800c066:	2b01      	cmp	r3, #1
 800c068:	d009      	beq.n	800c07e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c06a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c06c:	f043 0310 	orr.w	r3, r3, #16
 800c070:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c072:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c074:	f043 0301 	orr.w	r3, r3, #1
 800c078:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 800c07a:	2001      	movs	r0, #1
 800c07c:	e029      	b.n	800c0d2 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800c07e:	6893      	ldr	r3, [r2, #8]
 800c080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c084:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c088:	f043 0302 	orr.w	r3, r3, #2
 800c08c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	2203      	movs	r2, #3
 800c092:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c094:	f7ff fb14 	bl	800b6c0 <HAL_GetTick>
 800c098:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	f013 0f01 	tst.w	r3, #1
 800c0a2:	d013      	beq.n	800c0cc <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c0a4:	f7ff fb0c 	bl	800b6c0 <HAL_GetTick>
 800c0a8:	1b40      	subs	r0, r0, r5
 800c0aa:	2802      	cmp	r0, #2
 800c0ac:	d9f5      	bls.n	800c09a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f013 0f01 	tst.w	r3, #1
 800c0b6:	d0f0      	beq.n	800c09a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0b8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c0ba:	f043 0310 	orr.w	r3, r3, #16
 800c0be:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c0c2:	f043 0301 	orr.w	r3, r3, #1
 800c0c6:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800c0c8:	2001      	movs	r0, #1
 800c0ca:	e002      	b.n	800c0d2 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	e000      	b.n	800c0d2 <ADC_Disable+0x8e>
 800c0d0:	2000      	movs	r0, #0
}
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	e7fc      	b.n	800c0d2 <ADC_Disable+0x8e>

0800c0d8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800c0d8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d01a      	beq.n	800c116 <HAL_ADC_Stop+0x3e>
{
 800c0e0:	b510      	push	{r4, lr}
 800c0e2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800c0ea:	2103      	movs	r1, #3
 800c0ec:	f7ff fe74 	bl	800bdd8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800c0f0:	b118      	cbz	r0, 800c0fa <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800c0f8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f7ff ffa2 	bl	800c044 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800c100:	2800      	cmp	r0, #0
 800c102:	d1f6      	bne.n	800c0f2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800c104:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c106:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c10a:	f023 0301 	bic.w	r3, r3, #1
 800c10e:	f043 0301 	orr.w	r3, r3, #1
 800c112:	6563      	str	r3, [r4, #84]	@ 0x54
 800c114:	e7ed      	b.n	800c0f2 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800c116:	2002      	movs	r0, #2
}
 800c118:	4770      	bx	lr

0800c11a <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800c11a:	b530      	push	{r4, r5, lr}
 800c11c:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800c11e:	2300      	movs	r3, #0
 800c120:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c122:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800c126:	2b01      	cmp	r3, #1
 800c128:	d041      	beq.n	800c1ae <HAL_ADCEx_Calibration_Start+0x94>
 800c12a:	4604      	mov	r4, r0
 800c12c:	460d      	mov	r5, r1
 800c12e:	2301      	movs	r3, #1
 800c130:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800c134:	f7ff ff86 	bl	800c044 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c138:	bb80      	cbnz	r0, 800c19c <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c13a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c13c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c140:	f023 0302 	bic.w	r3, r3, #2
 800c144:	f043 0302 	orr.w	r3, r3, #2
 800c148:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800c14a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800c14c:	6893      	ldr	r3, [r2, #8]
 800c14e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c152:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c156:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 800c15a:	432b      	orrs	r3, r5
 800c15c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c160:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c162:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	2b00      	cmp	r3, #0
 800c168:	db06      	blt.n	800c178 <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c16a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c16c:	f023 0303 	bic.w	r3, r3, #3
 800c170:	f043 0301 	orr.w	r3, r3, #1
 800c174:	6563      	str	r3, [r4, #84]	@ 0x54
 800c176:	e015      	b.n	800c1a4 <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 800c178:	9b01      	ldr	r3, [sp, #4]
 800c17a:	3301      	adds	r3, #1
 800c17c:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800c184:	d3ed      	bcc.n	800c162 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800c186:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c188:	f023 0312 	bic.w	r3, r3, #18
 800c18c:	f043 0310 	orr.w	r3, r3, #16
 800c190:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 800c192:	2300      	movs	r3, #0
 800c194:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800c198:	2001      	movs	r0, #1
 800c19a:	e006      	b.n	800c1aa <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c19c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c19e:	f043 0310 	orr.w	r3, r3, #16
 800c1a2:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800c1aa:	b003      	add	sp, #12
 800c1ac:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 800c1ae:	2002      	movs	r0, #2
 800c1b0:	e7fb      	b.n	800c1aa <HAL_ADCEx_Calibration_Start+0x90>

0800c1b2 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	f000 80a1 	beq.w	800c2fa <HAL_CAN_Init+0x148>
{
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800c1bc:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c1c0:	b1d3      	cbz	r3, 800c1f8 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c1c2:	6822      	ldr	r2, [r4, #0]
 800c1c4:	6813      	ldr	r3, [r2, #0]
 800c1c6:	f043 0301 	orr.w	r3, r3, #1
 800c1ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c1cc:	f7ff fa78 	bl	800b6c0 <HAL_GetTick>
 800c1d0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800c1d2:	6823      	ldr	r3, [r4, #0]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	f012 0f01 	tst.w	r2, #1
 800c1da:	d110      	bne.n	800c1fe <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c1dc:	f7ff fa70 	bl	800b6c0 <HAL_GetTick>
 800c1e0:	1b40      	subs	r0, r0, r5
 800c1e2:	280a      	cmp	r0, #10
 800c1e4:	d9f5      	bls.n	800c1d2 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c1e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c1e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c1ec:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800c1ee:	2305      	movs	r3, #5
 800c1f0:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800c1f4:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800c1f8:	f001 fc2e 	bl	800da58 <HAL_CAN_MspInit>
 800c1fc:	e7e1      	b.n	800c1c2 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	f022 0202 	bic.w	r2, r2, #2
 800c204:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800c206:	f7ff fa5b 	bl	800b6c0 <HAL_GetTick>
 800c20a:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	f012 0f02 	tst.w	r2, #2
 800c214:	d00d      	beq.n	800c232 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c216:	f7ff fa53 	bl	800b6c0 <HAL_GetTick>
 800c21a:	1b40      	subs	r0, r0, r5
 800c21c:	280a      	cmp	r0, #10
 800c21e:	d9f5      	bls.n	800c20c <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c220:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c226:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800c228:	2305      	movs	r3, #5
 800c22a:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800c22e:	2001      	movs	r0, #1
 800c230:	e7e1      	b.n	800c1f6 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800c232:	7e22      	ldrb	r2, [r4, #24]
 800c234:	2a01      	cmp	r2, #1
 800c236:	d03d      	beq.n	800c2b4 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c23e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800c240:	7e63      	ldrb	r3, [r4, #25]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d03b      	beq.n	800c2be <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c246:	6822      	ldr	r2, [r4, #0]
 800c248:	6813      	ldr	r3, [r2, #0]
 800c24a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c24e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800c250:	7ea3      	ldrb	r3, [r4, #26]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d039      	beq.n	800c2ca <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c256:	6822      	ldr	r2, [r4, #0]
 800c258:	6813      	ldr	r3, [r2, #0]
 800c25a:	f023 0320 	bic.w	r3, r3, #32
 800c25e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800c260:	7ee3      	ldrb	r3, [r4, #27]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d037      	beq.n	800c2d6 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c266:	6822      	ldr	r2, [r4, #0]
 800c268:	6813      	ldr	r3, [r2, #0]
 800c26a:	f043 0310 	orr.w	r3, r3, #16
 800c26e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800c270:	7f23      	ldrb	r3, [r4, #28]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d035      	beq.n	800c2e2 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c276:	6822      	ldr	r2, [r4, #0]
 800c278:	6813      	ldr	r3, [r2, #0]
 800c27a:	f023 0308 	bic.w	r3, r3, #8
 800c27e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800c280:	7f63      	ldrb	r3, [r4, #29]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d033      	beq.n	800c2ee <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c286:	6822      	ldr	r2, [r4, #0]
 800c288:	6813      	ldr	r3, [r2, #0]
 800c28a:	f023 0304 	bic.w	r3, r3, #4
 800c28e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800c290:	68a3      	ldr	r3, [r4, #8]
 800c292:	68e2      	ldr	r2, [r4, #12]
 800c294:	4313      	orrs	r3, r2
 800c296:	6922      	ldr	r2, [r4, #16]
 800c298:	4313      	orrs	r3, r2
 800c29a:	6962      	ldr	r2, [r4, #20]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	6862      	ldr	r2, [r4, #4]
 800c2a0:	3a01      	subs	r2, #1
 800c2a2:	6821      	ldr	r1, [r4, #0]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800c2b2:	e7a0      	b.n	800c1f6 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c2ba:	601a      	str	r2, [r3, #0]
 800c2bc:	e7c0      	b.n	800c240 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	6813      	ldr	r3, [r2, #0]
 800c2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2c6:	6013      	str	r3, [r2, #0]
 800c2c8:	e7c2      	b.n	800c250 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800c2ca:	6822      	ldr	r2, [r4, #0]
 800c2cc:	6813      	ldr	r3, [r2, #0]
 800c2ce:	f043 0320 	orr.w	r3, r3, #32
 800c2d2:	6013      	str	r3, [r2, #0]
 800c2d4:	e7c4      	b.n	800c260 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800c2d6:	6822      	ldr	r2, [r4, #0]
 800c2d8:	6813      	ldr	r3, [r2, #0]
 800c2da:	f023 0310 	bic.w	r3, r3, #16
 800c2de:	6013      	str	r3, [r2, #0]
 800c2e0:	e7c6      	b.n	800c270 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800c2e2:	6822      	ldr	r2, [r4, #0]
 800c2e4:	6813      	ldr	r3, [r2, #0]
 800c2e6:	f043 0308 	orr.w	r3, r3, #8
 800c2ea:	6013      	str	r3, [r2, #0]
 800c2ec:	e7c8      	b.n	800c280 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800c2ee:	6822      	ldr	r2, [r4, #0]
 800c2f0:	6813      	ldr	r3, [r2, #0]
 800c2f2:	f043 0304 	orr.w	r3, r3, #4
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	e7ca      	b.n	800c290 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800c2fa:	2001      	movs	r0, #1
}
 800c2fc:	4770      	bx	lr

0800c2fe <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800c2fe:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800c300:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800c304:	3b01      	subs	r3, #1
 800c306:	b2db      	uxtb	r3, r3
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d905      	bls.n	800c318 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c30c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c30e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c312:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800c314:	2001      	movs	r0, #1
  }
}
 800c316:	4770      	bx	lr
{
 800c318:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800c31a:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800c31e:	f043 0301 	orr.w	r3, r3, #1
 800c322:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800c326:	694b      	ldr	r3, [r1, #20]
 800c328:	f003 031f 	and.w	r3, r3, #31
 800c32c:	2001      	movs	r0, #1
 800c32e:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800c332:	f8d2 021c 	ldr.w	r0, [r2, #540]	@ 0x21c
 800c336:	ea6f 0c03 	mvn.w	ip, r3
 800c33a:	ea20 0003 	bic.w	r0, r0, r3
 800c33e:	f8c2 021c 	str.w	r0, [r2, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800c342:	69c8      	ldr	r0, [r1, #28]
 800c344:	b9b0      	cbnz	r0, 800c374 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800c346:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800c34a:	ea0c 0000 	and.w	r0, ip, r0
 800c34e:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800c352:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c354:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800c356:	68cd      	ldr	r5, [r1, #12]
 800c358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c35c:	3048      	adds	r0, #72	@ 0x48
 800c35e:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800c362:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c364:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c366:	688d      	ldr	r5, [r1, #8]
 800c368:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c36c:	3048      	adds	r0, #72	@ 0x48
 800c36e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800c372:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800c374:	69c8      	ldr	r0, [r1, #28]
 800c376:	2801      	cmp	r0, #1
 800c378:	d01b      	beq.n	800c3b2 <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800c37a:	6988      	ldr	r0, [r1, #24]
 800c37c:	bb80      	cbnz	r0, 800c3e0 <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800c37e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c382:	ea0c 0000 	and.w	r0, ip, r0
 800c386:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800c38a:	6908      	ldr	r0, [r1, #16]
 800c38c:	bb70      	cbnz	r0, 800c3ec <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800c38e:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800c392:	ea0c 0000 	and.w	r0, ip, r0
 800c396:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800c39a:	6a09      	ldr	r1, [r1, #32]
 800c39c:	2901      	cmp	r1, #1
 800c39e:	d02b      	beq.n	800c3f8 <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800c3a0:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800c3a4:	f023 0301 	bic.w	r3, r3, #1
 800c3a8:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 800c3ac:	2000      	movs	r0, #0
}
 800c3ae:	bc30      	pop	{r4, r5}
 800c3b0:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800c3b2:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800c3b6:	4318      	orrs	r0, r3
 800c3b8:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800c3bc:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c3be:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800c3c0:	680d      	ldr	r5, [r1, #0]
 800c3c2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800c3c6:	3048      	adds	r0, #72	@ 0x48
 800c3c8:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800c3cc:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c3ce:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800c3d0:	688d      	ldr	r5, [r1, #8]
 800c3d2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800c3d6:	3048      	adds	r0, #72	@ 0x48
 800c3d8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800c3dc:	6044      	str	r4, [r0, #4]
 800c3de:	e7cc      	b.n	800c37a <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800c3e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c3e4:	4318      	orrs	r0, r3
 800c3e6:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
 800c3ea:	e7ce      	b.n	800c38a <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800c3ec:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800c3f0:	4318      	orrs	r0, r3
 800c3f2:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
 800c3f6:	e7d0      	b.n	800c39a <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800c3f8:	f8d2 121c 	ldr.w	r1, [r2, #540]	@ 0x21c
 800c3fc:	430b      	orrs	r3, r1
 800c3fe:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
 800c402:	e7cd      	b.n	800c3a0 <HAL_CAN_ConfigFilter+0xa2>

0800c404 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800c404:	b570      	push	{r4, r5, r6, lr}
 800c406:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800c408:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c40c:	2b01      	cmp	r3, #1
 800c40e:	d006      	beq.n	800c41e <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800c410:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c416:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800c418:	2601      	movs	r6, #1
  }
}
 800c41a:	4630      	mov	r0, r6
 800c41c:	bd70      	pop	{r4, r5, r6, pc}
 800c41e:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800c420:	2302      	movs	r3, #2
 800c422:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800c426:	6802      	ldr	r2, [r0, #0]
 800c428:	6813      	ldr	r3, [r2, #0]
 800c42a:	f023 0301 	bic.w	r3, r3, #1
 800c42e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c430:	f7ff f946 	bl	800b6c0 <HAL_GetTick>
 800c434:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800c436:	6823      	ldr	r3, [r4, #0]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	f013 0f01 	tst.w	r3, #1
 800c43e:	d00c      	beq.n	800c45a <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800c440:	f7ff f93e 	bl	800b6c0 <HAL_GetTick>
 800c444:	1b43      	subs	r3, r0, r5
 800c446:	2b0a      	cmp	r3, #10
 800c448:	d9f5      	bls.n	800c436 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800c44a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c44c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c450:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800c452:	2305      	movs	r3, #5
 800c454:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800c458:	e7df      	b.n	800c41a <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800c45a:	2600      	movs	r6, #0
 800c45c:	6266      	str	r6, [r4, #36]	@ 0x24
    return HAL_OK;
 800c45e:	e7dc      	b.n	800c41a <HAL_CAN_Start+0x16>

0800c460 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800c460:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800c462:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800c466:	6804      	ldr	r4, [r0, #0]
 800c468:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800c46a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c46e:	fa5f fc8c 	uxtb.w	ip, ip
 800c472:	f1bc 0f01 	cmp.w	ip, #1
 800c476:	d862      	bhi.n	800c53e <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800c478:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 800c47c:	d059      	beq.n	800c532 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800c47e:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800c482:	2401      	movs	r4, #1
 800c484:	fa04 f40c 	lsl.w	r4, r4, ip
 800c488:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800c48a:	688b      	ldr	r3, [r1, #8]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d13d      	bne.n	800c50c <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800c490:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 800c492:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800c494:	6804      	ldr	r4, [r0, #0]
 800c496:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 800c49a:	f10c 0318 	add.w	r3, ip, #24
 800c49e:	011b      	lsls	r3, r3, #4
 800c4a0:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800c4a2:	6803      	ldr	r3, [r0, #0]
 800c4a4:	690c      	ldr	r4, [r1, #16]
 800c4a6:	f10c 0e18 	add.w	lr, ip, #24
 800c4aa:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800c4ae:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800c4b0:	7d0b      	ldrb	r3, [r1, #20]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d035      	beq.n	800c522 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800c4b6:	79d1      	ldrb	r1, [r2, #7]
 800c4b8:	7993      	ldrb	r3, [r2, #6]
 800c4ba:	041b      	lsls	r3, r3, #16
 800c4bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c4c0:	7951      	ldrb	r1, [r2, #5]
 800c4c2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c4c6:	7914      	ldrb	r4, [r2, #4]
 800c4c8:	6801      	ldr	r1, [r0, #0]
 800c4ca:	4323      	orrs	r3, r4
 800c4cc:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 800c4d0:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800c4d4:	78d1      	ldrb	r1, [r2, #3]
 800c4d6:	7893      	ldrb	r3, [r2, #2]
 800c4d8:	041b      	lsls	r3, r3, #16
 800c4da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c4de:	7851      	ldrb	r1, [r2, #1]
 800c4e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c4e4:	7811      	ldrb	r1, [r2, #0]
 800c4e6:	6802      	ldr	r2, [r0, #0]
 800c4e8:	430b      	orrs	r3, r1
 800c4ea:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800c4ee:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800c4f2:	6802      	ldr	r2, [r0, #0]
 800c4f4:	f10c 0c18 	add.w	ip, ip, #24
 800c4f8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800c4fc:	f852 300c 	ldr.w	r3, [r2, ip]
 800c500:	f043 0301 	orr.w	r3, r3, #1
 800c504:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 800c508:	2000      	movs	r0, #0
 800c50a:	e01d      	b.n	800c548 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c50c:	684c      	ldr	r4, [r1, #4]
 800c50e:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 800c512:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 800c514:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c516:	f10c 0418 	add.w	r4, ip, #24
 800c51a:	0124      	lsls	r4, r4, #4
 800c51c:	6805      	ldr	r5, [r0, #0]
 800c51e:	512b      	str	r3, [r5, r4]
 800c520:	e7bf      	b.n	800c4a2 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800c522:	6803      	ldr	r3, [r0, #0]
 800c524:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800c528:	6859      	ldr	r1, [r3, #4]
 800c52a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800c52e:	6059      	str	r1, [r3, #4]
 800c530:	e7c1      	b.n	800c4b6 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c532:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c538:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 800c53a:	2001      	movs	r0, #1
 800c53c:	e004      	b.n	800c548 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c53e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c544:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800c546:	2001      	movs	r0, #1
  }
}
 800c548:	bd30      	pop	{r4, r5, pc}

0800c54a <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800c54a:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800c54e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c552:	fa5f fc8c 	uxtb.w	ip, ip
 800c556:	f1bc 0f01 	cmp.w	ip, #1
 800c55a:	f200 80a5 	bhi.w	800c6a8 <HAL_CAN_GetRxMessage+0x15e>
{
 800c55e:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c560:	b951      	cbnz	r1, 800c578 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800c562:	6804      	ldr	r4, [r0, #0]
 800c564:	68e4      	ldr	r4, [r4, #12]
 800c566:	f014 0f03 	tst.w	r4, #3
 800c56a:	d110      	bne.n	800c58e <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c56c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c56e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c572:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 800c574:	2001      	movs	r0, #1
 800c576:	e07e      	b.n	800c676 <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800c578:	6804      	ldr	r4, [r0, #0]
 800c57a:	6924      	ldr	r4, [r4, #16]
 800c57c:	f014 0f03 	tst.w	r4, #3
 800c580:	d105      	bne.n	800c58e <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c582:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c588:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 800c58a:	2001      	movs	r0, #1
 800c58c:	e073      	b.n	800c676 <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800c58e:	6805      	ldr	r5, [r0, #0]
 800c590:	f101 041b 	add.w	r4, r1, #27
 800c594:	0124      	lsls	r4, r4, #4
 800c596:	592c      	ldr	r4, [r5, r4]
 800c598:	f004 0404 	and.w	r4, r4, #4
 800c59c:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800c59e:	2c00      	cmp	r4, #0
 800c5a0:	d16b      	bne.n	800c67a <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800c5a2:	6805      	ldr	r5, [r0, #0]
 800c5a4:	f101 041b 	add.w	r4, r1, #27
 800c5a8:	0124      	lsls	r4, r4, #4
 800c5aa:	592c      	ldr	r4, [r5, r4]
 800c5ac:	0d64      	lsrs	r4, r4, #21
 800c5ae:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800c5b0:	6804      	ldr	r4, [r0, #0]
 800c5b2:	f101 0c1b 	add.w	ip, r1, #27
 800c5b6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800c5ba:	f854 400c 	ldr.w	r4, [r4, ip]
 800c5be:	f004 0402 	and.w	r4, r4, #2
 800c5c2:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800c5c4:	6804      	ldr	r4, [r0, #0]
 800c5c6:	44a4      	add	ip, r4
 800c5c8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800c5cc:	f015 0f08 	tst.w	r5, #8
 800c5d0:	d05b      	beq.n	800c68a <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800c5d2:	2408      	movs	r4, #8
 800c5d4:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800c5d6:	6804      	ldr	r4, [r0, #0]
 800c5d8:	f101 0c1b 	add.w	ip, r1, #27
 800c5dc:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 800c5e0:	6864      	ldr	r4, [r4, #4]
 800c5e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c5e6:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800c5e8:	6804      	ldr	r4, [r0, #0]
 800c5ea:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 800c5ee:	6864      	ldr	r4, [r4, #4]
 800c5f0:	0c24      	lsrs	r4, r4, #16
 800c5f2:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800c5f4:	6802      	ldr	r2, [r0, #0]
 800c5f6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c5fa:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800c5fe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800c600:	6802      	ldr	r2, [r0, #0]
 800c602:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c606:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800c60a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c60e:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800c610:	6802      	ldr	r2, [r0, #0]
 800c612:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c616:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800c61a:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c61e:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800c620:	6802      	ldr	r2, [r0, #0]
 800c622:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c626:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800c62a:	0e12      	lsrs	r2, r2, #24
 800c62c:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800c62e:	6802      	ldr	r2, [r0, #0]
 800c630:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c634:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800c638:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800c63a:	6802      	ldr	r2, [r0, #0]
 800c63c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c640:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800c644:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c648:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800c64a:	6802      	ldr	r2, [r0, #0]
 800c64c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c650:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800c654:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c658:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800c65a:	6802      	ldr	r2, [r0, #0]
 800c65c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c660:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800c664:	0e12      	lsrs	r2, r2, #24
 800c666:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c668:	b9c1      	cbnz	r1, 800c69c <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800c66a:	6802      	ldr	r2, [r0, #0]
 800c66c:	68d3      	ldr	r3, [r2, #12]
 800c66e:	f043 0320 	orr.w	r3, r3, #32
 800c672:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 800c674:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800c676:	bc30      	pop	{r4, r5}
 800c678:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800c67a:	6805      	ldr	r5, [r0, #0]
 800c67c:	f101 041b 	add.w	r4, r1, #27
 800c680:	0124      	lsls	r4, r4, #4
 800c682:	592c      	ldr	r4, [r5, r4]
 800c684:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800c686:	6054      	str	r4, [r2, #4]
 800c688:	e792      	b.n	800c5b0 <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800c68a:	f101 051b 	add.w	r5, r1, #27
 800c68e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800c692:	6864      	ldr	r4, [r4, #4]
 800c694:	f004 040f 	and.w	r4, r4, #15
 800c698:	6114      	str	r4, [r2, #16]
 800c69a:	e79c      	b.n	800c5d6 <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800c69c:	6802      	ldr	r2, [r0, #0]
 800c69e:	6913      	ldr	r3, [r2, #16]
 800c6a0:	f043 0320 	orr.w	r3, r3, #32
 800c6a4:	6113      	str	r3, [r2, #16]
 800c6a6:	e7e5      	b.n	800c674 <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c6a8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c6aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c6ae:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800c6b0:	2001      	movs	r0, #1
}
 800c6b2:	4770      	bx	lr

0800c6b4 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800c6b4:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d905      	bls.n	800c6cc <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c6c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c6c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c6c6:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800c6c8:	2001      	movs	r0, #1
  }
}
 800c6ca:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800c6cc:	6802      	ldr	r2, [r0, #0]
 800c6ce:	6953      	ldr	r3, [r2, #20]
 800c6d0:	430b      	orrs	r3, r1
 800c6d2:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	4770      	bx	lr

0800c6d8 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800c6d8:	4770      	bx	lr

0800c6da <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800c6da:	4770      	bx	lr

0800c6dc <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800c6dc:	4770      	bx	lr

0800c6de <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800c6de:	4770      	bx	lr

0800c6e0 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800c6e0:	4770      	bx	lr

0800c6e2 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800c6e2:	4770      	bx	lr

0800c6e4 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800c6e4:	4770      	bx	lr

0800c6e6 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800c6e8:	4770      	bx	lr

0800c6ea <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_CAN_IRQHandler>:
{
 800c6ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800c6f2:	6803      	ldr	r3, [r0, #0]
 800c6f4:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800c6f6:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800c6fa:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800c6fc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800c700:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800c704:	f8d3 b018 	ldr.w	fp, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800c708:	f014 0601 	ands.w	r6, r4, #1
 800c70c:	d03b      	beq.n	800c786 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800c70e:	f017 0601 	ands.w	r6, r7, #1
 800c712:	d016      	beq.n	800c742 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800c714:	2201      	movs	r2, #1
 800c716:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800c718:	f017 0f02 	tst.w	r7, #2
 800c71c:	d108      	bne.n	800c730 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800c71e:	f017 0f04 	tst.w	r7, #4
 800c722:	d10c      	bne.n	800c73e <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800c724:	f017 0608 	ands.w	r6, r7, #8
 800c728:	d006      	beq.n	800c738 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800c72a:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800c72e:	e008      	b.n	800c742 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800c730:	f7ff ffd2 	bl	800c6d8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800c734:	2600      	movs	r6, #0
 800c736:	e004      	b.n	800c742 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800c738:	f7ff ffd1 	bl	800c6de <HAL_CAN_TxMailbox0AbortCallback>
 800c73c:	e001      	b.n	800c742 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800c73e:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800c742:	f417 7f80 	tst.w	r7, #256	@ 0x100
 800c746:	d00d      	beq.n	800c764 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c74e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800c750:	f417 7f00 	tst.w	r7, #512	@ 0x200
 800c754:	f040 8096 	bne.w	800c884 <HAL_CAN_IRQHandler+0x198>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800c758:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 800c75c:	f000 8096 	beq.w	800c88c <HAL_CAN_IRQHandler+0x1a0>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800c760:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800c764:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 800c768:	d00d      	beq.n	800c786 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800c76a:	682b      	ldr	r3, [r5, #0]
 800c76c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c770:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800c772:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800c776:	f040 8093 	bne.w	800c8a0 <HAL_CAN_IRQHandler+0x1b4>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800c77a:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 800c77e:	f000 8093 	beq.w	800c8a8 <HAL_CAN_IRQHandler+0x1bc>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800c782:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800c786:	f014 0f08 	tst.w	r4, #8
 800c78a:	d007      	beq.n	800c79c <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800c78c:	f01a 0f10 	tst.w	sl, #16
 800c790:	d004      	beq.n	800c79c <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800c792:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	2210      	movs	r2, #16
 800c79a:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800c79c:	f014 0f04 	tst.w	r4, #4
 800c7a0:	d003      	beq.n	800c7aa <HAL_CAN_IRQHandler+0xbe>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800c7a2:	f01a 0f08 	tst.w	sl, #8
 800c7a6:	f040 8089 	bne.w	800c8bc <HAL_CAN_IRQHandler+0x1d0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800c7aa:	f014 0f02 	tst.w	r4, #2
 800c7ae:	d005      	beq.n	800c7bc <HAL_CAN_IRQHandler+0xd0>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800c7b0:	682b      	ldr	r3, [r5, #0]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f013 0f03 	tst.w	r3, #3
 800c7b8:	f040 8087 	bne.w	800c8ca <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800c7bc:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800c7c0:	d007      	beq.n	800c7d2 <HAL_CAN_IRQHandler+0xe6>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800c7c2:	f019 0f10 	tst.w	r9, #16
 800c7c6:	d004      	beq.n	800c7d2 <HAL_CAN_IRQHandler+0xe6>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800c7c8:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	2210      	movs	r2, #16
 800c7d0:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800c7d2:	f014 0f20 	tst.w	r4, #32
 800c7d6:	d002      	beq.n	800c7de <HAL_CAN_IRQHandler+0xf2>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800c7d8:	f019 0f08 	tst.w	r9, #8
 800c7dc:	d179      	bne.n	800c8d2 <HAL_CAN_IRQHandler+0x1e6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800c7de:	f014 0f10 	tst.w	r4, #16
 800c7e2:	d004      	beq.n	800c7ee <HAL_CAN_IRQHandler+0x102>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	f013 0f03 	tst.w	r3, #3
 800c7ec:	d178      	bne.n	800c8e0 <HAL_CAN_IRQHandler+0x1f4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800c7ee:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 800c7f2:	d002      	beq.n	800c7fa <HAL_CAN_IRQHandler+0x10e>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800c7f4:	f018 0f10 	tst.w	r8, #16
 800c7f8:	d176      	bne.n	800c8e8 <HAL_CAN_IRQHandler+0x1fc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800c7fa:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 800c7fe:	d002      	beq.n	800c806 <HAL_CAN_IRQHandler+0x11a>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800c800:	f018 0f08 	tst.w	r8, #8
 800c804:	d177      	bne.n	800c8f6 <HAL_CAN_IRQHandler+0x20a>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800c806:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 800c80a:	d037      	beq.n	800c87c <HAL_CAN_IRQHandler+0x190>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800c80c:	f018 0f04 	tst.w	r8, #4
 800c810:	d031      	beq.n	800c876 <HAL_CAN_IRQHandler+0x18a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c812:	f414 7f80 	tst.w	r4, #256	@ 0x100
 800c816:	d004      	beq.n	800c822 <HAL_CAN_IRQHandler+0x136>
 800c818:	f01b 0f01 	tst.w	fp, #1
 800c81c:	d001      	beq.n	800c822 <HAL_CAN_IRQHandler+0x136>
        errorcode |= HAL_CAN_ERROR_EWG;
 800c81e:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c822:	f414 7f00 	tst.w	r4, #512	@ 0x200
 800c826:	d004      	beq.n	800c832 <HAL_CAN_IRQHandler+0x146>
 800c828:	f01b 0f02 	tst.w	fp, #2
 800c82c:	d001      	beq.n	800c832 <HAL_CAN_IRQHandler+0x146>
        errorcode |= HAL_CAN_ERROR_EPV;
 800c82e:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c832:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 800c836:	d004      	beq.n	800c842 <HAL_CAN_IRQHandler+0x156>
 800c838:	f01b 0f04 	tst.w	fp, #4
 800c83c:	d001      	beq.n	800c842 <HAL_CAN_IRQHandler+0x156>
        errorcode |= HAL_CAN_ERROR_BOF;
 800c83e:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c842:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800c846:	d016      	beq.n	800c876 <HAL_CAN_IRQHandler+0x18a>
 800c848:	f01b 0b70 	ands.w	fp, fp, #112	@ 0x70
 800c84c:	d013      	beq.n	800c876 <HAL_CAN_IRQHandler+0x18a>
        switch (esrflags & CAN_ESR_LEC)
 800c84e:	f1bb 0f40 	cmp.w	fp, #64	@ 0x40
 800c852:	d066      	beq.n	800c922 <HAL_CAN_IRQHandler+0x236>
 800c854:	d856      	bhi.n	800c904 <HAL_CAN_IRQHandler+0x218>
 800c856:	f1bb 0f20 	cmp.w	fp, #32
 800c85a:	d05c      	beq.n	800c916 <HAL_CAN_IRQHandler+0x22a>
 800c85c:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
 800c860:	d05c      	beq.n	800c91c <HAL_CAN_IRQHandler+0x230>
 800c862:	f1bb 0f10 	cmp.w	fp, #16
 800c866:	d101      	bne.n	800c86c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_STF;
 800c868:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800c86c:	682a      	ldr	r2, [r5, #0]
 800c86e:	6993      	ldr	r3, [r2, #24]
 800c870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c874:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800c876:	682b      	ldr	r3, [r5, #0]
 800c878:	2204      	movs	r2, #4
 800c87a:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800c87c:	2e00      	cmp	r6, #0
 800c87e:	d156      	bne.n	800c92e <HAL_CAN_IRQHandler+0x242>
}
 800c880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800c884:	4628      	mov	r0, r5
 800c886:	f7ff ff28 	bl	800c6da <HAL_CAN_TxMailbox1CompleteCallback>
 800c88a:	e76b      	b.n	800c764 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800c88c:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 800c890:	d002      	beq.n	800c898 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800c892:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 800c896:	e765      	b.n	800c764 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800c898:	4628      	mov	r0, r5
 800c89a:	f7ff ff21 	bl	800c6e0 <HAL_CAN_TxMailbox1AbortCallback>
 800c89e:	e761      	b.n	800c764 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f7ff ff1b 	bl	800c6dc <HAL_CAN_TxMailbox2CompleteCallback>
 800c8a6:	e76e      	b.n	800c786 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800c8a8:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 800c8ac:	d002      	beq.n	800c8b4 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800c8ae:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 800c8b2:	e768      	b.n	800c786 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	f7ff ff14 	bl	800c6e2 <HAL_CAN_TxMailbox2AbortCallback>
 800c8ba:	e764      	b.n	800c786 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	2208      	movs	r2, #8
 800c8c0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f7ff ff0e 	bl	800c6e4 <HAL_CAN_RxFifo0FullCallback>
 800c8c8:	e76f      	b.n	800c7aa <HAL_CAN_IRQHandler+0xbe>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	f7fc f954 	bl	8008b78 <HAL_CAN_RxFifo0MsgPendingCallback>
 800c8d0:	e774      	b.n	800c7bc <HAL_CAN_IRQHandler+0xd0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800c8d2:	682b      	ldr	r3, [r5, #0]
 800c8d4:	2208      	movs	r2, #8
 800c8d6:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800c8d8:	4628      	mov	r0, r5
 800c8da:	f7ff ff04 	bl	800c6e6 <HAL_CAN_RxFifo1FullCallback>
 800c8de:	e77e      	b.n	800c7de <HAL_CAN_IRQHandler+0xf2>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f7fc f977 	bl	8008bd4 <HAL_CAN_RxFifo1MsgPendingCallback>
 800c8e6:	e782      	b.n	800c7ee <HAL_CAN_IRQHandler+0x102>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	2210      	movs	r2, #16
 800c8ec:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800c8ee:	4628      	mov	r0, r5
 800c8f0:	f7ff fefa 	bl	800c6e8 <HAL_CAN_SleepCallback>
 800c8f4:	e781      	b.n	800c7fa <HAL_CAN_IRQHandler+0x10e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800c8f6:	682b      	ldr	r3, [r5, #0]
 800c8f8:	2208      	movs	r2, #8
 800c8fa:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800c8fc:	4628      	mov	r0, r5
 800c8fe:	f7ff fef4 	bl	800c6ea <HAL_CAN_WakeUpFromRxMsgCallback>
 800c902:	e780      	b.n	800c806 <HAL_CAN_IRQHandler+0x11a>
        switch (esrflags & CAN_ESR_LEC)
 800c904:	f1bb 0f50 	cmp.w	fp, #80	@ 0x50
 800c908:	d00e      	beq.n	800c928 <HAL_CAN_IRQHandler+0x23c>
 800c90a:	f1bb 0f60 	cmp.w	fp, #96	@ 0x60
 800c90e:	d1ad      	bne.n	800c86c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_CRC;
 800c910:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
            break;
 800c914:	e7aa      	b.n	800c86c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_FOR;
 800c916:	f046 0610 	orr.w	r6, r6, #16
            break;
 800c91a:	e7a7      	b.n	800c86c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_ACK;
 800c91c:	f046 0620 	orr.w	r6, r6, #32
            break;
 800c920:	e7a4      	b.n	800c86c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BR;
 800c922:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 800c926:	e7a1      	b.n	800c86c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BD;
 800c928:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 800c92c:	e79e      	b.n	800c86c <HAL_CAN_IRQHandler+0x180>
    hcan->ErrorCode |= errorcode;
 800c92e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c930:	4333      	orrs	r3, r6
 800c932:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800c934:	4628      	mov	r0, r5
 800c936:	f7fc f97b 	bl	8008c30 <HAL_CAN_ErrorCallback>
}
 800c93a:	e7a1      	b.n	800c880 <HAL_CAN_IRQHandler+0x194>

0800c93c <HAL_CAN_GetError>:
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
  /* Return CAN error code */
  return hcan->ErrorCode;
 800c93c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
}
 800c93e:	4770      	bx	lr

0800c940 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800c940:	2800      	cmp	r0, #0
 800c942:	db07      	blt.n	800c954 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c944:	f000 021f 	and.w	r2, r0, #31
 800c948:	0940      	lsrs	r0, r0, #5
 800c94a:	2301      	movs	r3, #1
 800c94c:	4093      	lsls	r3, r2
 800c94e:	4a02      	ldr	r2, [pc, #8]	@ (800c958 <__NVIC_EnableIRQ+0x18>)
 800c950:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	e000e100 	.word	0xe000e100

0800c95c <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 800c95c:	2800      	cmp	r0, #0
 800c95e:	db08      	blt.n	800c972 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c960:	0109      	lsls	r1, r1, #4
 800c962:	b2c9      	uxtb	r1, r1
 800c964:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800c968:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800c96c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800c970:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c972:	f000 000f 	and.w	r0, r0, #15
 800c976:	0109      	lsls	r1, r1, #4
 800c978:	b2c9      	uxtb	r1, r1
 800c97a:	4b01      	ldr	r3, [pc, #4]	@ (800c980 <__NVIC_SetPriority+0x24>)
 800c97c:	5419      	strb	r1, [r3, r0]
}
 800c97e:	4770      	bx	lr
 800c980:	e000ed14 	.word	0xe000ed14

0800c984 <NVIC_EncodePriority>:
{
 800c984:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c986:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c98a:	f1c0 0c07 	rsb	ip, r0, #7
 800c98e:	f1bc 0f04 	cmp.w	ip, #4
 800c992:	bf28      	it	cs
 800c994:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c998:	1d03      	adds	r3, r0, #4
 800c99a:	2b06      	cmp	r3, #6
 800c99c:	d90f      	bls.n	800c9be <NVIC_EncodePriority+0x3a>
 800c99e:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9a0:	f04f 3eff 	mov.w	lr, #4294967295
 800c9a4:	fa0e f00c 	lsl.w	r0, lr, ip
 800c9a8:	ea21 0100 	bic.w	r1, r1, r0
 800c9ac:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c9ae:	fa0e fe03 	lsl.w	lr, lr, r3
 800c9b2:	ea22 020e 	bic.w	r2, r2, lr
}
 800c9b6:	ea41 0002 	orr.w	r0, r1, r2
 800c9ba:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9be:	2300      	movs	r3, #0
 800c9c0:	e7ee      	b.n	800c9a0 <NVIC_EncodePriority+0x1c>
	...

0800c9c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c9c4:	4a07      	ldr	r2, [pc, #28]	@ (800c9e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800c9c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c9c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c9cc:	041b      	lsls	r3, r3, #16
 800c9ce:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c9d0:	0200      	lsls	r0, r0, #8
 800c9d2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c9d6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800c9d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c9dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800c9e0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800c9e2:	4770      	bx	lr
 800c9e4:	e000ed00 	.word	0xe000ed00

0800c9e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ca04 <HAL_NVIC_SetPriority+0x1c>)
 800c9ee:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c9f0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800c9f4:	f7ff ffc6 	bl	800c984 <NVIC_EncodePriority>
 800c9f8:	4601      	mov	r1, r0
 800c9fa:	4620      	mov	r0, r4
 800c9fc:	f7ff ffae 	bl	800c95c <__NVIC_SetPriority>
}
 800ca00:	bd10      	pop	{r4, pc}
 800ca02:	bf00      	nop
 800ca04:	e000ed00 	.word	0xe000ed00

0800ca08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ca08:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ca0a:	f7ff ff99 	bl	800c940 <__NVIC_EnableIRQ>
}
 800ca0e:	bd08      	pop	{r3, pc}

0800ca10 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d038      	beq.n	800ca86 <HAL_CRC_Init+0x76>
{
 800ca14:	b510      	push	{r4, lr}
 800ca16:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800ca18:	7f43      	ldrb	r3, [r0, #29]
 800ca1a:	b31b      	cbz	r3, 800ca64 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800ca1c:	2302      	movs	r3, #2
 800ca1e:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800ca20:	7923      	ldrb	r3, [r4, #4]
 800ca22:	bb1b      	cbnz	r3, 800ca6c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800ca24:	6823      	ldr	r3, [r4, #0]
 800ca26:	4a19      	ldr	r2, [pc, #100]	@ (800ca8c <HAL_CRC_Init+0x7c>)
 800ca28:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800ca2a:	6822      	ldr	r2, [r4, #0]
 800ca2c:	6893      	ldr	r3, [r2, #8]
 800ca2e:	f023 0318 	bic.w	r3, r3, #24
 800ca32:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ca34:	7963      	ldrb	r3, [r4, #5]
 800ca36:	bb13      	cbnz	r3, 800ca7e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca3e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	6893      	ldr	r3, [r2, #8]
 800ca44:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800ca48:	6961      	ldr	r1, [r4, #20]
 800ca4a:	430b      	orrs	r3, r1
 800ca4c:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ca4e:	6822      	ldr	r2, [r4, #0]
 800ca50:	6893      	ldr	r3, [r2, #8]
 800ca52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca56:	69a1      	ldr	r1, [r4, #24]
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800ca60:	2000      	movs	r0, #0
}
 800ca62:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800ca64:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800ca66:	f001 f84b 	bl	800db00 <HAL_CRC_MspInit>
 800ca6a:	e7d7      	b.n	800ca1c <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800ca6c:	68e2      	ldr	r2, [r4, #12]
 800ca6e:	68a1      	ldr	r1, [r4, #8]
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 f80d 	bl	800ca90 <HAL_CRCEx_Polynomial_Set>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d0dc      	beq.n	800ca34 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800ca7a:	2001      	movs	r0, #1
 800ca7c:	e7f1      	b.n	800ca62 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	6922      	ldr	r2, [r4, #16]
 800ca82:	611a      	str	r2, [r3, #16]
 800ca84:	e7dc      	b.n	800ca40 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800ca86:	2001      	movs	r0, #1
}
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	04c11db7 	.word	0x04c11db7

0800ca90 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800ca90:	f011 0f01 	tst.w	r1, #1
 800ca94:	d030      	beq.n	800caf8 <HAL_CRCEx_Polynomial_Set+0x68>
{
 800ca96:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ca98:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800ca9a:	461c      	mov	r4, r3
 800ca9c:	3b01      	subs	r3, #1
 800ca9e:	b134      	cbz	r4, 800caae <HAL_CRCEx_Polynomial_Set+0x1e>
 800caa0:	f003 0c1f 	and.w	ip, r3, #31
 800caa4:	fa21 fc0c 	lsr.w	ip, r1, ip
 800caa8:	f01c 0f01 	tst.w	ip, #1
 800caac:	d0f5      	beq.n	800ca9a <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
 800caae:	2a18      	cmp	r2, #24
 800cab0:	d824      	bhi.n	800cafc <HAL_CRCEx_Polynomial_Set+0x6c>
 800cab2:	e8df f002 	tbb	[pc, r2]
 800cab6:	230f      	.short	0x230f
 800cab8:	23232323 	.word	0x23232323
 800cabc:	231d2323 	.word	0x231d2323
 800cac0:	23232323 	.word	0x23232323
 800cac4:	23192323 	.word	0x23192323
 800cac8:	23232323 	.word	0x23232323
 800cacc:	2323      	.short	0x2323
 800cace:	0d          	.byte	0x0d
 800cacf:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800cad0:	2b06      	cmp	r3, #6
 800cad2:	d817      	bhi.n	800cb04 <HAL_CRCEx_Polynomial_Set+0x74>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800cad4:	6803      	ldr	r3, [r0, #0]
 800cad6:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800cad8:	6801      	ldr	r1, [r0, #0]
 800cada:	688b      	ldr	r3, [r1, #8]
 800cadc:	f023 0318 	bic.w	r3, r3, #24
 800cae0:	4313      	orrs	r3, r2
 800cae2:	608b      	str	r3, [r1, #8]
 800cae4:	2000      	movs	r0, #0
 800cae6:	e00a      	b.n	800cafe <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_8B)
 800cae8:	2b07      	cmp	r3, #7
 800caea:	d9f3      	bls.n	800cad4 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800caec:	2001      	movs	r0, #1
 800caee:	e006      	b.n	800cafe <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_16B)
 800caf0:	2b0f      	cmp	r3, #15
 800caf2:	d9ef      	bls.n	800cad4 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800caf4:	2001      	movs	r0, #1
 800caf6:	e002      	b.n	800cafe <HAL_CRCEx_Polynomial_Set+0x6e>
    status =  HAL_ERROR;
 800caf8:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800cafa:	4770      	bx	lr
    switch (PolyLength)
 800cafc:	2001      	movs	r0, #1
}
 800cafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb02:	4770      	bx	lr
          status =   HAL_ERROR;
 800cb04:	2001      	movs	r0, #1
 800cb06:	e7fa      	b.n	800cafe <HAL_CRCEx_Polynomial_Set+0x6e>

0800cb08 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800cb08:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800cb0a:	4c06      	ldr	r4, [pc, #24]	@ (800cb24 <FLASH_Program_DoubleWord+0x1c>)
 800cb0c:	6961      	ldr	r1, [r4, #20]
 800cb0e:	f041 0101 	orr.w	r1, r1, #1
 800cb12:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800cb14:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800cb16:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800cb1a:	6043      	str	r3, [r0, #4]
}
 800cb1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	40022000 	.word	0x40022000

0800cb28 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800cb28:	4a09      	ldr	r2, [pc, #36]	@ (800cb50 <FLASH_Program_Fast+0x28>)
 800cb2a:	6953      	ldr	r3, [r2, #20]
 800cb2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb32:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800cb36:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800cb38:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800cb3a:	f851 2b04 	ldr.w	r2, [r1], #4
 800cb3e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 800cb42:	3b01      	subs	r3, #1
  } while (row_index != 0U);
 800cb44:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800cb48:	d1f7      	bne.n	800cb3a <FLASH_Program_Fast+0x12>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb4a:	f38c 8810 	msr	PRIMASK, ip

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800cb4e:	4770      	bx	lr
 800cb50:	40022000 	.word	0x40022000

0800cb54 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cb54:	4b09      	ldr	r3, [pc, #36]	@ (800cb7c <HAL_FLASH_Unlock+0x28>)
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	db01      	blt.n	800cb60 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800cb60:	4b06      	ldr	r3, [pc, #24]	@ (800cb7c <HAL_FLASH_Unlock+0x28>)
 800cb62:	4a07      	ldr	r2, [pc, #28]	@ (800cb80 <HAL_FLASH_Unlock+0x2c>)
 800cb64:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800cb66:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800cb6a:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	db01      	blt.n	800cb76 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800cb72:	2000      	movs	r0, #0
 800cb74:	4770      	bx	lr
      status = HAL_ERROR;
 800cb76:	2001      	movs	r0, #1
}
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	40022000 	.word	0x40022000
 800cb80:	45670123 	.word	0x45670123

0800cb84 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800cb84:	4a03      	ldr	r2, [pc, #12]	@ (800cb94 <HAL_FLASH_Lock+0x10>)
 800cb86:	6953      	ldr	r3, [r2, #20]
 800cb88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cb8c:	6153      	str	r3, [r2, #20]
}
 800cb8e:	2000      	movs	r0, #0
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	40022000 	.word	0x40022000

0800cb98 <FLASH_WaitForLastOperation>:
{
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800cb9c:	f7fe fd90 	bl	800b6c0 <HAL_GetTick>
 800cba0:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800cba2:	4b14      	ldr	r3, [pc, #80]	@ (800cbf4 <FLASH_WaitForLastOperation+0x5c>)
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800cbaa:	d009      	beq.n	800cbc0 <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 800cbac:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cbb0:	d0f7      	beq.n	800cba2 <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800cbb2:	f7fe fd85 	bl	800b6c0 <HAL_GetTick>
 800cbb6:	1b40      	subs	r0, r0, r5
 800cbb8:	42a0      	cmp	r0, r4
 800cbba:	d3f2      	bcc.n	800cba2 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800cbbc:	2003      	movs	r0, #3
 800cbbe:	e015      	b.n	800cbec <FLASH_WaitForLastOperation+0x54>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800cbc0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf4 <FLASH_WaitForLastOperation+0x5c>)
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	4a0c      	ldr	r2, [pc, #48]	@ (800cbf8 <FLASH_WaitForLastOperation+0x60>)
  if(error != 0u)
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	d109      	bne.n	800cbde <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cbca:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf4 <FLASH_WaitForLastOperation+0x5c>)
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	f013 0f01 	tst.w	r3, #1
 800cbd2:	d00c      	beq.n	800cbee <FLASH_WaitForLastOperation+0x56>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cbd4:	4b07      	ldr	r3, [pc, #28]	@ (800cbf4 <FLASH_WaitForLastOperation+0x5c>)
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e006      	b.n	800cbec <FLASH_WaitForLastOperation+0x54>
    pFlash.ErrorCode |= error;
 800cbde:	4907      	ldr	r1, [pc, #28]	@ (800cbfc <FLASH_WaitForLastOperation+0x64>)
 800cbe0:	684a      	ldr	r2, [r1, #4]
 800cbe2:	431a      	orrs	r2, r3
 800cbe4:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 800cbe6:	4a03      	ldr	r2, [pc, #12]	@ (800cbf4 <FLASH_WaitForLastOperation+0x5c>)
 800cbe8:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 800cbea:	2001      	movs	r0, #1
}
 800cbec:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800cbee:	2000      	movs	r0, #0
 800cbf0:	e7fc      	b.n	800cbec <FLASH_WaitForLastOperation+0x54>
 800cbf2:	bf00      	nop
 800cbf4:	40022000 	.word	0x40022000
 800cbf8:	0002c3fa 	.word	0x0002c3fa
 800cbfc:	2000000c 	.word	0x2000000c

0800cc00 <HAL_FLASH_Program>:
{
 800cc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc04:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 800cc06:	4a28      	ldr	r2, [pc, #160]	@ (800cca8 <HAL_FLASH_Program+0xa8>)
 800cc08:	7812      	ldrb	r2, [r2, #0]
 800cc0a:	2a01      	cmp	r2, #1
 800cc0c:	d049      	beq.n	800cca2 <HAL_FLASH_Program+0xa2>
 800cc0e:	4604      	mov	r4, r0
 800cc10:	460d      	mov	r5, r1
 800cc12:	4698      	mov	r8, r3
 800cc14:	4b24      	ldr	r3, [pc, #144]	@ (800cca8 <HAL_FLASH_Program+0xa8>)
 800cc16:	2201      	movs	r2, #1
 800cc18:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cc1a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cc1e:	f7ff ffbb 	bl	800cb98 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800cc22:	4607      	mov	r7, r0
 800cc24:	bb08      	cbnz	r0, 800cc6a <HAL_FLASH_Program+0x6a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cc26:	4b20      	ldr	r3, [pc, #128]	@ (800cca8 <HAL_FLASH_Program+0xa8>)
 800cc28:	2200      	movs	r2, #0
 800cc2a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cc2c:	4b1f      	ldr	r3, [pc, #124]	@ (800ccac <HAL_FLASH_Program+0xac>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800cc34:	d01f      	beq.n	800cc76 <HAL_FLASH_Program+0x76>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800cc36:	4a1d      	ldr	r2, [pc, #116]	@ (800ccac <HAL_FLASH_Program+0xac>)
 800cc38:	6813      	ldr	r3, [r2, #0]
 800cc3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cc3e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800cc40:	4b19      	ldr	r3, [pc, #100]	@ (800cca8 <HAL_FLASH_Program+0xa8>)
 800cc42:	2202      	movs	r2, #2
 800cc44:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800cc46:	b1d4      	cbz	r4, 800cc7e <HAL_FLASH_Program+0x7e>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800cc48:	1e63      	subs	r3, r4, #1
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d91e      	bls.n	800cc8c <HAL_FLASH_Program+0x8c>
  uint32_t prog_bit = 0;
 800cc4e:	2400      	movs	r4, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cc50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cc54:	f7ff ffa0 	bl	800cb98 <FLASH_WaitForLastOperation>
 800cc58:	4607      	mov	r7, r0
    if (prog_bit != 0U)
 800cc5a:	b124      	cbz	r4, 800cc66 <HAL_FLASH_Program+0x66>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800cc5c:	4a13      	ldr	r2, [pc, #76]	@ (800ccac <HAL_FLASH_Program+0xac>)
 800cc5e:	6953      	ldr	r3, [r2, #20]
 800cc60:	ea23 0304 	bic.w	r3, r3, r4
 800cc64:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800cc66:	f000 f847 	bl	800ccf8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800cc6a:	4b0f      	ldr	r3, [pc, #60]	@ (800cca8 <HAL_FLASH_Program+0xa8>)
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	701a      	strb	r2, [r3, #0]
}
 800cc70:	4638      	mov	r0, r7
 800cc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800cc76:	4b0c      	ldr	r3, [pc, #48]	@ (800cca8 <HAL_FLASH_Program+0xa8>)
 800cc78:	2200      	movs	r2, #0
 800cc7a:	771a      	strb	r2, [r3, #28]
 800cc7c:	e7e3      	b.n	800cc46 <HAL_FLASH_Program+0x46>
      FLASH_Program_DoubleWord(Address, Data);
 800cc7e:	4632      	mov	r2, r6
 800cc80:	4643      	mov	r3, r8
 800cc82:	4628      	mov	r0, r5
 800cc84:	f7ff ff40 	bl	800cb08 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800cc88:	2401      	movs	r4, #1
 800cc8a:	e7e1      	b.n	800cc50 <HAL_FLASH_Program+0x50>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4628      	mov	r0, r5
 800cc90:	f7ff ff4a 	bl	800cb28 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800cc94:	2c02      	cmp	r4, #2
 800cc96:	d001      	beq.n	800cc9c <HAL_FLASH_Program+0x9c>
  uint32_t prog_bit = 0;
 800cc98:	2400      	movs	r4, #0
 800cc9a:	e7d9      	b.n	800cc50 <HAL_FLASH_Program+0x50>
        prog_bit = FLASH_CR_FSTPG;
 800cc9c:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 800cca0:	e7d6      	b.n	800cc50 <HAL_FLASH_Program+0x50>
  __HAL_LOCK(&pFlash);
 800cca2:	2702      	movs	r7, #2
 800cca4:	e7e4      	b.n	800cc70 <HAL_FLASH_Program+0x70>
 800cca6:	bf00      	nop
 800cca8:	2000000c 	.word	0x2000000c
 800ccac:	40022000 	.word	0x40022000

0800ccb0 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800ccb0:	f010 0f01 	tst.w	r0, #1
 800ccb4:	d004      	beq.n	800ccc0 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800ccb6:	4a05      	ldr	r2, [pc, #20]	@ (800cccc <FLASH_MassErase+0x1c>)
 800ccb8:	6953      	ldr	r3, [r2, #20]
 800ccba:	f043 0304 	orr.w	r3, r3, #4
 800ccbe:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800ccc0:	4a02      	ldr	r2, [pc, #8]	@ (800cccc <FLASH_MassErase+0x1c>)
 800ccc2:	6953      	ldr	r3, [r2, #20]
 800ccc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ccc8:	6153      	str	r3, [r2, #20]
}
 800ccca:	4770      	bx	lr
 800cccc:	40022000 	.word	0x40022000

0800ccd0 <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800ccd0:	4b08      	ldr	r3, [pc, #32]	@ (800ccf4 <FLASH_PageErase+0x24>)
 800ccd2:	695a      	ldr	r2, [r3, #20]
 800ccd4:	f422 727e 	bic.w	r2, r2, #1016	@ 0x3f8
 800ccd8:	00c0      	lsls	r0, r0, #3
 800ccda:	f400 60ff 	and.w	r0, r0, #2040	@ 0x7f8
 800ccde:	4302      	orrs	r2, r0
 800cce0:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800cce2:	695a      	ldr	r2, [r3, #20]
 800cce4:	f042 0202 	orr.w	r2, r2, #2
 800cce8:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800ccea:	695a      	ldr	r2, [r3, #20]
 800ccec:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ccf0:	615a      	str	r2, [r3, #20]
}
 800ccf2:	4770      	bx	lr
 800ccf4:	40022000 	.word	0x40022000

0800ccf8 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800ccf8:	4b16      	ldr	r3, [pc, #88]	@ (800cd54 <FLASH_FlushCaches+0x5c>)
 800ccfa:	7f1a      	ldrb	r2, [r3, #28]
 800ccfc:	b2d3      	uxtb	r3, r2

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800ccfe:	2a01      	cmp	r2, #1
 800cd00:	d001      	beq.n	800cd06 <FLASH_FlushCaches+0xe>
 800cd02:	2b03      	cmp	r3, #3
 800cd04:	d110      	bne.n	800cd28 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800cd06:	4a14      	ldr	r2, [pc, #80]	@ (800cd58 <FLASH_FlushCaches+0x60>)
 800cd08:	6811      	ldr	r1, [r2, #0]
 800cd0a:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 800cd0e:	6011      	str	r1, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800cd10:	6811      	ldr	r1, [r2, #0]
 800cd12:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 800cd16:	6011      	str	r1, [r2, #0]
 800cd18:	6811      	ldr	r1, [r2, #0]
 800cd1a:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 800cd1e:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cd20:	6811      	ldr	r1, [r2, #0]
 800cd22:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800cd26:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800cd28:	3b02      	subs	r3, #2
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d903      	bls.n	800cd38 <FLASH_FlushCaches+0x40>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800cd30:	4b08      	ldr	r3, [pc, #32]	@ (800cd54 <FLASH_FlushCaches+0x5c>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	771a      	strb	r2, [r3, #28]
}
 800cd36:	4770      	bx	lr
    __HAL_FLASH_DATA_CACHE_RESET();
 800cd38:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <FLASH_FlushCaches+0x60>)
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cd48:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	e7ed      	b.n	800cd30 <FLASH_FlushCaches+0x38>
 800cd54:	2000000c 	.word	0x2000000c
 800cd58:	40022000 	.word	0x40022000

0800cd5c <HAL_FLASHEx_Erase>:
{
 800cd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800cd5e:	4b39      	ldr	r3, [pc, #228]	@ (800ce44 <HAL_FLASHEx_Erase+0xe8>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d06b      	beq.n	800ce3e <HAL_FLASHEx_Erase+0xe2>
 800cd66:	4604      	mov	r4, r0
 800cd68:	460e      	mov	r6, r1
 800cd6a:	4b36      	ldr	r3, [pc, #216]	@ (800ce44 <HAL_FLASHEx_Erase+0xe8>)
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cd70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cd74:	f7ff ff10 	bl	800cb98 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800cd78:	4607      	mov	r7, r0
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d15a      	bne.n	800ce34 <HAL_FLASHEx_Erase+0xd8>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cd7e:	4b31      	ldr	r3, [pc, #196]	@ (800ce44 <HAL_FLASHEx_Erase+0xe8>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800cd84:	4b30      	ldr	r3, [pc, #192]	@ (800ce48 <HAL_FLASHEx_Erase+0xec>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800cd8c:	d02f      	beq.n	800cdee <HAL_FLASHEx_Erase+0x92>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cd8e:	4b2e      	ldr	r3, [pc, #184]	@ (800ce48 <HAL_FLASHEx_Erase+0xec>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800cd96:	d026      	beq.n	800cde6 <HAL_FLASHEx_Erase+0x8a>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800cd98:	4a2b      	ldr	r2, [pc, #172]	@ (800ce48 <HAL_FLASHEx_Erase+0xec>)
 800cd9a:	6813      	ldr	r3, [r2, #0]
 800cd9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cda0:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800cda2:	4b28      	ldr	r3, [pc, #160]	@ (800ce44 <HAL_FLASHEx_Erase+0xe8>)
 800cda4:	2203      	movs	r2, #3
 800cda6:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d031      	beq.n	800ce12 <HAL_FLASHEx_Erase+0xb6>
      *PageError = 0xFFFFFFFFU;
 800cdae:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb2:	6033      	str	r3, [r6, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800cdb4:	68a5      	ldr	r5, [r4, #8]
 800cdb6:	68a3      	ldr	r3, [r4, #8]
 800cdb8:	68e2      	ldr	r2, [r4, #12]
 800cdba:	4413      	add	r3, r2
 800cdbc:	42ab      	cmp	r3, r5
 800cdbe:	d937      	bls.n	800ce30 <HAL_FLASHEx_Erase+0xd4>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800cdc0:	6861      	ldr	r1, [r4, #4]
 800cdc2:	4628      	mov	r0, r5
 800cdc4:	f7ff ff84 	bl	800ccd0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800cdc8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800cdcc:	f7ff fee4 	bl	800cb98 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800cdd0:	4a1d      	ldr	r2, [pc, #116]	@ (800ce48 <HAL_FLASHEx_Erase+0xec>)
 800cdd2:	6953      	ldr	r3, [r2, #20]
 800cdd4:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800cdd8:	f023 0302 	bic.w	r3, r3, #2
 800cddc:	6153      	str	r3, [r2, #20]
        if (status != HAL_OK)
 800cdde:	4607      	mov	r7, r0
 800cde0:	bb28      	cbnz	r0, 800ce2e <HAL_FLASHEx_Erase+0xd2>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800cde2:	3501      	adds	r5, #1
 800cde4:	e7e7      	b.n	800cdb6 <HAL_FLASHEx_Erase+0x5a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800cde6:	4b17      	ldr	r3, [pc, #92]	@ (800ce44 <HAL_FLASHEx_Erase+0xe8>)
 800cde8:	2201      	movs	r2, #1
 800cdea:	771a      	strb	r2, [r3, #28]
 800cdec:	e7dc      	b.n	800cda8 <HAL_FLASHEx_Erase+0x4c>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800cdee:	4b16      	ldr	r3, [pc, #88]	@ (800ce48 <HAL_FLASHEx_Erase+0xec>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800cdf6:	d008      	beq.n	800ce0a <HAL_FLASHEx_Erase+0xae>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800cdf8:	4a13      	ldr	r2, [pc, #76]	@ (800ce48 <HAL_FLASHEx_Erase+0xec>)
 800cdfa:	6813      	ldr	r3, [r2, #0]
 800cdfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ce00:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800ce02:	4b10      	ldr	r3, [pc, #64]	@ (800ce44 <HAL_FLASHEx_Erase+0xe8>)
 800ce04:	2202      	movs	r2, #2
 800ce06:	771a      	strb	r2, [r3, #28]
 800ce08:	e7ce      	b.n	800cda8 <HAL_FLASHEx_Erase+0x4c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ce0a:	4b0e      	ldr	r3, [pc, #56]	@ (800ce44 <HAL_FLASHEx_Erase+0xe8>)
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	771a      	strb	r2, [r3, #28]
 800ce10:	e7ca      	b.n	800cda8 <HAL_FLASHEx_Erase+0x4c>
      FLASH_MassErase(pEraseInit->Banks);
 800ce12:	6860      	ldr	r0, [r4, #4]
 800ce14:	f7ff ff4c 	bl	800ccb0 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ce18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ce1c:	f7ff febc 	bl	800cb98 <FLASH_WaitForLastOperation>
 800ce20:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800ce22:	4a09      	ldr	r2, [pc, #36]	@ (800ce48 <HAL_FLASHEx_Erase+0xec>)
 800ce24:	6953      	ldr	r3, [r2, #20]
 800ce26:	f023 0304 	bic.w	r3, r3, #4
 800ce2a:	6153      	str	r3, [r2, #20]
 800ce2c:	e000      	b.n	800ce30 <HAL_FLASHEx_Erase+0xd4>
          *PageError = page_index;
 800ce2e:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 800ce30:	f7ff ff62 	bl	800ccf8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800ce34:	4b03      	ldr	r3, [pc, #12]	@ (800ce44 <HAL_FLASHEx_Erase+0xe8>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	701a      	strb	r2, [r3, #0]
}
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800ce3e:	2702      	movs	r7, #2
 800ce40:	e7fb      	b.n	800ce3a <HAL_FLASHEx_Erase+0xde>
 800ce42:	bf00      	nop
 800ce44:	2000000c 	.word	0x2000000c
 800ce48:	40022000 	.word	0x40022000

0800ce4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ce4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce4e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800ce50:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ce52:	e062      	b.n	800cf1a <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ce54:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ce56:	005e      	lsls	r6, r3, #1
 800ce58:	2403      	movs	r4, #3
 800ce5a:	40b4      	lsls	r4, r6
 800ce5c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ce60:	68cc      	ldr	r4, [r1, #12]
 800ce62:	40b4      	lsls	r4, r6
 800ce64:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800ce66:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ce68:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ce6a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ce6e:	684c      	ldr	r4, [r1, #4]
 800ce70:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800ce74:	409c      	lsls	r4, r3
 800ce76:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800ce78:	6044      	str	r4, [r0, #4]
 800ce7a:	e05f      	b.n	800cf3c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ce7c:	08dd      	lsrs	r5, r3, #3
 800ce7e:	3508      	adds	r5, #8
 800ce80:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ce84:	f003 0c07 	and.w	ip, r3, #7
 800ce88:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800ce8c:	f04f 0e0f 	mov.w	lr, #15
 800ce90:	fa0e fe0c 	lsl.w	lr, lr, ip
 800ce94:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ce98:	690c      	ldr	r4, [r1, #16]
 800ce9a:	fa04 f40c 	lsl.w	r4, r4, ip
 800ce9e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800cea2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800cea6:	e060      	b.n	800cf6a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cea8:	2402      	movs	r4, #2
 800ceaa:	e000      	b.n	800ceae <HAL_GPIO_Init+0x62>
 800ceac:	2400      	movs	r4, #0
 800ceae:	fa04 f40e 	lsl.w	r4, r4, lr
 800ceb2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ceb4:	f10c 0c02 	add.w	ip, ip, #2
 800ceb8:	4d4c      	ldr	r5, [pc, #304]	@ (800cfec <HAL_GPIO_Init+0x1a0>)
 800ceba:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cebe:	4c4c      	ldr	r4, [pc, #304]	@ (800cff0 <HAL_GPIO_Init+0x1a4>)
 800cec0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800cec2:	43d4      	mvns	r4, r2
 800cec4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cec8:	684f      	ldr	r7, [r1, #4]
 800ceca:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800cece:	d001      	beq.n	800ced4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800ced0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800ced4:	4d46      	ldr	r5, [pc, #280]	@ (800cff0 <HAL_GPIO_Init+0x1a4>)
 800ced6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800ced8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800ceda:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cede:	684f      	ldr	r7, [r1, #4]
 800cee0:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 800cee4:	d001      	beq.n	800ceea <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800cee6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800ceea:	4d41      	ldr	r5, [pc, #260]	@ (800cff0 <HAL_GPIO_Init+0x1a4>)
 800ceec:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ceee:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800cef0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cef4:	684f      	ldr	r7, [r1, #4]
 800cef6:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800cefa:	d001      	beq.n	800cf00 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 800cefc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800cf00:	4d3b      	ldr	r5, [pc, #236]	@ (800cff0 <HAL_GPIO_Init+0x1a4>)
 800cf02:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800cf04:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800cf06:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cf08:	684e      	ldr	r6, [r1, #4]
 800cf0a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800cf0e:	d001      	beq.n	800cf14 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800cf10:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800cf14:	4a36      	ldr	r2, [pc, #216]	@ (800cff0 <HAL_GPIO_Init+0x1a4>)
 800cf16:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800cf18:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cf1a:	680a      	ldr	r2, [r1, #0]
 800cf1c:	fa32 f403 	lsrs.w	r4, r2, r3
 800cf20:	d062      	beq.n	800cfe8 <HAL_GPIO_Init+0x19c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800cf22:	f04f 0c01 	mov.w	ip, #1
 800cf26:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800cf2a:	ea1c 0202 	ands.w	r2, ip, r2
 800cf2e:	d0f3      	beq.n	800cf18 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cf30:	684c      	ldr	r4, [r1, #4]
 800cf32:	f004 0403 	and.w	r4, r4, #3
 800cf36:	3c01      	subs	r4, #1
 800cf38:	2c01      	cmp	r4, #1
 800cf3a:	d98b      	bls.n	800ce54 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cf3c:	684c      	ldr	r4, [r1, #4]
 800cf3e:	f004 0403 	and.w	r4, r4, #3
 800cf42:	2c03      	cmp	r4, #3
 800cf44:	d00c      	beq.n	800cf60 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800cf46:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cf48:	005d      	lsls	r5, r3, #1
 800cf4a:	f04f 0c03 	mov.w	ip, #3
 800cf4e:	fa0c fc05 	lsl.w	ip, ip, r5
 800cf52:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cf56:	688c      	ldr	r4, [r1, #8]
 800cf58:	40ac      	lsls	r4, r5
 800cf5a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800cf5e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cf60:	684c      	ldr	r4, [r1, #4]
 800cf62:	f004 0403 	and.w	r4, r4, #3
 800cf66:	2c02      	cmp	r4, #2
 800cf68:	d088      	beq.n	800ce7c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800cf6a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800cf6c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800cf70:	f04f 0c03 	mov.w	ip, #3
 800cf74:	fa0c fc0e 	lsl.w	ip, ip, lr
 800cf78:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800cf7c:	684c      	ldr	r4, [r1, #4]
 800cf7e:	f004 0403 	and.w	r4, r4, #3
 800cf82:	fa04 f40e 	lsl.w	r4, r4, lr
 800cf86:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800cf8a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800cf8c:	684c      	ldr	r4, [r1, #4]
 800cf8e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800cf92:	d0c1      	beq.n	800cf18 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cf94:	4c17      	ldr	r4, [pc, #92]	@ (800cff4 <HAL_GPIO_Init+0x1a8>)
 800cf96:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800cf98:	f045 0501 	orr.w	r5, r5, #1
 800cf9c:	6625      	str	r5, [r4, #96]	@ 0x60
 800cf9e:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 800cfa0:	f004 0401 	and.w	r4, r4, #1
 800cfa4:	9401      	str	r4, [sp, #4]
 800cfa6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800cfa8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800cfac:	f10c 0502 	add.w	r5, ip, #2
 800cfb0:	4c0e      	ldr	r4, [pc, #56]	@ (800cfec <HAL_GPIO_Init+0x1a0>)
 800cfb2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800cfb6:	f003 0e03 	and.w	lr, r3, #3
 800cfba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800cfbe:	240f      	movs	r4, #15
 800cfc0:	fa04 f40e 	lsl.w	r4, r4, lr
 800cfc4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cfc8:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800cfcc:	f43f af6e 	beq.w	800ceac <HAL_GPIO_Init+0x60>
 800cfd0:	4c09      	ldr	r4, [pc, #36]	@ (800cff8 <HAL_GPIO_Init+0x1ac>)
 800cfd2:	42a0      	cmp	r0, r4
 800cfd4:	d006      	beq.n	800cfe4 <HAL_GPIO_Init+0x198>
 800cfd6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800cfda:	42a0      	cmp	r0, r4
 800cfdc:	f43f af64 	beq.w	800cea8 <HAL_GPIO_Init+0x5c>
 800cfe0:	2407      	movs	r4, #7
 800cfe2:	e764      	b.n	800ceae <HAL_GPIO_Init+0x62>
 800cfe4:	2401      	movs	r4, #1
 800cfe6:	e762      	b.n	800ceae <HAL_GPIO_Init+0x62>
  }
}
 800cfe8:	b003      	add	sp, #12
 800cfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfec:	40010000 	.word	0x40010000
 800cff0:	40010400 	.word	0x40010400
 800cff4:	40021000 	.word	0x40021000
 800cff8:	48000400 	.word	0x48000400

0800cffc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cffc:	b10a      	cbz	r2, 800d002 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cffe:	6181      	str	r1, [r0, #24]
 800d000:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d002:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800d004:	4770      	bx	lr

0800d006 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d006:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d008:	ea01 0203 	and.w	r2, r1, r3
 800d00c:	ea21 0103 	bic.w	r1, r1, r3
 800d010:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d014:	6181      	str	r1, [r0, #24]
}
 800d016:	4770      	bx	lr

0800d018 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d018:	6803      	ldr	r3, [r0, #0]
 800d01a:	699a      	ldr	r2, [r3, #24]
 800d01c:	f012 0f02 	tst.w	r2, #2
 800d020:	d001      	beq.n	800d026 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d022:	2200      	movs	r2, #0
 800d024:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d026:	6803      	ldr	r3, [r0, #0]
 800d028:	699a      	ldr	r2, [r3, #24]
 800d02a:	f012 0f01 	tst.w	r2, #1
 800d02e:	d103      	bne.n	800d038 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d030:	699a      	ldr	r2, [r3, #24]
 800d032:	f042 0201 	orr.w	r2, r2, #1
 800d036:	619a      	str	r2, [r3, #24]
  }
}
 800d038:	4770      	bx	lr

0800d03a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d03a:	b410      	push	{r4}
 800d03c:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d03e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d042:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d046:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d048:	4321      	orrs	r1, r4
 800d04a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d04e:	6802      	ldr	r2, [r0, #0]
 800d050:	6853      	ldr	r3, [r2, #4]
 800d052:	0d64      	lsrs	r4, r4, #21
 800d054:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800d058:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 800d05c:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 800d060:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 800d064:	f044 0403 	orr.w	r4, r4, #3
 800d068:	ea23 0304 	bic.w	r3, r3, r4
 800d06c:	430b      	orrs	r3, r1
 800d06e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d070:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d074:	4770      	bx	lr

0800d076 <I2C_IsErrorOccurred>:
{
 800d076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d07a:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800d07c:	6803      	ldr	r3, [r0, #0]
 800d07e:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d080:	f016 0610 	ands.w	r6, r6, #16
 800d084:	d07c      	beq.n	800d180 <I2C_IsErrorOccurred+0x10a>
 800d086:	460d      	mov	r5, r1
 800d088:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d08a:	2210      	movs	r2, #16
 800d08c:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800d08e:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d090:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	6998      	ldr	r0, [r3, #24]
 800d096:	f010 0f20 	tst.w	r0, #32
 800d09a:	d130      	bne.n	800d0fe <I2C_IsErrorOccurred+0x88>
 800d09c:	bb7f      	cbnz	r7, 800d0fe <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 800d09e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d0a2:	d0f6      	beq.n	800d092 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d0a4:	f7fe fb0c 	bl	800b6c0 <HAL_GetTick>
 800d0a8:	eba0 0008 	sub.w	r0, r0, r8
 800d0ac:	42a8      	cmp	r0, r5
 800d0ae:	d801      	bhi.n	800d0b4 <I2C_IsErrorOccurred+0x3e>
 800d0b0:	2d00      	cmp	r5, #0
 800d0b2:	d1ee      	bne.n	800d092 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d0b4:	6821      	ldr	r1, [r4, #0]
 800d0b6:	684b      	ldr	r3, [r1, #4]
 800d0b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 800d0bc:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800d0c0:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d0c2:	6988      	ldr	r0, [r1, #24]
 800d0c4:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 800d0c8:	d002      	beq.n	800d0d0 <I2C_IsErrorOccurred+0x5a>
 800d0ca:	b90b      	cbnz	r3, 800d0d0 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800d0cc:	2a20      	cmp	r2, #32
 800d0ce:	d10e      	bne.n	800d0ee <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	f013 0f20 	tst.w	r3, #32
 800d0d8:	d1db      	bne.n	800d092 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d0da:	f7fe faf1 	bl	800b6c0 <HAL_GetTick>
 800d0de:	eba0 0008 	sub.w	r0, r0, r8
 800d0e2:	2819      	cmp	r0, #25
 800d0e4:	d9f4      	bls.n	800d0d0 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800d0e6:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 800d0ea:	2701      	movs	r7, #1
              break;
 800d0ec:	e7d1      	b.n	800d092 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d0ee:	684b      	ldr	r3, [r1, #4]
 800d0f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d0f4:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800d0f6:	f7fe fae3 	bl	800b6c0 <HAL_GetTick>
 800d0fa:	4680      	mov	r8, r0
 800d0fc:	e7e8      	b.n	800d0d0 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 800d0fe:	b90f      	cbnz	r7, 800d104 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d100:	2220      	movs	r2, #32
 800d102:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800d104:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800d108:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800d10a:	6822      	ldr	r2, [r4, #0]
 800d10c:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d10e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800d112:	d005      	beq.n	800d120 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800d114:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d118:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d11c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800d11e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d120:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800d124:	d006      	beq.n	800d134 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 800d126:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d12a:	6822      	ldr	r2, [r4, #0]
 800d12c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d130:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800d132:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d134:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800d138:	d024      	beq.n	800d184 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 800d13a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d144:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800d146:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800d148:	4620      	mov	r0, r4
 800d14a:	f7ff ff65 	bl	800d018 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800d14e:	6822      	ldr	r2, [r4, #0]
 800d150:	6853      	ldr	r3, [r2, #4]
 800d152:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d156:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d15a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d15e:	f023 0301 	bic.w	r3, r3, #1
 800d162:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800d164:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d166:	4333      	orrs	r3, r6
 800d168:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d16a:	2320      	movs	r3, #32
 800d16c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d170:	2300      	movs	r3, #0
 800d172:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800d176:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800d17a:	4628      	mov	r0, r5
 800d17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800d180:	2500      	movs	r5, #0
 800d182:	e7c2      	b.n	800d10a <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 800d184:	2d00      	cmp	r5, #0
 800d186:	d0f8      	beq.n	800d17a <I2C_IsErrorOccurred+0x104>
 800d188:	e7de      	b.n	800d148 <I2C_IsErrorOccurred+0xd2>

0800d18a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800d18a:	b570      	push	{r4, r5, r6, lr}
 800d18c:	4604      	mov	r4, r0
 800d18e:	460d      	mov	r5, r1
 800d190:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d192:	6823      	ldr	r3, [r4, #0]
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	f013 0f02 	tst.w	r3, #2
 800d19a:	d122      	bne.n	800d1e2 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d19c:	4632      	mov	r2, r6
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f7ff ff68 	bl	800d076 <I2C_IsErrorOccurred>
 800d1a6:	b9f0      	cbnz	r0, 800d1e6 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800d1a8:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d1ac:	d0f1      	beq.n	800d192 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1ae:	f7fe fa87 	bl	800b6c0 <HAL_GetTick>
 800d1b2:	1b80      	subs	r0, r0, r6
 800d1b4:	42a8      	cmp	r0, r5
 800d1b6:	d801      	bhi.n	800d1bc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800d1b8:	2d00      	cmp	r5, #0
 800d1ba:	d1ea      	bne.n	800d192 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800d1bc:	6823      	ldr	r3, [r4, #0]
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	f013 0f02 	tst.w	r3, #2
 800d1c4:	d1e5      	bne.n	800d192 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d1c8:	f043 0320 	orr.w	r3, r3, #32
 800d1cc:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d1ce:	2320      	movs	r3, #32
 800d1d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800d1da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800d1de:	2001      	movs	r0, #1
 800d1e0:	e000      	b.n	800d1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 800d1e2:	2000      	movs	r0, #0
}
 800d1e4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d1e6:	2001      	movs	r0, #1
 800d1e8:	e7fc      	b.n	800d1e4 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

0800d1ea <I2C_WaitOnFlagUntilTimeout>:
{
 800d1ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	4688      	mov	r8, r1
 800d1f2:	4617      	mov	r7, r2
 800d1f4:	461e      	mov	r6, r3
 800d1f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d1fa:	682b      	ldr	r3, [r5, #0]
 800d1fc:	699c      	ldr	r4, [r3, #24]
 800d1fe:	ea38 0404 	bics.w	r4, r8, r4
 800d202:	bf0c      	ite	eq
 800d204:	2301      	moveq	r3, #1
 800d206:	2300      	movne	r3, #0
 800d208:	42bb      	cmp	r3, r7
 800d20a:	d127      	bne.n	800d25c <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d20c:	464a      	mov	r2, r9
 800d20e:	4631      	mov	r1, r6
 800d210:	4628      	mov	r0, r5
 800d212:	f7ff ff30 	bl	800d076 <I2C_IsErrorOccurred>
 800d216:	bb20      	cbnz	r0, 800d262 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 800d218:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d21c:	d0ed      	beq.n	800d1fa <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d21e:	f7fe fa4f 	bl	800b6c0 <HAL_GetTick>
 800d222:	eba0 0009 	sub.w	r0, r0, r9
 800d226:	42b0      	cmp	r0, r6
 800d228:	d801      	bhi.n	800d22e <I2C_WaitOnFlagUntilTimeout+0x44>
 800d22a:	2e00      	cmp	r6, #0
 800d22c:	d1e5      	bne.n	800d1fa <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800d22e:	682b      	ldr	r3, [r5, #0]
 800d230:	699b      	ldr	r3, [r3, #24]
 800d232:	ea38 0303 	bics.w	r3, r8, r3
 800d236:	bf0c      	ite	eq
 800d238:	2301      	moveq	r3, #1
 800d23a:	2300      	movne	r3, #0
 800d23c:	42bb      	cmp	r3, r7
 800d23e:	d1dc      	bne.n	800d1fa <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d240:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800d242:	f043 0320 	orr.w	r3, r3, #32
 800d246:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d248:	2320      	movs	r3, #32
 800d24a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d24e:	2300      	movs	r3, #0
 800d250:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800d254:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800d258:	2001      	movs	r0, #1
 800d25a:	e000      	b.n	800d25e <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 800d25c:	2000      	movs	r0, #0
}
 800d25e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 800d262:	2001      	movs	r0, #1
 800d264:	e7fb      	b.n	800d25e <I2C_WaitOnFlagUntilTimeout+0x74>

0800d266 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800d266:	b570      	push	{r4, r5, r6, lr}
 800d268:	4604      	mov	r4, r0
 800d26a:	460d      	mov	r5, r1
 800d26c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d26e:	e004      	b.n	800d27a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800d270:	6823      	ldr	r3, [r4, #0]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	f013 0f20 	tst.w	r3, #32
 800d278:	d012      	beq.n	800d2a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	699b      	ldr	r3, [r3, #24]
 800d27e:	f013 0f20 	tst.w	r3, #32
 800d282:	d11b      	bne.n	800d2bc <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d284:	4632      	mov	r2, r6
 800d286:	4629      	mov	r1, r5
 800d288:	4620      	mov	r0, r4
 800d28a:	f7ff fef4 	bl	800d076 <I2C_IsErrorOccurred>
 800d28e:	b9b8      	cbnz	r0, 800d2c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d290:	f7fe fa16 	bl	800b6c0 <HAL_GetTick>
 800d294:	1b80      	subs	r0, r0, r6
 800d296:	42a8      	cmp	r0, r5
 800d298:	d8ea      	bhi.n	800d270 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800d29a:	2d00      	cmp	r5, #0
 800d29c:	d1ed      	bne.n	800d27a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 800d29e:	e7e7      	b.n	800d270 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2a0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d2a2:	f043 0320 	orr.w	r3, r3, #32
 800d2a6:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d2a8:	2320      	movs	r3, #32
 800d2aa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800d2b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800d2b8:	2001      	movs	r0, #1
 800d2ba:	e000      	b.n	800d2be <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 800d2bc:	2000      	movs	r0, #0
}
 800d2be:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800d2c0:	2001      	movs	r0, #1
 800d2c2:	e7fc      	b.n	800d2be <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

0800d2c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800d2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2c6:	4604      	mov	r4, r0
 800d2c8:	460e      	mov	r6, r1
 800d2ca:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800d2cc:	2500      	movs	r5, #0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d2ce:	e018      	b.n	800d302 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	6463      	str	r3, [r4, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800d2d4:	f7fe f9f4 	bl	800b6c0 <HAL_GetTick>
 800d2d8:	1bc0      	subs	r0, r0, r7
 800d2da:	42b0      	cmp	r0, r6
 800d2dc:	d800      	bhi.n	800d2e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 800d2de:	b986      	cbnz	r6, 800d302 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
 800d2e0:	b97d      	cbnz	r5, 800d302 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	f013 0f04 	tst.w	r3, #4
 800d2ea:	d10a      	bne.n	800d302 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d2ec:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800d2ee:	f043 0320 	orr.w	r3, r3, #32
 800d2f2:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d2f4:	2320      	movs	r3, #32
 800d2f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        status = HAL_ERROR;
 800d300:	2501      	movs	r5, #1
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	699b      	ldr	r3, [r3, #24]
 800d306:	f013 0f04 	tst.w	r3, #4
 800d30a:	d12e      	bne.n	800d36a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
 800d30c:	bb6d      	cbnz	r5, 800d36a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d30e:	463a      	mov	r2, r7
 800d310:	4631      	mov	r1, r6
 800d312:	4620      	mov	r0, r4
 800d314:	f7ff feaf 	bl	800d076 <I2C_IsErrorOccurred>
 800d318:	b100      	cbz	r0, 800d31c <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
      status = HAL_ERROR;
 800d31a:	2501      	movs	r5, #1
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	699a      	ldr	r2, [r3, #24]
 800d320:	f012 0f20 	tst.w	r2, #32
 800d324:	d0d6      	beq.n	800d2d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
 800d326:	2d00      	cmp	r5, #0
 800d328:	d1d4      	bne.n	800d2d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d32a:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d32c:	699a      	ldr	r2, [r3, #24]
 800d32e:	f012 0f10 	tst.w	r2, #16
 800d332:	d0cd      	beq.n	800d2d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d334:	2210      	movs	r2, #16
 800d336:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d338:	2304      	movs	r3, #4
 800d33a:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d33c:	6823      	ldr	r3, [r4, #0]
 800d33e:	2220      	movs	r2, #32
 800d340:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800d342:	6821      	ldr	r1, [r4, #0]
 800d344:	684b      	ldr	r3, [r1, #4]
 800d346:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d34a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d34e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d352:	f023 0301 	bic.w	r3, r3, #1
 800d356:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800d358:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d35c:	2300      	movs	r3, #0
 800d35e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800d362:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        status = HAL_ERROR;
 800d366:	2501      	movs	r5, #1
 800d368:	e7b4      	b.n	800d2d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
}
 800d36a:	4628      	mov	r0, r5
 800d36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d36e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800d36e:	2800      	cmp	r0, #0
 800d370:	d05f      	beq.n	800d432 <HAL_I2C_Init+0xc4>
{
 800d372:	b510      	push	{r4, lr}
 800d374:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d376:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d048      	beq.n	800d410 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800d37e:	2324      	movs	r3, #36	@ 0x24
 800d380:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800d384:	6822      	ldr	r2, [r4, #0]
 800d386:	6813      	ldr	r3, [r2, #0]
 800d388:	f023 0301 	bic.w	r3, r3, #1
 800d38c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d38e:	6863      	ldr	r3, [r4, #4]
 800d390:	6822      	ldr	r2, [r4, #0]
 800d392:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800d396:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d398:	6822      	ldr	r2, [r4, #0]
 800d39a:	6893      	ldr	r3, [r2, #8]
 800d39c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d3a0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d3a2:	68e3      	ldr	r3, [r4, #12]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d038      	beq.n	800d41a <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d3a8:	68a3      	ldr	r3, [r4, #8]
 800d3aa:	6822      	ldr	r2, [r4, #0]
 800d3ac:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 800d3b0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d3b2:	68e3      	ldr	r3, [r4, #12]
 800d3b4:	2b02      	cmp	r3, #2
 800d3b6:	d036      	beq.n	800d426 <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d3b8:	6822      	ldr	r2, [r4, #0]
 800d3ba:	6853      	ldr	r3, [r2, #4]
 800d3bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d3c0:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d3c2:	6822      	ldr	r2, [r4, #0]
 800d3c4:	6853      	ldr	r3, [r2, #4]
 800d3c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d3ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3ce:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d3d0:	6822      	ldr	r2, [r4, #0]
 800d3d2:	68d3      	ldr	r3, [r2, #12]
 800d3d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d3d8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d3da:	6923      	ldr	r3, [r4, #16]
 800d3dc:	6962      	ldr	r2, [r4, #20]
 800d3de:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d3e0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d3e2:	6822      	ldr	r2, [r4, #0]
 800d3e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d3e8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d3ea:	69e3      	ldr	r3, [r4, #28]
 800d3ec:	6a21      	ldr	r1, [r4, #32]
 800d3ee:	6822      	ldr	r2, [r4, #0]
 800d3f0:	430b      	orrs	r3, r1
 800d3f2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800d3f4:	6822      	ldr	r2, [r4, #0]
 800d3f6:	6813      	ldr	r3, [r2, #0]
 800d3f8:	f043 0301 	orr.w	r3, r3, #1
 800d3fc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3fe:	2000      	movs	r0, #0
 800d400:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d402:	2320      	movs	r3, #32
 800d404:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800d408:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d40a:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800d40e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800d410:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800d414:	f000 fb8a 	bl	800db2c <HAL_I2C_MspInit>
 800d418:	e7b1      	b.n	800d37e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d41a:	68a3      	ldr	r3, [r4, #8]
 800d41c:	6822      	ldr	r2, [r4, #0]
 800d41e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d422:	6093      	str	r3, [r2, #8]
 800d424:	e7c5      	b.n	800d3b2 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800d426:	6822      	ldr	r2, [r4, #0]
 800d428:	6853      	ldr	r3, [r2, #4]
 800d42a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d42e:	6053      	str	r3, [r2, #4]
 800d430:	e7c7      	b.n	800d3c2 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 800d432:	2001      	movs	r0, #1
}
 800d434:	4770      	bx	lr
	...

0800d438 <HAL_I2C_Master_Transmit>:
{
 800d438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	460f      	mov	r7, r1
 800d440:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d442:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800d446:	2920      	cmp	r1, #32
 800d448:	f040 80b7 	bne.w	800d5ba <HAL_I2C_Master_Transmit+0x182>
 800d44c:	4604      	mov	r4, r0
 800d44e:	4691      	mov	r9, r2
 800d450:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 800d452:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d456:	2b01      	cmp	r3, #1
 800d458:	f000 80b3 	beq.w	800d5c2 <HAL_I2C_Master_Transmit+0x18a>
 800d45c:	f04f 0a01 	mov.w	sl, #1
 800d460:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800d464:	f7fe f92c 	bl	800b6c0 <HAL_GetTick>
 800d468:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d46a:	9000      	str	r0, [sp, #0]
 800d46c:	2319      	movs	r3, #25
 800d46e:	4652      	mov	r2, sl
 800d470:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d474:	4620      	mov	r0, r4
 800d476:	f7ff feb8 	bl	800d1ea <I2C_WaitOnFlagUntilTimeout>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	f040 80a3 	bne.w	800d5c6 <HAL_I2C_Master_Transmit+0x18e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d480:	2321      	movs	r3, #33	@ 0x21
 800d482:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d486:	2310      	movs	r3, #16
 800d488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d48c:	2300      	movs	r3, #0
 800d48e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800d490:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d494:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d498:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d49a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	2bff      	cmp	r3, #255	@ 0xff
 800d4a0:	d91e      	bls.n	800d4e0 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4a2:	23ff      	movs	r3, #255	@ 0xff
 800d4a4:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d4a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (hi2c->XferSize > 0U)
 800d4aa:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800d4ac:	b1ea      	cbz	r2, 800d4ea <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d4ae:	6822      	ldr	r2, [r4, #0]
 800d4b0:	f899 1000 	ldrb.w	r1, [r9]
 800d4b4:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800d4b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d4b8:	3201      	adds	r2, #1
 800d4ba:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800d4bc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d4be:	b292      	uxth	r2, r2
 800d4c0:	3a01      	subs	r2, #1
 800d4c2:	b292      	uxth	r2, r2
 800d4c4:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800d4c6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800d4c8:	3a01      	subs	r2, #1
 800d4ca:	b292      	uxth	r2, r2
 800d4cc:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800d4ce:	3201      	adds	r2, #1
 800d4d0:	4941      	ldr	r1, [pc, #260]	@ (800d5d8 <HAL_I2C_Master_Transmit+0x1a0>)
 800d4d2:	9100      	str	r1, [sp, #0]
 800d4d4:	b2d2      	uxtb	r2, r2
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	4620      	mov	r0, r4
 800d4da:	f7ff fdae 	bl	800d03a <I2C_TransferConfig>
 800d4de:	e018      	b.n	800d512 <HAL_I2C_Master_Transmit+0xda>
      hi2c->XferSize = hi2c->XferCount;
 800d4e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d4e2:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d4e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d4e8:	e7df      	b.n	800d4aa <HAL_I2C_Master_Transmit+0x72>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800d4ea:	493b      	ldr	r1, [pc, #236]	@ (800d5d8 <HAL_I2C_Master_Transmit+0x1a0>)
 800d4ec:	9100      	str	r1, [sp, #0]
 800d4ee:	b2d2      	uxtb	r2, r2
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	f7ff fda1 	bl	800d03a <I2C_TransferConfig>
 800d4f8:	e00b      	b.n	800d512 <HAL_I2C_Master_Transmit+0xda>
          hi2c->XferSize = hi2c->XferCount;
 800d4fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d4fc:	b292      	uxth	r2, r2
 800d4fe:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d500:	2300      	movs	r3, #0
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d508:	b2d2      	uxtb	r2, r2
 800d50a:	4639      	mov	r1, r7
 800d50c:	4620      	mov	r0, r4
 800d50e:	f7ff fd94 	bl	800d03a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d512:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d514:	b29b      	uxth	r3, r3
 800d516:	2b00      	cmp	r3, #0
 800d518:	d033      	beq.n	800d582 <HAL_I2C_Master_Transmit+0x14a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d51a:	462a      	mov	r2, r5
 800d51c:	4631      	mov	r1, r6
 800d51e:	4620      	mov	r0, r4
 800d520:	f7ff fe33 	bl	800d18a <I2C_WaitOnTXISFlagUntilTimeout>
 800d524:	2800      	cmp	r0, #0
 800d526:	d150      	bne.n	800d5ca <HAL_I2C_Master_Transmit+0x192>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d528:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d52a:	6823      	ldr	r3, [r4, #0]
 800d52c:	7812      	ldrb	r2, [r2, #0]
 800d52e:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800d530:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d532:	3301      	adds	r3, #1
 800d534:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800d536:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d538:	b29b      	uxth	r3, r3
 800d53a:	3b01      	subs	r3, #1
 800d53c:	b29b      	uxth	r3, r3
 800d53e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800d540:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800d542:	3b01      	subs	r3, #1
 800d544:	b29b      	uxth	r3, r3
 800d546:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d548:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d54a:	b292      	uxth	r2, r2
 800d54c:	2a00      	cmp	r2, #0
 800d54e:	d0e0      	beq.n	800d512 <HAL_I2C_Master_Transmit+0xda>
 800d550:	2b00      	cmp	r3, #0
 800d552:	d1de      	bne.n	800d512 <HAL_I2C_Master_Transmit+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d554:	9500      	str	r5, [sp, #0]
 800d556:	4633      	mov	r3, r6
 800d558:	2200      	movs	r2, #0
 800d55a:	2180      	movs	r1, #128	@ 0x80
 800d55c:	4620      	mov	r0, r4
 800d55e:	f7ff fe44 	bl	800d1ea <I2C_WaitOnFlagUntilTimeout>
 800d562:	bba0      	cbnz	r0, 800d5ce <HAL_I2C_Master_Transmit+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d564:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d566:	b29b      	uxth	r3, r3
 800d568:	2bff      	cmp	r3, #255	@ 0xff
 800d56a:	d9c6      	bls.n	800d4fa <HAL_I2C_Master_Transmit+0xc2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d56c:	22ff      	movs	r2, #255	@ 0xff
 800d56e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d570:	2300      	movs	r3, #0
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d578:	4639      	mov	r1, r7
 800d57a:	4620      	mov	r0, r4
 800d57c:	f7ff fd5d 	bl	800d03a <I2C_TransferConfig>
 800d580:	e7c7      	b.n	800d512 <HAL_I2C_Master_Transmit+0xda>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d582:	462a      	mov	r2, r5
 800d584:	4631      	mov	r1, r6
 800d586:	4620      	mov	r0, r4
 800d588:	f7ff fe6d 	bl	800d266 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d58c:	bb08      	cbnz	r0, 800d5d2 <HAL_I2C_Master_Transmit+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d58e:	6823      	ldr	r3, [r4, #0]
 800d590:	2220      	movs	r2, #32
 800d592:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d594:	6821      	ldr	r1, [r4, #0]
 800d596:	684b      	ldr	r3, [r1, #4]
 800d598:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d59c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d5a0:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d5a4:	f023 0301 	bic.w	r3, r3, #1
 800d5a8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d5aa:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800d5b4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800d5b8:	e000      	b.n	800d5bc <HAL_I2C_Master_Transmit+0x184>
    return HAL_BUSY;
 800d5ba:	2002      	movs	r0, #2
}
 800d5bc:	b002      	add	sp, #8
 800d5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800d5c2:	2002      	movs	r0, #2
 800d5c4:	e7fa      	b.n	800d5bc <HAL_I2C_Master_Transmit+0x184>
      return HAL_ERROR;
 800d5c6:	2001      	movs	r0, #1
 800d5c8:	e7f8      	b.n	800d5bc <HAL_I2C_Master_Transmit+0x184>
        return HAL_ERROR;
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	e7f6      	b.n	800d5bc <HAL_I2C_Master_Transmit+0x184>
          return HAL_ERROR;
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	e7f4      	b.n	800d5bc <HAL_I2C_Master_Transmit+0x184>
      return HAL_ERROR;
 800d5d2:	2001      	movs	r0, #1
 800d5d4:	e7f2      	b.n	800d5bc <HAL_I2C_Master_Transmit+0x184>
 800d5d6:	bf00      	nop
 800d5d8:	80002000 	.word	0x80002000

0800d5dc <HAL_I2C_Master_Receive>:
{
 800d5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5e0:	b082      	sub	sp, #8
 800d5e2:	460f      	mov	r7, r1
 800d5e4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d5e6:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800d5ea:	2920      	cmp	r1, #32
 800d5ec:	f040 80a3 	bne.w	800d736 <HAL_I2C_Master_Receive+0x15a>
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	4691      	mov	r9, r2
 800d5f4:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 800d5f6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	f000 809f 	beq.w	800d73e <HAL_I2C_Master_Receive+0x162>
 800d600:	f04f 0a01 	mov.w	sl, #1
 800d604:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800d608:	f7fe f85a 	bl	800b6c0 <HAL_GetTick>
 800d60c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d60e:	9000      	str	r0, [sp, #0]
 800d610:	2319      	movs	r3, #25
 800d612:	4652      	mov	r2, sl
 800d614:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d618:	4620      	mov	r0, r4
 800d61a:	f7ff fde6 	bl	800d1ea <I2C_WaitOnFlagUntilTimeout>
 800d61e:	2800      	cmp	r0, #0
 800d620:	f040 808f 	bne.w	800d742 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d624:	2322      	movs	r3, #34	@ 0x22
 800d626:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d62a:	2310      	movs	r3, #16
 800d62c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d630:	2300      	movs	r3, #0
 800d632:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800d634:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d638:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d63c:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d63e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d640:	b29b      	uxth	r3, r3
 800d642:	2bff      	cmp	r3, #255	@ 0xff
 800d644:	d90b      	bls.n	800d65e <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = 1U;
 800d646:	4652      	mov	r2, sl
 800d648:	f8a4 a028 	strh.w	sl, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d64c:	4b41      	ldr	r3, [pc, #260]	@ (800d754 <HAL_I2C_Master_Receive+0x178>)
 800d64e:	9300      	str	r3, [sp, #0]
 800d650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d654:	4639      	mov	r1, r7
 800d656:	4620      	mov	r0, r4
 800d658:	f7ff fcef 	bl	800d03a <I2C_TransferConfig>
 800d65c:	e018      	b.n	800d690 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800d65e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d660:	b292      	uxth	r2, r2
 800d662:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d664:	4b3b      	ldr	r3, [pc, #236]	@ (800d754 <HAL_I2C_Master_Receive+0x178>)
 800d666:	9300      	str	r3, [sp, #0]
 800d668:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d66c:	b2d2      	uxtb	r2, r2
 800d66e:	4639      	mov	r1, r7
 800d670:	4620      	mov	r0, r4
 800d672:	f7ff fce2 	bl	800d03a <I2C_TransferConfig>
 800d676:	e00b      	b.n	800d690 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800d678:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d67a:	b292      	uxth	r2, r2
 800d67c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d67e:	2300      	movs	r3, #0
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d686:	b2d2      	uxtb	r2, r2
 800d688:	4639      	mov	r1, r7
 800d68a:	4620      	mov	r0, r4
 800d68c:	f7ff fcd5 	bl	800d03a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d690:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d692:	b29b      	uxth	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	d032      	beq.n	800d6fe <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d698:	462a      	mov	r2, r5
 800d69a:	4631      	mov	r1, r6
 800d69c:	4620      	mov	r0, r4
 800d69e:	f7ff fe11 	bl	800d2c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d14f      	bne.n	800d746 <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d6ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800d6ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800d6b4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800d6b6:	3a01      	subs	r2, #1
 800d6b8:	b292      	uxth	r2, r2
 800d6ba:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800d6bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d0e0      	beq.n	800d690 <HAL_I2C_Master_Receive+0xb4>
 800d6ce:	2a00      	cmp	r2, #0
 800d6d0:	d1de      	bne.n	800d690 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d6d2:	9500      	str	r5, [sp, #0]
 800d6d4:	4633      	mov	r3, r6
 800d6d6:	2180      	movs	r1, #128	@ 0x80
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f7ff fd86 	bl	800d1ea <I2C_WaitOnFlagUntilTimeout>
 800d6de:	bba0      	cbnz	r0, 800d74a <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d6e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	2bff      	cmp	r3, #255	@ 0xff
 800d6e6:	d9c7      	bls.n	800d678 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d6e8:	22ff      	movs	r2, #255	@ 0xff
 800d6ea:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d6f4:	4639      	mov	r1, r7
 800d6f6:	4620      	mov	r0, r4
 800d6f8:	f7ff fc9f 	bl	800d03a <I2C_TransferConfig>
 800d6fc:	e7c8      	b.n	800d690 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6fe:	462a      	mov	r2, r5
 800d700:	4631      	mov	r1, r6
 800d702:	4620      	mov	r0, r4
 800d704:	f7ff fdaf 	bl	800d266 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d708:	bb08      	cbnz	r0, 800d74e <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	2220      	movs	r2, #32
 800d70e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d710:	6821      	ldr	r1, [r4, #0]
 800d712:	684b      	ldr	r3, [r1, #4]
 800d714:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d718:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d71c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d720:	f023 0301 	bic.w	r3, r3, #1
 800d724:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d726:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d72a:	2300      	movs	r3, #0
 800d72c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800d730:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800d734:	e000      	b.n	800d738 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 800d736:	2002      	movs	r0, #2
}
 800d738:	b002      	add	sp, #8
 800d73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800d73e:	2002      	movs	r0, #2
 800d740:	e7fa      	b.n	800d738 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800d742:	2001      	movs	r0, #1
 800d744:	e7f8      	b.n	800d738 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 800d746:	2001      	movs	r0, #1
 800d748:	e7f6      	b.n	800d738 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 800d74a:	2001      	movs	r0, #1
 800d74c:	e7f4      	b.n	800d738 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800d74e:	2001      	movs	r0, #1
 800d750:	e7f2      	b.n	800d738 <HAL_I2C_Master_Receive+0x15c>
 800d752:	bf00      	nop
 800d754:	80002400 	.word	0x80002400

0800d758 <HAL_I2C_IsDeviceReady>:
{
 800d758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d75c:	b085      	sub	sp, #20
 800d75e:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 800d760:	2300      	movs	r3, #0
 800d762:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d764:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800d768:	2b20      	cmp	r3, #32
 800d76a:	f040 8089 	bne.w	800d880 <HAL_I2C_IsDeviceReady+0x128>
 800d76e:	4606      	mov	r6, r0
 800d770:	4688      	mov	r8, r1
 800d772:	4691      	mov	r9, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d774:	6803      	ldr	r3, [r0, #0]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800d77c:	f040 8082 	bne.w	800d884 <HAL_I2C_IsDeviceReady+0x12c>
    __HAL_LOCK(hi2c);
 800d780:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d784:	2b01      	cmp	r3, #1
 800d786:	d07f      	beq.n	800d888 <HAL_I2C_IsDeviceReady+0x130>
 800d788:	2301      	movs	r3, #1
 800d78a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800d78e:	2324      	movs	r3, #36	@ 0x24
 800d790:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d794:	2300      	movs	r3, #0
 800d796:	6443      	str	r3, [r0, #68]	@ 0x44
 800d798:	e041      	b.n	800d81e <HAL_I2C_IsDeviceReady+0xc6>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800d79a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800d79e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d7a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d7a6:	e043      	b.n	800d830 <HAL_I2C_IsDeviceReady+0xd8>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d7a8:	6833      	ldr	r3, [r6, #0]
 800d7aa:	699c      	ldr	r4, [r3, #24]
 800d7ac:	f3c4 1440 	ubfx	r4, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d7b6:	b9c4      	cbnz	r4, 800d7ea <HAL_I2C_IsDeviceReady+0x92>
 800d7b8:	b9bb      	cbnz	r3, 800d7ea <HAL_I2C_IsDeviceReady+0x92>
        if (Timeout != HAL_MAX_DELAY)
 800d7ba:	f1b5 3fff 	cmp.w	r5, #4294967295
 800d7be:	d0f3      	beq.n	800d7a8 <HAL_I2C_IsDeviceReady+0x50>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d7c0:	f7fd ff7e 	bl	800b6c0 <HAL_GetTick>
 800d7c4:	1bc0      	subs	r0, r0, r7
 800d7c6:	42a8      	cmp	r0, r5
 800d7c8:	d801      	bhi.n	800d7ce <HAL_I2C_IsDeviceReady+0x76>
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	d1ec      	bne.n	800d7a8 <HAL_I2C_IsDeviceReady+0x50>
            hi2c->State = HAL_I2C_STATE_READY;
 800d7ce:	2320      	movs	r3, #32
 800d7d0:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7d4:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800d7d6:	f043 0320 	orr.w	r3, r3, #32
 800d7da:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 800d7e2:	2001      	movs	r0, #1
}
 800d7e4:	b005      	add	sp, #20
 800d7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800d7ea:	6833      	ldr	r3, [r6, #0]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	f013 0f10 	tst.w	r3, #16
 800d7f2:	d02a      	beq.n	800d84a <HAL_I2C_IsDeviceReady+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d7f4:	9700      	str	r7, [sp, #0]
 800d7f6:	462b      	mov	r3, r5
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	2120      	movs	r1, #32
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f7ff fcf4 	bl	800d1ea <I2C_WaitOnFlagUntilTimeout>
 800d802:	2800      	cmp	r0, #0
 800d804:	d144      	bne.n	800d890 <HAL_I2C_IsDeviceReady+0x138>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d806:	6833      	ldr	r3, [r6, #0]
 800d808:	2210      	movs	r2, #16
 800d80a:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d80c:	6833      	ldr	r3, [r6, #0]
 800d80e:	2220      	movs	r2, #32
 800d810:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 800d812:	9b03      	ldr	r3, [sp, #12]
 800d814:	3301      	adds	r3, #1
 800d816:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 800d818:	9b03      	ldr	r3, [sp, #12]
 800d81a:	454b      	cmp	r3, r9
 800d81c:	d226      	bcs.n	800d86c <HAL_I2C_IsDeviceReady+0x114>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800d81e:	68f3      	ldr	r3, [r6, #12]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d0ba      	beq.n	800d79a <HAL_I2C_IsDeviceReady+0x42>
 800d824:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800d828:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800d82c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800d830:	6832      	ldr	r2, [r6, #0]
 800d832:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800d834:	f7fd ff44 	bl	800b6c0 <HAL_GetTick>
 800d838:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d83a:	6833      	ldr	r3, [r6, #0]
 800d83c:	699c      	ldr	r4, [r3, #24]
 800d83e:	f3c4 1440 	ubfx	r4, r4, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d842:	699b      	ldr	r3, [r3, #24]
 800d844:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d848:	e7b5      	b.n	800d7b6 <HAL_I2C_IsDeviceReady+0x5e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d84a:	9700      	str	r7, [sp, #0]
 800d84c:	462b      	mov	r3, r5
 800d84e:	2200      	movs	r2, #0
 800d850:	2120      	movs	r1, #32
 800d852:	4630      	mov	r0, r6
 800d854:	f7ff fcc9 	bl	800d1ea <I2C_WaitOnFlagUntilTimeout>
 800d858:	b9c0      	cbnz	r0, 800d88c <HAL_I2C_IsDeviceReady+0x134>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d85a:	6832      	ldr	r2, [r6, #0]
 800d85c:	2320      	movs	r3, #32
 800d85e:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800d860:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800d864:	2300      	movs	r3, #0
 800d866:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 800d86a:	e7bb      	b.n	800d7e4 <HAL_I2C_IsDeviceReady+0x8c>
    hi2c->State = HAL_I2C_STATE_READY;
 800d86c:	f886 2041 	strb.w	r2, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d870:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800d872:	4313      	orrs	r3, r2
 800d874:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 800d876:	2300      	movs	r3, #0
 800d878:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 800d87c:	2001      	movs	r0, #1
 800d87e:	e7b1      	b.n	800d7e4 <HAL_I2C_IsDeviceReady+0x8c>
    return HAL_BUSY;
 800d880:	2002      	movs	r0, #2
 800d882:	e7af      	b.n	800d7e4 <HAL_I2C_IsDeviceReady+0x8c>
      return HAL_BUSY;
 800d884:	2002      	movs	r0, #2
 800d886:	e7ad      	b.n	800d7e4 <HAL_I2C_IsDeviceReady+0x8c>
    __HAL_LOCK(hi2c);
 800d888:	2002      	movs	r0, #2
 800d88a:	e7ab      	b.n	800d7e4 <HAL_I2C_IsDeviceReady+0x8c>
          return HAL_ERROR;
 800d88c:	2001      	movs	r0, #1
 800d88e:	e7a9      	b.n	800d7e4 <HAL_I2C_IsDeviceReady+0x8c>
          return HAL_ERROR;
 800d890:	2001      	movs	r0, #1
 800d892:	e7a7      	b.n	800d7e4 <HAL_I2C_IsDeviceReady+0x8c>

0800d894 <HAL_I2C_GetState>:
  return hi2c->State;
 800d894:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800d898:	4770      	bx	lr

0800d89a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800d89a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800d89c:	4770      	bx	lr

0800d89e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d89e:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8a0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800d8a4:	2a20      	cmp	r2, #32
 800d8a6:	d123      	bne.n	800d8f0 <HAL_I2CEx_ConfigAnalogFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8a8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800d8ac:	2a01      	cmp	r2, #1
 800d8ae:	d021      	beq.n	800d8f4 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d8b6:	2224      	movs	r2, #36	@ 0x24
 800d8b8:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d8bc:	6800      	ldr	r0, [r0, #0]
 800d8be:	6802      	ldr	r2, [r0, #0]
 800d8c0:	f022 0201 	bic.w	r2, r2, #1
 800d8c4:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d8c6:	6818      	ldr	r0, [r3, #0]
 800d8c8:	6802      	ldr	r2, [r0, #0]
 800d8ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d8ce:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d8d0:	6818      	ldr	r0, [r3, #0]
 800d8d2:	6802      	ldr	r2, [r0, #0]
 800d8d4:	430a      	orrs	r2, r1
 800d8d6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d8d8:	6819      	ldr	r1, [r3, #0]
 800d8da:	680a      	ldr	r2, [r1, #0]
 800d8dc:	f042 0201 	orr.w	r2, r2, #1
 800d8e0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d8e2:	2220      	movs	r2, #32
 800d8e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800d8ee:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800d8f0:	2002      	movs	r0, #2
 800d8f2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800d8f4:	2002      	movs	r0, #2
  }
}
 800d8f6:	4770      	bx	lr

0800d8f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d8f8:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8fa:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800d8fe:	2a20      	cmp	r2, #32
 800d900:	d121      	bne.n	800d946 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d902:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800d906:	2a01      	cmp	r2, #1
 800d908:	d01f      	beq.n	800d94a <HAL_I2CEx_ConfigDigitalFilter+0x52>
 800d90a:	2201      	movs	r2, #1
 800d90c:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d910:	2224      	movs	r2, #36	@ 0x24
 800d912:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d916:	6800      	ldr	r0, [r0, #0]
 800d918:	6802      	ldr	r2, [r0, #0]
 800d91a:	f022 0201 	bic.w	r2, r2, #1
 800d91e:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d920:	6818      	ldr	r0, [r3, #0]
 800d922:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d924:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d928:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d92c:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d92e:	6819      	ldr	r1, [r3, #0]
 800d930:	680a      	ldr	r2, [r1, #0]
 800d932:	f042 0201 	orr.w	r2, r2, #1
 800d936:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d938:	2220      	movs	r2, #32
 800d93a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d93e:	2000      	movs	r0, #0
 800d940:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800d944:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800d946:	2002      	movs	r0, #2
 800d948:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800d94a:	2002      	movs	r0, #2
  }
}
 800d94c:	4770      	bx	lr
	...

0800d950 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d950:	b500      	push	{lr}
 800d952:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d954:	4b0d      	ldr	r3, [pc, #52]	@ (800d98c <HAL_MspInit+0x3c>)
 800d956:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d958:	f042 0201 	orr.w	r2, r2, #1
 800d95c:	661a      	str	r2, [r3, #96]	@ 0x60
 800d95e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d960:	f002 0201 	and.w	r2, r2, #1
 800d964:	9200      	str	r2, [sp, #0]
 800d966:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d968:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d96a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800d96e:	659a      	str	r2, [r3, #88]	@ 0x58
 800d970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d97a:	2200      	movs	r2, #0
 800d97c:	210f      	movs	r1, #15
 800d97e:	f06f 0001 	mvn.w	r0, #1
 800d982:	f7ff f831 	bl	800c9e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d986:	b003      	add	sp, #12
 800d988:	f85d fb04 	ldr.w	pc, [sp], #4
 800d98c:	40021000 	.word	0x40021000

0800d990 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d990:	b570      	push	{r4, r5, r6, lr}
 800d992:	b09e      	sub	sp, #120	@ 0x78
 800d994:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d996:	2100      	movs	r1, #0
 800d998:	9119      	str	r1, [sp, #100]	@ 0x64
 800d99a:	911a      	str	r1, [sp, #104]	@ 0x68
 800d99c:	911b      	str	r1, [sp, #108]	@ 0x6c
 800d99e:	911c      	str	r1, [sp, #112]	@ 0x70
 800d9a0:	911d      	str	r1, [sp, #116]	@ 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d9a2:	2254      	movs	r2, #84	@ 0x54
 800d9a4:	a804      	add	r0, sp, #16
 800d9a6:	f002 faae 	bl	800ff06 <memset>
  if(hadc->Instance==ADC1)
 800d9aa:	6822      	ldr	r2, [r4, #0]
 800d9ac:	4b27      	ldr	r3, [pc, #156]	@ (800da4c <HAL_ADC_MspInit+0xbc>)
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d001      	beq.n	800d9b6 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800d9b2:	b01e      	add	sp, #120	@ 0x78
 800d9b4:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800d9b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d9ba:	9304      	str	r3, [sp, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800d9bc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d9c0:	9316      	str	r3, [sp, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800d9c6:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800d9c8:	2208      	movs	r2, #8
 800d9ca:	9207      	str	r2, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800d9cc:	2207      	movs	r2, #7
 800d9ce:	9208      	str	r2, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800d9d0:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800d9d2:	930a      	str	r3, [sp, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800d9d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d9da:	a804      	add	r0, sp, #16
 800d9dc:	f000 ff12 	bl	800e804 <HAL_RCCEx_PeriphCLKConfig>
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d130      	bne.n	800da46 <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_ADC_CLK_ENABLE();
 800d9e4:	4b1a      	ldr	r3, [pc, #104]	@ (800da50 <HAL_ADC_MspInit+0xc0>)
 800d9e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d9ec:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d9ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9f0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800d9f4:	9201      	str	r2, [sp, #4]
 800d9f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d9f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9fa:	f042 0201 	orr.w	r2, r2, #1
 800d9fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 800da00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da02:	f002 0201 	and.w	r2, r2, #1
 800da06:	9202      	str	r2, [sp, #8]
 800da08:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800da0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da0c:	f042 0202 	orr.w	r2, r2, #2
 800da10:	64da      	str	r2, [r3, #76]	@ 0x4c
 800da12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da14:	f003 0302 	and.w	r3, r3, #2
 800da18:	9303      	str	r3, [sp, #12]
 800da1a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC4_Pin|ADC5_Pin
 800da1c:	237b      	movs	r3, #123	@ 0x7b
 800da1e:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800da20:	260b      	movs	r6, #11
 800da22:	961a      	str	r6, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da24:	2500      	movs	r5, #0
 800da26:	951b      	str	r5, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800da28:	ac19      	add	r4, sp, #100	@ 0x64
 800da2a:	4621      	mov	r1, r4
 800da2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800da30:	f7ff fa0c 	bl	800ce4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC7_Pin;
 800da34:	2301      	movs	r3, #1
 800da36:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800da38:	961a      	str	r6, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800da3a:	951b      	str	r5, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(ADC7_GPIO_Port, &GPIO_InitStruct);
 800da3c:	4621      	mov	r1, r4
 800da3e:	4805      	ldr	r0, [pc, #20]	@ (800da54 <HAL_ADC_MspInit+0xc4>)
 800da40:	f7ff fa04 	bl	800ce4c <HAL_GPIO_Init>
}
 800da44:	e7b5      	b.n	800d9b2 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 800da46:	f7fc fcb5 	bl	800a3b4 <Error_Handler>
 800da4a:	e7cb      	b.n	800d9e4 <HAL_ADC_MspInit+0x54>
 800da4c:	50040000 	.word	0x50040000
 800da50:	40021000 	.word	0x40021000
 800da54:	48000400 	.word	0x48000400

0800da58 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800da58:	b500      	push	{lr}
 800da5a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da5c:	2300      	movs	r3, #0
 800da5e:	9303      	str	r3, [sp, #12]
 800da60:	9304      	str	r3, [sp, #16]
 800da62:	9305      	str	r3, [sp, #20]
 800da64:	9306      	str	r3, [sp, #24]
 800da66:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 800da68:	6802      	ldr	r2, [r0, #0]
 800da6a:	4b24      	ldr	r3, [pc, #144]	@ (800dafc <HAL_CAN_MspInit+0xa4>)
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d002      	beq.n	800da76 <HAL_CAN_MspInit+0x1e>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800da70:	b009      	add	sp, #36	@ 0x24
 800da72:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800da76:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 800da7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800da7c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800da80:	659a      	str	r2, [r3, #88]	@ 0x58
 800da82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800da84:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 800da88:	9201      	str	r2, [sp, #4]
 800da8a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800da8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da8e:	f042 0201 	orr.w	r2, r2, #1
 800da92:	64da      	str	r2, [r3, #76]	@ 0x4c
 800da94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da96:	f003 0301 	and.w	r3, r3, #1
 800da9a:	9302      	str	r3, [sp, #8]
 800da9c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800da9e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800daa2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daa4:	2302      	movs	r3, #2
 800daa6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800daa8:	2303      	movs	r3, #3
 800daaa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800daac:	2309      	movs	r3, #9
 800daae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dab0:	a903      	add	r1, sp, #12
 800dab2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800dab6:	f7ff f9c9 	bl	800ce4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800daba:	2200      	movs	r2, #0
 800dabc:	2105      	movs	r1, #5
 800dabe:	2014      	movs	r0, #20
 800dac0:	f7fe ff92 	bl	800c9e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800dac4:	2014      	movs	r0, #20
 800dac6:	f7fe ff9f 	bl	800ca08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800daca:	2200      	movs	r2, #0
 800dacc:	2105      	movs	r1, #5
 800dace:	2015      	movs	r0, #21
 800dad0:	f7fe ff8a 	bl	800c9e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800dad4:	2015      	movs	r0, #21
 800dad6:	f7fe ff97 	bl	800ca08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 800dada:	2200      	movs	r2, #0
 800dadc:	2106      	movs	r1, #6
 800dade:	2013      	movs	r0, #19
 800dae0:	f7fe ff82 	bl	800c9e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800dae4:	2013      	movs	r0, #19
 800dae6:	f7fe ff8f 	bl	800ca08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 6, 0);
 800daea:	2200      	movs	r2, #0
 800daec:	2106      	movs	r1, #6
 800daee:	2016      	movs	r0, #22
 800daf0:	f7fe ff7a 	bl	800c9e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800daf4:	2016      	movs	r0, #22
 800daf6:	f7fe ff87 	bl	800ca08 <HAL_NVIC_EnableIRQ>
}
 800dafa:	e7b9      	b.n	800da70 <HAL_CAN_MspInit+0x18>
 800dafc:	40006400 	.word	0x40006400

0800db00 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800db00:	6802      	ldr	r2, [r0, #0]
 800db02:	4b09      	ldr	r3, [pc, #36]	@ (800db28 <HAL_CRC_MspInit+0x28>)
 800db04:	429a      	cmp	r2, r3
 800db06:	d000      	beq.n	800db0a <HAL_CRC_MspInit+0xa>
 800db08:	4770      	bx	lr
{
 800db0a:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800db0c:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800db10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800db12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800db16:	649a      	str	r2, [r3, #72]	@ 0x48
 800db18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db1e:	9301      	str	r3, [sp, #4]
 800db20:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800db22:	b002      	add	sp, #8
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	40023000 	.word	0x40023000

0800db2c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800db2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db30:	b0a0      	sub	sp, #128	@ 0x80
 800db32:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db34:	2100      	movs	r1, #0
 800db36:	911b      	str	r1, [sp, #108]	@ 0x6c
 800db38:	911c      	str	r1, [sp, #112]	@ 0x70
 800db3a:	911d      	str	r1, [sp, #116]	@ 0x74
 800db3c:	911e      	str	r1, [sp, #120]	@ 0x78
 800db3e:	911f      	str	r1, [sp, #124]	@ 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800db40:	2254      	movs	r2, #84	@ 0x54
 800db42:	a806      	add	r0, sp, #24
 800db44:	f002 f9df 	bl	800ff06 <memset>
  if(hi2c->Instance==I2C1)
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	4a40      	ldr	r2, [pc, #256]	@ (800dc4c <HAL_I2C_MspInit+0x120>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d005      	beq.n	800db5c <HAL_I2C_MspInit+0x30>
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* USER CODE BEGIN I2C1_MspInit 1 */

    /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800db50:	4a3f      	ldr	r2, [pc, #252]	@ (800dc50 <HAL_I2C_MspInit+0x124>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d032      	beq.n	800dbbc <HAL_I2C_MspInit+0x90>
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800db56:	b020      	add	sp, #128	@ 0x80
 800db58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800db5c:	2340      	movs	r3, #64	@ 0x40
 800db5e:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800db60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800db64:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800db66:	a806      	add	r0, sp, #24
 800db68:	f000 fe4c 	bl	800e804 <HAL_RCCEx_PeriphCLKConfig>
 800db6c:	bb18      	cbnz	r0, 800dbb6 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db6e:	4c39      	ldr	r4, [pc, #228]	@ (800dc54 <HAL_I2C_MspInit+0x128>)
 800db70:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800db72:	f043 0301 	orr.w	r3, r3, #1
 800db76:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800db78:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800db82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800db86:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800db88:	2312      	movs	r3, #18
 800db8a:	931c      	str	r3, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800db8c:	2301      	movs	r3, #1
 800db8e:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db90:	2303      	movs	r3, #3
 800db92:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800db94:	2304      	movs	r3, #4
 800db96:	931f      	str	r3, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db98:	a91b      	add	r1, sp, #108	@ 0x6c
 800db9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800db9e:	f7ff f955 	bl	800ce4c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800dba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dba4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dba8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800dbaa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dbac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dbb0:	9302      	str	r3, [sp, #8]
 800dbb2:	9b02      	ldr	r3, [sp, #8]
 800dbb4:	e7cf      	b.n	800db56 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 800dbb6:	f7fc fbfd 	bl	800a3b4 <Error_Handler>
 800dbba:	e7d8      	b.n	800db6e <HAL_I2C_MspInit+0x42>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800dbbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dbc0:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800dbc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dbc6:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dbc8:	a806      	add	r0, sp, #24
 800dbca:	f000 fe1b 	bl	800e804 <HAL_RCCEx_PeriphCLKConfig>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d139      	bne.n	800dc46 <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800dbd2:	4b20      	ldr	r3, [pc, #128]	@ (800dc54 <HAL_I2C_MspInit+0x128>)
 800dbd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dbd6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800dbda:	659a      	str	r2, [r3, #88]	@ 0x58
 800dbdc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800dbde:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 800dbe2:	9203      	str	r2, [sp, #12]
 800dbe4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbe6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dbe8:	f042 0201 	orr.w	r2, r2, #1
 800dbec:	64da      	str	r2, [r3, #76]	@ 0x4c
 800dbee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dbf0:	f002 0201 	and.w	r2, r2, #1
 800dbf4:	9204      	str	r2, [sp, #16]
 800dbf6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dbfa:	f042 0202 	orr.w	r2, r2, #2
 800dbfe:	64da      	str	r2, [r3, #76]	@ 0x4c
 800dc00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc02:	f003 0302 	and.w	r3, r3, #2
 800dc06:	9305      	str	r3, [sp, #20]
 800dc08:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800dc0a:	2380      	movs	r3, #128	@ 0x80
 800dc0c:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dc0e:	f04f 0812 	mov.w	r8, #18
 800dc12:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc16:	2701      	movs	r7, #1
 800dc18:	971d      	str	r7, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc1a:	2603      	movs	r6, #3
 800dc1c:	961e      	str	r6, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800dc1e:	2504      	movs	r5, #4
 800dc20:	951f      	str	r5, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc22:	ac1b      	add	r4, sp, #108	@ 0x6c
 800dc24:	4621      	mov	r1, r4
 800dc26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800dc2a:	f7ff f90f 	bl	800ce4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800dc2e:	2310      	movs	r3, #16
 800dc30:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dc32:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc36:	971d      	str	r7, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc38:	961e      	str	r6, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800dc3a:	951f      	str	r5, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	4806      	ldr	r0, [pc, #24]	@ (800dc58 <HAL_I2C_MspInit+0x12c>)
 800dc40:	f7ff f904 	bl	800ce4c <HAL_GPIO_Init>
}
 800dc44:	e787      	b.n	800db56 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 800dc46:	f7fc fbb5 	bl	800a3b4 <Error_Handler>
 800dc4a:	e7c2      	b.n	800dbd2 <HAL_I2C_MspInit+0xa6>
 800dc4c:	40005400 	.word	0x40005400
 800dc50:	40005c00 	.word	0x40005c00
 800dc54:	40021000 	.word	0x40021000
 800dc58:	48000400 	.word	0x48000400

0800dc5c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800dc5c:	4b02      	ldr	r3, [pc, #8]	@ (800dc68 <HAL_PWREx_GetVoltageRange+0xc>)
 800dc5e:	6818      	ldr	r0, [r3, #0]
#endif
}
 800dc60:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	40007000 	.word	0x40007000

0800dc6c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dc6c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800dc70:	d00f      	beq.n	800dc92 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800dc72:	4b1f      	ldr	r3, [pc, #124]	@ (800dcf0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dc7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc7e:	d034      	beq.n	800dcea <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800dc80:	4a1b      	ldr	r2, [pc, #108]	@ (800dcf0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800dc82:	6813      	ldr	r3, [r2, #0]
 800dc84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800dc88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800dc8c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800dc8e:	2000      	movs	r0, #0
 800dc90:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800dc92:	4b17      	ldr	r3, [pc, #92]	@ (800dcf0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800dc9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc9e:	d020      	beq.n	800dce2 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800dca0:	4a13      	ldr	r2, [pc, #76]	@ (800dcf0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800dca2:	6813      	ldr	r3, [r2, #0]
 800dca4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800dca8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800dcac:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800dcae:	4b11      	ldr	r3, [pc, #68]	@ (800dcf4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2232      	movs	r2, #50	@ 0x32
 800dcb4:	fb02 f303 	mul.w	r3, r2, r3
 800dcb8:	4a0f      	ldr	r2, [pc, #60]	@ (800dcf8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800dcba:	fba2 2303 	umull	r2, r3, r2, r3
 800dcbe:	0c9b      	lsrs	r3, r3, #18
 800dcc0:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800dcc2:	e000      	b.n	800dcc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800dcc4:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800dcc6:	4a0a      	ldr	r2, [pc, #40]	@ (800dcf0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800dcc8:	6952      	ldr	r2, [r2, #20]
 800dcca:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800dcce:	d001      	beq.n	800dcd4 <HAL_PWREx_ControlVoltageScaling+0x68>
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d1f7      	bne.n	800dcc4 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800dcd4:	4b06      	ldr	r3, [pc, #24]	@ (800dcf0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800dcdc:	d103      	bne.n	800dce6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800dcde:	2000      	movs	r0, #0
 800dce0:	4770      	bx	lr
 800dce2:	2000      	movs	r0, #0
 800dce4:	4770      	bx	lr
        return HAL_TIMEOUT;
 800dce6:	2003      	movs	r0, #3
 800dce8:	4770      	bx	lr
  return HAL_OK;
 800dcea:	2000      	movs	r0, #0
}
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	40007000 	.word	0x40007000
 800dcf4:	2000002c 	.word	0x2000002c
 800dcf8:	431bde83 	.word	0x431bde83

0800dcfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800dcfc:	b530      	push	{r4, r5, lr}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800dd02:	4b20      	ldr	r3, [pc, #128]	@ (800dd84 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800dd04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd06:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800dd0a:	d00b      	beq.n	800dd24 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800dd0c:	f7ff ffa6 	bl	800dc5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dd10:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800dd14:	d017      	beq.n	800dd46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800dd16:	2c80      	cmp	r4, #128	@ 0x80
 800dd18:	d81f      	bhi.n	800dd5a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800dd1a:	d02d      	beq.n	800dd78 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800dd1c:	2c70      	cmp	r4, #112	@ 0x70
 800dd1e:	d02d      	beq.n	800dd7c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800dd20:	2100      	movs	r1, #0
 800dd22:	e01b      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800dd24:	4d17      	ldr	r5, [pc, #92]	@ (800dd84 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800dd26:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800dd28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd2c:	65ab      	str	r3, [r5, #88]	@ 0x58
 800dd2e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800dd30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dd34:	9301      	str	r3, [sp, #4]
 800dd36:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800dd38:	f7ff ff90 	bl	800dc5c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800dd3c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800dd3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd42:	65ab      	str	r3, [r5, #88]	@ 0x58
 800dd44:	e7e4      	b.n	800dd10 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800dd46:	2c80      	cmp	r4, #128	@ 0x80
 800dd48:	d903      	bls.n	800dd52 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 800dd4a:	2ca0      	cmp	r4, #160	@ 0xa0
 800dd4c:	d903      	bls.n	800dd56 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800dd4e:	2102      	movs	r1, #2
 800dd50:	e004      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800dd52:	2100      	movs	r1, #0
 800dd54:	e002      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800dd56:	2101      	movs	r1, #1
 800dd58:	e000      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800dd5a:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800dd5c:	4a0a      	ldr	r2, [pc, #40]	@ (800dd88 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800dd5e:	6813      	ldr	r3, [r2, #0]
 800dd60:	f023 0307 	bic.w	r3, r3, #7
 800dd64:	430b      	orrs	r3, r1
 800dd66:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800dd68:	6813      	ldr	r3, [r2, #0]
 800dd6a:	f003 0307 	and.w	r3, r3, #7
 800dd6e:	428b      	cmp	r3, r1
 800dd70:	d106      	bne.n	800dd80 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800dd72:	2000      	movs	r0, #0
}
 800dd74:	b003      	add	sp, #12
 800dd76:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 800dd78:	2102      	movs	r1, #2
 800dd7a:	e7ef      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800dd7c:	2101      	movs	r1, #1
 800dd7e:	e7ed      	b.n	800dd5c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 800dd80:	2001      	movs	r0, #1
 800dd82:	e7f7      	b.n	800dd74 <RCC_SetFlashLatencyFromMSIRange+0x78>
 800dd84:	40021000 	.word	0x40021000
 800dd88:	40022000 	.word	0x40022000

0800dd8c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd8c:	4a25      	ldr	r2, [pc, #148]	@ (800de24 <HAL_RCC_GetSysClockFreq+0x98>)
 800dd8e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dd90:	68d2      	ldr	r2, [r2, #12]
 800dd92:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800dd96:	f013 030c 	ands.w	r3, r3, #12
 800dd9a:	d009      	beq.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x24>
 800dd9c:	2b0c      	cmp	r3, #12
 800dd9e:	d005      	beq.n	800ddac <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800dda0:	2b04      	cmp	r3, #4
 800dda2:	d03b      	beq.n	800de1c <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800dda4:	2b08      	cmp	r3, #8
 800dda6:	d03b      	beq.n	800de20 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800dda8:	2000      	movs	r0, #0
 800ddaa:	e00f      	b.n	800ddcc <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800ddac:	2a01      	cmp	r2, #1
 800ddae:	d1f7      	bne.n	800dda0 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800ddb0:	4a1c      	ldr	r2, [pc, #112]	@ (800de24 <HAL_RCC_GetSysClockFreq+0x98>)
 800ddb2:	6812      	ldr	r2, [r2, #0]
 800ddb4:	f012 0f08 	tst.w	r2, #8
 800ddb8:	d10c      	bne.n	800ddd4 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800ddba:	4a1a      	ldr	r2, [pc, #104]	@ (800de24 <HAL_RCC_GetSysClockFreq+0x98>)
 800ddbc:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800ddc0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800ddc4:	4918      	ldr	r1, [pc, #96]	@ (800de28 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ddc6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ddca:	b113      	cbz	r3, 800ddd2 <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800ddcc:	2b0c      	cmp	r3, #12
 800ddce:	d006      	beq.n	800ddde <HAL_RCC_GetSysClockFreq+0x52>
 800ddd0:	2000      	movs	r0, #0
}
 800ddd2:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800ddd4:	4a13      	ldr	r2, [pc, #76]	@ (800de24 <HAL_RCC_GetSysClockFreq+0x98>)
 800ddd6:	6812      	ldr	r2, [r2, #0]
 800ddd8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800dddc:	e7f2      	b.n	800ddc4 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ddde:	4b11      	ldr	r3, [pc, #68]	@ (800de24 <HAL_RCC_GetSysClockFreq+0x98>)
 800dde0:	68db      	ldr	r3, [r3, #12]
 800dde2:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800dde6:	2b02      	cmp	r3, #2
 800dde8:	d016      	beq.n	800de18 <HAL_RCC_GetSysClockFreq+0x8c>
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d100      	bne.n	800ddf0 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 800ddee:	480f      	ldr	r0, [pc, #60]	@ (800de2c <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ddf0:	490c      	ldr	r1, [pc, #48]	@ (800de24 <HAL_RCC_GetSysClockFreq+0x98>)
 800ddf2:	68ca      	ldr	r2, [r1, #12]
 800ddf4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800ddf8:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800ddfa:	68cb      	ldr	r3, [r1, #12]
 800ddfc:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800de00:	fb00 f303 	mul.w	r3, r0, r3
 800de04:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800de08:	68c8      	ldr	r0, [r1, #12]
 800de0a:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800de0e:	3001      	adds	r0, #1
 800de10:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800de12:	fbb3 f0f0 	udiv	r0, r3, r0
 800de16:	4770      	bx	lr
    switch (pllsource)
 800de18:	4805      	ldr	r0, [pc, #20]	@ (800de30 <HAL_RCC_GetSysClockFreq+0xa4>)
 800de1a:	e7e9      	b.n	800ddf0 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 800de1c:	4804      	ldr	r0, [pc, #16]	@ (800de30 <HAL_RCC_GetSysClockFreq+0xa4>)
 800de1e:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800de20:	4802      	ldr	r0, [pc, #8]	@ (800de2c <HAL_RCC_GetSysClockFreq+0xa0>)
 800de22:	4770      	bx	lr
 800de24:	40021000 	.word	0x40021000
 800de28:	08010448 	.word	0x08010448
 800de2c:	007a1200 	.word	0x007a1200
 800de30:	00f42400 	.word	0x00f42400

0800de34 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800de34:	2800      	cmp	r0, #0
 800de36:	f000 831c 	beq.w	800e472 <HAL_RCC_OscConfig+0x63e>
{
 800de3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de3c:	b083      	sub	sp, #12
 800de3e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de40:	4b96      	ldr	r3, [pc, #600]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800de42:	689d      	ldr	r5, [r3, #8]
 800de44:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800de48:	68de      	ldr	r6, [r3, #12]
 800de4a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800de4e:	6803      	ldr	r3, [r0, #0]
 800de50:	f013 0f10 	tst.w	r3, #16
 800de54:	d05a      	beq.n	800df0c <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800de56:	b1e5      	cbz	r5, 800de92 <HAL_RCC_OscConfig+0x5e>
 800de58:	2d0c      	cmp	r5, #12
 800de5a:	d018      	beq.n	800de8e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800de5c:	69a3      	ldr	r3, [r4, #24]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	f000 80bb 	beq.w	800dfda <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800de64:	4a8d      	ldr	r2, [pc, #564]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800de66:	6813      	ldr	r3, [r2, #0]
 800de68:	f043 0301 	orr.w	r3, r3, #1
 800de6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800de6e:	f7fd fc27 	bl	800b6c0 <HAL_GetTick>
 800de72:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800de74:	4b89      	ldr	r3, [pc, #548]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f013 0f02 	tst.w	r3, #2
 800de7c:	f040 809a 	bne.w	800dfb4 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800de80:	f7fd fc1e 	bl	800b6c0 <HAL_GetTick>
 800de84:	1bc0      	subs	r0, r0, r7
 800de86:	2802      	cmp	r0, #2
 800de88:	d9f4      	bls.n	800de74 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800de8a:	2003      	movs	r0, #3
 800de8c:	e2fc      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800de8e:	2e01      	cmp	r6, #1
 800de90:	d1e4      	bne.n	800de5c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800de92:	4b82      	ldr	r3, [pc, #520]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f013 0f02 	tst.w	r3, #2
 800de9a:	d003      	beq.n	800dea4 <HAL_RCC_OscConfig+0x70>
 800de9c:	69a3      	ldr	r3, [r4, #24]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	f000 82e9 	beq.w	800e476 <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800dea4:	6a20      	ldr	r0, [r4, #32]
 800dea6:	4b7d      	ldr	r3, [pc, #500]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f013 0f08 	tst.w	r3, #8
 800deae:	d05b      	beq.n	800df68 <HAL_RCC_OscConfig+0x134>
 800deb0:	4b7a      	ldr	r3, [pc, #488]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800deb8:	4298      	cmp	r0, r3
 800deba:	d85c      	bhi.n	800df76 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800debc:	4b77      	ldr	r3, [pc, #476]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	f042 0208 	orr.w	r2, r2, #8
 800dec4:	601a      	str	r2, [r3, #0]
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800decc:	6a21      	ldr	r1, [r4, #32]
 800dece:	430a      	orrs	r2, r1
 800ded0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ded2:	685a      	ldr	r2, [r3, #4]
 800ded4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800ded8:	69e1      	ldr	r1, [r4, #28]
 800deda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dede:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800dee0:	2d00      	cmp	r5, #0
 800dee2:	d060      	beq.n	800dfa6 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800dee4:	f7ff ff52 	bl	800dd8c <HAL_RCC_GetSysClockFreq>
 800dee8:	4b6c      	ldr	r3, [pc, #432]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800deea:	689b      	ldr	r3, [r3, #8]
 800deec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800def0:	4a6b      	ldr	r2, [pc, #428]	@ (800e0a0 <HAL_RCC_OscConfig+0x26c>)
 800def2:	5cd3      	ldrb	r3, [r2, r3]
 800def4:	f003 031f 	and.w	r3, r3, #31
 800def8:	40d8      	lsrs	r0, r3
 800defa:	4b6a      	ldr	r3, [pc, #424]	@ (800e0a4 <HAL_RCC_OscConfig+0x270>)
 800defc:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800defe:	4b6a      	ldr	r3, [pc, #424]	@ (800e0a8 <HAL_RCC_OscConfig+0x274>)
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	f000 ff61 	bl	800edc8 <HAL_InitTick>
        if(status != HAL_OK)
 800df06:	2800      	cmp	r0, #0
 800df08:	f040 82be 	bne.w	800e488 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800df0c:	6823      	ldr	r3, [r4, #0]
 800df0e:	f013 0f01 	tst.w	r3, #1
 800df12:	f000 8081 	beq.w	800e018 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800df16:	2d08      	cmp	r5, #8
 800df18:	d075      	beq.n	800e006 <HAL_RCC_OscConfig+0x1d2>
 800df1a:	2d0c      	cmp	r5, #12
 800df1c:	d071      	beq.n	800e002 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800df1e:	6863      	ldr	r3, [r4, #4]
 800df20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df24:	f000 8097 	beq.w	800e056 <HAL_RCC_OscConfig+0x222>
 800df28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800df2c:	f000 8099 	beq.w	800e062 <HAL_RCC_OscConfig+0x22e>
 800df30:	4b5a      	ldr	r3, [pc, #360]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800df40:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800df42:	6863      	ldr	r3, [r4, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	f000 8099 	beq.w	800e07c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800df4a:	f7fd fbb9 	bl	800b6c0 <HAL_GetTick>
 800df4e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800df50:	4b52      	ldr	r3, [pc, #328]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800df58:	d15e      	bne.n	800e018 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800df5a:	f7fd fbb1 	bl	800b6c0 <HAL_GetTick>
 800df5e:	1bc0      	subs	r0, r0, r7
 800df60:	2864      	cmp	r0, #100	@ 0x64
 800df62:	d9f5      	bls.n	800df50 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800df64:	2003      	movs	r0, #3
 800df66:	e28f      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800df68:	4b4c      	ldr	r3, [pc, #304]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800df6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800df6e:	091b      	lsrs	r3, r3, #4
 800df70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df74:	e7a0      	b.n	800deb8 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800df76:	f7ff fec1 	bl	800dcfc <RCC_SetFlashLatencyFromMSIRange>
 800df7a:	2800      	cmp	r0, #0
 800df7c:	f040 827d 	bne.w	800e47a <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800df80:	4b46      	ldr	r3, [pc, #280]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	f042 0208 	orr.w	r2, r2, #8
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800df90:	6a21      	ldr	r1, [r4, #32]
 800df92:	430a      	orrs	r2, r1
 800df94:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800df96:	685a      	ldr	r2, [r3, #4]
 800df98:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800df9c:	69e1      	ldr	r1, [r4, #28]
 800df9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dfa2:	605a      	str	r2, [r3, #4]
 800dfa4:	e79e      	b.n	800dee4 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800dfa6:	6a20      	ldr	r0, [r4, #32]
 800dfa8:	f7ff fea8 	bl	800dcfc <RCC_SetFlashLatencyFromMSIRange>
 800dfac:	2800      	cmp	r0, #0
 800dfae:	d099      	beq.n	800dee4 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800dfb0:	2001      	movs	r0, #1
 800dfb2:	e269      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800dfb4:	4b39      	ldr	r3, [pc, #228]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	f042 0208 	orr.w	r2, r2, #8
 800dfbc:	601a      	str	r2, [r3, #0]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800dfc4:	6a21      	ldr	r1, [r4, #32]
 800dfc6:	430a      	orrs	r2, r1
 800dfc8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800dfca:	685a      	ldr	r2, [r3, #4]
 800dfcc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800dfd0:	69e1      	ldr	r1, [r4, #28]
 800dfd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800dfd6:	605a      	str	r2, [r3, #4]
 800dfd8:	e798      	b.n	800df0c <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800dfda:	4a30      	ldr	r2, [pc, #192]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800dfdc:	6813      	ldr	r3, [r2, #0]
 800dfde:	f023 0301 	bic.w	r3, r3, #1
 800dfe2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800dfe4:	f7fd fb6c 	bl	800b6c0 <HAL_GetTick>
 800dfe8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800dfea:	4b2c      	ldr	r3, [pc, #176]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f013 0f02 	tst.w	r3, #2
 800dff2:	d08b      	beq.n	800df0c <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800dff4:	f7fd fb64 	bl	800b6c0 <HAL_GetTick>
 800dff8:	1bc0      	subs	r0, r0, r7
 800dffa:	2802      	cmp	r0, #2
 800dffc:	d9f5      	bls.n	800dfea <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800dffe:	2003      	movs	r0, #3
 800e000:	e242      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e002:	2e03      	cmp	r6, #3
 800e004:	d18b      	bne.n	800df1e <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e006:	4b25      	ldr	r3, [pc, #148]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800e00e:	d003      	beq.n	800e018 <HAL_RCC_OscConfig+0x1e4>
 800e010:	6863      	ldr	r3, [r4, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 8233 	beq.w	800e47e <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e018:	6823      	ldr	r3, [r4, #0]
 800e01a:	f013 0f02 	tst.w	r3, #2
 800e01e:	d058      	beq.n	800e0d2 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800e020:	2d04      	cmp	r5, #4
 800e022:	d045      	beq.n	800e0b0 <HAL_RCC_OscConfig+0x27c>
 800e024:	2d0c      	cmp	r5, #12
 800e026:	d041      	beq.n	800e0ac <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e028:	68e3      	ldr	r3, [r4, #12]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d077      	beq.n	800e11e <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800e02e:	4a1b      	ldr	r2, [pc, #108]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800e030:	6813      	ldr	r3, [r2, #0]
 800e032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e036:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e038:	f7fd fb42 	bl	800b6c0 <HAL_GetTick>
 800e03c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e03e:	4b17      	ldr	r3, [pc, #92]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800e046:	d161      	bne.n	800e10c <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e048:	f7fd fb3a 	bl	800b6c0 <HAL_GetTick>
 800e04c:	1b80      	subs	r0, r0, r6
 800e04e:	2802      	cmp	r0, #2
 800e050:	d9f5      	bls.n	800e03e <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800e052:	2003      	movs	r0, #3
 800e054:	e218      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e056:	4a11      	ldr	r2, [pc, #68]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800e058:	6813      	ldr	r3, [r2, #0]
 800e05a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e05e:	6013      	str	r3, [r2, #0]
 800e060:	e76f      	b.n	800df42 <HAL_RCC_OscConfig+0x10e>
 800e062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e066:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800e078:	601a      	str	r2, [r3, #0]
 800e07a:	e762      	b.n	800df42 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800e07c:	f7fd fb20 	bl	800b6c0 <HAL_GetTick>
 800e080:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800e082:	4b06      	ldr	r3, [pc, #24]	@ (800e09c <HAL_RCC_OscConfig+0x268>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800e08a:	d0c5      	beq.n	800e018 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e08c:	f7fd fb18 	bl	800b6c0 <HAL_GetTick>
 800e090:	1bc0      	subs	r0, r0, r7
 800e092:	2864      	cmp	r0, #100	@ 0x64
 800e094:	d9f5      	bls.n	800e082 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800e096:	2003      	movs	r0, #3
 800e098:	e1f6      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
 800e09a:	bf00      	nop
 800e09c:	40021000 	.word	0x40021000
 800e0a0:	08010480 	.word	0x08010480
 800e0a4:	2000002c 	.word	0x2000002c
 800e0a8:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e0ac:	2e02      	cmp	r6, #2
 800e0ae:	d1bb      	bne.n	800e028 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e0b0:	4ba4      	ldr	r3, [pc, #656]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800e0b8:	d003      	beq.n	800e0c2 <HAL_RCC_OscConfig+0x28e>
 800e0ba:	68e3      	ldr	r3, [r4, #12]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	f000 81e0 	beq.w	800e482 <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e0c2:	4aa0      	ldr	r2, [pc, #640]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e0c4:	6853      	ldr	r3, [r2, #4]
 800e0c6:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800e0ca:	6921      	ldr	r1, [r4, #16]
 800e0cc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e0d0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	f013 0f08 	tst.w	r3, #8
 800e0d8:	d04c      	beq.n	800e174 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800e0da:	6963      	ldr	r3, [r4, #20]
 800e0dc:	b39b      	cbz	r3, 800e146 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800e0de:	4a99      	ldr	r2, [pc, #612]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e0e0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800e0e4:	f043 0301 	orr.w	r3, r3, #1
 800e0e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800e0ec:	f7fd fae8 	bl	800b6c0 <HAL_GetTick>
 800e0f0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800e0f2:	4b94      	ldr	r3, [pc, #592]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e0f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e0f8:	f013 0f02 	tst.w	r3, #2
 800e0fc:	d13a      	bne.n	800e174 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e0fe:	f7fd fadf 	bl	800b6c0 <HAL_GetTick>
 800e102:	1b80      	subs	r0, r0, r6
 800e104:	2802      	cmp	r0, #2
 800e106:	d9f4      	bls.n	800e0f2 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800e108:	2003      	movs	r0, #3
 800e10a:	e1bd      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e10c:	4a8d      	ldr	r2, [pc, #564]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e10e:	6853      	ldr	r3, [r2, #4]
 800e110:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800e114:	6921      	ldr	r1, [r4, #16]
 800e116:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e11a:	6053      	str	r3, [r2, #4]
 800e11c:	e7d9      	b.n	800e0d2 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800e11e:	4a89      	ldr	r2, [pc, #548]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e120:	6813      	ldr	r3, [r2, #0]
 800e122:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e126:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e128:	f7fd faca 	bl	800b6c0 <HAL_GetTick>
 800e12c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800e12e:	4b85      	ldr	r3, [pc, #532]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800e136:	d0cc      	beq.n	800e0d2 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800e138:	f7fd fac2 	bl	800b6c0 <HAL_GetTick>
 800e13c:	1b80      	subs	r0, r0, r6
 800e13e:	2802      	cmp	r0, #2
 800e140:	d9f5      	bls.n	800e12e <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800e142:	2003      	movs	r0, #3
 800e144:	e1a0      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 800e146:	4a7f      	ldr	r2, [pc, #508]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e148:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800e14c:	f023 0301 	bic.w	r3, r3, #1
 800e150:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800e154:	f7fd fab4 	bl	800b6c0 <HAL_GetTick>
 800e158:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800e15a:	4b7a      	ldr	r3, [pc, #488]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e15c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e160:	f013 0f02 	tst.w	r3, #2
 800e164:	d006      	beq.n	800e174 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800e166:	f7fd faab 	bl	800b6c0 <HAL_GetTick>
 800e16a:	1b80      	subs	r0, r0, r6
 800e16c:	2802      	cmp	r0, #2
 800e16e:	d9f4      	bls.n	800e15a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800e170:	2003      	movs	r0, #3
 800e172:	e189      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e174:	6823      	ldr	r3, [r4, #0]
 800e176:	f013 0f04 	tst.w	r3, #4
 800e17a:	d07a      	beq.n	800e272 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800e17c:	4b71      	ldr	r3, [pc, #452]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e17e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e180:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800e184:	d136      	bne.n	800e1f4 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800e186:	4b6f      	ldr	r3, [pc, #444]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e188:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e18a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e18e:	659a      	str	r2, [r3, #88]	@ 0x58
 800e190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e196:	9301      	str	r3, [sp, #4]
 800e198:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800e19a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e19c:	4b6a      	ldr	r3, [pc, #424]	@ (800e348 <HAL_RCC_OscConfig+0x514>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800e1a4:	d028      	beq.n	800e1f8 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e1a6:	68a3      	ldr	r3, [r4, #8]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d039      	beq.n	800e220 <HAL_RCC_OscConfig+0x3ec>
 800e1ac:	2b05      	cmp	r3, #5
 800e1ae:	d03f      	beq.n	800e230 <HAL_RCC_OscConfig+0x3fc>
 800e1b0:	4b64      	ldr	r3, [pc, #400]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e1b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e1b6:	f022 0201 	bic.w	r2, r2, #1
 800e1ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800e1be:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e1c2:	f022 0204 	bic.w	r2, r2, #4
 800e1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e1ca:	68a3      	ldr	r3, [r4, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d03d      	beq.n	800e24c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800e1d0:	f7fd fa76 	bl	800b6c0 <HAL_GetTick>
 800e1d4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1d6:	4b5b      	ldr	r3, [pc, #364]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1dc:	f013 0f02 	tst.w	r3, #2
 800e1e0:	d146      	bne.n	800e270 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1e2:	f7fd fa6d 	bl	800b6c0 <HAL_GetTick>
 800e1e6:	1bc0      	subs	r0, r0, r7
 800e1e8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e1ec:	4298      	cmp	r0, r3
 800e1ee:	d9f2      	bls.n	800e1d6 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 800e1f0:	2003      	movs	r0, #3
 800e1f2:	e149      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 800e1f4:	2600      	movs	r6, #0
 800e1f6:	e7d1      	b.n	800e19c <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e1f8:	4a53      	ldr	r2, [pc, #332]	@ (800e348 <HAL_RCC_OscConfig+0x514>)
 800e1fa:	6813      	ldr	r3, [r2, #0]
 800e1fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e200:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800e202:	f7fd fa5d 	bl	800b6c0 <HAL_GetTick>
 800e206:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800e208:	4b4f      	ldr	r3, [pc, #316]	@ (800e348 <HAL_RCC_OscConfig+0x514>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800e210:	d1c9      	bne.n	800e1a6 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e212:	f7fd fa55 	bl	800b6c0 <HAL_GetTick>
 800e216:	1bc0      	subs	r0, r0, r7
 800e218:	2802      	cmp	r0, #2
 800e21a:	d9f5      	bls.n	800e208 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800e21c:	2003      	movs	r0, #3
 800e21e:	e133      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e220:	4a48      	ldr	r2, [pc, #288]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e222:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800e226:	f043 0301 	orr.w	r3, r3, #1
 800e22a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e22e:	e7cc      	b.n	800e1ca <HAL_RCC_OscConfig+0x396>
 800e230:	4b44      	ldr	r3, [pc, #272]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e232:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e236:	f042 0204 	orr.w	r2, r2, #4
 800e23a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800e23e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e242:	f042 0201 	orr.w	r2, r2, #1
 800e246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800e24a:	e7be      	b.n	800e1ca <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800e24c:	f7fd fa38 	bl	800b6c0 <HAL_GetTick>
 800e250:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e252:	4b3c      	ldr	r3, [pc, #240]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e258:	f013 0f02 	tst.w	r3, #2
 800e25c:	d008      	beq.n	800e270 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e25e:	f7fd fa2f 	bl	800b6c0 <HAL_GetTick>
 800e262:	1bc0      	subs	r0, r0, r7
 800e264:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e268:	4298      	cmp	r0, r3
 800e26a:	d9f2      	bls.n	800e252 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800e26c:	2003      	movs	r0, #3
 800e26e:	e10b      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 800e270:	b9e6      	cbnz	r6, 800e2ac <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e272:	6823      	ldr	r3, [r4, #0]
 800e274:	f013 0f20 	tst.w	r3, #32
 800e278:	d035      	beq.n	800e2e6 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e27a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e27c:	b1e3      	cbz	r3, 800e2b8 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800e27e:	4a31      	ldr	r2, [pc, #196]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e280:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800e284:	f043 0301 	orr.w	r3, r3, #1
 800e288:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800e28c:	f7fd fa18 	bl	800b6c0 <HAL_GetTick>
 800e290:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e292:	4b2c      	ldr	r3, [pc, #176]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e294:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e298:	f013 0f02 	tst.w	r3, #2
 800e29c:	d123      	bne.n	800e2e6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e29e:	f7fd fa0f 	bl	800b6c0 <HAL_GetTick>
 800e2a2:	1b80      	subs	r0, r0, r6
 800e2a4:	2802      	cmp	r0, #2
 800e2a6:	d9f4      	bls.n	800e292 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 800e2a8:	2003      	movs	r0, #3
 800e2aa:	e0ed      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e2ac:	4a25      	ldr	r2, [pc, #148]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e2ae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800e2b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800e2b6:	e7dc      	b.n	800e272 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 800e2b8:	4a22      	ldr	r2, [pc, #136]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e2ba:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800e2be:	f023 0301 	bic.w	r3, r3, #1
 800e2c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800e2c6:	f7fd f9fb 	bl	800b6c0 <HAL_GetTick>
 800e2ca:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e2cc:	4b1d      	ldr	r3, [pc, #116]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e2ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e2d2:	f013 0f02 	tst.w	r3, #2
 800e2d6:	d006      	beq.n	800e2e6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e2d8:	f7fd f9f2 	bl	800b6c0 <HAL_GetTick>
 800e2dc:	1b80      	subs	r0, r0, r6
 800e2de:	2802      	cmp	r0, #2
 800e2e0:	d9f4      	bls.n	800e2cc <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800e2e2:	2003      	movs	r0, #3
 800e2e4:	e0d0      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e2e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f000 80cc 	beq.w	800e486 <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e2ee:	2b02      	cmp	r3, #2
 800e2f0:	d017      	beq.n	800e322 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e2f2:	2d0c      	cmp	r5, #12
 800e2f4:	f000 80cc 	beq.w	800e490 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 800e2f8:	4a12      	ldr	r2, [pc, #72]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e2fa:	6813      	ldr	r3, [r2, #0]
 800e2fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e300:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e302:	f7fd f9dd 	bl	800b6c0 <HAL_GetTick>
 800e306:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e308:	4b0e      	ldr	r3, [pc, #56]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800e310:	f000 80a8 	beq.w	800e464 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e314:	f7fd f9d4 	bl	800b6c0 <HAL_GetTick>
 800e318:	1b00      	subs	r0, r0, r4
 800e31a:	2802      	cmp	r0, #2
 800e31c:	d9f4      	bls.n	800e308 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 800e31e:	2003      	movs	r0, #3
 800e320:	e0b2      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 800e322:	4b08      	ldr	r3, [pc, #32]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e324:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e326:	f003 0103 	and.w	r1, r3, #3
 800e32a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e32c:	4291      	cmp	r1, r2
 800e32e:	d00d      	beq.n	800e34c <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800e330:	2d0c      	cmp	r5, #12
 800e332:	f000 80ab 	beq.w	800e48c <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800e336:	4b03      	ldr	r3, [pc, #12]	@ (800e344 <HAL_RCC_OscConfig+0x510>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800e33e:	d02f      	beq.n	800e3a0 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 800e340:	2001      	movs	r0, #1
 800e342:	e0a1      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
 800e344:	40021000 	.word	0x40021000
 800e348:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e34c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800e350:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e352:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800e354:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800e358:	d1ea      	bne.n	800e330 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e35a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800e35e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e360:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800e364:	d1e4      	bne.n	800e330 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e366:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800e36a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e36c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800e370:	d1de      	bne.n	800e330 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e372:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800e376:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800e378:	0852      	lsrs	r2, r2, #1
 800e37a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e37c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800e380:	d1d6      	bne.n	800e330 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800e382:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800e386:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800e388:	0852      	lsrs	r2, r2, #1
 800e38a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e38c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800e390:	d1ce      	bne.n	800e330 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e392:	4b40      	ldr	r3, [pc, #256]	@ (800e494 <HAL_RCC_OscConfig+0x660>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800e39a:	d049      	beq.n	800e430 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 800e39c:	2000      	movs	r0, #0
 800e39e:	e073      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 800e3a0:	4a3c      	ldr	r2, [pc, #240]	@ (800e494 <HAL_RCC_OscConfig+0x660>)
 800e3a2:	6813      	ldr	r3, [r2, #0]
 800e3a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e3a8:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800e3aa:	f7fd f989 	bl	800b6c0 <HAL_GetTick>
 800e3ae:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e3b0:	4b38      	ldr	r3, [pc, #224]	@ (800e494 <HAL_RCC_OscConfig+0x660>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800e3b8:	d006      	beq.n	800e3c8 <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e3ba:	f7fd f981 	bl	800b6c0 <HAL_GetTick>
 800e3be:	1b40      	subs	r0, r0, r5
 800e3c0:	2802      	cmp	r0, #2
 800e3c2:	d9f5      	bls.n	800e3b0 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 800e3c4:	2003      	movs	r0, #3
 800e3c6:	e05f      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e3c8:	4a32      	ldr	r2, [pc, #200]	@ (800e494 <HAL_RCC_OscConfig+0x660>)
 800e3ca:	68d3      	ldr	r3, [r2, #12]
 800e3cc:	4932      	ldr	r1, [pc, #200]	@ (800e498 <HAL_RCC_OscConfig+0x664>)
 800e3ce:	4019      	ands	r1, r3
 800e3d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e3d2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e3d4:	3801      	subs	r0, #1
 800e3d6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800e3da:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800e3dc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e3e0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e3e2:	0840      	lsrs	r0, r0, #1
 800e3e4:	3801      	subs	r0, #1
 800e3e6:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800e3ea:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800e3ec:	0840      	lsrs	r0, r0, #1
 800e3ee:	3801      	subs	r0, #1
 800e3f0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800e3f4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800e3f6:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800e3fa:	4319      	orrs	r1, r3
 800e3fc:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800e3fe:	6813      	ldr	r3, [r2, #0]
 800e400:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e404:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e406:	68d3      	ldr	r3, [r2, #12]
 800e408:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e40c:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800e40e:	f7fd f957 	bl	800b6c0 <HAL_GetTick>
 800e412:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e414:	4b1f      	ldr	r3, [pc, #124]	@ (800e494 <HAL_RCC_OscConfig+0x660>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800e41c:	d106      	bne.n	800e42c <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e41e:	f7fd f94f 	bl	800b6c0 <HAL_GetTick>
 800e422:	1b00      	subs	r0, r0, r4
 800e424:	2802      	cmp	r0, #2
 800e426:	d9f5      	bls.n	800e414 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 800e428:	2003      	movs	r0, #3
 800e42a:	e02d      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800e42c:	2000      	movs	r0, #0
 800e42e:	e02b      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 800e430:	4b18      	ldr	r3, [pc, #96]	@ (800e494 <HAL_RCC_OscConfig+0x660>)
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800e438:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e43a:	68da      	ldr	r2, [r3, #12]
 800e43c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800e440:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800e442:	f7fd f93d 	bl	800b6c0 <HAL_GetTick>
 800e446:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e448:	4b12      	ldr	r3, [pc, #72]	@ (800e494 <HAL_RCC_OscConfig+0x660>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800e450:	d106      	bne.n	800e460 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e452:	f7fd f935 	bl	800b6c0 <HAL_GetTick>
 800e456:	1b03      	subs	r3, r0, r4
 800e458:	2b02      	cmp	r3, #2
 800e45a:	d9f5      	bls.n	800e448 <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 800e45c:	2003      	movs	r0, #3
 800e45e:	e013      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800e460:	2000      	movs	r0, #0
 800e462:	e011      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800e464:	4a0b      	ldr	r2, [pc, #44]	@ (800e494 <HAL_RCC_OscConfig+0x660>)
 800e466:	68d1      	ldr	r1, [r2, #12]
 800e468:	4b0c      	ldr	r3, [pc, #48]	@ (800e49c <HAL_RCC_OscConfig+0x668>)
 800e46a:	400b      	ands	r3, r1
 800e46c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800e46e:	2000      	movs	r0, #0
 800e470:	e00a      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 800e472:	2001      	movs	r0, #1
}
 800e474:	4770      	bx	lr
        return HAL_ERROR;
 800e476:	2001      	movs	r0, #1
 800e478:	e006      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 800e47a:	2001      	movs	r0, #1
 800e47c:	e004      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800e47e:	2001      	movs	r0, #1
 800e480:	e002      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800e482:	2001      	movs	r0, #1
 800e484:	e000      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800e486:	2000      	movs	r0, #0
}
 800e488:	b003      	add	sp, #12
 800e48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800e48c:	2001      	movs	r0, #1
 800e48e:	e7fb      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800e490:	2001      	movs	r0, #1
 800e492:	e7f9      	b.n	800e488 <HAL_RCC_OscConfig+0x654>
 800e494:	40021000 	.word	0x40021000
 800e498:	019d808c 	.word	0x019d808c
 800e49c:	feeefffc 	.word	0xfeeefffc

0800e4a0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	f000 80af 	beq.w	800e604 <HAL_RCC_ClockConfig+0x164>
{
 800e4a6:	b570      	push	{r4, r5, r6, lr}
 800e4a8:	460d      	mov	r5, r1
 800e4aa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800e4ac:	4b59      	ldr	r3, [pc, #356]	@ (800e614 <HAL_RCC_ClockConfig+0x174>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f003 0307 	and.w	r3, r3, #7
 800e4b4:	428b      	cmp	r3, r1
 800e4b6:	d20b      	bcs.n	800e4d0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e4b8:	4a56      	ldr	r2, [pc, #344]	@ (800e614 <HAL_RCC_ClockConfig+0x174>)
 800e4ba:	6813      	ldr	r3, [r2, #0]
 800e4bc:	f023 0307 	bic.w	r3, r3, #7
 800e4c0:	430b      	orrs	r3, r1
 800e4c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e4c4:	6813      	ldr	r3, [r2, #0]
 800e4c6:	f003 0307 	and.w	r3, r3, #7
 800e4ca:	428b      	cmp	r3, r1
 800e4cc:	f040 809c 	bne.w	800e608 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e4d0:	6823      	ldr	r3, [r4, #0]
 800e4d2:	f013 0f02 	tst.w	r3, #2
 800e4d6:	d00c      	beq.n	800e4f2 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800e4d8:	68a2      	ldr	r2, [r4, #8]
 800e4da:	4b4f      	ldr	r3, [pc, #316]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e4dc:	689b      	ldr	r3, [r3, #8]
 800e4de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d905      	bls.n	800e4f2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e4e6:	494c      	ldr	r1, [pc, #304]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e4e8:	688b      	ldr	r3, [r1, #8]
 800e4ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e4ee:	431a      	orrs	r2, r3
 800e4f0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e4f2:	6823      	ldr	r3, [r4, #0]
 800e4f4:	f013 0f01 	tst.w	r3, #1
 800e4f8:	d039      	beq.n	800e56e <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e4fa:	6863      	ldr	r3, [r4, #4]
 800e4fc:	2b03      	cmp	r3, #3
 800e4fe:	d009      	beq.n	800e514 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e500:	2b02      	cmp	r3, #2
 800e502:	d026      	beq.n	800e552 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e504:	bb63      	cbnz	r3, 800e560 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e506:	4a44      	ldr	r2, [pc, #272]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e508:	6812      	ldr	r2, [r2, #0]
 800e50a:	f012 0f02 	tst.w	r2, #2
 800e50e:	d106      	bne.n	800e51e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800e510:	2001      	movs	r0, #1
 800e512:	e076      	b.n	800e602 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e514:	4a40      	ldr	r2, [pc, #256]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e516:	6812      	ldr	r2, [r2, #0]
 800e518:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800e51c:	d076      	beq.n	800e60c <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e51e:	493e      	ldr	r1, [pc, #248]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e520:	688a      	ldr	r2, [r1, #8]
 800e522:	f022 0203 	bic.w	r2, r2, #3
 800e526:	4313      	orrs	r3, r2
 800e528:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800e52a:	f7fd f8c9 	bl	800b6c0 <HAL_GetTick>
 800e52e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e530:	4b39      	ldr	r3, [pc, #228]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e532:	689b      	ldr	r3, [r3, #8]
 800e534:	f003 030c 	and.w	r3, r3, #12
 800e538:	6862      	ldr	r2, [r4, #4]
 800e53a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800e53e:	d016      	beq.n	800e56e <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e540:	f7fd f8be 	bl	800b6c0 <HAL_GetTick>
 800e544:	1b80      	subs	r0, r0, r6
 800e546:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e54a:	4298      	cmp	r0, r3
 800e54c:	d9f0      	bls.n	800e530 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800e54e:	2003      	movs	r0, #3
 800e550:	e057      	b.n	800e602 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e552:	4a31      	ldr	r2, [pc, #196]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e554:	6812      	ldr	r2, [r2, #0]
 800e556:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800e55a:	d1e0      	bne.n	800e51e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800e55c:	2001      	movs	r0, #1
 800e55e:	e050      	b.n	800e602 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e560:	4a2d      	ldr	r2, [pc, #180]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e562:	6812      	ldr	r2, [r2, #0]
 800e564:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800e568:	d1d9      	bne.n	800e51e <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800e56a:	2001      	movs	r0, #1
 800e56c:	e049      	b.n	800e602 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e56e:	6823      	ldr	r3, [r4, #0]
 800e570:	f013 0f02 	tst.w	r3, #2
 800e574:	d00c      	beq.n	800e590 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800e576:	68a2      	ldr	r2, [r4, #8]
 800e578:	4b27      	ldr	r3, [pc, #156]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e57a:	689b      	ldr	r3, [r3, #8]
 800e57c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e580:	429a      	cmp	r2, r3
 800e582:	d205      	bcs.n	800e590 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e584:	4924      	ldr	r1, [pc, #144]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e586:	688b      	ldr	r3, [r1, #8]
 800e588:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e58c:	431a      	orrs	r2, r3
 800e58e:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800e590:	4b20      	ldr	r3, [pc, #128]	@ (800e614 <HAL_RCC_ClockConfig+0x174>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f003 0307 	and.w	r3, r3, #7
 800e598:	42ab      	cmp	r3, r5
 800e59a:	d90a      	bls.n	800e5b2 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e59c:	4a1d      	ldr	r2, [pc, #116]	@ (800e614 <HAL_RCC_ClockConfig+0x174>)
 800e59e:	6813      	ldr	r3, [r2, #0]
 800e5a0:	f023 0307 	bic.w	r3, r3, #7
 800e5a4:	432b      	orrs	r3, r5
 800e5a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800e5a8:	6813      	ldr	r3, [r2, #0]
 800e5aa:	f003 0307 	and.w	r3, r3, #7
 800e5ae:	42ab      	cmp	r3, r5
 800e5b0:	d12e      	bne.n	800e610 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e5b2:	6823      	ldr	r3, [r4, #0]
 800e5b4:	f013 0f04 	tst.w	r3, #4
 800e5b8:	d006      	beq.n	800e5c8 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e5ba:	4a17      	ldr	r2, [pc, #92]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e5bc:	6893      	ldr	r3, [r2, #8]
 800e5be:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800e5c2:	68e1      	ldr	r1, [r4, #12]
 800e5c4:	430b      	orrs	r3, r1
 800e5c6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e5c8:	6823      	ldr	r3, [r4, #0]
 800e5ca:	f013 0f08 	tst.w	r3, #8
 800e5ce:	d007      	beq.n	800e5e0 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e5d0:	4a11      	ldr	r2, [pc, #68]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e5d2:	6893      	ldr	r3, [r2, #8]
 800e5d4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800e5d8:	6921      	ldr	r1, [r4, #16]
 800e5da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800e5de:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e5e0:	f7ff fbd4 	bl	800dd8c <HAL_RCC_GetSysClockFreq>
 800e5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800e618 <HAL_RCC_ClockConfig+0x178>)
 800e5e6:	689b      	ldr	r3, [r3, #8]
 800e5e8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e5ec:	4a0b      	ldr	r2, [pc, #44]	@ (800e61c <HAL_RCC_ClockConfig+0x17c>)
 800e5ee:	5cd3      	ldrb	r3, [r2, r3]
 800e5f0:	f003 031f 	and.w	r3, r3, #31
 800e5f4:	40d8      	lsrs	r0, r3
 800e5f6:	4b0a      	ldr	r3, [pc, #40]	@ (800e620 <HAL_RCC_ClockConfig+0x180>)
 800e5f8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800e5fa:	4b0a      	ldr	r3, [pc, #40]	@ (800e624 <HAL_RCC_ClockConfig+0x184>)
 800e5fc:	6818      	ldr	r0, [r3, #0]
 800e5fe:	f000 fbe3 	bl	800edc8 <HAL_InitTick>
}
 800e602:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800e604:	2001      	movs	r0, #1
}
 800e606:	4770      	bx	lr
      return HAL_ERROR;
 800e608:	2001      	movs	r0, #1
 800e60a:	e7fa      	b.n	800e602 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 800e60c:	2001      	movs	r0, #1
 800e60e:	e7f8      	b.n	800e602 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 800e610:	2001      	movs	r0, #1
 800e612:	e7f6      	b.n	800e602 <HAL_RCC_ClockConfig+0x162>
 800e614:	40022000 	.word	0x40022000
 800e618:	40021000 	.word	0x40021000
 800e61c:	08010480 	.word	0x08010480
 800e620:	2000002c 	.word	0x2000002c
 800e624:	20000008 	.word	0x20000008

0800e628 <HAL_RCC_GetHCLKFreq>:
}
 800e628:	4b01      	ldr	r3, [pc, #4]	@ (800e630 <HAL_RCC_GetHCLKFreq+0x8>)
 800e62a:	6818      	ldr	r0, [r3, #0]
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	2000002c 	.word	0x2000002c

0800e634 <HAL_RCC_GetPCLK1Freq>:
{
 800e634:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e636:	f7ff fff7 	bl	800e628 <HAL_RCC_GetHCLKFreq>
 800e63a:	4b05      	ldr	r3, [pc, #20]	@ (800e650 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e63c:	689b      	ldr	r3, [r3, #8]
 800e63e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800e642:	4a04      	ldr	r2, [pc, #16]	@ (800e654 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e644:	5cd3      	ldrb	r3, [r2, r3]
 800e646:	f003 031f 	and.w	r3, r3, #31
}
 800e64a:	40d8      	lsrs	r0, r3
 800e64c:	bd08      	pop	{r3, pc}
 800e64e:	bf00      	nop
 800e650:	40021000 	.word	0x40021000
 800e654:	08010478 	.word	0x08010478

0800e658 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e658:	230f      	movs	r3, #15
 800e65a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800e65c:	4b0b      	ldr	r3, [pc, #44]	@ (800e68c <HAL_RCC_GetClockConfig+0x34>)
 800e65e:	689a      	ldr	r2, [r3, #8]
 800e660:	f002 0203 	and.w	r2, r2, #3
 800e664:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800e666:	689a      	ldr	r2, [r3, #8]
 800e668:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800e66c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800e66e:	689a      	ldr	r2, [r3, #8]
 800e670:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e674:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	08db      	lsrs	r3, r3, #3
 800e67a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e67e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800e680:	4b03      	ldr	r3, [pc, #12]	@ (800e690 <HAL_RCC_GetClockConfig+0x38>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f003 0307 	and.w	r3, r3, #7
 800e688:	600b      	str	r3, [r1, #0]
}
 800e68a:	4770      	bx	lr
 800e68c:	40021000 	.word	0x40021000
 800e690:	40022000 	.word	0x40022000

0800e694 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800e694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e696:	4604      	mov	r4, r0
 800e698:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e69a:	4b59      	ldr	r3, [pc, #356]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	f013 0f03 	tst.w	r3, #3
 800e6a2:	d018      	beq.n	800e6d6 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800e6a4:	4b56      	ldr	r3, [pc, #344]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	f003 0303 	and.w	r3, r3, #3
 800e6ac:	6802      	ldr	r2, [r0, #0]
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d002      	beq.n	800e6b8 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800e6b2:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 800e6b4:	4630      	mov	r0, r6
 800e6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800e6b8:	2a00      	cmp	r2, #0
 800e6ba:	f000 809c 	beq.w	800e7f6 <RCCEx_PLLSAI1_Config+0x162>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800e6be:	4b50      	ldr	r3, [pc, #320]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	6842      	ldr	r2, [r0, #4]
       ||
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d001      	beq.n	800e6d2 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 800e6ce:	2601      	movs	r6, #1
 800e6d0:	e7f0      	b.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800e6d2:	2600      	movs	r6, #0
 800e6d4:	e019      	b.n	800e70a <RCCEx_PLLSAI1_Config+0x76>
    switch(PllSai1->PLLSAI1Source)
 800e6d6:	6803      	ldr	r3, [r0, #0]
 800e6d8:	2b02      	cmp	r3, #2
 800e6da:	d055      	beq.n	800e788 <RCCEx_PLLSAI1_Config+0xf4>
 800e6dc:	2b03      	cmp	r3, #3
 800e6de:	d05a      	beq.n	800e796 <RCCEx_PLLSAI1_Config+0x102>
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	f040 808a 	bne.w	800e7fa <RCCEx_PLLSAI1_Config+0x166>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e6e6:	4a46      	ldr	r2, [pc, #280]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e6e8:	6812      	ldr	r2, [r2, #0]
 800e6ea:	f012 0f02 	tst.w	r2, #2
 800e6ee:	d05e      	beq.n	800e7ae <RCCEx_PLLSAI1_Config+0x11a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e6f0:	4843      	ldr	r0, [pc, #268]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e6f2:	68c2      	ldr	r2, [r0, #12]
 800e6f4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800e6f8:	6861      	ldr	r1, [r4, #4]
 800e6fa:	3901      	subs	r1, #1
 800e6fc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800e700:	4313      	orrs	r3, r2
 800e702:	60c3      	str	r3, [r0, #12]
 800e704:	2600      	movs	r6, #0
  if(status == HAL_OK)
 800e706:	2e00      	cmp	r6, #0
 800e708:	d1d4      	bne.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800e70a:	4a3d      	ldr	r2, [pc, #244]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e70c:	6813      	ldr	r3, [r2, #0]
 800e70e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e712:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800e714:	f7fc ffd4 	bl	800b6c0 <HAL_GetTick>
 800e718:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e71a:	4b39      	ldr	r3, [pc, #228]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800e722:	d005      	beq.n	800e730 <RCCEx_PLLSAI1_Config+0x9c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e724:	f7fc ffcc 	bl	800b6c0 <HAL_GetTick>
 800e728:	1bc3      	subs	r3, r0, r7
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	d9f5      	bls.n	800e71a <RCCEx_PLLSAI1_Config+0x86>
        status = HAL_TIMEOUT;
 800e72e:	2603      	movs	r6, #3
    if(status == HAL_OK)
 800e730:	2e00      	cmp	r6, #0
 800e732:	d1bf      	bne.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800e734:	2d00      	cmp	r5, #0
 800e736:	d13c      	bne.n	800e7b2 <RCCEx_PLLSAI1_Config+0x11e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e738:	4931      	ldr	r1, [pc, #196]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e73a:	690b      	ldr	r3, [r1, #16]
 800e73c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800e740:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800e744:	68a0      	ldr	r0, [r4, #8]
 800e746:	68e2      	ldr	r2, [r4, #12]
 800e748:	06d2      	lsls	r2, r2, #27
 800e74a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800e74e:	4313      	orrs	r3, r2
 800e750:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800e752:	4a2b      	ldr	r2, [pc, #172]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e754:	6813      	ldr	r3, [r2, #0]
 800e756:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e75a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800e75c:	f7fc ffb0 	bl	800b6c0 <HAL_GetTick>
 800e760:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e762:	4b27      	ldr	r3, [pc, #156]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800e76a:	d105      	bne.n	800e778 <RCCEx_PLLSAI1_Config+0xe4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e76c:	f7fc ffa8 	bl	800b6c0 <HAL_GetTick>
 800e770:	1b40      	subs	r0, r0, r5
 800e772:	2802      	cmp	r0, #2
 800e774:	d9f5      	bls.n	800e762 <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_TIMEOUT;
 800e776:	2603      	movs	r6, #3
      if(status == HAL_OK)
 800e778:	2e00      	cmp	r6, #0
 800e77a:	d19b      	bne.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800e77c:	4a20      	ldr	r2, [pc, #128]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e77e:	6913      	ldr	r3, [r2, #16]
 800e780:	69a1      	ldr	r1, [r4, #24]
 800e782:	430b      	orrs	r3, r1
 800e784:	6113      	str	r3, [r2, #16]
 800e786:	e795      	b.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e788:	4a1d      	ldr	r2, [pc, #116]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e78a:	6812      	ldr	r2, [r2, #0]
 800e78c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800e790:	d1ae      	bne.n	800e6f0 <RCCEx_PLLSAI1_Config+0x5c>
 800e792:	2601      	movs	r6, #1
 800e794:	e78e      	b.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e796:	4a1a      	ldr	r2, [pc, #104]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e798:	6812      	ldr	r2, [r2, #0]
 800e79a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800e79e:	d1a7      	bne.n	800e6f0 <RCCEx_PLLSAI1_Config+0x5c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e7a0:	4a17      	ldr	r2, [pc, #92]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e7a2:	6812      	ldr	r2, [r2, #0]
 800e7a4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800e7a8:	d1a2      	bne.n	800e6f0 <RCCEx_PLLSAI1_Config+0x5c>
 800e7aa:	2601      	movs	r6, #1
 800e7ac:	e782      	b.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
        status = HAL_ERROR;
 800e7ae:	2601      	movs	r6, #1
 800e7b0:	e7a9      	b.n	800e706 <RCCEx_PLLSAI1_Config+0x72>
      else if(Divider == DIVIDER_Q_UPDATE)
 800e7b2:	2d01      	cmp	r5, #1
 800e7b4:	d00f      	beq.n	800e7d6 <RCCEx_PLLSAI1_Config+0x142>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e7b6:	4812      	ldr	r0, [pc, #72]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e7b8:	6902      	ldr	r2, [r0, #16]
 800e7ba:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 800e7be:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800e7c2:	68a1      	ldr	r1, [r4, #8]
 800e7c4:	6963      	ldr	r3, [r4, #20]
 800e7c6:	085b      	lsrs	r3, r3, #1
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	065b      	lsls	r3, r3, #25
 800e7cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e7d0:	431a      	orrs	r2, r3
 800e7d2:	6102      	str	r2, [r0, #16]
 800e7d4:	e7bd      	b.n	800e752 <RCCEx_PLLSAI1_Config+0xbe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e7d6:	480a      	ldr	r0, [pc, #40]	@ (800e800 <RCCEx_PLLSAI1_Config+0x16c>)
 800e7d8:	6902      	ldr	r2, [r0, #16]
 800e7da:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800e7de:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800e7e2:	68a1      	ldr	r1, [r4, #8]
 800e7e4:	6923      	ldr	r3, [r4, #16]
 800e7e6:	085b      	lsrs	r3, r3, #1
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	055b      	lsls	r3, r3, #21
 800e7ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e7f0:	431a      	orrs	r2, r3
 800e7f2:	6102      	str	r2, [r0, #16]
 800e7f4:	e7ad      	b.n	800e752 <RCCEx_PLLSAI1_Config+0xbe>
      status = HAL_ERROR;
 800e7f6:	2601      	movs	r6, #1
 800e7f8:	e75c      	b.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
    switch(PllSai1->PLLSAI1Source)
 800e7fa:	2601      	movs	r6, #1
 800e7fc:	e75a      	b.n	800e6b4 <RCCEx_PLLSAI1_Config+0x20>
 800e7fe:	bf00      	nop
 800e800:	40021000 	.word	0x40021000

0800e804 <HAL_RCCEx_PeriphCLKConfig>:
{
 800e804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e808:	b082      	sub	sp, #8
 800e80a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e80c:	6803      	ldr	r3, [r0, #0]
 800e80e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800e812:	d026      	beq.n	800e862 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800e814:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e81a:	d006      	beq.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0x26>
 800e81c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e820:	d01d      	beq.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800e822:	b19b      	cbz	r3, 800e84c <HAL_RCCEx_PeriphCLKConfig+0x48>
 800e824:	2601      	movs	r6, #1
 800e826:	4637      	mov	r7, r6
 800e828:	e01d      	b.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800e82a:	4aae      	ldr	r2, [pc, #696]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e82c:	68d3      	ldr	r3, [r2, #12]
 800e82e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e832:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e834:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e836:	4aab      	ldr	r2, [pc, #684]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e838:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e83c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800e840:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800e842:	430b      	orrs	r3, r1
 800e844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e848:	2600      	movs	r6, #0
 800e84a:	e00c      	b.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e84c:	2100      	movs	r1, #0
 800e84e:	3004      	adds	r0, #4
 800e850:	f7ff ff20 	bl	800e694 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800e854:	4607      	mov	r7, r0
 800e856:	2800      	cmp	r0, #0
 800e858:	d0ed      	beq.n	800e836 <HAL_RCCEx_PeriphCLKConfig+0x32>
      status = ret;
 800e85a:	4606      	mov	r6, r0
 800e85c:	e003      	b.n	800e866 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch(PeriphClkInit->Sai1ClockSelection)
 800e85e:	2700      	movs	r7, #0
 800e860:	e7e9      	b.n	800e836 <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e862:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e864:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e866:	6823      	ldr	r3, [r4, #0]
 800e868:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800e86c:	d06b      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e86e:	4b9d      	ldr	r3, [pc, #628]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e872:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800e876:	d14c      	bne.n	800e912 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800e878:	4b9a      	ldr	r3, [pc, #616]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e87a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e87c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e880:	659a      	str	r2, [r3, #88]	@ 0x58
 800e882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e888:	9301      	str	r3, [sp, #4]
 800e88a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800e88c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e890:	4a95      	ldr	r2, [pc, #596]	@ (800eae8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e898:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800e89a:	f7fc ff11 	bl	800b6c0 <HAL_GetTick>
 800e89e:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800e8a0:	4b91      	ldr	r3, [pc, #580]	@ (800eae8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800e8a8:	d105      	bne.n	800e8b6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e8aa:	f7fc ff09 	bl	800b6c0 <HAL_GetTick>
 800e8ae:	1b40      	subs	r0, r0, r5
 800e8b0:	2802      	cmp	r0, #2
 800e8b2:	d9f5      	bls.n	800e8a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 800e8b4:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 800e8b6:	2f00      	cmp	r7, #0
 800e8b8:	d140      	bne.n	800e93c <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e8ba:	4b8a      	ldr	r3, [pc, #552]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e8bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e8c0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800e8c4:	d018      	beq.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800e8c6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d012      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e8cc:	4a85      	ldr	r2, [pc, #532]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e8ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800e8d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800e8d6:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800e8da:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800e8de:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e8e2:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800e8e6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800e8ea:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800e8ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e8f2:	f013 0f01 	tst.w	r3, #1
 800e8f6:	d10f      	bne.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 800e8f8:	2f00      	cmp	r7, #0
 800e8fa:	f040 80c9 	bne.w	800ea90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e8fe:	4a79      	ldr	r2, [pc, #484]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e900:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800e904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e908:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800e90a:	430b      	orrs	r3, r1
 800e90c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e910:	e015      	b.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 800e912:	f04f 0800 	mov.w	r8, #0
 800e916:	e7bb      	b.n	800e890 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 800e918:	f7fc fed2 	bl	800b6c0 <HAL_GetTick>
 800e91c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e91e:	4b71      	ldr	r3, [pc, #452]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e924:	f013 0f02 	tst.w	r3, #2
 800e928:	d1e6      	bne.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e92a:	f7fc fec9 	bl	800b6c0 <HAL_GetTick>
 800e92e:	1b40      	subs	r0, r0, r5
 800e930:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e934:	4298      	cmp	r0, r3
 800e936:	d9f2      	bls.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 800e938:	2703      	movs	r7, #3
 800e93a:	e7dd      	b.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 800e93c:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 800e93e:	f1b8 0f00 	cmp.w	r8, #0
 800e942:	f040 80a7 	bne.w	800ea94 <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	f013 0f01 	tst.w	r3, #1
 800e94c:	d008      	beq.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e94e:	4a65      	ldr	r2, [pc, #404]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e950:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e954:	f023 0303 	bic.w	r3, r3, #3
 800e958:	6a21      	ldr	r1, [r4, #32]
 800e95a:	430b      	orrs	r3, r1
 800e95c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	f013 0f02 	tst.w	r3, #2
 800e966:	d008      	beq.n	800e97a <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e968:	4a5e      	ldr	r2, [pc, #376]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e96a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e96e:	f023 030c 	bic.w	r3, r3, #12
 800e972:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e974:	430b      	orrs	r3, r1
 800e976:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e97a:	6823      	ldr	r3, [r4, #0]
 800e97c:	f013 0f20 	tst.w	r3, #32
 800e980:	d008      	beq.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e982:	4a58      	ldr	r2, [pc, #352]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e984:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e988:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e98c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e98e:	430b      	orrs	r3, r1
 800e990:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e994:	6823      	ldr	r3, [r4, #0]
 800e996:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800e99a:	d008      	beq.n	800e9ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e99c:	4a51      	ldr	r2, [pc, #324]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e99e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e9a2:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800e9a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e9a8:	430b      	orrs	r3, r1
 800e9aa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800e9b4:	d008      	beq.n	800e9c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e9b6:	4a4b      	ldr	r2, [pc, #300]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e9b8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e9bc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e9c0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e9c2:	430b      	orrs	r3, r1
 800e9c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e9c8:	6823      	ldr	r3, [r4, #0]
 800e9ca:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e9ce:	d008      	beq.n	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e9d0:	4a44      	ldr	r2, [pc, #272]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e9d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e9d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800e9da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e9dc:	430b      	orrs	r3, r1
 800e9de:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800e9e8:	d008      	beq.n	800e9fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e9ea:	4a3e      	ldr	r2, [pc, #248]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e9ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e9f0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800e9f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e9f6:	430b      	orrs	r3, r1
 800e9f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e9fc:	6823      	ldr	r3, [r4, #0]
 800e9fe:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800ea02:	d00f      	beq.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ea04:	4a37      	ldr	r2, [pc, #220]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ea06:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ea0a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800ea0e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800ea10:	430b      	orrs	r3, r1
 800ea12:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ea16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea1c:	d040      	beq.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ea1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea22:	d042      	beq.n	800eaaa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800ea2a:	d00f      	beq.n	800ea4c <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ea2c:	4a2d      	ldr	r2, [pc, #180]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ea2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ea32:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800ea36:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ea38:	430b      	orrs	r3, r1
 800ea3a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ea3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ea40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea44:	d039      	beq.n	800eaba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800ea46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea4a:	d03b      	beq.n	800eac4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ea4c:	6823      	ldr	r3, [r4, #0]
 800ea4e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800ea52:	d00c      	beq.n	800ea6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ea54:	4a23      	ldr	r2, [pc, #140]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ea56:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ea5a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800ea5e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ea60:	430b      	orrs	r3, r1
 800ea62:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ea66:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800ea68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea6c:	d032      	beq.n	800ead4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ea6e:	6823      	ldr	r3, [r4, #0]
 800ea70:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800ea74:	d008      	beq.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ea76:	4a1b      	ldr	r2, [pc, #108]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ea78:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800ea7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ea80:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800ea82:	430b      	orrs	r3, r1
 800ea84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800ea88:	4630      	mov	r0, r6
 800ea8a:	b002      	add	sp, #8
 800ea8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 800ea90:	463e      	mov	r6, r7
 800ea92:	e754      	b.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ea94:	4a13      	ldr	r2, [pc, #76]	@ (800eae4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800ea96:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ea98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ea9c:	6593      	str	r3, [r2, #88]	@ 0x58
 800ea9e:	e752      	b.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800eaa0:	68d3      	ldr	r3, [r2, #12]
 800eaa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eaa6:	60d3      	str	r3, [r2, #12]
 800eaa8:	e7bc      	b.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800eaaa:	2101      	movs	r1, #1
 800eaac:	1d20      	adds	r0, r4, #4
 800eaae:	f7ff fdf1 	bl	800e694 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d0b6      	beq.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 800eab6:	4606      	mov	r6, r0
 800eab8:	e7b4      	b.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800eaba:	68d3      	ldr	r3, [r2, #12]
 800eabc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800eac0:	60d3      	str	r3, [r2, #12]
 800eac2:	e7c3      	b.n	800ea4c <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800eac4:	2101      	movs	r1, #1
 800eac6:	1d20      	adds	r0, r4, #4
 800eac8:	f7ff fde4 	bl	800e694 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800eacc:	2800      	cmp	r0, #0
 800eace:	d0bd      	beq.n	800ea4c <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 800ead0:	4606      	mov	r6, r0
 800ead2:	e7bb      	b.n	800ea4c <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800ead4:	2102      	movs	r1, #2
 800ead6:	1d20      	adds	r0, r4, #4
 800ead8:	f7ff fddc 	bl	800e694 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800eadc:	2800      	cmp	r0, #0
 800eade:	d0c6      	beq.n	800ea6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 800eae0:	4606      	mov	r6, r0
 800eae2:	e7c4      	b.n	800ea6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800eae4:	40021000 	.word	0x40021000
 800eae8:	40007000 	.word	0x40007000

0800eaec <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800eaec:	4770      	bx	lr
	...

0800eaf0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eaf0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d126      	bne.n	800eb46 <HAL_TIM_Base_Start_IT+0x56>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaf8:	2302      	movs	r3, #2
 800eafa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eafe:	6802      	ldr	r2, [r0, #0]
 800eb00:	68d3      	ldr	r3, [r2, #12]
 800eb02:	f043 0301 	orr.w	r3, r3, #1
 800eb06:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb08:	6803      	ldr	r3, [r0, #0]
 800eb0a:	4a12      	ldr	r2, [pc, #72]	@ (800eb54 <HAL_TIM_Base_Start_IT+0x64>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d00c      	beq.n	800eb2a <HAL_TIM_Base_Start_IT+0x3a>
 800eb10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb14:	d009      	beq.n	800eb2a <HAL_TIM_Base_Start_IT+0x3a>
 800eb16:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d005      	beq.n	800eb2a <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	f042 0201 	orr.w	r2, r2, #1
 800eb24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eb26:	2000      	movs	r0, #0
 800eb28:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb2a:	6899      	ldr	r1, [r3, #8]
 800eb2c:	4a0a      	ldr	r2, [pc, #40]	@ (800eb58 <HAL_TIM_Base_Start_IT+0x68>)
 800eb2e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb30:	2a06      	cmp	r2, #6
 800eb32:	d00a      	beq.n	800eb4a <HAL_TIM_Base_Start_IT+0x5a>
 800eb34:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800eb38:	d009      	beq.n	800eb4e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	f042 0201 	orr.w	r2, r2, #1
 800eb40:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800eb42:	2000      	movs	r0, #0
 800eb44:	4770      	bx	lr
    return HAL_ERROR;
 800eb46:	2001      	movs	r0, #1
 800eb48:	4770      	bx	lr
  return HAL_OK;
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	4770      	bx	lr
 800eb4e:	2000      	movs	r0, #0
}
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	40012c00 	.word	0x40012c00
 800eb58:	00010007 	.word	0x00010007

0800eb5c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eb5c:	4770      	bx	lr

0800eb5e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eb5e:	4770      	bx	lr

0800eb60 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb60:	4770      	bx	lr

0800eb62 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb62:	4770      	bx	lr

0800eb64 <HAL_TIM_IRQHandler>:
{
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800eb68:	6803      	ldr	r3, [r0, #0]
 800eb6a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eb6c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800eb6e:	f015 0f02 	tst.w	r5, #2
 800eb72:	d010      	beq.n	800eb96 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eb74:	f016 0f02 	tst.w	r6, #2
 800eb78:	d00d      	beq.n	800eb96 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800eb7a:	f06f 0202 	mvn.w	r2, #2
 800eb7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb80:	2301      	movs	r3, #1
 800eb82:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb84:	6803      	ldr	r3, [r0, #0]
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	f013 0f03 	tst.w	r3, #3
 800eb8c:	d064      	beq.n	800ec58 <HAL_TIM_IRQHandler+0xf4>
          HAL_TIM_IC_CaptureCallback(htim);
 800eb8e:	f7ff ffe6 	bl	800eb5e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb92:	2300      	movs	r3, #0
 800eb94:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800eb96:	f015 0f04 	tst.w	r5, #4
 800eb9a:	d012      	beq.n	800ebc2 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800eb9c:	f016 0f04 	tst.w	r6, #4
 800eba0:	d00f      	beq.n	800ebc2 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	f06f 0204 	mvn.w	r2, #4
 800eba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebaa:	2302      	movs	r3, #2
 800ebac:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	699b      	ldr	r3, [r3, #24]
 800ebb2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ebb6:	d055      	beq.n	800ec64 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f7ff ffd0 	bl	800eb5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ebc2:	f015 0f08 	tst.w	r5, #8
 800ebc6:	d012      	beq.n	800ebee <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ebc8:	f016 0f08 	tst.w	r6, #8
 800ebcc:	d00f      	beq.n	800ebee <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ebce:	6823      	ldr	r3, [r4, #0]
 800ebd0:	f06f 0208 	mvn.w	r2, #8
 800ebd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebd6:	2304      	movs	r3, #4
 800ebd8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ebda:	6823      	ldr	r3, [r4, #0]
 800ebdc:	69db      	ldr	r3, [r3, #28]
 800ebde:	f013 0f03 	tst.w	r3, #3
 800ebe2:	d046      	beq.n	800ec72 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 800ebe4:	4620      	mov	r0, r4
 800ebe6:	f7ff ffba 	bl	800eb5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebea:	2300      	movs	r3, #0
 800ebec:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ebee:	f015 0f10 	tst.w	r5, #16
 800ebf2:	d012      	beq.n	800ec1a <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ebf4:	f016 0f10 	tst.w	r6, #16
 800ebf8:	d00f      	beq.n	800ec1a <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	f06f 0210 	mvn.w	r2, #16
 800ec00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec02:	2308      	movs	r3, #8
 800ec04:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec06:	6823      	ldr	r3, [r4, #0]
 800ec08:	69db      	ldr	r3, [r3, #28]
 800ec0a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ec0e:	d037      	beq.n	800ec80 <HAL_TIM_IRQHandler+0x11c>
        HAL_TIM_IC_CaptureCallback(htim);
 800ec10:	4620      	mov	r0, r4
 800ec12:	f7ff ffa4 	bl	800eb5e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec16:	2300      	movs	r3, #0
 800ec18:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ec1a:	f015 0f01 	tst.w	r5, #1
 800ec1e:	d002      	beq.n	800ec26 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ec20:	f016 0f01 	tst.w	r6, #1
 800ec24:	d133      	bne.n	800ec8e <HAL_TIM_IRQHandler+0x12a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ec26:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 800ec2a:	d002      	beq.n	800ec32 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ec2c:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800ec30:	d135      	bne.n	800ec9e <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ec32:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800ec36:	d002      	beq.n	800ec3e <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ec38:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800ec3c:	d137      	bne.n	800ecae <HAL_TIM_IRQHandler+0x14a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ec3e:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800ec42:	d002      	beq.n	800ec4a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ec44:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800ec48:	d139      	bne.n	800ecbe <HAL_TIM_IRQHandler+0x15a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ec4a:	f015 0f20 	tst.w	r5, #32
 800ec4e:	d002      	beq.n	800ec56 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ec50:	f016 0f20 	tst.w	r6, #32
 800ec54:	d13b      	bne.n	800ecce <HAL_TIM_IRQHandler+0x16a>
}
 800ec56:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec58:	f7ff ff80 	bl	800eb5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	f7ff ff7f 	bl	800eb60 <HAL_TIM_PWM_PulseFinishedCallback>
 800ec62:	e796      	b.n	800eb92 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec64:	4620      	mov	r0, r4
 800ec66:	f7ff ff79 	bl	800eb5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f7ff ff78 	bl	800eb60 <HAL_TIM_PWM_PulseFinishedCallback>
 800ec70:	e7a5      	b.n	800ebbe <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec72:	4620      	mov	r0, r4
 800ec74:	f7ff ff72 	bl	800eb5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f7ff ff71 	bl	800eb60 <HAL_TIM_PWM_PulseFinishedCallback>
 800ec7e:	e7b4      	b.n	800ebea <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec80:	4620      	mov	r0, r4
 800ec82:	f7ff ff6b 	bl	800eb5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec86:	4620      	mov	r0, r4
 800ec88:	f7ff ff6a 	bl	800eb60 <HAL_TIM_PWM_PulseFinishedCallback>
 800ec8c:	e7c3      	b.n	800ec16 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	f06f 0201 	mvn.w	r2, #1
 800ec94:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ec96:	4620      	mov	r0, r4
 800ec98:	f7fb fb80 	bl	800a39c <HAL_TIM_PeriodElapsedCallback>
 800ec9c:	e7c3      	b.n	800ec26 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800eca4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800eca6:	4620      	mov	r0, r4
 800eca8:	f000 f88b 	bl	800edc2 <HAL_TIMEx_BreakCallback>
 800ecac:	e7c1      	b.n	800ec32 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ecae:	6823      	ldr	r3, [r4, #0]
 800ecb0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ecb4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	f000 f884 	bl	800edc4 <HAL_TIMEx_Break2Callback>
 800ecbc:	e7bf      	b.n	800ec3e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ecc4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f7ff ff4b 	bl	800eb62 <HAL_TIM_TriggerCallback>
 800eccc:	e7bd      	b.n	800ec4a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ecce:	6823      	ldr	r3, [r4, #0]
 800ecd0:	f06f 0220 	mvn.w	r2, #32
 800ecd4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	f000 f872 	bl	800edc0 <HAL_TIMEx_CommutCallback>
}
 800ecdc:	e7bb      	b.n	800ec56 <HAL_TIM_IRQHandler+0xf2>
	...

0800ece0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ece0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ece2:	4a1e      	ldr	r2, [pc, #120]	@ (800ed5c <TIM_Base_SetConfig+0x7c>)
 800ece4:	4290      	cmp	r0, r2
 800ece6:	d002      	beq.n	800ecee <TIM_Base_SetConfig+0xe>
 800ece8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ecec:	d103      	bne.n	800ecf6 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ecee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ecf2:	684a      	ldr	r2, [r1, #4]
 800ecf4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ecf6:	4a19      	ldr	r2, [pc, #100]	@ (800ed5c <TIM_Base_SetConfig+0x7c>)
 800ecf8:	4290      	cmp	r0, r2
 800ecfa:	d00a      	beq.n	800ed12 <TIM_Base_SetConfig+0x32>
 800ecfc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ed00:	d007      	beq.n	800ed12 <TIM_Base_SetConfig+0x32>
 800ed02:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800ed06:	4290      	cmp	r0, r2
 800ed08:	d003      	beq.n	800ed12 <TIM_Base_SetConfig+0x32>
 800ed0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ed0e:	4290      	cmp	r0, r2
 800ed10:	d103      	bne.n	800ed1a <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed16:	68ca      	ldr	r2, [r1, #12]
 800ed18:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed1e:	694a      	ldr	r2, [r1, #20]
 800ed20:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ed22:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed24:	688b      	ldr	r3, [r1, #8]
 800ed26:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed28:	680b      	ldr	r3, [r1, #0]
 800ed2a:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ed5c <TIM_Base_SetConfig+0x7c>)
 800ed2e:	4298      	cmp	r0, r3
 800ed30:	d007      	beq.n	800ed42 <TIM_Base_SetConfig+0x62>
 800ed32:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800ed36:	4298      	cmp	r0, r3
 800ed38:	d003      	beq.n	800ed42 <TIM_Base_SetConfig+0x62>
 800ed3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ed3e:	4298      	cmp	r0, r3
 800ed40:	d101      	bne.n	800ed46 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed42:	690b      	ldr	r3, [r1, #16]
 800ed44:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ed46:	2301      	movs	r3, #1
 800ed48:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ed4a:	6903      	ldr	r3, [r0, #16]
 800ed4c:	f013 0f01 	tst.w	r3, #1
 800ed50:	d003      	beq.n	800ed5a <TIM_Base_SetConfig+0x7a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ed52:	6903      	ldr	r3, [r0, #16]
 800ed54:	f023 0301 	bic.w	r3, r3, #1
 800ed58:	6103      	str	r3, [r0, #16]
  }
}
 800ed5a:	4770      	bx	lr
 800ed5c:	40012c00 	.word	0x40012c00

0800ed60 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800ed60:	b360      	cbz	r0, 800edbc <HAL_TIM_Base_Init+0x5c>
{
 800ed62:	b510      	push	{r4, lr}
 800ed64:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800ed66:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ed6a:	b313      	cbz	r3, 800edb2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800ed6c:	2302      	movs	r3, #2
 800ed6e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed72:	4621      	mov	r1, r4
 800ed74:	f851 0b04 	ldr.w	r0, [r1], #4
 800ed78:	f7ff ffb2 	bl	800ece0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed82:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800ed86:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800ed8a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800ed8e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ed92:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed9a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ed9e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800eda2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800eda6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800edaa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800edae:	2000      	movs	r0, #0
}
 800edb0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800edb2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800edb6:	f7ff fe99 	bl	800eaec <HAL_TIM_Base_MspInit>
 800edba:	e7d7      	b.n	800ed6c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800edbc:	2001      	movs	r0, #1
}
 800edbe:	4770      	bx	lr

0800edc0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800edc0:	4770      	bx	lr

0800edc2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800edc2:	4770      	bx	lr

0800edc4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800edc4:	4770      	bx	lr
	...

0800edc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800edc8:	b530      	push	{r4, r5, lr}
 800edca:	b089      	sub	sp, #36	@ 0x24
 800edcc:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800edce:	4b21      	ldr	r3, [pc, #132]	@ (800ee54 <HAL_InitTick+0x8c>)
 800edd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800edd2:	f042 0210 	orr.w	r2, r2, #16
 800edd6:	659a      	str	r2, [r3, #88]	@ 0x58
 800edd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800edda:	f003 0310 	and.w	r3, r3, #16
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ede2:	a902      	add	r1, sp, #8
 800ede4:	a803      	add	r0, sp, #12
 800ede6:	f7ff fc37 	bl	800e658 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800edea:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800edec:	b9cb      	cbnz	r3, 800ee22 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800edee:	f7ff fc21 	bl	800e634 <HAL_RCC_GetPCLK1Freq>
 800edf2:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800edf4:	4a18      	ldr	r2, [pc, #96]	@ (800ee58 <HAL_InitTick+0x90>)
 800edf6:	fba2 2303 	umull	r2, r3, r2, r3
 800edfa:	0c9b      	lsrs	r3, r3, #18
 800edfc:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800edfe:	4817      	ldr	r0, [pc, #92]	@ (800ee5c <HAL_InitTick+0x94>)
 800ee00:	4a17      	ldr	r2, [pc, #92]	@ (800ee60 <HAL_InitTick+0x98>)
 800ee02:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ee04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800ee08:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ee0a:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ee10:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ee12:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800ee14:	f7ff ffa4 	bl	800ed60 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800ee18:	4605      	mov	r5, r0
 800ee1a:	b130      	cbz	r0, 800ee2a <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 800ee1c:	4628      	mov	r0, r5
 800ee1e:	b009      	add	sp, #36	@ 0x24
 800ee20:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800ee22:	f7ff fc07 	bl	800e634 <HAL_RCC_GetPCLK1Freq>
 800ee26:	0043      	lsls	r3, r0, #1
 800ee28:	e7e4      	b.n	800edf4 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800ee2a:	480c      	ldr	r0, [pc, #48]	@ (800ee5c <HAL_InitTick+0x94>)
 800ee2c:	f7ff fe60 	bl	800eaf0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800ee30:	4605      	mov	r5, r0
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d1f2      	bne.n	800ee1c <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ee36:	2036      	movs	r0, #54	@ 0x36
 800ee38:	f7fd fde6 	bl	800ca08 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ee3c:	2c0f      	cmp	r4, #15
 800ee3e:	d901      	bls.n	800ee44 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 800ee40:	2501      	movs	r5, #1
 800ee42:	e7eb      	b.n	800ee1c <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800ee44:	2200      	movs	r2, #0
 800ee46:	4621      	mov	r1, r4
 800ee48:	2036      	movs	r0, #54	@ 0x36
 800ee4a:	f7fd fdcd 	bl	800c9e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ee4e:	4b05      	ldr	r3, [pc, #20]	@ (800ee64 <HAL_InitTick+0x9c>)
 800ee50:	601c      	str	r4, [r3, #0]
 800ee52:	e7e3      	b.n	800ee1c <HAL_InitTick+0x54>
 800ee54:	40021000 	.word	0x40021000
 800ee58:	431bde83 	.word	0x431bde83
 800ee5c:	20003e44 	.word	0x20003e44
 800ee60:	40001000 	.word	0x40001000
 800ee64:	20000008 	.word	0x20000008

0800ee68 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ee68:	e7fe      	b.n	800ee68 <NMI_Handler>

0800ee6a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ee6a:	e7fe      	b.n	800ee6a <HardFault_Handler>

0800ee6c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ee6c:	e7fe      	b.n	800ee6c <MemManage_Handler>

0800ee6e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ee6e:	e7fe      	b.n	800ee6e <BusFault_Handler>

0800ee70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ee70:	e7fe      	b.n	800ee70 <UsageFault_Handler>

0800ee72 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ee72:	4770      	bx	lr

0800ee74 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800ee74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800ee76:	4802      	ldr	r0, [pc, #8]	@ (800ee80 <CAN1_RX0_IRQHandler+0xc>)
 800ee78:	f7fd fc38 	bl	800c6ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800ee7c:	bd08      	pop	{r3, pc}
 800ee7e:	bf00      	nop
 800ee80:	20003d6c 	.word	0x20003d6c

0800ee84 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800ee84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800ee86:	4802      	ldr	r0, [pc, #8]	@ (800ee90 <CAN1_RX1_IRQHandler+0xc>)
 800ee88:	f7fd fc30 	bl	800c6ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800ee8c:	bd08      	pop	{r3, pc}
 800ee8e:	bf00      	nop
 800ee90:	20003d6c 	.word	0x20003d6c

0800ee94 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800ee94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800ee96:	4802      	ldr	r0, [pc, #8]	@ (800eea0 <CAN1_TX_IRQHandler+0xc>)
 800ee98:	f7fd fc28 	bl	800c6ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800ee9c:	bd08      	pop	{r3, pc}
 800ee9e:	bf00      	nop
 800eea0:	20003d6c 	.word	0x20003d6c

0800eea4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800eea4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800eea6:	4802      	ldr	r0, [pc, #8]	@ (800eeb0 <CAN1_SCE_IRQHandler+0xc>)
 800eea8:	f7fd fc20 	bl	800c6ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800eeac:	bd08      	pop	{r3, pc}
 800eeae:	bf00      	nop
 800eeb0:	20003d6c 	.word	0x20003d6c

0800eeb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800eeb4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800eeb6:	4802      	ldr	r0, [pc, #8]	@ (800eec0 <TIM6_DAC_IRQHandler+0xc>)
 800eeb8:	f7ff fe54 	bl	800eb64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800eebc:	bd08      	pop	{r3, pc}
 800eebe:	bf00      	nop
 800eec0:	20003e44 	.word	0x20003e44

0800eec4 <SystemInit>:

void SystemInit(void)
{
  /* Reset RCC clock configuration to default state (coming from bootloader) */
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800eec4:	4b0f      	ldr	r3, [pc, #60]	@ (800ef04 <SystemInit+0x40>)
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	f042 0201 	orr.w	r2, r2, #1
 800eecc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register (switch to MSI as system clock) */
  RCC->CFGR = 0x00000000U;
 800eece:	2100      	movs	r1, #0
 800eed0:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON, HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800eed2:	681a      	ldr	r2, [r3, #0]
 800eed4:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 800eed8:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 800eedc:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register to default */
  RCC->PLLCFGR = 0x00001000U;
 800eede:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800eee2:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800eeea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800eeec:	6199      	str	r1, [r3, #24]

#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800eeee:	4b06      	ldr	r3, [pc, #24]	@ (800ef08 <SystemInit+0x44>)
 800eef0:	4a06      	ldr	r2, [pc, #24]	@ (800ef0c <SystemInit+0x48>)
 800eef2:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800eef4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800eef8:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800eefc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif
}
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	40021000 	.word	0x40021000
 800ef08:	e000ed00 	.word	0xe000ed00
 800ef0c:	08008000 	.word	0x08008000

0800ef10 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ef10:	4b08      	ldr	r3, [pc, #32]	@ (800ef34 <prvResetNextTaskUnblockTime+0x24>)
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	b923      	cbnz	r3, 800ef22 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ef18:	4b07      	ldr	r3, [pc, #28]	@ (800ef38 <prvResetNextTaskUnblockTime+0x28>)
 800ef1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef1e:	601a      	str	r2, [r3, #0]
 800ef20:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef22:	4b04      	ldr	r3, [pc, #16]	@ (800ef34 <prvResetNextTaskUnblockTime+0x24>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	4b02      	ldr	r3, [pc, #8]	@ (800ef38 <prvResetNextTaskUnblockTime+0x28>)
 800ef2e:	601a      	str	r2, [r3, #0]
	}
}
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop
 800ef34:	20003f00 	.word	0x20003f00
 800ef38:	20003e98 	.word	0x20003e98

0800ef3c <prvInitialiseNewTask>:
{
 800ef3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef40:	4680      	mov	r8, r0
 800ef42:	460d      	mov	r5, r1
 800ef44:	4617      	mov	r7, r2
 800ef46:	4699      	mov	r9, r3
 800ef48:	9e08      	ldr	r6, [sp, #32]
 800ef4a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800ef4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef50:	0092      	lsls	r2, r2, #2
 800ef52:	21a5      	movs	r1, #165	@ 0xa5
 800ef54:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ef56:	f000 ffd6 	bl	800ff06 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef5c:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 800ef60:	3a01      	subs	r2, #1
 800ef62:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ef66:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800ef6a:	b3a5      	cbz	r5, 800efd6 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef6c:	f04f 0c00 	mov.w	ip, #0
 800ef70:	f1bc 0f0f 	cmp.w	ip, #15
 800ef74:	d809      	bhi.n	800ef8a <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef76:	f815 300c 	ldrb.w	r3, [r5, ip]
 800ef7a:	eb04 020c 	add.w	r2, r4, ip
 800ef7e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800ef82:	b113      	cbz	r3, 800ef8a <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef84:	f10c 0c01 	add.w	ip, ip, #1
 800ef88:	e7f2      	b.n	800ef70 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef90:	2e37      	cmp	r6, #55	@ 0x37
 800ef92:	d900      	bls.n	800ef96 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ef94:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800ef96:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ef98:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ef9a:	2500      	movs	r5, #0
 800ef9c:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef9e:	1d20      	adds	r0, r4, #4
 800efa0:	f7fb f937 	bl	800a212 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800efa4:	f104 0018 	add.w	r0, r4, #24
 800efa8:	f7fb f933 	bl	800a212 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800efac:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efae:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800efb2:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800efb4:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800efb6:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800efb8:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efbc:	464a      	mov	r2, r9
 800efbe:	4641      	mov	r1, r8
 800efc0:	4638      	mov	r0, r7
 800efc2:	f7fb fc09 	bl	800a7d8 <pxPortInitialiseStack>
 800efc6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800efc8:	f1ba 0f00 	cmp.w	sl, #0
 800efcc:	d001      	beq.n	800efd2 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800efce:	f8ca 4000 	str.w	r4, [sl]
}
 800efd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800efd6:	2300      	movs	r3, #0
 800efd8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800efdc:	e7d8      	b.n	800ef90 <prvInitialiseNewTask+0x54>
	...

0800efe0 <prvInitialiseTaskLists>:
{
 800efe0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800efe2:	2400      	movs	r4, #0
 800efe4:	e007      	b.n	800eff6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800efe6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800efea:	0093      	lsls	r3, r2, #2
 800efec:	480e      	ldr	r0, [pc, #56]	@ (800f028 <prvInitialiseTaskLists+0x48>)
 800efee:	4418      	add	r0, r3
 800eff0:	f7fb f904 	bl	800a1fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eff4:	3401      	adds	r4, #1
 800eff6:	2c37      	cmp	r4, #55	@ 0x37
 800eff8:	d9f5      	bls.n	800efe6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800effa:	4d0c      	ldr	r5, [pc, #48]	@ (800f02c <prvInitialiseTaskLists+0x4c>)
 800effc:	4628      	mov	r0, r5
 800effe:	f7fb f8fd 	bl	800a1fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f002:	4c0b      	ldr	r4, [pc, #44]	@ (800f030 <prvInitialiseTaskLists+0x50>)
 800f004:	4620      	mov	r0, r4
 800f006:	f7fb f8f9 	bl	800a1fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f00a:	480a      	ldr	r0, [pc, #40]	@ (800f034 <prvInitialiseTaskLists+0x54>)
 800f00c:	f7fb f8f6 	bl	800a1fc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f010:	4809      	ldr	r0, [pc, #36]	@ (800f038 <prvInitialiseTaskLists+0x58>)
 800f012:	f7fb f8f3 	bl	800a1fc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f016:	4809      	ldr	r0, [pc, #36]	@ (800f03c <prvInitialiseTaskLists+0x5c>)
 800f018:	f7fb f8f0 	bl	800a1fc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f01c:	4b08      	ldr	r3, [pc, #32]	@ (800f040 <prvInitialiseTaskLists+0x60>)
 800f01e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f020:	4b08      	ldr	r3, [pc, #32]	@ (800f044 <prvInitialiseTaskLists+0x64>)
 800f022:	601c      	str	r4, [r3, #0]
}
 800f024:	bd38      	pop	{r3, r4, r5, pc}
 800f026:	bf00      	nop
 800f028:	20003f2c 	.word	0x20003f2c
 800f02c:	20003f18 	.word	0x20003f18
 800f030:	20003f04 	.word	0x20003f04
 800f034:	20003ee8 	.word	0x20003ee8
 800f038:	20003ed4 	.word	0x20003ed4
 800f03c:	20003ebc 	.word	0x20003ebc
 800f040:	20003f00 	.word	0x20003f00
 800f044:	20003efc 	.word	0x20003efc

0800f048 <prvAddNewTaskToReadyList>:
{
 800f048:	b510      	push	{r4, lr}
 800f04a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800f04c:	f7fb fbf2 	bl	800a834 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800f050:	4a22      	ldr	r2, [pc, #136]	@ (800f0dc <prvAddNewTaskToReadyList+0x94>)
 800f052:	6813      	ldr	r3, [r2, #0]
 800f054:	3301      	adds	r3, #1
 800f056:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f058:	4b21      	ldr	r3, [pc, #132]	@ (800f0e0 <prvAddNewTaskToReadyList+0x98>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	b15b      	cbz	r3, 800f076 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800f05e:	4b21      	ldr	r3, [pc, #132]	@ (800f0e4 <prvAddNewTaskToReadyList+0x9c>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	b96b      	cbnz	r3, 800f080 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f064:	4b1e      	ldr	r3, [pc, #120]	@ (800f0e0 <prvAddNewTaskToReadyList+0x98>)
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f06a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d807      	bhi.n	800f080 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800f070:	4b1b      	ldr	r3, [pc, #108]	@ (800f0e0 <prvAddNewTaskToReadyList+0x98>)
 800f072:	601c      	str	r4, [r3, #0]
 800f074:	e004      	b.n	800f080 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800f076:	4b1a      	ldr	r3, [pc, #104]	@ (800f0e0 <prvAddNewTaskToReadyList+0x98>)
 800f078:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f07a:	6813      	ldr	r3, [r2, #0]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	d029      	beq.n	800f0d4 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800f080:	4a19      	ldr	r2, [pc, #100]	@ (800f0e8 <prvAddNewTaskToReadyList+0xa0>)
 800f082:	6813      	ldr	r3, [r2, #0]
 800f084:	3301      	adds	r3, #1
 800f086:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f088:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800f08a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f08c:	4b17      	ldr	r3, [pc, #92]	@ (800f0ec <prvAddNewTaskToReadyList+0xa4>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4298      	cmp	r0, r3
 800f092:	d901      	bls.n	800f098 <prvAddNewTaskToReadyList+0x50>
 800f094:	4b15      	ldr	r3, [pc, #84]	@ (800f0ec <prvAddNewTaskToReadyList+0xa4>)
 800f096:	6018      	str	r0, [r3, #0]
 800f098:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f09c:	1d21      	adds	r1, r4, #4
 800f09e:	4b14      	ldr	r3, [pc, #80]	@ (800f0f0 <prvAddNewTaskToReadyList+0xa8>)
 800f0a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f0a4:	f7fb f8b8 	bl	800a218 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800f0a8:	f7fb fbe6 	bl	800a878 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800f0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800f0e4 <prvAddNewTaskToReadyList+0x9c>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	b17b      	cbz	r3, 800f0d2 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f0b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f0e0 <prvAddNewTaskToReadyList+0x98>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d209      	bcs.n	800f0d2 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800f0be:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	f3bf 8f6f 	isb	sy
}
 800f0d2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800f0d4:	f7ff ff84 	bl	800efe0 <prvInitialiseTaskLists>
 800f0d8:	e7d2      	b.n	800f080 <prvAddNewTaskToReadyList+0x38>
 800f0da:	bf00      	nop
 800f0dc:	20003eb8 	.word	0x20003eb8
 800f0e0:	2000438c 	.word	0x2000438c
 800f0e4:	20003eac 	.word	0x20003eac
 800f0e8:	20003e9c 	.word	0x20003e9c
 800f0ec:	20003eb0 	.word	0x20003eb0
 800f0f0:	20003f2c 	.word	0x20003f2c

0800f0f4 <prvDeleteTCB>:
	{
 800f0f4:	b510      	push	{r4, lr}
 800f0f6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f0f8:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 800f0fc:	b163      	cbz	r3, 800f118 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f0fe:	2b01      	cmp	r3, #1
 800f100:	d011      	beq.n	800f126 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f102:	2b02      	cmp	r3, #2
 800f104:	d00e      	beq.n	800f124 <prvDeleteTCB+0x30>
 800f106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f10a:	f383 8811 	msr	BASEPRI, r3
 800f10e:	f3bf 8f6f 	isb	sy
 800f112:	f3bf 8f4f 	dsb	sy
 800f116:	e7fe      	b.n	800f116 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800f118:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800f11a:	f7fb f825 	bl	800a168 <vPortFree>
				vPortFree( pxTCB );
 800f11e:	4620      	mov	r0, r4
 800f120:	f7fb f822 	bl	800a168 <vPortFree>
	}
 800f124:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800f126:	f7fb f81f 	bl	800a168 <vPortFree>
 800f12a:	e7fb      	b.n	800f124 <prvDeleteTCB+0x30>

0800f12c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f12c:	4b0f      	ldr	r3, [pc, #60]	@ (800f16c <prvCheckTasksWaitingTermination+0x40>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	b1d3      	cbz	r3, 800f168 <prvCheckTasksWaitingTermination+0x3c>
{
 800f132:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800f134:	f7fb fb7e 	bl	800a834 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f138:	4b0d      	ldr	r3, [pc, #52]	@ (800f170 <prvCheckTasksWaitingTermination+0x44>)
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f13e:	1d20      	adds	r0, r4, #4
 800f140:	f7fb f88e 	bl	800a260 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f144:	4a0b      	ldr	r2, [pc, #44]	@ (800f174 <prvCheckTasksWaitingTermination+0x48>)
 800f146:	6813      	ldr	r3, [r2, #0]
 800f148:	3b01      	subs	r3, #1
 800f14a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f14c:	4a07      	ldr	r2, [pc, #28]	@ (800f16c <prvCheckTasksWaitingTermination+0x40>)
 800f14e:	6813      	ldr	r3, [r2, #0]
 800f150:	3b01      	subs	r3, #1
 800f152:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800f154:	f7fb fb90 	bl	800a878 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800f158:	4620      	mov	r0, r4
 800f15a:	f7ff ffcb 	bl	800f0f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f15e:	4b03      	ldr	r3, [pc, #12]	@ (800f16c <prvCheckTasksWaitingTermination+0x40>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d1e6      	bne.n	800f134 <prvCheckTasksWaitingTermination+0x8>
 }
 800f166:	bd10      	pop	{r4, pc}
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	20003ed0 	.word	0x20003ed0
 800f170:	20003ed4 	.word	0x20003ed4
 800f174:	20003eb8 	.word	0x20003eb8

0800f178 <prvIdleTask>:
{
 800f178:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800f17a:	f7ff ffd7 	bl	800f12c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f17e:	4b07      	ldr	r3, [pc, #28]	@ (800f19c <prvIdleTask+0x24>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2b01      	cmp	r3, #1
 800f184:	d9f9      	bls.n	800f17a <prvIdleTask+0x2>
				taskYIELD();
 800f186:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f18a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f18e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	f3bf 8f6f 	isb	sy
 800f19a:	e7ee      	b.n	800f17a <prvIdleTask+0x2>
 800f19c:	20003f2c 	.word	0x20003f2c

0800f1a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f1a0:	b570      	push	{r4, r5, r6, lr}
 800f1a2:	4604      	mov	r4, r0
 800f1a4:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f1a6:	4b17      	ldr	r3, [pc, #92]	@ (800f204 <prvAddCurrentTaskToDelayedList+0x64>)
 800f1a8:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1aa:	4b17      	ldr	r3, [pc, #92]	@ (800f208 <prvAddCurrentTaskToDelayedList+0x68>)
 800f1ac:	6818      	ldr	r0, [r3, #0]
 800f1ae:	3004      	adds	r0, #4
 800f1b0:	f7fb f856 	bl	800a260 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f1b8:	d00d      	beq.n	800f1d6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f1ba:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f1bc:	4b12      	ldr	r3, [pc, #72]	@ (800f208 <prvAddCurrentTaskToDelayedList+0x68>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800f1c2:	42a6      	cmp	r6, r4
 800f1c4:	d910      	bls.n	800f1e8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1c6:	4b11      	ldr	r3, [pc, #68]	@ (800f20c <prvAddCurrentTaskToDelayedList+0x6c>)
 800f1c8:	6818      	ldr	r0, [r3, #0]
 800f1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800f208 <prvAddCurrentTaskToDelayedList+0x68>)
 800f1cc:	6819      	ldr	r1, [r3, #0]
 800f1ce:	3104      	adds	r1, #4
 800f1d0:	f7fb f82d 	bl	800a22e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f1d4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f1d6:	2d00      	cmp	r5, #0
 800f1d8:	d0ef      	beq.n	800f1ba <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1da:	4b0b      	ldr	r3, [pc, #44]	@ (800f208 <prvAddCurrentTaskToDelayedList+0x68>)
 800f1dc:	6819      	ldr	r1, [r3, #0]
 800f1de:	3104      	adds	r1, #4
 800f1e0:	480b      	ldr	r0, [pc, #44]	@ (800f210 <prvAddCurrentTaskToDelayedList+0x70>)
 800f1e2:	f7fb f819 	bl	800a218 <vListInsertEnd>
 800f1e6:	e7f5      	b.n	800f1d4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1e8:	4b0a      	ldr	r3, [pc, #40]	@ (800f214 <prvAddCurrentTaskToDelayedList+0x74>)
 800f1ea:	6818      	ldr	r0, [r3, #0]
 800f1ec:	4b06      	ldr	r3, [pc, #24]	@ (800f208 <prvAddCurrentTaskToDelayedList+0x68>)
 800f1ee:	6819      	ldr	r1, [r3, #0]
 800f1f0:	3104      	adds	r1, #4
 800f1f2:	f7fb f81c 	bl	800a22e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f1f6:	4b08      	ldr	r3, [pc, #32]	@ (800f218 <prvAddCurrentTaskToDelayedList+0x78>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	42a3      	cmp	r3, r4
 800f1fc:	d9ea      	bls.n	800f1d4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800f1fe:	4b06      	ldr	r3, [pc, #24]	@ (800f218 <prvAddCurrentTaskToDelayedList+0x78>)
 800f200:	601c      	str	r4, [r3, #0]
}
 800f202:	e7e7      	b.n	800f1d4 <prvAddCurrentTaskToDelayedList+0x34>
 800f204:	20003eb4 	.word	0x20003eb4
 800f208:	2000438c 	.word	0x2000438c
 800f20c:	20003efc 	.word	0x20003efc
 800f210:	20003ebc 	.word	0x20003ebc
 800f214:	20003f00 	.word	0x20003f00
 800f218:	20003e98 	.word	0x20003e98

0800f21c <xTaskCreateStatic>:
	{
 800f21c:	b530      	push	{r4, r5, lr}
 800f21e:	b087      	sub	sp, #28
 800f220:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800f222:	b17c      	cbz	r4, 800f244 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f224:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800f226:	b1b5      	cbz	r5, 800f256 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800f228:	255c      	movs	r5, #92	@ 0x5c
 800f22a:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f22c:	9d04      	ldr	r5, [sp, #16]
 800f22e:	2d5c      	cmp	r5, #92	@ 0x5c
 800f230:	d01a      	beq.n	800f268 <xTaskCreateStatic+0x4c>
 800f232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f236:	f383 8811 	msr	BASEPRI, r3
 800f23a:	f3bf 8f6f 	isb	sy
 800f23e:	f3bf 8f4f 	dsb	sy
 800f242:	e7fe      	b.n	800f242 <xTaskCreateStatic+0x26>
 800f244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800f254:	e7fe      	b.n	800f254 <xTaskCreateStatic+0x38>
 800f256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f25a:	f383 8811 	msr	BASEPRI, r3
 800f25e:	f3bf 8f6f 	isb	sy
 800f262:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800f266:	e7fe      	b.n	800f266 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f268:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f26a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800f26c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f26e:	2402      	movs	r4, #2
 800f270:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f274:	2400      	movs	r4, #0
 800f276:	9403      	str	r4, [sp, #12]
 800f278:	9502      	str	r5, [sp, #8]
 800f27a:	ac05      	add	r4, sp, #20
 800f27c:	9401      	str	r4, [sp, #4]
 800f27e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f280:	9400      	str	r4, [sp, #0]
 800f282:	f7ff fe5b 	bl	800ef3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f286:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800f288:	f7ff fede 	bl	800f048 <prvAddNewTaskToReadyList>
	}
 800f28c:	9805      	ldr	r0, [sp, #20]
 800f28e:	b007      	add	sp, #28
 800f290:	bd30      	pop	{r4, r5, pc}

0800f292 <xTaskCreate>:
	{
 800f292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f296:	b085      	sub	sp, #20
 800f298:	4607      	mov	r7, r0
 800f29a:	4688      	mov	r8, r1
 800f29c:	4614      	mov	r4, r2
 800f29e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f2a0:	0090      	lsls	r0, r2, #2
 800f2a2:	f7fa fed5 	bl	800a050 <pvPortMalloc>
			if( pxStack != NULL )
 800f2a6:	b308      	cbz	r0, 800f2ec <xTaskCreate+0x5a>
 800f2a8:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f2aa:	205c      	movs	r0, #92	@ 0x5c
 800f2ac:	f7fa fed0 	bl	800a050 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800f2b0:	4605      	mov	r5, r0
 800f2b2:	b1a8      	cbz	r0, 800f2e0 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800f2b4:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f2be:	9303      	str	r3, [sp, #12]
 800f2c0:	9002      	str	r0, [sp, #8]
 800f2c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2c4:	9301      	str	r3, [sp, #4]
 800f2c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2c8:	9300      	str	r3, [sp, #0]
 800f2ca:	4633      	mov	r3, r6
 800f2cc:	4622      	mov	r2, r4
 800f2ce:	4641      	mov	r1, r8
 800f2d0:	4638      	mov	r0, r7
 800f2d2:	f7ff fe33 	bl	800ef3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	f7ff feb6 	bl	800f048 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2dc:	2001      	movs	r0, #1
 800f2de:	e007      	b.n	800f2f0 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800f2e0:	4648      	mov	r0, r9
 800f2e2:	f7fa ff41 	bl	800a168 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ea:	e001      	b.n	800f2f0 <xTaskCreate+0x5e>
 800f2ec:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800f2f0:	b005      	add	sp, #20
 800f2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800f2f8 <vTaskStartScheduler>:
{
 800f2f8:	b510      	push	{r4, lr}
 800f2fa:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f2fc:	2400      	movs	r4, #0
 800f2fe:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f300:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f302:	aa07      	add	r2, sp, #28
 800f304:	a906      	add	r1, sp, #24
 800f306:	a805      	add	r0, sp, #20
 800f308:	f7fa fb64 	bl	80099d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f30c:	9b05      	ldr	r3, [sp, #20]
 800f30e:	9302      	str	r3, [sp, #8]
 800f310:	9b06      	ldr	r3, [sp, #24]
 800f312:	9301      	str	r3, [sp, #4]
 800f314:	9400      	str	r4, [sp, #0]
 800f316:	4623      	mov	r3, r4
 800f318:	9a07      	ldr	r2, [sp, #28]
 800f31a:	4917      	ldr	r1, [pc, #92]	@ (800f378 <vTaskStartScheduler+0x80>)
 800f31c:	4817      	ldr	r0, [pc, #92]	@ (800f37c <vTaskStartScheduler+0x84>)
 800f31e:	f7ff ff7d 	bl	800f21c <xTaskCreateStatic>
 800f322:	4b17      	ldr	r3, [pc, #92]	@ (800f380 <vTaskStartScheduler+0x88>)
 800f324:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800f326:	b1c0      	cbz	r0, 800f35a <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800f328:	f000 fc06 	bl	800fb38 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f32c:	2801      	cmp	r0, #1
 800f32e:	d115      	bne.n	800f35c <vTaskStartScheduler+0x64>
 800f330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f334:	f383 8811 	msr	BASEPRI, r3
 800f338:	f3bf 8f6f 	isb	sy
 800f33c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800f340:	4b10      	ldr	r3, [pc, #64]	@ (800f384 <vTaskStartScheduler+0x8c>)
 800f342:	f04f 32ff 	mov.w	r2, #4294967295
 800f346:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f348:	4b0f      	ldr	r3, [pc, #60]	@ (800f388 <vTaskStartScheduler+0x90>)
 800f34a:	2201      	movs	r2, #1
 800f34c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f34e:	4b0f      	ldr	r3, [pc, #60]	@ (800f38c <vTaskStartScheduler+0x94>)
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800f354:	f7fb fb08 	bl	800a968 <xPortStartScheduler>
		}
 800f358:	e003      	b.n	800f362 <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 800f35a:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f35c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f360:	d001      	beq.n	800f366 <vTaskStartScheduler+0x6e>
}
 800f362:	b008      	add	sp, #32
 800f364:	bd10      	pop	{r4, pc}
 800f366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f36a:	f383 8811 	msr	BASEPRI, r3
 800f36e:	f3bf 8f6f 	isb	sy
 800f372:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f376:	e7fe      	b.n	800f376 <vTaskStartScheduler+0x7e>
 800f378:	080102e4 	.word	0x080102e4
 800f37c:	0800f179 	.word	0x0800f179
 800f380:	20003e94 	.word	0x20003e94
 800f384:	20003e98 	.word	0x20003e98
 800f388:	20003eac 	.word	0x20003eac
 800f38c:	20003eb4 	.word	0x20003eb4

0800f390 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f390:	4a02      	ldr	r2, [pc, #8]	@ (800f39c <vTaskSuspendAll+0xc>)
 800f392:	6813      	ldr	r3, [r2, #0]
 800f394:	3301      	adds	r3, #1
 800f396:	6013      	str	r3, [r2, #0]
}
 800f398:	4770      	bx	lr
 800f39a:	bf00      	nop
 800f39c:	20003e90 	.word	0x20003e90

0800f3a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f3a0:	4b01      	ldr	r3, [pc, #4]	@ (800f3a8 <xTaskGetTickCount+0x8>)
 800f3a2:	6818      	ldr	r0, [r3, #0]
}
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	20003eb4 	.word	0x20003eb4

0800f3ac <xTaskGetTickCountFromISR>:
{
 800f3ac:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f3ae:	f7fb fb67 	bl	800aa80 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800f3b2:	4b01      	ldr	r3, [pc, #4]	@ (800f3b8 <xTaskGetTickCountFromISR+0xc>)
 800f3b4:	6818      	ldr	r0, [r3, #0]
}
 800f3b6:	bd08      	pop	{r3, pc}
 800f3b8:	20003eb4 	.word	0x20003eb4

0800f3bc <xTaskIncrementTick>:
{
 800f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f3be:	4b3a      	ldr	r3, [pc, #232]	@ (800f4a8 <xTaskIncrementTick+0xec>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d169      	bne.n	800f49a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f3c6:	4b39      	ldr	r3, [pc, #228]	@ (800f4ac <xTaskIncrementTick+0xf0>)
 800f3c8:	681d      	ldr	r5, [r3, #0]
 800f3ca:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800f3cc:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f3ce:	b9c5      	cbnz	r5, 800f402 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800f3d0:	4b37      	ldr	r3, [pc, #220]	@ (800f4b0 <xTaskIncrementTick+0xf4>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	b143      	cbz	r3, 800f3ea <xTaskIncrementTick+0x2e>
 800f3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3dc:	f383 8811 	msr	BASEPRI, r3
 800f3e0:	f3bf 8f6f 	isb	sy
 800f3e4:	f3bf 8f4f 	dsb	sy
 800f3e8:	e7fe      	b.n	800f3e8 <xTaskIncrementTick+0x2c>
 800f3ea:	4a31      	ldr	r2, [pc, #196]	@ (800f4b0 <xTaskIncrementTick+0xf4>)
 800f3ec:	6811      	ldr	r1, [r2, #0]
 800f3ee:	4b31      	ldr	r3, [pc, #196]	@ (800f4b4 <xTaskIncrementTick+0xf8>)
 800f3f0:	6818      	ldr	r0, [r3, #0]
 800f3f2:	6010      	str	r0, [r2, #0]
 800f3f4:	6019      	str	r1, [r3, #0]
 800f3f6:	4a30      	ldr	r2, [pc, #192]	@ (800f4b8 <xTaskIncrementTick+0xfc>)
 800f3f8:	6813      	ldr	r3, [r2, #0]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	6013      	str	r3, [r2, #0]
 800f3fe:	f7ff fd87 	bl	800ef10 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f402:	4b2e      	ldr	r3, [pc, #184]	@ (800f4bc <xTaskIncrementTick+0x100>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	42ab      	cmp	r3, r5
 800f408:	d93d      	bls.n	800f486 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800f40a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f40c:	4b2c      	ldr	r3, [pc, #176]	@ (800f4c0 <xTaskIncrementTick+0x104>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f412:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f416:	009a      	lsls	r2, r3, #2
 800f418:	4b2a      	ldr	r3, [pc, #168]	@ (800f4c4 <xTaskIncrementTick+0x108>)
 800f41a:	589b      	ldr	r3, [r3, r2]
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d900      	bls.n	800f422 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800f420:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800f422:	4b29      	ldr	r3, [pc, #164]	@ (800f4c8 <xTaskIncrementTick+0x10c>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d03c      	beq.n	800f4a4 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800f42a:	2701      	movs	r7, #1
	return xSwitchRequired;
 800f42c:	e03a      	b.n	800f4a4 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800f42e:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f430:	4b1f      	ldr	r3, [pc, #124]	@ (800f4b0 <xTaskIncrementTick+0xf4>)
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	b343      	cbz	r3, 800f48a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f438:	4b1d      	ldr	r3, [pc, #116]	@ (800f4b0 <xTaskIncrementTick+0xf4>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	68db      	ldr	r3, [r3, #12]
 800f43e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f440:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800f442:	429d      	cmp	r5, r3
 800f444:	d326      	bcc.n	800f494 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f446:	1d26      	adds	r6, r4, #4
 800f448:	4630      	mov	r0, r6
 800f44a:	f7fa ff09 	bl	800a260 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f44e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800f450:	b11b      	cbz	r3, 800f45a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f452:	f104 0018 	add.w	r0, r4, #24
 800f456:	f7fa ff03 	bl	800a260 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f45a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f45c:	4a1b      	ldr	r2, [pc, #108]	@ (800f4cc <xTaskIncrementTick+0x110>)
 800f45e:	6812      	ldr	r2, [r2, #0]
 800f460:	4293      	cmp	r3, r2
 800f462:	d901      	bls.n	800f468 <xTaskIncrementTick+0xac>
 800f464:	4a19      	ldr	r2, [pc, #100]	@ (800f4cc <xTaskIncrementTick+0x110>)
 800f466:	6013      	str	r3, [r2, #0]
 800f468:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f46c:	009a      	lsls	r2, r3, #2
 800f46e:	4631      	mov	r1, r6
 800f470:	4814      	ldr	r0, [pc, #80]	@ (800f4c4 <xTaskIncrementTick+0x108>)
 800f472:	4410      	add	r0, r2
 800f474:	f7fa fed0 	bl	800a218 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f478:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f47a:	4b11      	ldr	r3, [pc, #68]	@ (800f4c0 <xTaskIncrementTick+0x104>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f480:	429a      	cmp	r2, r3
 800f482:	d2d4      	bcs.n	800f42e <xTaskIncrementTick+0x72>
 800f484:	e7d4      	b.n	800f430 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800f486:	2700      	movs	r7, #0
 800f488:	e7d2      	b.n	800f430 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f48a:	4b0c      	ldr	r3, [pc, #48]	@ (800f4bc <xTaskIncrementTick+0x100>)
 800f48c:	f04f 32ff 	mov.w	r2, #4294967295
 800f490:	601a      	str	r2, [r3, #0]
					break;
 800f492:	e7bb      	b.n	800f40c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800f494:	4a09      	ldr	r2, [pc, #36]	@ (800f4bc <xTaskIncrementTick+0x100>)
 800f496:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f498:	e7b8      	b.n	800f40c <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800f49a:	4a0d      	ldr	r2, [pc, #52]	@ (800f4d0 <xTaskIncrementTick+0x114>)
 800f49c:	6813      	ldr	r3, [r2, #0]
 800f49e:	3301      	adds	r3, #1
 800f4a0:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f4a2:	2700      	movs	r7, #0
}
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4a8:	20003e90 	.word	0x20003e90
 800f4ac:	20003eb4 	.word	0x20003eb4
 800f4b0:	20003f00 	.word	0x20003f00
 800f4b4:	20003efc 	.word	0x20003efc
 800f4b8:	20003ea0 	.word	0x20003ea0
 800f4bc:	20003e98 	.word	0x20003e98
 800f4c0:	2000438c 	.word	0x2000438c
 800f4c4:	20003f2c 	.word	0x20003f2c
 800f4c8:	20003ea4 	.word	0x20003ea4
 800f4cc:	20003eb0 	.word	0x20003eb0
 800f4d0:	20003ea8 	.word	0x20003ea8

0800f4d4 <xTaskResumeAll>:
{
 800f4d4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800f4d6:	4b35      	ldr	r3, [pc, #212]	@ (800f5ac <xTaskResumeAll+0xd8>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	b943      	cbnz	r3, 800f4ee <xTaskResumeAll+0x1a>
 800f4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e0:	f383 8811 	msr	BASEPRI, r3
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	e7fe      	b.n	800f4ec <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800f4ee:	f7fb f9a1 	bl	800a834 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f4f2:	4b2e      	ldr	r3, [pc, #184]	@ (800f5ac <xTaskResumeAll+0xd8>)
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	3a01      	subs	r2, #1
 800f4f8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d14f      	bne.n	800f5a0 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f500:	4b2b      	ldr	r3, [pc, #172]	@ (800f5b0 <xTaskResumeAll+0xdc>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	b90b      	cbnz	r3, 800f50a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800f506:	2400      	movs	r4, #0
 800f508:	e04b      	b.n	800f5a2 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800f50a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f50c:	4b29      	ldr	r3, [pc, #164]	@ (800f5b4 <xTaskResumeAll+0xe0>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	b31b      	cbz	r3, 800f55a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f512:	4b28      	ldr	r3, [pc, #160]	@ (800f5b4 <xTaskResumeAll+0xe0>)
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f518:	f104 0018 	add.w	r0, r4, #24
 800f51c:	f7fa fea0 	bl	800a260 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f520:	1d25      	adds	r5, r4, #4
 800f522:	4628      	mov	r0, r5
 800f524:	f7fa fe9c 	bl	800a260 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f528:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f52a:	4b23      	ldr	r3, [pc, #140]	@ (800f5b8 <xTaskResumeAll+0xe4>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	4298      	cmp	r0, r3
 800f530:	d901      	bls.n	800f536 <xTaskResumeAll+0x62>
 800f532:	4b21      	ldr	r3, [pc, #132]	@ (800f5b8 <xTaskResumeAll+0xe4>)
 800f534:	6018      	str	r0, [r3, #0]
 800f536:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f53a:	4629      	mov	r1, r5
 800f53c:	4b1f      	ldr	r3, [pc, #124]	@ (800f5bc <xTaskResumeAll+0xe8>)
 800f53e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f542:	f7fa fe69 	bl	800a218 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f546:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f548:	4b1d      	ldr	r3, [pc, #116]	@ (800f5c0 <xTaskResumeAll+0xec>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54e:	429a      	cmp	r2, r3
 800f550:	d3dc      	bcc.n	800f50c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800f552:	4b1c      	ldr	r3, [pc, #112]	@ (800f5c4 <xTaskResumeAll+0xf0>)
 800f554:	2201      	movs	r2, #1
 800f556:	601a      	str	r2, [r3, #0]
 800f558:	e7d8      	b.n	800f50c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800f55a:	b10c      	cbz	r4, 800f560 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800f55c:	f7ff fcd8 	bl	800ef10 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f560:	4b19      	ldr	r3, [pc, #100]	@ (800f5c8 <xTaskResumeAll+0xf4>)
 800f562:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800f564:	b984      	cbnz	r4, 800f588 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800f566:	4b17      	ldr	r3, [pc, #92]	@ (800f5c4 <xTaskResumeAll+0xf0>)
 800f568:	681c      	ldr	r4, [r3, #0]
 800f56a:	b1d4      	cbz	r4, 800f5a2 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800f56c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f574:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800f580:	2401      	movs	r4, #1
 800f582:	e00e      	b.n	800f5a2 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f584:	3c01      	subs	r4, #1
 800f586:	d007      	beq.n	800f598 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800f588:	f7ff ff18 	bl	800f3bc <xTaskIncrementTick>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d0f9      	beq.n	800f584 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800f590:	4b0c      	ldr	r3, [pc, #48]	@ (800f5c4 <xTaskResumeAll+0xf0>)
 800f592:	2201      	movs	r2, #1
 800f594:	601a      	str	r2, [r3, #0]
 800f596:	e7f5      	b.n	800f584 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800f598:	4b0b      	ldr	r3, [pc, #44]	@ (800f5c8 <xTaskResumeAll+0xf4>)
 800f59a:	2200      	movs	r2, #0
 800f59c:	601a      	str	r2, [r3, #0]
 800f59e:	e7e2      	b.n	800f566 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800f5a0:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f5a2:	f7fb f969 	bl	800a878 <vPortExitCritical>
}
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	bd38      	pop	{r3, r4, r5, pc}
 800f5aa:	bf00      	nop
 800f5ac:	20003e90 	.word	0x20003e90
 800f5b0:	20003eb8 	.word	0x20003eb8
 800f5b4:	20003ee8 	.word	0x20003ee8
 800f5b8:	20003eb0 	.word	0x20003eb0
 800f5bc:	20003f2c 	.word	0x20003f2c
 800f5c0:	2000438c 	.word	0x2000438c
 800f5c4:	20003ea4 	.word	0x20003ea4
 800f5c8:	20003ea8 	.word	0x20003ea8

0800f5cc <vTaskDelay>:
	{
 800f5cc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f5ce:	b1a8      	cbz	r0, 800f5fc <vTaskDelay+0x30>
 800f5d0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800f5d2:	4b10      	ldr	r3, [pc, #64]	@ (800f614 <vTaskDelay+0x48>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	b143      	cbz	r3, 800f5ea <vTaskDelay+0x1e>
 800f5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5dc:	f383 8811 	msr	BASEPRI, r3
 800f5e0:	f3bf 8f6f 	isb	sy
 800f5e4:	f3bf 8f4f 	dsb	sy
 800f5e8:	e7fe      	b.n	800f5e8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800f5ea:	f7ff fed1 	bl	800f390 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5ee:	2100      	movs	r1, #0
 800f5f0:	4620      	mov	r0, r4
 800f5f2:	f7ff fdd5 	bl	800f1a0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f5f6:	f7ff ff6d 	bl	800f4d4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f5fa:	b948      	cbnz	r0, 800f610 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800f5fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f604:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f608:	f3bf 8f4f 	dsb	sy
 800f60c:	f3bf 8f6f 	isb	sy
	}
 800f610:	bd10      	pop	{r4, pc}
 800f612:	bf00      	nop
 800f614:	20003e90 	.word	0x20003e90

0800f618 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f618:	4b20      	ldr	r3, [pc, #128]	@ (800f69c <vTaskSwitchContext+0x84>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	b11b      	cbz	r3, 800f626 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800f61e:	4b20      	ldr	r3, [pc, #128]	@ (800f6a0 <vTaskSwitchContext+0x88>)
 800f620:	2201      	movs	r2, #1
 800f622:	601a      	str	r2, [r3, #0]
 800f624:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800f626:	4b1e      	ldr	r3, [pc, #120]	@ (800f6a0 <vTaskSwitchContext+0x88>)
 800f628:	2200      	movs	r2, #0
 800f62a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f62c:	4b1d      	ldr	r3, [pc, #116]	@ (800f6a4 <vTaskSwitchContext+0x8c>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800f634:	008a      	lsls	r2, r1, #2
 800f636:	491c      	ldr	r1, [pc, #112]	@ (800f6a8 <vTaskSwitchContext+0x90>)
 800f638:	588a      	ldr	r2, [r1, r2]
 800f63a:	b95a      	cbnz	r2, 800f654 <vTaskSwitchContext+0x3c>
 800f63c:	b10b      	cbz	r3, 800f642 <vTaskSwitchContext+0x2a>
 800f63e:	3b01      	subs	r3, #1
 800f640:	e7f6      	b.n	800f630 <vTaskSwitchContext+0x18>
 800f642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f646:	f383 8811 	msr	BASEPRI, r3
 800f64a:	f3bf 8f6f 	isb	sy
 800f64e:	f3bf 8f4f 	dsb	sy
 800f652:	e7fe      	b.n	800f652 <vTaskSwitchContext+0x3a>
 800f654:	4608      	mov	r0, r1
 800f656:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800f65a:	008a      	lsls	r2, r1, #2
 800f65c:	4402      	add	r2, r0
 800f65e:	6851      	ldr	r1, [r2, #4]
 800f660:	6849      	ldr	r1, [r1, #4]
 800f662:	6051      	str	r1, [r2, #4]
 800f664:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800f668:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800f66c:	3208      	adds	r2, #8
 800f66e:	4402      	add	r2, r0
 800f670:	4291      	cmp	r1, r2
 800f672:	d00b      	beq.n	800f68c <vTaskSwitchContext+0x74>
 800f674:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800f678:	0091      	lsls	r1, r2, #2
 800f67a:	4a0b      	ldr	r2, [pc, #44]	@ (800f6a8 <vTaskSwitchContext+0x90>)
 800f67c:	440a      	add	r2, r1
 800f67e:	6852      	ldr	r2, [r2, #4]
 800f680:	68d1      	ldr	r1, [r2, #12]
 800f682:	4a0a      	ldr	r2, [pc, #40]	@ (800f6ac <vTaskSwitchContext+0x94>)
 800f684:	6011      	str	r1, [r2, #0]
 800f686:	4a07      	ldr	r2, [pc, #28]	@ (800f6a4 <vTaskSwitchContext+0x8c>)
 800f688:	6013      	str	r3, [r2, #0]
}
 800f68a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f68c:	6848      	ldr	r0, [r1, #4]
 800f68e:	4662      	mov	r2, ip
 800f690:	0091      	lsls	r1, r2, #2
 800f692:	4a05      	ldr	r2, [pc, #20]	@ (800f6a8 <vTaskSwitchContext+0x90>)
 800f694:	440a      	add	r2, r1
 800f696:	6050      	str	r0, [r2, #4]
 800f698:	e7ec      	b.n	800f674 <vTaskSwitchContext+0x5c>
 800f69a:	bf00      	nop
 800f69c:	20003e90 	.word	0x20003e90
 800f6a0:	20003ea4 	.word	0x20003ea4
 800f6a4:	20003eb0 	.word	0x20003eb0
 800f6a8:	20003f2c 	.word	0x20003f2c
 800f6ac:	2000438c 	.word	0x2000438c

0800f6b0 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800f6b0:	b158      	cbz	r0, 800f6ca <vTaskPlaceOnEventList+0x1a>
{
 800f6b2:	b510      	push	{r4, lr}
 800f6b4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f6b6:	4a09      	ldr	r2, [pc, #36]	@ (800f6dc <vTaskPlaceOnEventList+0x2c>)
 800f6b8:	6811      	ldr	r1, [r2, #0]
 800f6ba:	3118      	adds	r1, #24
 800f6bc:	f7fa fdb7 	bl	800a22e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f6c0:	2101      	movs	r1, #1
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f7ff fd6c 	bl	800f1a0 <prvAddCurrentTaskToDelayedList>
}
 800f6c8:	bd10      	pop	{r4, pc}
 800f6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6ce:	f383 8811 	msr	BASEPRI, r3
 800f6d2:	f3bf 8f6f 	isb	sy
 800f6d6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800f6da:	e7fe      	b.n	800f6da <vTaskPlaceOnEventList+0x2a>
 800f6dc:	2000438c 	.word	0x2000438c

0800f6e0 <vTaskPlaceOnEventListRestricted>:
	{
 800f6e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800f6e2:	b170      	cbz	r0, 800f702 <vTaskPlaceOnEventListRestricted+0x22>
 800f6e4:	460d      	mov	r5, r1
 800f6e6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f6e8:	4a0a      	ldr	r2, [pc, #40]	@ (800f714 <vTaskPlaceOnEventListRestricted+0x34>)
 800f6ea:	6811      	ldr	r1, [r2, #0]
 800f6ec:	3118      	adds	r1, #24
 800f6ee:	f7fa fd93 	bl	800a218 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800f6f2:	b10c      	cbz	r4, 800f6f8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800f6f4:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f6f8:	4621      	mov	r1, r4
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f7ff fd50 	bl	800f1a0 <prvAddCurrentTaskToDelayedList>
	}
 800f700:	bd38      	pop	{r3, r4, r5, pc}
 800f702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f706:	f383 8811 	msr	BASEPRI, r3
 800f70a:	f3bf 8f6f 	isb	sy
 800f70e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800f712:	e7fe      	b.n	800f712 <vTaskPlaceOnEventListRestricted+0x32>
 800f714:	2000438c 	.word	0x2000438c

0800f718 <xTaskRemoveFromEventList>:
{
 800f718:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f71a:	68c3      	ldr	r3, [r0, #12]
 800f71c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f71e:	b324      	cbz	r4, 800f76a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f720:	f104 0518 	add.w	r5, r4, #24
 800f724:	4628      	mov	r0, r5
 800f726:	f7fa fd9b 	bl	800a260 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f72a:	4b18      	ldr	r3, [pc, #96]	@ (800f78c <xTaskRemoveFromEventList+0x74>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	bb2b      	cbnz	r3, 800f77c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f730:	1d25      	adds	r5, r4, #4
 800f732:	4628      	mov	r0, r5
 800f734:	f7fa fd94 	bl	800a260 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f738:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f73a:	4b15      	ldr	r3, [pc, #84]	@ (800f790 <xTaskRemoveFromEventList+0x78>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	4298      	cmp	r0, r3
 800f740:	d901      	bls.n	800f746 <xTaskRemoveFromEventList+0x2e>
 800f742:	4b13      	ldr	r3, [pc, #76]	@ (800f790 <xTaskRemoveFromEventList+0x78>)
 800f744:	6018      	str	r0, [r3, #0]
 800f746:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f74a:	4629      	mov	r1, r5
 800f74c:	4b11      	ldr	r3, [pc, #68]	@ (800f794 <xTaskRemoveFromEventList+0x7c>)
 800f74e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f752:	f7fa fd61 	bl	800a218 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f756:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f758:	4b0f      	ldr	r3, [pc, #60]	@ (800f798 <xTaskRemoveFromEventList+0x80>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f75e:	429a      	cmp	r2, r3
 800f760:	d911      	bls.n	800f786 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800f762:	2001      	movs	r0, #1
 800f764:	4b0d      	ldr	r3, [pc, #52]	@ (800f79c <xTaskRemoveFromEventList+0x84>)
 800f766:	6018      	str	r0, [r3, #0]
}
 800f768:	bd38      	pop	{r3, r4, r5, pc}
 800f76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f76e:	f383 8811 	msr	BASEPRI, r3
 800f772:	f3bf 8f6f 	isb	sy
 800f776:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800f77a:	e7fe      	b.n	800f77a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f77c:	4629      	mov	r1, r5
 800f77e:	4808      	ldr	r0, [pc, #32]	@ (800f7a0 <xTaskRemoveFromEventList+0x88>)
 800f780:	f7fa fd4a 	bl	800a218 <vListInsertEnd>
 800f784:	e7e7      	b.n	800f756 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800f786:	2000      	movs	r0, #0
	return xReturn;
 800f788:	e7ee      	b.n	800f768 <xTaskRemoveFromEventList+0x50>
 800f78a:	bf00      	nop
 800f78c:	20003e90 	.word	0x20003e90
 800f790:	20003eb0 	.word	0x20003eb0
 800f794:	20003f2c 	.word	0x20003f2c
 800f798:	2000438c 	.word	0x2000438c
 800f79c:	20003ea4 	.word	0x20003ea4
 800f7a0:	20003ee8 	.word	0x20003ee8

0800f7a4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f7a4:	4b03      	ldr	r3, [pc, #12]	@ (800f7b4 <vTaskInternalSetTimeOutState+0x10>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f7aa:	4b03      	ldr	r3, [pc, #12]	@ (800f7b8 <vTaskInternalSetTimeOutState+0x14>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	6043      	str	r3, [r0, #4]
}
 800f7b0:	4770      	bx	lr
 800f7b2:	bf00      	nop
 800f7b4:	20003ea0 	.word	0x20003ea0
 800f7b8:	20003eb4 	.word	0x20003eb4

0800f7bc <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800f7bc:	b1e0      	cbz	r0, 800f7f8 <xTaskCheckForTimeOut+0x3c>
{
 800f7be:	b570      	push	{r4, r5, r6, lr}
 800f7c0:	460c      	mov	r4, r1
 800f7c2:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800f7c4:	b309      	cbz	r1, 800f80a <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800f7c6:	f7fb f835 	bl	800a834 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f7ca:	4b1c      	ldr	r3, [pc, #112]	@ (800f83c <xTaskCheckForTimeOut+0x80>)
 800f7cc:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7ce:	686b      	ldr	r3, [r5, #4]
 800f7d0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800f7d2:	6822      	ldr	r2, [r4, #0]
 800f7d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f7d8:	d028      	beq.n	800f82c <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7da:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800f840 <xTaskCheckForTimeOut+0x84>
 800f7de:	f8dc c000 	ldr.w	ip, [ip]
 800f7e2:	682e      	ldr	r6, [r5, #0]
 800f7e4:	4566      	cmp	r6, ip
 800f7e6:	d001      	beq.n	800f7ec <xTaskCheckForTimeOut+0x30>
 800f7e8:	428b      	cmp	r3, r1
 800f7ea:	d924      	bls.n	800f836 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f7ec:	4282      	cmp	r2, r0
 800f7ee:	d815      	bhi.n	800f81c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800f7f4:	2401      	movs	r4, #1
 800f7f6:	e01a      	b.n	800f82e <xTaskCheckForTimeOut+0x72>
 800f7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7fc:	f383 8811 	msr	BASEPRI, r3
 800f800:	f3bf 8f6f 	isb	sy
 800f804:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800f808:	e7fe      	b.n	800f808 <xTaskCheckForTimeOut+0x4c>
 800f80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80e:	f383 8811 	msr	BASEPRI, r3
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800f81a:	e7fe      	b.n	800f81a <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 800f81c:	1a5b      	subs	r3, r3, r1
 800f81e:	4413      	add	r3, r2
 800f820:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f822:	4628      	mov	r0, r5
 800f824:	f7ff ffbe 	bl	800f7a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f828:	2400      	movs	r4, #0
 800f82a:	e000      	b.n	800f82e <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 800f82c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f82e:	f7fb f823 	bl	800a878 <vPortExitCritical>
}
 800f832:	4620      	mov	r0, r4
 800f834:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800f836:	2401      	movs	r4, #1
 800f838:	e7f9      	b.n	800f82e <xTaskCheckForTimeOut+0x72>
 800f83a:	bf00      	nop
 800f83c:	20003eb4 	.word	0x20003eb4
 800f840:	20003ea0 	.word	0x20003ea0

0800f844 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f844:	4b01      	ldr	r3, [pc, #4]	@ (800f84c <vTaskMissedYield+0x8>)
 800f846:	2201      	movs	r2, #1
 800f848:	601a      	str	r2, [r3, #0]
}
 800f84a:	4770      	bx	lr
 800f84c:	20003ea4 	.word	0x20003ea4

0800f850 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800f850:	4b01      	ldr	r3, [pc, #4]	@ (800f858 <xTaskGetCurrentTaskHandle+0x8>)
 800f852:	6818      	ldr	r0, [r3, #0]
	}
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	2000438c 	.word	0x2000438c

0800f85c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f85c:	4b05      	ldr	r3, [pc, #20]	@ (800f874 <xTaskGetSchedulerState+0x18>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	b133      	cbz	r3, 800f870 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f862:	4b05      	ldr	r3, [pc, #20]	@ (800f878 <xTaskGetSchedulerState+0x1c>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	b10b      	cbz	r3, 800f86c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800f868:	2000      	movs	r0, #0
	}
 800f86a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800f86c:	2002      	movs	r0, #2
 800f86e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f870:	2001      	movs	r0, #1
 800f872:	4770      	bx	lr
 800f874:	20003eac 	.word	0x20003eac
 800f878:	20003e90 	.word	0x20003e90

0800f87c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800f87c:	2800      	cmp	r0, #0
 800f87e:	d03e      	beq.n	800f8fe <xTaskPriorityInherit+0x82>
	{
 800f880:	b538      	push	{r3, r4, r5, lr}
 800f882:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f884:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800f886:	4a20      	ldr	r2, [pc, #128]	@ (800f908 <xTaskPriorityInherit+0x8c>)
 800f888:	6812      	ldr	r2, [r2, #0]
 800f88a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d22e      	bcs.n	800f8ee <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f890:	6982      	ldr	r2, [r0, #24]
 800f892:	2a00      	cmp	r2, #0
 800f894:	db05      	blt.n	800f8a2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f896:	4a1c      	ldr	r2, [pc, #112]	@ (800f908 <xTaskPriorityInherit+0x8c>)
 800f898:	6812      	ldr	r2, [r2, #0]
 800f89a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f89c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800f8a0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f8a2:	6961      	ldr	r1, [r4, #20]
 800f8a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f8a8:	4a18      	ldr	r2, [pc, #96]	@ (800f90c <xTaskPriorityInherit+0x90>)
 800f8aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8ae:	4299      	cmp	r1, r3
 800f8b0:	d005      	beq.n	800f8be <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f8b2:	4b15      	ldr	r3, [pc, #84]	@ (800f908 <xTaskPriorityInherit+0x8c>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800f8ba:	2001      	movs	r0, #1
	}
 800f8bc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8be:	1d25      	adds	r5, r4, #4
 800f8c0:	4628      	mov	r0, r5
 800f8c2:	f7fa fccd 	bl	800a260 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f8c6:	4b10      	ldr	r3, [pc, #64]	@ (800f908 <xTaskPriorityInherit+0x8c>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800f8cc:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f8ce:	4b10      	ldr	r3, [pc, #64]	@ (800f910 <xTaskPriorityInherit+0x94>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	4298      	cmp	r0, r3
 800f8d4:	d901      	bls.n	800f8da <xTaskPriorityInherit+0x5e>
 800f8d6:	4b0e      	ldr	r3, [pc, #56]	@ (800f910 <xTaskPriorityInherit+0x94>)
 800f8d8:	6018      	str	r0, [r3, #0]
 800f8da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f8de:	4629      	mov	r1, r5
 800f8e0:	4b0a      	ldr	r3, [pc, #40]	@ (800f90c <xTaskPriorityInherit+0x90>)
 800f8e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f8e6:	f7fa fc97 	bl	800a218 <vListInsertEnd>
				xReturn = pdTRUE;
 800f8ea:	2001      	movs	r0, #1
 800f8ec:	e7e6      	b.n	800f8bc <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f8ee:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800f8f0:	4b05      	ldr	r3, [pc, #20]	@ (800f908 <xTaskPriorityInherit+0x8c>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d303      	bcc.n	800f902 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	e7de      	b.n	800f8bc <xTaskPriorityInherit+0x40>
 800f8fe:	2000      	movs	r0, #0
	}
 800f900:	4770      	bx	lr
					xReturn = pdTRUE;
 800f902:	2001      	movs	r0, #1
		return xReturn;
 800f904:	e7da      	b.n	800f8bc <xTaskPriorityInherit+0x40>
 800f906:	bf00      	nop
 800f908:	2000438c 	.word	0x2000438c
 800f90c:	20003f2c 	.word	0x20003f2c
 800f910:	20003eb0 	.word	0x20003eb0

0800f914 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800f914:	2800      	cmp	r0, #0
 800f916:	d03b      	beq.n	800f990 <xTaskPriorityDisinherit+0x7c>
	{
 800f918:	b538      	push	{r3, r4, r5, lr}
 800f91a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800f91c:	4b1e      	ldr	r3, [pc, #120]	@ (800f998 <xTaskPriorityDisinherit+0x84>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	4283      	cmp	r3, r0
 800f922:	d008      	beq.n	800f936 <xTaskPriorityDisinherit+0x22>
 800f924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f928:	f383 8811 	msr	BASEPRI, r3
 800f92c:	f3bf 8f6f 	isb	sy
 800f930:	f3bf 8f4f 	dsb	sy
 800f934:	e7fe      	b.n	800f934 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800f936:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800f938:	b943      	cbnz	r3, 800f94c <xTaskPriorityDisinherit+0x38>
 800f93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f93e:	f383 8811 	msr	BASEPRI, r3
 800f942:	f3bf 8f6f 	isb	sy
 800f946:	f3bf 8f4f 	dsb	sy
 800f94a:	e7fe      	b.n	800f94a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800f94c:	3b01      	subs	r3, #1
 800f94e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f950:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800f952:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800f954:	4291      	cmp	r1, r2
 800f956:	d01d      	beq.n	800f994 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f958:	b10b      	cbz	r3, 800f95e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800f95a:	2000      	movs	r0, #0
	}
 800f95c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f95e:	1d05      	adds	r5, r0, #4
 800f960:	4628      	mov	r0, r5
 800f962:	f7fa fc7d 	bl	800a260 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f966:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800f968:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f96a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800f96e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f970:	4b0a      	ldr	r3, [pc, #40]	@ (800f99c <xTaskPriorityDisinherit+0x88>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4298      	cmp	r0, r3
 800f976:	d901      	bls.n	800f97c <xTaskPriorityDisinherit+0x68>
 800f978:	4b08      	ldr	r3, [pc, #32]	@ (800f99c <xTaskPriorityDisinherit+0x88>)
 800f97a:	6018      	str	r0, [r3, #0]
 800f97c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f980:	4629      	mov	r1, r5
 800f982:	4b07      	ldr	r3, [pc, #28]	@ (800f9a0 <xTaskPriorityDisinherit+0x8c>)
 800f984:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f988:	f7fa fc46 	bl	800a218 <vListInsertEnd>
					xReturn = pdTRUE;
 800f98c:	2001      	movs	r0, #1
 800f98e:	e7e5      	b.n	800f95c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800f990:	2000      	movs	r0, #0
	}
 800f992:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800f994:	2000      	movs	r0, #0
 800f996:	e7e1      	b.n	800f95c <xTaskPriorityDisinherit+0x48>
 800f998:	2000438c 	.word	0x2000438c
 800f99c:	20003eb0 	.word	0x20003eb0
 800f9a0:	20003f2c 	.word	0x20003f2c

0800f9a4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800f9a4:	2800      	cmp	r0, #0
 800f9a6:	d046      	beq.n	800fa36 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800f9a8:	b538      	push	{r3, r4, r5, lr}
 800f9aa:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800f9ac:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800f9ae:	b943      	cbnz	r3, 800f9c2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800f9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b4:	f383 8811 	msr	BASEPRI, r3
 800f9b8:	f3bf 8f6f 	isb	sy
 800f9bc:	f3bf 8f4f 	dsb	sy
 800f9c0:	e7fe      	b.n	800f9c0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f9c2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800f9c4:	428a      	cmp	r2, r1
 800f9c6:	d200      	bcs.n	800f9ca <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f9c8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f9ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f9cc:	4291      	cmp	r1, r2
 800f9ce:	d001      	beq.n	800f9d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d000      	beq.n	800f9d6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800f9d4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800f9d6:	4b18      	ldr	r3, [pc, #96]	@ (800fa38 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	42a3      	cmp	r3, r4
 800f9dc:	d022      	beq.n	800fa24 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800f9de:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f9e0:	69a3      	ldr	r3, [r4, #24]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	db02      	blt.n	800f9ec <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9e6:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800f9ea:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f9ec:	6962      	ldr	r2, [r4, #20]
 800f9ee:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f9f2:	4b12      	ldr	r3, [pc, #72]	@ (800fa3c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800f9f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d1eb      	bne.n	800f9d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f9fc:	1d25      	adds	r5, r4, #4
 800f9fe:	4628      	mov	r0, r5
 800fa00:	f7fa fc2e 	bl	800a260 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800fa04:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fa06:	4b0e      	ldr	r3, [pc, #56]	@ (800fa40 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4298      	cmp	r0, r3
 800fa0c:	d901      	bls.n	800fa12 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800fa0e:	4b0c      	ldr	r3, [pc, #48]	@ (800fa40 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800fa10:	6018      	str	r0, [r3, #0]
 800fa12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800fa16:	4629      	mov	r1, r5
 800fa18:	4b08      	ldr	r3, [pc, #32]	@ (800fa3c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800fa1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fa1e:	f7fa fbfb 	bl	800a218 <vListInsertEnd>
	}
 800fa22:	e7d7      	b.n	800f9d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800fa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa28:	f383 8811 	msr	BASEPRI, r3
 800fa2c:	f3bf 8f6f 	isb	sy
 800fa30:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800fa34:	e7fe      	b.n	800fa34 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800fa36:	4770      	bx	lr
 800fa38:	2000438c 	.word	0x2000438c
 800fa3c:	20003f2c 	.word	0x20003f2c
 800fa40:	20003eb0 	.word	0x20003eb0

0800fa44 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800fa44:	4b05      	ldr	r3, [pc, #20]	@ (800fa5c <pvTaskIncrementMutexHeldCount+0x18>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	b123      	cbz	r3, 800fa54 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800fa4a:	4b04      	ldr	r3, [pc, #16]	@ (800fa5c <pvTaskIncrementMutexHeldCount+0x18>)
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800fa50:	3301      	adds	r3, #1
 800fa52:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800fa54:	4b01      	ldr	r3, [pc, #4]	@ (800fa5c <pvTaskIncrementMutexHeldCount+0x18>)
 800fa56:	6818      	ldr	r0, [r3, #0]
	}
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	2000438c 	.word	0x2000438c

0800fa60 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa60:	4b06      	ldr	r3, [pc, #24]	@ (800fa7c <prvGetNextExpireTime+0x1c>)
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	6813      	ldr	r3, [r2, #0]
 800fa66:	b92b      	cbnz	r3, 800fa74 <prvGetNextExpireTime+0x14>
 800fa68:	2301      	movs	r3, #1
 800fa6a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fa6c:	b923      	cbnz	r3, 800fa78 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fa6e:	68d3      	ldr	r3, [r2, #12]
 800fa70:	6818      	ldr	r0, [r3, #0]
 800fa72:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa74:	2300      	movs	r3, #0
 800fa76:	e7f8      	b.n	800fa6a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fa78:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800fa7a:	4770      	bx	lr
 800fa7c:	20004490 	.word	0x20004490

0800fa80 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fa80:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fa82:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fa84:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fa86:	4291      	cmp	r1, r2
 800fa88:	d80c      	bhi.n	800faa4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa8a:	1ad2      	subs	r2, r2, r3
 800fa8c:	6983      	ldr	r3, [r0, #24]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d301      	bcc.n	800fa96 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fa92:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800fa94:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fa96:	1d01      	adds	r1, r0, #4
 800fa98:	4b09      	ldr	r3, [pc, #36]	@ (800fac0 <prvInsertTimerInActiveList+0x40>)
 800fa9a:	6818      	ldr	r0, [r3, #0]
 800fa9c:	f7fa fbc7 	bl	800a22e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800faa0:	2000      	movs	r0, #0
 800faa2:	e7f7      	b.n	800fa94 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d201      	bcs.n	800faac <prvInsertTimerInActiveList+0x2c>
 800faa8:	4299      	cmp	r1, r3
 800faaa:	d206      	bcs.n	800faba <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800faac:	1d01      	adds	r1, r0, #4
 800faae:	4b05      	ldr	r3, [pc, #20]	@ (800fac4 <prvInsertTimerInActiveList+0x44>)
 800fab0:	6818      	ldr	r0, [r3, #0]
 800fab2:	f7fa fbbc 	bl	800a22e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fab6:	2000      	movs	r0, #0
 800fab8:	e7ec      	b.n	800fa94 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800faba:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800fabc:	e7ea      	b.n	800fa94 <prvInsertTimerInActiveList+0x14>
 800fabe:	bf00      	nop
 800fac0:	2000448c 	.word	0x2000448c
 800fac4:	20004490 	.word	0x20004490

0800fac8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fac8:	b530      	push	{r4, r5, lr}
 800faca:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800facc:	f7fa feb2 	bl	800a834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fad0:	4b11      	ldr	r3, [pc, #68]	@ (800fb18 <prvCheckForValidListAndQueue+0x50>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	b11b      	cbz	r3, 800fade <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fad6:	f7fa fecf 	bl	800a878 <vPortExitCritical>
}
 800fada:	b003      	add	sp, #12
 800fadc:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800fade:	4d0f      	ldr	r5, [pc, #60]	@ (800fb1c <prvCheckForValidListAndQueue+0x54>)
 800fae0:	4628      	mov	r0, r5
 800fae2:	f7fa fb8b 	bl	800a1fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fae6:	4c0e      	ldr	r4, [pc, #56]	@ (800fb20 <prvCheckForValidListAndQueue+0x58>)
 800fae8:	4620      	mov	r0, r4
 800faea:	f7fa fb87 	bl	800a1fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800faee:	4b0d      	ldr	r3, [pc, #52]	@ (800fb24 <prvCheckForValidListAndQueue+0x5c>)
 800faf0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800faf2:	4b0d      	ldr	r3, [pc, #52]	@ (800fb28 <prvCheckForValidListAndQueue+0x60>)
 800faf4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800faf6:	2300      	movs	r3, #0
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	4b0c      	ldr	r3, [pc, #48]	@ (800fb2c <prvCheckForValidListAndQueue+0x64>)
 800fafc:	4a0c      	ldr	r2, [pc, #48]	@ (800fb30 <prvCheckForValidListAndQueue+0x68>)
 800fafe:	2110      	movs	r1, #16
 800fb00:	200a      	movs	r0, #10
 800fb02:	f7fb f8e6 	bl	800acd2 <xQueueGenericCreateStatic>
 800fb06:	4b04      	ldr	r3, [pc, #16]	@ (800fb18 <prvCheckForValidListAndQueue+0x50>)
 800fb08:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d0e3      	beq.n	800fad6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fb0e:	4909      	ldr	r1, [pc, #36]	@ (800fb34 <prvCheckForValidListAndQueue+0x6c>)
 800fb10:	f7fb fd52 	bl	800b5b8 <vQueueAddToRegistry>
 800fb14:	e7df      	b.n	800fad6 <prvCheckForValidListAndQueue+0xe>
 800fb16:	bf00      	nop
 800fb18:	20004488 	.word	0x20004488
 800fb1c:	200044a8 	.word	0x200044a8
 800fb20:	20004494 	.word	0x20004494
 800fb24:	20004490 	.word	0x20004490
 800fb28:	2000448c 	.word	0x2000448c
 800fb2c:	20004390 	.word	0x20004390
 800fb30:	200043e0 	.word	0x200043e0
 800fb34:	080102ec 	.word	0x080102ec

0800fb38 <xTimerCreateTimerTask>:
{
 800fb38:	b510      	push	{r4, lr}
 800fb3a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800fb3c:	f7ff ffc4 	bl	800fac8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fb40:	4b12      	ldr	r3, [pc, #72]	@ (800fb8c <xTimerCreateTimerTask+0x54>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	b1cb      	cbz	r3, 800fb7a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fb46:	2400      	movs	r4, #0
 800fb48:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fb4a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fb4c:	aa07      	add	r2, sp, #28
 800fb4e:	a906      	add	r1, sp, #24
 800fb50:	a805      	add	r0, sp, #20
 800fb52:	f7f9 ff4b 	bl	80099ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fb56:	9b05      	ldr	r3, [sp, #20]
 800fb58:	9302      	str	r3, [sp, #8]
 800fb5a:	9b06      	ldr	r3, [sp, #24]
 800fb5c:	9301      	str	r3, [sp, #4]
 800fb5e:	2302      	movs	r3, #2
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	4623      	mov	r3, r4
 800fb64:	9a07      	ldr	r2, [sp, #28]
 800fb66:	490a      	ldr	r1, [pc, #40]	@ (800fb90 <xTimerCreateTimerTask+0x58>)
 800fb68:	480a      	ldr	r0, [pc, #40]	@ (800fb94 <xTimerCreateTimerTask+0x5c>)
 800fb6a:	f7ff fb57 	bl	800f21c <xTaskCreateStatic>
 800fb6e:	4b0a      	ldr	r3, [pc, #40]	@ (800fb98 <xTimerCreateTimerTask+0x60>)
 800fb70:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800fb72:	b110      	cbz	r0, 800fb7a <xTimerCreateTimerTask+0x42>
}
 800fb74:	2001      	movs	r0, #1
 800fb76:	b008      	add	sp, #32
 800fb78:	bd10      	pop	{r4, pc}
 800fb7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800fb8a:	e7fe      	b.n	800fb8a <xTimerCreateTimerTask+0x52>
 800fb8c:	20004488 	.word	0x20004488
 800fb90:	080102f4 	.word	0x080102f4
 800fb94:	0800fe9d 	.word	0x0800fe9d
 800fb98:	20004484 	.word	0x20004484

0800fb9c <xTimerGenericCommand>:
	configASSERT( xTimer );
 800fb9c:	b1b8      	cbz	r0, 800fbce <xTimerGenericCommand+0x32>
 800fb9e:	469c      	mov	ip, r3
 800fba0:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800fba2:	4818      	ldr	r0, [pc, #96]	@ (800fc04 <xTimerGenericCommand+0x68>)
 800fba4:	6800      	ldr	r0, [r0, #0]
 800fba6:	b358      	cbz	r0, 800fc00 <xTimerGenericCommand+0x64>
{
 800fba8:	b500      	push	{lr}
 800fbaa:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800fbac:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fbae:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fbb0:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fbb2:	2905      	cmp	r1, #5
 800fbb4:	dc1c      	bgt.n	800fbf0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fbb6:	f7ff fe51 	bl	800f85c <xTaskGetSchedulerState>
 800fbba:	2802      	cmp	r0, #2
 800fbbc:	d010      	beq.n	800fbe0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	4669      	mov	r1, sp
 800fbc4:	480f      	ldr	r0, [pc, #60]	@ (800fc04 <xTimerGenericCommand+0x68>)
 800fbc6:	6800      	ldr	r0, [r0, #0]
 800fbc8:	f7fb f932 	bl	800ae30 <xQueueGenericSend>
 800fbcc:	e015      	b.n	800fbfa <xTimerGenericCommand+0x5e>
 800fbce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbd2:	f383 8811 	msr	BASEPRI, r3
 800fbd6:	f3bf 8f6f 	isb	sy
 800fbda:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800fbde:	e7fe      	b.n	800fbde <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	9a06      	ldr	r2, [sp, #24]
 800fbe4:	4669      	mov	r1, sp
 800fbe6:	4807      	ldr	r0, [pc, #28]	@ (800fc04 <xTimerGenericCommand+0x68>)
 800fbe8:	6800      	ldr	r0, [r0, #0]
 800fbea:	f7fb f921 	bl	800ae30 <xQueueGenericSend>
 800fbee:	e004      	b.n	800fbfa <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	4662      	mov	r2, ip
 800fbf4:	4669      	mov	r1, sp
 800fbf6:	f7fb fa25 	bl	800b044 <xQueueGenericSendFromISR>
}
 800fbfa:	b005      	add	sp, #20
 800fbfc:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800fc00:	2000      	movs	r0, #0
}
 800fc02:	4770      	bx	lr
 800fc04:	20004488 	.word	0x20004488

0800fc08 <prvSwitchTimerLists>:
{
 800fc08:	b570      	push	{r4, r5, r6, lr}
 800fc0a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc0c:	4b1b      	ldr	r3, [pc, #108]	@ (800fc7c <prvSwitchTimerLists+0x74>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	b362      	cbz	r2, 800fc6e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc14:	68db      	ldr	r3, [r3, #12]
 800fc16:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc18:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc1a:	1d25      	adds	r5, r4, #4
 800fc1c:	4628      	mov	r0, r5
 800fc1e:	f7fa fb1f 	bl	800a260 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc22:	6a23      	ldr	r3, [r4, #32]
 800fc24:	4620      	mov	r0, r4
 800fc26:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fc28:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fc2c:	f013 0f04 	tst.w	r3, #4
 800fc30:	d0ec      	beq.n	800fc0c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fc32:	69a3      	ldr	r3, [r4, #24]
 800fc34:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800fc36:	429e      	cmp	r6, r3
 800fc38:	d207      	bcs.n	800fc4a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fc3a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fc3c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fc3e:	4629      	mov	r1, r5
 800fc40:	4b0e      	ldr	r3, [pc, #56]	@ (800fc7c <prvSwitchTimerLists+0x74>)
 800fc42:	6818      	ldr	r0, [r3, #0]
 800fc44:	f7fa faf3 	bl	800a22e <vListInsert>
 800fc48:	e7e0      	b.n	800fc0c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	9100      	str	r1, [sp, #0]
 800fc4e:	460b      	mov	r3, r1
 800fc50:	4632      	mov	r2, r6
 800fc52:	4620      	mov	r0, r4
 800fc54:	f7ff ffa2 	bl	800fb9c <xTimerGenericCommand>
				configASSERT( xResult );
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d1d7      	bne.n	800fc0c <prvSwitchTimerLists+0x4>
 800fc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc60:	f383 8811 	msr	BASEPRI, r3
 800fc64:	f3bf 8f6f 	isb	sy
 800fc68:	f3bf 8f4f 	dsb	sy
 800fc6c:	e7fe      	b.n	800fc6c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800fc6e:	4a04      	ldr	r2, [pc, #16]	@ (800fc80 <prvSwitchTimerLists+0x78>)
 800fc70:	6810      	ldr	r0, [r2, #0]
 800fc72:	4902      	ldr	r1, [pc, #8]	@ (800fc7c <prvSwitchTimerLists+0x74>)
 800fc74:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800fc76:	6013      	str	r3, [r2, #0]
}
 800fc78:	b002      	add	sp, #8
 800fc7a:	bd70      	pop	{r4, r5, r6, pc}
 800fc7c:	20004490 	.word	0x20004490
 800fc80:	2000448c 	.word	0x2000448c

0800fc84 <prvSampleTimeNow>:
{
 800fc84:	b538      	push	{r3, r4, r5, lr}
 800fc86:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800fc88:	f7ff fb8a 	bl	800f3a0 <xTaskGetTickCount>
 800fc8c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800fc8e:	4b07      	ldr	r3, [pc, #28]	@ (800fcac <prvSampleTimeNow+0x28>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4283      	cmp	r3, r0
 800fc94:	d805      	bhi.n	800fca2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800fc96:	2300      	movs	r3, #0
 800fc98:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800fc9a:	4b04      	ldr	r3, [pc, #16]	@ (800fcac <prvSampleTimeNow+0x28>)
 800fc9c:	601c      	str	r4, [r3, #0]
}
 800fc9e:	4620      	mov	r0, r4
 800fca0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800fca2:	f7ff ffb1 	bl	800fc08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fca6:	2301      	movs	r3, #1
 800fca8:	602b      	str	r3, [r5, #0]
 800fcaa:	e7f6      	b.n	800fc9a <prvSampleTimeNow+0x16>
 800fcac:	20004480 	.word	0x20004480

0800fcb0 <prvProcessExpiredTimer>:
{
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	b082      	sub	sp, #8
 800fcb4:	4606      	mov	r6, r0
 800fcb6:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fcb8:	4917      	ldr	r1, [pc, #92]	@ (800fd18 <prvProcessExpiredTimer+0x68>)
 800fcba:	6809      	ldr	r1, [r1, #0]
 800fcbc:	68c9      	ldr	r1, [r1, #12]
 800fcbe:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fcc0:	1d20      	adds	r0, r4, #4
 800fcc2:	f7fa facd 	bl	800a260 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fcc6:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800fcca:	f01c 0f04 	tst.w	ip, #4
 800fcce:	d108      	bne.n	800fce2 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fcd0:	f02c 0c01 	bic.w	ip, ip, #1
 800fcd4:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcd8:	6a23      	ldr	r3, [r4, #32]
 800fcda:	4620      	mov	r0, r4
 800fcdc:	4798      	blx	r3
}
 800fcde:	b002      	add	sp, #8
 800fce0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fce2:	69a1      	ldr	r1, [r4, #24]
 800fce4:	4633      	mov	r3, r6
 800fce6:	462a      	mov	r2, r5
 800fce8:	4431      	add	r1, r6
 800fcea:	4620      	mov	r0, r4
 800fcec:	f7ff fec8 	bl	800fa80 <prvInsertTimerInActiveList>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	d0f1      	beq.n	800fcd8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	9100      	str	r1, [sp, #0]
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4632      	mov	r2, r6
 800fcfc:	4620      	mov	r0, r4
 800fcfe:	f7ff ff4d 	bl	800fb9c <xTimerGenericCommand>
			configASSERT( xResult );
 800fd02:	2800      	cmp	r0, #0
 800fd04:	d1e8      	bne.n	800fcd8 <prvProcessExpiredTimer+0x28>
 800fd06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd0a:	f383 8811 	msr	BASEPRI, r3
 800fd0e:	f3bf 8f6f 	isb	sy
 800fd12:	f3bf 8f4f 	dsb	sy
 800fd16:	e7fe      	b.n	800fd16 <prvProcessExpiredTimer+0x66>
 800fd18:	20004490 	.word	0x20004490

0800fd1c <prvProcessTimerOrBlockTask>:
{
 800fd1c:	b570      	push	{r4, r5, r6, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	4606      	mov	r6, r0
 800fd22:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800fd24:	f7ff fb34 	bl	800f390 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd28:	a801      	add	r0, sp, #4
 800fd2a:	f7ff ffab 	bl	800fc84 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800fd2e:	9b01      	ldr	r3, [sp, #4]
 800fd30:	bb33      	cbnz	r3, 800fd80 <prvProcessTimerOrBlockTask+0x64>
 800fd32:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fd34:	b9e4      	cbnz	r4, 800fd70 <prvProcessTimerOrBlockTask+0x54>
 800fd36:	42b0      	cmp	r0, r6
 800fd38:	d213      	bcs.n	800fd62 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fd3a:	4622      	mov	r2, r4
 800fd3c:	1b71      	subs	r1, r6, r5
 800fd3e:	4b12      	ldr	r3, [pc, #72]	@ (800fd88 <prvProcessTimerOrBlockTask+0x6c>)
 800fd40:	6818      	ldr	r0, [r3, #0]
 800fd42:	f7fb fc79 	bl	800b638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd46:	f7ff fbc5 	bl	800f4d4 <xTaskResumeAll>
 800fd4a:	b9d8      	cbnz	r0, 800fd84 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800fd4c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fd50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd54:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	f3bf 8f6f 	isb	sy
 800fd60:	e010      	b.n	800fd84 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800fd62:	f7ff fbb7 	bl	800f4d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fd66:	4629      	mov	r1, r5
 800fd68:	4630      	mov	r0, r6
 800fd6a:	f7ff ffa1 	bl	800fcb0 <prvProcessExpiredTimer>
 800fd6e:	e009      	b.n	800fd84 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fd70:	4a06      	ldr	r2, [pc, #24]	@ (800fd8c <prvProcessTimerOrBlockTask+0x70>)
 800fd72:	6812      	ldr	r2, [r2, #0]
 800fd74:	6812      	ldr	r2, [r2, #0]
 800fd76:	b90a      	cbnz	r2, 800fd7c <prvProcessTimerOrBlockTask+0x60>
 800fd78:	2401      	movs	r4, #1
 800fd7a:	e7de      	b.n	800fd3a <prvProcessTimerOrBlockTask+0x1e>
 800fd7c:	461c      	mov	r4, r3
 800fd7e:	e7dc      	b.n	800fd3a <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 800fd80:	f7ff fba8 	bl	800f4d4 <xTaskResumeAll>
}
 800fd84:	b002      	add	sp, #8
 800fd86:	bd70      	pop	{r4, r5, r6, pc}
 800fd88:	20004488 	.word	0x20004488
 800fd8c:	2000448c 	.word	0x2000448c

0800fd90 <prvProcessReceivedCommands>:
{
 800fd90:	b510      	push	{r4, lr}
 800fd92:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd94:	e002      	b.n	800fd9c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd96:	9b04      	ldr	r3, [sp, #16]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	da0f      	bge.n	800fdbc <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	a904      	add	r1, sp, #16
 800fda0:	4b3d      	ldr	r3, [pc, #244]	@ (800fe98 <prvProcessReceivedCommands+0x108>)
 800fda2:	6818      	ldr	r0, [r3, #0]
 800fda4:	f7fb fa0e 	bl	800b1c4 <xQueueReceive>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d072      	beq.n	800fe92 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fdac:	9b04      	ldr	r3, [sp, #16]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	daf1      	bge.n	800fd96 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fdb2:	9907      	ldr	r1, [sp, #28]
 800fdb4:	9806      	ldr	r0, [sp, #24]
 800fdb6:	9b05      	ldr	r3, [sp, #20]
 800fdb8:	4798      	blx	r3
 800fdba:	e7ec      	b.n	800fd96 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fdbc:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fdbe:	6963      	ldr	r3, [r4, #20]
 800fdc0:	b113      	cbz	r3, 800fdc8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdc2:	1d20      	adds	r0, r4, #4
 800fdc4:	f7fa fa4c 	bl	800a260 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fdc8:	a803      	add	r0, sp, #12
 800fdca:	f7ff ff5b 	bl	800fc84 <prvSampleTimeNow>
 800fdce:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800fdd0:	9b04      	ldr	r3, [sp, #16]
 800fdd2:	2b09      	cmp	r3, #9
 800fdd4:	d8e2      	bhi.n	800fd9c <prvProcessReceivedCommands+0xc>
 800fdd6:	e8df f003 	tbb	[pc, r3]
 800fdda:	0505      	.short	0x0505
 800fddc:	4e362f05 	.word	0x4e362f05
 800fde0:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fde4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fde8:	f043 0301 	orr.w	r3, r3, #1
 800fdec:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fdf0:	9b05      	ldr	r3, [sp, #20]
 800fdf2:	69a1      	ldr	r1, [r4, #24]
 800fdf4:	4419      	add	r1, r3
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	f7ff fe42 	bl	800fa80 <prvInsertTimerInActiveList>
 800fdfc:	2800      	cmp	r0, #0
 800fdfe:	d0cd      	beq.n	800fd9c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe00:	6a23      	ldr	r3, [r4, #32]
 800fe02:	4620      	mov	r0, r4
 800fe04:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe06:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fe0a:	f013 0f04 	tst.w	r3, #4
 800fe0e:	d0c5      	beq.n	800fd9c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe10:	69a2      	ldr	r2, [r4, #24]
 800fe12:	2100      	movs	r1, #0
 800fe14:	9100      	str	r1, [sp, #0]
 800fe16:	460b      	mov	r3, r1
 800fe18:	9805      	ldr	r0, [sp, #20]
 800fe1a:	4402      	add	r2, r0
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	f7ff febd 	bl	800fb9c <xTimerGenericCommand>
							configASSERT( xResult );
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d1ba      	bne.n	800fd9c <prvProcessReceivedCommands+0xc>
 800fe26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe2a:	f383 8811 	msr	BASEPRI, r3
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	f3bf 8f4f 	dsb	sy
 800fe36:	e7fe      	b.n	800fe36 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe38:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fe3c:	f023 0301 	bic.w	r3, r3, #1
 800fe40:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800fe44:	e7aa      	b.n	800fd9c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe46:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fe4a:	f043 0301 	orr.w	r3, r3, #1
 800fe4e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe52:	9905      	ldr	r1, [sp, #20]
 800fe54:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe56:	b129      	cbz	r1, 800fe64 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe58:	4603      	mov	r3, r0
 800fe5a:	4401      	add	r1, r0
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	f7ff fe0f 	bl	800fa80 <prvInsertTimerInActiveList>
					break;
 800fe62:	e79b      	b.n	800fd9c <prvProcessReceivedCommands+0xc>
 800fe64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe68:	f383 8811 	msr	BASEPRI, r3
 800fe6c:	f3bf 8f6f 	isb	sy
 800fe70:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe74:	e7fe      	b.n	800fe74 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fe76:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fe7a:	f013 0f02 	tst.w	r3, #2
 800fe7e:	d004      	beq.n	800fe8a <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe80:	f023 0301 	bic.w	r3, r3, #1
 800fe84:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800fe88:	e788      	b.n	800fd9c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f7fa f96c 	bl	800a168 <vPortFree>
 800fe90:	e784      	b.n	800fd9c <prvProcessReceivedCommands+0xc>
}
 800fe92:	b008      	add	sp, #32
 800fe94:	bd10      	pop	{r4, pc}
 800fe96:	bf00      	nop
 800fe98:	20004488 	.word	0x20004488

0800fe9c <prvTimerTask>:
{
 800fe9c:	b500      	push	{lr}
 800fe9e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fea0:	a801      	add	r0, sp, #4
 800fea2:	f7ff fddd 	bl	800fa60 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fea6:	9901      	ldr	r1, [sp, #4]
 800fea8:	f7ff ff38 	bl	800fd1c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800feac:	f7ff ff70 	bl	800fd90 <prvProcessReceivedCommands>
	for( ;; )
 800feb0:	e7f6      	b.n	800fea0 <prvTimerTask+0x4>
	...

0800feb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800feb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800feec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800feb8:	f7ff f804 	bl	800eec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800febc:	480c      	ldr	r0, [pc, #48]	@ (800fef0 <LoopForever+0x6>)
  ldr r1, =_edata
 800febe:	490d      	ldr	r1, [pc, #52]	@ (800fef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800fec0:	4a0d      	ldr	r2, [pc, #52]	@ (800fef8 <LoopForever+0xe>)
  movs r3, #0
 800fec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fec4:	e002      	b.n	800fecc <LoopCopyDataInit>

0800fec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800feca:	3304      	adds	r3, #4

0800fecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fed0:	d3f9      	bcc.n	800fec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fed2:	4a0a      	ldr	r2, [pc, #40]	@ (800fefc <LoopForever+0x12>)
  ldr r4, =_ebss
 800fed4:	4c0a      	ldr	r4, [pc, #40]	@ (800ff00 <LoopForever+0x16>)
  movs r3, #0
 800fed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fed8:	e001      	b.n	800fede <LoopFillZerobss>

0800feda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800feda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fedc:	3204      	adds	r2, #4

0800fede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fee0:	d3fb      	bcc.n	800feda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800fee2:	f000 f81f 	bl	800ff24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800fee6:	f7fa fb85 	bl	800a5f4 <main>

0800feea <LoopForever>:

LoopForever:
    b LoopForever
 800feea:	e7fe      	b.n	800feea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800feec:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800fef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800fef4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800fef8:	080104a0 	.word	0x080104a0
  ldr r2, =_sbss
 800fefc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800ff00:	200045f4 	.word	0x200045f4

0800ff04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ff04:	e7fe      	b.n	800ff04 <ADC1_IRQHandler>

0800ff06 <memset>:
 800ff06:	4402      	add	r2, r0
 800ff08:	4603      	mov	r3, r0
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d100      	bne.n	800ff10 <memset+0xa>
 800ff0e:	4770      	bx	lr
 800ff10:	f803 1b01 	strb.w	r1, [r3], #1
 800ff14:	e7f9      	b.n	800ff0a <memset+0x4>
	...

0800ff18 <__errno>:
 800ff18:	4b01      	ldr	r3, [pc, #4]	@ (800ff20 <__errno+0x8>)
 800ff1a:	6818      	ldr	r0, [r3, #0]
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	20000030 	.word	0x20000030

0800ff24 <__libc_init_array>:
 800ff24:	b570      	push	{r4, r5, r6, lr}
 800ff26:	4b0d      	ldr	r3, [pc, #52]	@ (800ff5c <__libc_init_array+0x38>)
 800ff28:	4d0d      	ldr	r5, [pc, #52]	@ (800ff60 <__libc_init_array+0x3c>)
 800ff2a:	1b5b      	subs	r3, r3, r5
 800ff2c:	109c      	asrs	r4, r3, #2
 800ff2e:	2600      	movs	r6, #0
 800ff30:	42a6      	cmp	r6, r4
 800ff32:	d109      	bne.n	800ff48 <__libc_init_array+0x24>
 800ff34:	f000 f958 	bl	80101e8 <_init>
 800ff38:	4d0a      	ldr	r5, [pc, #40]	@ (800ff64 <__libc_init_array+0x40>)
 800ff3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ff68 <__libc_init_array+0x44>)
 800ff3c:	1b5b      	subs	r3, r3, r5
 800ff3e:	109c      	asrs	r4, r3, #2
 800ff40:	2600      	movs	r6, #0
 800ff42:	42a6      	cmp	r6, r4
 800ff44:	d105      	bne.n	800ff52 <__libc_init_array+0x2e>
 800ff46:	bd70      	pop	{r4, r5, r6, pc}
 800ff48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff4c:	4798      	blx	r3
 800ff4e:	3601      	adds	r6, #1
 800ff50:	e7ee      	b.n	800ff30 <__libc_init_array+0xc>
 800ff52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ff56:	4798      	blx	r3
 800ff58:	3601      	adds	r6, #1
 800ff5a:	e7f2      	b.n	800ff42 <__libc_init_array+0x1e>
 800ff5c:	08010490 	.word	0x08010490
 800ff60:	08010490 	.word	0x08010490
 800ff64:	08010490 	.word	0x08010490
 800ff68:	08010494 	.word	0x08010494

0800ff6c <memcpy>:
 800ff6c:	440a      	add	r2, r1
 800ff6e:	4291      	cmp	r1, r2
 800ff70:	f100 33ff 	add.w	r3, r0, #4294967295
 800ff74:	d100      	bne.n	800ff78 <memcpy+0xc>
 800ff76:	4770      	bx	lr
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ff7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ff82:	4291      	cmp	r1, r2
 800ff84:	d1f9      	bne.n	800ff7a <memcpy+0xe>
 800ff86:	bd10      	pop	{r4, pc}

0800ff88 <logf>:
 800ff88:	b508      	push	{r3, lr}
 800ff8a:	ed2d 8b02 	vpush	{d8}
 800ff8e:	eeb0 8a40 	vmov.f32	s16, s0
 800ff92:	f000 f82f 	bl	800fff4 <__ieee754_logf>
 800ff96:	eeb4 8a48 	vcmp.f32	s16, s16
 800ff9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9e:	d60f      	bvs.n	800ffc0 <logf+0x38>
 800ffa0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ffa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa8:	dc0a      	bgt.n	800ffc0 <logf+0x38>
 800ffaa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ffae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb2:	d108      	bne.n	800ffc6 <logf+0x3e>
 800ffb4:	f7ff ffb0 	bl	800ff18 <__errno>
 800ffb8:	2322      	movs	r3, #34	@ 0x22
 800ffba:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800ffe0 <logf+0x58>
 800ffbe:	6003      	str	r3, [r0, #0]
 800ffc0:	ecbd 8b02 	vpop	{d8}
 800ffc4:	bd08      	pop	{r3, pc}
 800ffc6:	f7ff ffa7 	bl	800ff18 <__errno>
 800ffca:	ecbd 8b02 	vpop	{d8}
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2221      	movs	r2, #33	@ 0x21
 800ffd2:	601a      	str	r2, [r3, #0]
 800ffd4:	4803      	ldr	r0, [pc, #12]	@ (800ffe4 <logf+0x5c>)
 800ffd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ffda:	f000 b805 	b.w	800ffe8 <nanf>
 800ffde:	bf00      	nop
 800ffe0:	ff800000 	.word	0xff800000
 800ffe4:	08010298 	.word	0x08010298

0800ffe8 <nanf>:
 800ffe8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fff0 <nanf+0x8>
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	7fc00000 	.word	0x7fc00000

0800fff4 <__ieee754_logf>:
 800fff4:	ee10 2a10 	vmov	r2, s0
 800fff8:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 800fffc:	d02f      	beq.n	801005e <__ieee754_logf+0x6a>
 800fffe:	2a00      	cmp	r2, #0
 8010000:	4613      	mov	r3, r2
 8010002:	db33      	blt.n	801006c <__ieee754_logf+0x78>
 8010004:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010008:	da40      	bge.n	801008c <__ieee754_logf+0x98>
 801000a:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 801000e:	db34      	blt.n	801007a <__ieee754_logf+0x86>
 8010010:	f04f 0c00 	mov.w	ip, #0
 8010014:	4864      	ldr	r0, [pc, #400]	@ (80101a8 <__ieee754_logf+0x1b4>)
 8010016:	f3c3 0116 	ubfx	r1, r3, #0, #23
 801001a:	4408      	add	r0, r1
 801001c:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 8010020:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 8010024:	430a      	orrs	r2, r1
 8010026:	15db      	asrs	r3, r3, #23
 8010028:	ee00 2a10 	vmov	s0, r2
 801002c:	3b7f      	subs	r3, #127	@ 0x7f
 801002e:	4a5f      	ldr	r2, [pc, #380]	@ (80101ac <__ieee754_logf+0x1b8>)
 8010030:	4463      	add	r3, ip
 8010032:	f101 0c0f 	add.w	ip, r1, #15
 8010036:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801003a:	ea0c 0202 	and.w	r2, ip, r2
 801003e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010042:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8010046:	bb22      	cbnz	r2, 8010092 <__ieee754_logf+0x9e>
 8010048:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801004c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010050:	d162      	bne.n	8010118 <__ieee754_logf+0x124>
 8010052:	2b00      	cmp	r3, #0
 8010054:	f040 8090 	bne.w	8010178 <__ieee754_logf+0x184>
 8010058:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 80101b0 <__ieee754_logf+0x1bc>
 801005c:	4770      	bx	lr
 801005e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80101b4 <__ieee754_logf+0x1c0>
 8010062:	eddf 7a53 	vldr	s15, [pc, #332]	@ 80101b0 <__ieee754_logf+0x1bc>
 8010066:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801006a:	4770      	bx	lr
 801006c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010070:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80101b0 <__ieee754_logf+0x1bc>
 8010074:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8010078:	4770      	bx	lr
 801007a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80101b8 <__ieee754_logf+0x1c4>
 801007e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010082:	f06f 0c18 	mvn.w	ip, #24
 8010086:	ee17 3a90 	vmov	r3, s15
 801008a:	e7c3      	b.n	8010014 <__ieee754_logf+0x20>
 801008c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010090:	4770      	bx	lr
 8010092:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010096:	ee70 7a27 	vadd.f32	s15, s0, s15
 801009a:	ee07 3a10 	vmov	s14, r3
 801009e:	ee80 4a27 	vdiv.f32	s8, s0, s15
 80100a2:	4846      	ldr	r0, [pc, #280]	@ (80101bc <__ieee754_logf+0x1c8>)
 80100a4:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 80100a8:	4408      	add	r0, r1
 80100aa:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80100ae:	4302      	orrs	r2, r0
 80100b0:	2a00      	cmp	r2, #0
 80100b2:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 80101c0 <__ieee754_logf+0x1cc>
 80100b6:	eddf 4a43 	vldr	s9, [pc, #268]	@ 80101c4 <__ieee754_logf+0x1d0>
 80100ba:	eddf 5a43 	vldr	s11, [pc, #268]	@ 80101c8 <__ieee754_logf+0x1d4>
 80100be:	eddf 3a43 	vldr	s7, [pc, #268]	@ 80101cc <__ieee754_logf+0x1d8>
 80100c2:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 80101d0 <__ieee754_logf+0x1dc>
 80100c6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80101d4 <__ieee754_logf+0x1e0>
 80100ca:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80101d8 <__ieee754_logf+0x1e4>
 80100ce:	ee24 6a04 	vmul.f32	s12, s8, s8
 80100d2:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 80100d6:	ee26 7a06 	vmul.f32	s14, s12, s12
 80100da:	eee7 4a03 	vfma.f32	s9, s14, s6
 80100de:	eea7 5a23 	vfma.f32	s10, s14, s7
 80100e2:	eee4 5a87 	vfma.f32	s11, s9, s14
 80100e6:	eee5 6a07 	vfma.f32	s13, s10, s14
 80100ea:	eee5 7a87 	vfma.f32	s15, s11, s14
 80100ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80100f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80100f6:	dd2a      	ble.n	801014e <__ieee754_logf+0x15a>
 80100f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80100fc:	ee20 7a07 	vmul.f32	s14, s0, s14
 8010100:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010104:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010108:	ee67 7a84 	vmul.f32	s15, s15, s8
 801010c:	bb3b      	cbnz	r3, 801015e <__ieee754_logf+0x16a>
 801010e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010112:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010116:	4770      	bx	lr
 8010118:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80101dc <__ieee754_logf+0x1e8>
 801011c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010120:	eee0 7a47 	vfms.f32	s15, s0, s14
 8010124:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010128:	ee27 7a27 	vmul.f32	s14, s14, s15
 801012c:	2b00      	cmp	r3, #0
 801012e:	d0f0      	beq.n	8010112 <__ieee754_logf+0x11e>
 8010130:	ee07 3a90 	vmov	s15, r3
 8010134:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 80101e0 <__ieee754_logf+0x1ec>
 8010138:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80101e4 <__ieee754_logf+0x1f0>
 801013c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010140:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8010144:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010148:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 801014c:	4770      	bx	lr
 801014e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010152:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010156:	b9e3      	cbnz	r3, 8010192 <__ieee754_logf+0x19e>
 8010158:	ee30 0a67 	vsub.f32	s0, s0, s15
 801015c:	4770      	bx	lr
 801015e:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80101e0 <__ieee754_logf+0x1ec>
 8010162:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80101e4 <__ieee754_logf+0x1f0>
 8010166:	eee2 7a86 	vfma.f32	s15, s5, s12
 801016a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801016e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010172:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 8010176:	4770      	bx	lr
 8010178:	ee07 3a90 	vmov	s15, r3
 801017c:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80101e0 <__ieee754_logf+0x1ec>
 8010180:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80101e4 <__ieee754_logf+0x1f0>
 8010184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010188:	ee27 0a80 	vmul.f32	s0, s15, s0
 801018c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8010190:	4770      	bx	lr
 8010192:	eddf 6a13 	vldr	s13, [pc, #76]	@ 80101e0 <__ieee754_logf+0x1ec>
 8010196:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80101e4 <__ieee754_logf+0x1f0>
 801019a:	eee2 7ae6 	vfms.f32	s15, s5, s13
 801019e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80101a2:	ee92 0a87 	vfnms.f32	s0, s5, s14
 80101a6:	4770      	bx	lr
 80101a8:	004afb20 	.word	0x004afb20
 80101ac:	007ffff0 	.word	0x007ffff0
 80101b0:	00000000 	.word	0x00000000
 80101b4:	cc000000 	.word	0xcc000000
 80101b8:	4c000000 	.word	0x4c000000
 80101bc:	ffcf5c30 	.word	0xffcf5c30
 80101c0:	3e178897 	.word	0x3e178897
 80101c4:	3e3a3325 	.word	0x3e3a3325
 80101c8:	3e924925 	.word	0x3e924925
 80101cc:	3e1cd04f 	.word	0x3e1cd04f
 80101d0:	3e638e29 	.word	0x3e638e29
 80101d4:	3f2aaaab 	.word	0x3f2aaaab
 80101d8:	3ecccccd 	.word	0x3ecccccd
 80101dc:	3eaaaaab 	.word	0x3eaaaaab
 80101e0:	3717f7d1 	.word	0x3717f7d1
 80101e4:	3f317180 	.word	0x3f317180

080101e8 <_init>:
 80101e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101ea:	bf00      	nop
 80101ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ee:	bc08      	pop	{r3}
 80101f0:	469e      	mov	lr, r3
 80101f2:	4770      	bx	lr

080101f4 <_fini>:
 80101f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101f6:	bf00      	nop
 80101f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101fa:	bc08      	pop	{r3}
 80101fc:	469e      	mov	lr, r3
 80101fe:	4770      	bx	lr
