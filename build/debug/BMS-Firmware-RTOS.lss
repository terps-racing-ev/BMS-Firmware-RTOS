
build/debug/BMS-Firmware-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f48  08008190  08008190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800e0d8  0800e0d8  000070d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e280  0800e280  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800e280  0800e280  00008060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800e280  0800e280  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e280  0800e280  00007280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800e288  0800e288  00007288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800e290  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044d0  20000060  0800e2f0  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004530  0800e2f0  00008530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b833  00000000  00000000  000080c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005003  00000000  00000000  000338fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00016d17  00000000  00000000  000388ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c58  00000000  00000000  0004f618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001914  00000000  00000000  00051270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021cb3  00000000  00000000  00052b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a04a  00000000  00000000  00074837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005020  00000000  00000000  0007e884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000838a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	@ (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	@ (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000060 	.word	0x20000060
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800e0c0 	.word	0x0800e0c0

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	@ (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000064 	.word	0x20000064
 80081cc:	0800e0c0 	.word	0x0800e0c0

080081d0 <CAN_ProcessRxMessage>:
  * @brief  Process received CAN message
  * @param  msg: Pointer to received message
  * @retval None
  */
static void CAN_ProcessRxMessage(CAN_Message_t *msg)
{
 80081d0:	b508      	push	{r3, lr}
    can_stats.rx_message_count++;
 80081d2:	4a04      	ldr	r2, [pc, #16]	@ (80081e4 <CAN_ProcessRxMessage+0x14>)
 80081d4:	68d3      	ldr	r3, [r2, #12]
 80081d6:	3301      	adds	r3, #1
 80081d8:	60d3      	str	r3, [r2, #12]
    
    // Call registered callback if available
    if (rx_callback != NULL) {
 80081da:	4b03      	ldr	r3, [pc, #12]	@ (80081e8 <CAN_ProcessRxMessage+0x18>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	b103      	cbz	r3, 80081e2 <CAN_ProcessRxMessage+0x12>
        rx_callback(msg);
 80081e0:	4798      	blx	r3
            
        default:
            // Unknown message ID
            break;
    }
}
 80081e2:	bd08      	pop	{r3, pc}
 80081e4:	2000007c 	.word	0x2000007c
 80081e8:	20000094 	.word	0x20000094

080081ec <CAN_ConfigureFilters>:
{
 80081ec:	b500      	push	{lr}
 80081ee:	b08b      	sub	sp, #44	@ 0x2c
    filterConfig.FilterBank = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	9305      	str	r3, [sp, #20]
    filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80081f4:	9306      	str	r3, [sp, #24]
    filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80081f6:	2201      	movs	r2, #1
 80081f8:	9207      	str	r2, [sp, #28]
    filterConfig.FilterIdHigh = 0x0000;
 80081fa:	9300      	str	r3, [sp, #0]
    filterConfig.FilterIdLow = 0x0004;  // Set IDE bit for extended IDs
 80081fc:	2104      	movs	r1, #4
 80081fe:	9101      	str	r1, [sp, #4]
    filterConfig.FilterMaskIdHigh = 0x0000;
 8008200:	9302      	str	r3, [sp, #8]
    filterConfig.FilterMaskIdLow = 0x0004;  // Mask only IDE bit
 8008202:	9103      	str	r1, [sp, #12]
    filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8008204:	9304      	str	r3, [sp, #16]
    filterConfig.FilterActivation = ENABLE;
 8008206:	9208      	str	r2, [sp, #32]
    filterConfig.SlaveStartFilterBank = 14;
 8008208:	230e      	movs	r3, #14
 800820a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_CAN_ConfigFilter(&hcan1, &filterConfig);
 800820c:	4669      	mov	r1, sp
 800820e:	4803      	ldr	r0, [pc, #12]	@ (800821c <CAN_ConfigureFilters+0x30>)
 8008210:	f002 ff87 	bl	800b122 <HAL_CAN_ConfigFilter>
}
 8008214:	b00b      	add	sp, #44	@ 0x2c
 8008216:	f85d fb04 	ldr.w	pc, [sp], #4
 800821a:	bf00      	nop
 800821c:	20003ca8 	.word	0x20003ca8

08008220 <CAN_TransmitMessage>:
{
 8008220:	b530      	push	{r4, r5, lr}
 8008222:	b089      	sub	sp, #36	@ 0x24
 8008224:	4605      	mov	r5, r0
    TxHeader.ExtId = msg->id;
 8008226:	6803      	ldr	r3, [r0, #0]
 8008228:	9303      	str	r3, [sp, #12]
    TxHeader.StdId = 0;
 800822a:	2400      	movs	r4, #0
 800822c:	9402      	str	r4, [sp, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 800822e:	9405      	str	r4, [sp, #20]
    TxHeader.IDE = CAN_ID_EXT;
 8008230:	2304      	movs	r3, #4
 8008232:	9304      	str	r3, [sp, #16]
    TxHeader.DLC = msg->length;
 8008234:	7b03      	ldrb	r3, [r0, #12]
 8008236:	9306      	str	r3, [sp, #24]
    TxHeader.TransmitGlobalTime = DISABLE;
 8008238:	f88d 401c 	strb.w	r4, [sp, #28]
    while (retry_count < CAN_MAX_RETRIES) {
 800823c:	2c02      	cmp	r4, #2
 800823e:	d814      	bhi.n	800826a <CAN_TransmitMessage+0x4a>
        status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, msg->data, &TxMailbox);
 8008240:	ab01      	add	r3, sp, #4
 8008242:	1d2a      	adds	r2, r5, #4
 8008244:	a902      	add	r1, sp, #8
 8008246:	480d      	ldr	r0, [pc, #52]	@ (800827c <CAN_TransmitMessage+0x5c>)
 8008248:	f003 f81c 	bl	800b284 <HAL_CAN_AddTxMessage>
        if (status == HAL_OK) {
 800824c:	4603      	mov	r3, r0
 800824e:	b138      	cbz	r0, 8008260 <CAN_TransmitMessage+0x40>
        retry_count++;
 8008250:	3401      	adds	r4, #1
 8008252:	b2e4      	uxtb	r4, r4
        if (retry_count < CAN_MAX_RETRIES) {
 8008254:	2c02      	cmp	r4, #2
 8008256:	d808      	bhi.n	800826a <CAN_TransmitMessage+0x4a>
            osDelay(1);
 8008258:	2001      	movs	r0, #1
 800825a:	f000 fc7d 	bl	8008b58 <osDelay>
 800825e:	e7ed      	b.n	800823c <CAN_TransmitMessage+0x1c>
            can_stats.tx_success_count++;
 8008260:	4907      	ldr	r1, [pc, #28]	@ (8008280 <CAN_TransmitMessage+0x60>)
 8008262:	680a      	ldr	r2, [r1, #0]
 8008264:	3201      	adds	r2, #1
 8008266:	600a      	str	r2, [r1, #0]
            return HAL_OK;
 8008268:	e004      	b.n	8008274 <CAN_TransmitMessage+0x54>
    can_stats.tx_error_count++;
 800826a:	4a05      	ldr	r2, [pc, #20]	@ (8008280 <CAN_TransmitMessage+0x60>)
 800826c:	6853      	ldr	r3, [r2, #4]
 800826e:	3301      	adds	r3, #1
 8008270:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
}
 8008274:	4618      	mov	r0, r3
 8008276:	b009      	add	sp, #36	@ 0x24
 8008278:	bd30      	pop	{r4, r5, pc}
 800827a:	bf00      	nop
 800827c:	20003ca8 	.word	0x20003ca8
 8008280:	2000007c 	.word	0x2000007c

08008284 <CAN_ProcessTxQueue>:
{
 8008284:	b500      	push	{lr}
 8008286:	b087      	sub	sp, #28
    while (osMessageQueueGet(CANTxQueueHandle, &msg, NULL, 0) == osOK) {
 8008288:	2300      	movs	r3, #0
 800828a:	461a      	mov	r2, r3
 800828c:	a901      	add	r1, sp, #4
 800828e:	4806      	ldr	r0, [pc, #24]	@ (80082a8 <CAN_ProcessTxQueue+0x24>)
 8008290:	6800      	ldr	r0, [r0, #0]
 8008292:	f000 fd9d 	bl	8008dd0 <osMessageQueueGet>
 8008296:	b920      	cbnz	r0, 80082a2 <CAN_ProcessTxQueue+0x1e>
        if (CAN_TransmitMessage(&msg) != HAL_OK) {
 8008298:	a801      	add	r0, sp, #4
 800829a:	f7ff ffc1 	bl	8008220 <CAN_TransmitMessage>
 800829e:	2800      	cmp	r0, #0
 80082a0:	d0f2      	beq.n	8008288 <CAN_ProcessTxQueue+0x4>
}
 80082a2:	b007      	add	sp, #28
 80082a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80082a8:	2000009c 	.word	0x2000009c

080082ac <CAN_SendMessage>:
    if (length > 8 || id > 0x1FFFFFFF) {
 80082ac:	2a08      	cmp	r2, #8
 80082ae:	d82a      	bhi.n	8008306 <CAN_SendMessage+0x5a>
{
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	460e      	mov	r6, r1
 80082b6:	4614      	mov	r4, r2
 80082b8:	461d      	mov	r5, r3
    if (length > 8 || id > 0x1FFFFFFF) {
 80082ba:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80082be:	d302      	bcc.n	80082c6 <CAN_SendMessage+0x1a>
        return HAL_ERROR;
 80082c0:	2001      	movs	r0, #1
}
 80082c2:	b006      	add	sp, #24
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
    msg.id = id;
 80082c6:	9001      	str	r0, [sp, #4]
    msg.length = length;
 80082c8:	f88d 2010 	strb.w	r2, [sp, #16]
    msg.priority = priority;
 80082cc:	f88d 3011 	strb.w	r3, [sp, #17]
    msg.timestamp = osKernelGetTickCount();
 80082d0:	f000 fbde 	bl	8008a90 <osKernelGetTickCount>
 80082d4:	9005      	str	r0, [sp, #20]
    if (data != NULL && length > 0) {
 80082d6:	b106      	cbz	r6, 80082da <CAN_SendMessage+0x2e>
 80082d8:	b94c      	cbnz	r4, 80082ee <CAN_SendMessage+0x42>
    if (osMessageQueuePut(CANTxQueueHandle, &msg, priority, CAN_TX_TIMEOUT_MS) != osOK) {
 80082da:	2364      	movs	r3, #100	@ 0x64
 80082dc:	462a      	mov	r2, r5
 80082de:	a901      	add	r1, sp, #4
 80082e0:	480a      	ldr	r0, [pc, #40]	@ (800830c <CAN_SendMessage+0x60>)
 80082e2:	6800      	ldr	r0, [r0, #0]
 80082e4:	f000 fd32 	bl	8008d4c <osMessageQueuePut>
 80082e8:	b938      	cbnz	r0, 80082fa <CAN_SendMessage+0x4e>
    return HAL_OK;
 80082ea:	2000      	movs	r0, #0
 80082ec:	e7e9      	b.n	80082c2 <CAN_SendMessage+0x16>
        memcpy(msg.data, data, length);
 80082ee:	4622      	mov	r2, r4
 80082f0:	4631      	mov	r1, r6
 80082f2:	a802      	add	r0, sp, #8
 80082f4:	f005 fda6 	bl	800de44 <memcpy>
 80082f8:	e7ef      	b.n	80082da <CAN_SendMessage+0x2e>
        can_stats.tx_queue_full_count++;
 80082fa:	4a05      	ldr	r2, [pc, #20]	@ (8008310 <CAN_SendMessage+0x64>)
 80082fc:	6893      	ldr	r3, [r2, #8]
 80082fe:	3301      	adds	r3, #1
 8008300:	6093      	str	r3, [r2, #8]
        return HAL_ERROR;
 8008302:	2001      	movs	r0, #1
 8008304:	e7dd      	b.n	80082c2 <CAN_SendMessage+0x16>
        return HAL_ERROR;
 8008306:	2001      	movs	r0, #1
}
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	2000009c 	.word	0x2000009c
 8008310:	2000007c 	.word	0x2000007c

08008314 <CAN_ResetStatistics>:
  * @brief  Reset CAN statistics
  * @retval None
  */
void CAN_ResetStatistics(void)
{
    memset(&can_stats, 0, sizeof(CAN_Statistics_t));
 8008314:	4b04      	ldr	r3, [pc, #16]	@ (8008328 <CAN_ResetStatistics+0x14>)
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	605a      	str	r2, [r3, #4]
 800831c:	609a      	str	r2, [r3, #8]
 800831e:	60da      	str	r2, [r3, #12]
 8008320:	611a      	str	r2, [r3, #16]
 8008322:	615a      	str	r2, [r3, #20]
}
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	2000007c 	.word	0x2000007c

0800832c <CAN_Manager_Init>:
{
 800832c:	b510      	push	{r4, lr}
    CANTxQueueHandle = osMessageQueueNew(CAN_TX_QUEUE_SIZE, sizeof(CAN_Message_t), NULL);
 800832e:	2200      	movs	r2, #0
 8008330:	2114      	movs	r1, #20
 8008332:	2040      	movs	r0, #64	@ 0x40
 8008334:	f000 fcbf 	bl	8008cb6 <osMessageQueueNew>
 8008338:	4b0e      	ldr	r3, [pc, #56]	@ (8008374 <CAN_Manager_Init+0x48>)
 800833a:	6018      	str	r0, [r3, #0]
    if (CANTxQueueHandle == NULL) {
 800833c:	b1a8      	cbz	r0, 800836a <CAN_Manager_Init+0x3e>
    CANRxQueueHandle = osMessageQueueNew(CAN_RX_QUEUE_SIZE, sizeof(CAN_Message_t), NULL);
 800833e:	2200      	movs	r2, #0
 8008340:	2114      	movs	r1, #20
 8008342:	2020      	movs	r0, #32
 8008344:	f000 fcb7 	bl	8008cb6 <osMessageQueueNew>
 8008348:	4b0b      	ldr	r3, [pc, #44]	@ (8008378 <CAN_Manager_Init+0x4c>)
 800834a:	6018      	str	r0, [r3, #0]
    if (CANRxQueueHandle == NULL) {
 800834c:	b180      	cbz	r0, 8008370 <CAN_Manager_Init+0x44>
    CAN_ConfigureFilters();
 800834e:	f7ff ff4d 	bl	80081ec <CAN_ConfigureFilters>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | 
 8008352:	f248 4112 	movw	r1, #33810	@ 0x8412
 8008356:	4809      	ldr	r0, [pc, #36]	@ (800837c <CAN_Manager_Init+0x50>)
 8008358:	f003 f809 	bl	800b36e <HAL_CAN_ActivateNotification>
 800835c:	4604      	mov	r4, r0
 800835e:	b108      	cbz	r0, 8008364 <CAN_Manager_Init+0x38>
        return HAL_ERROR;
 8008360:	2401      	movs	r4, #1
 8008362:	e003      	b.n	800836c <CAN_Manager_Init+0x40>
    CAN_ResetStatistics();
 8008364:	f7ff ffd6 	bl	8008314 <CAN_ResetStatistics>
    return HAL_OK;
 8008368:	e000      	b.n	800836c <CAN_Manager_Init+0x40>
        return HAL_ERROR;
 800836a:	2401      	movs	r4, #1
}
 800836c:	4620      	mov	r0, r4
 800836e:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8008370:	2401      	movs	r4, #1
 8008372:	e7fb      	b.n	800836c <CAN_Manager_Init+0x40>
 8008374:	2000009c 	.word	0x2000009c
 8008378:	20000098 	.word	0x20000098
 800837c:	20003ca8 	.word	0x20003ca8

08008380 <CAN_SendHeartbeat>:
  *         Byte 5: Warning flags summary (any warnings = 0xFF, none = 0x00)
  *         Byte 6-7: Fault count (16-bit)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendHeartbeat(void)
{
 8008380:	b500      	push	{lr}
 8008382:	b089      	sub	sp, #36	@ 0x24
    Error_Manager_t status;
    uint8_t heartbeat_data[8];
    
    // Get current error manager status
    ErrorMgr_GetStatus(&status);
 8008384:	a803      	add	r0, sp, #12
 8008386:	f000 fe03 	bl	8008f90 <ErrorMgr_GetStatus>
    
    // Pack heartbeat message
    heartbeat_data[0] = (uint8_t)status.state;                    // BMS state
 800838a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800838e:	f88d 3004 	strb.w	r3, [sp, #4]
    heartbeat_data[1] = (uint8_t)(status.error_flags & 0xFF);     // Error byte 0
 8008392:	9b03      	ldr	r3, [sp, #12]
 8008394:	f88d 3005 	strb.w	r3, [sp, #5]
    heartbeat_data[2] = (uint8_t)((status.error_flags >> 8) & 0xFF);   // Error byte 1
 8008398:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800839c:	f88d 2006 	strb.w	r2, [sp, #6]
    heartbeat_data[3] = (uint8_t)((status.error_flags >> 16) & 0xFF);  // Error byte 2
 80083a0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80083a4:	f88d 2007 	strb.w	r2, [sp, #7]
    heartbeat_data[4] = (uint8_t)((status.error_flags >> 24) & 0xFF);  // Error byte 3
 80083a8:	0e1b      	lsrs	r3, r3, #24
 80083aa:	f88d 3008 	strb.w	r3, [sp, #8]
    heartbeat_data[5] = (status.warning_flags != 0) ? 0xFF : 0x00;     // Warning summary
 80083ae:	9b04      	ldr	r3, [sp, #16]
 80083b0:	b193      	cbz	r3, 80083d8 <CAN_SendHeartbeat+0x58>
 80083b2:	23ff      	movs	r3, #255	@ 0xff
 80083b4:	f88d 3009 	strb.w	r3, [sp, #9]
    heartbeat_data[6] = (uint8_t)(status.fault_count & 0xFF);          // Fault count low byte
 80083b8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80083bc:	f88d 300a 	strb.w	r3, [sp, #10]
    heartbeat_data[7] = (uint8_t)((status.fault_count >> 8) & 0xFF);   // Fault count high byte
 80083c0:	2300      	movs	r3, #0
 80083c2:	f88d 300b 	strb.w	r3, [sp, #11]
    
    // Send heartbeat with high priority
    return CAN_SendMessage(CAN_BMS_HEARTBEAT_ID, heartbeat_data, 8, CAN_PRIORITY_HIGH);
 80083c6:	2301      	movs	r3, #1
 80083c8:	2208      	movs	r2, #8
 80083ca:	a901      	add	r1, sp, #4
 80083cc:	4803      	ldr	r0, [pc, #12]	@ (80083dc <CAN_SendHeartbeat+0x5c>)
 80083ce:	f7ff ff6d 	bl	80082ac <CAN_SendMessage>
}
 80083d2:	b009      	add	sp, #36	@ 0x24
 80083d4:	f85d fb04 	ldr.w	pc, [sp], #4
    heartbeat_data[5] = (status.warning_flags != 0) ? 0xFF : 0x00;     // Warning summary
 80083d8:	2300      	movs	r3, #0
 80083da:	e7eb      	b.n	80083b4 <CAN_SendHeartbeat+0x34>
 80083dc:	08ff0300 	.word	0x08ff0300

080083e0 <CAN_ManagerTask>:
{
 80083e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083e2:	b087      	sub	sp, #28
    osDelay(100);
 80083e4:	2064      	movs	r0, #100	@ 0x64
 80083e6:	f000 fbb7 	bl	8008b58 <osDelay>
    last_heartbeat_tick = osKernelGetTickCount();
 80083ea:	f000 fb51 	bl	8008a90 <osKernelGetTickCount>
 80083ee:	4607      	mov	r7, r0
    last_uptime_tick = osKernelGetTickCount();
 80083f0:	f000 fb4e 	bl	8008a90 <osKernelGetTickCount>
 80083f4:	4606      	mov	r6, r0
 80083f6:	e01b      	b.n	8008430 <CAN_ManagerTask+0x50>
            CAN_ProcessRxMessage(&rx_msg);
 80083f8:	a801      	add	r0, sp, #4
 80083fa:	f7ff fee9 	bl	80081d0 <CAN_ProcessRxMessage>
        while (osMessageQueueGet(CANRxQueueHandle, &rx_msg, NULL, 0) == osOK) {
 80083fe:	2300      	movs	r3, #0
 8008400:	461a      	mov	r2, r3
 8008402:	a901      	add	r1, sp, #4
 8008404:	4c0e      	ldr	r4, [pc, #56]	@ (8008440 <CAN_ManagerTask+0x60>)
 8008406:	6820      	ldr	r0, [r4, #0]
 8008408:	f000 fce2 	bl	8008dd0 <osMessageQueueGet>
 800840c:	2800      	cmp	r0, #0
 800840e:	d0f3      	beq.n	80083f8 <CAN_ManagerTask+0x18>
        CAN_ProcessTxQueue();
 8008410:	f7ff ff38 	bl	8008284 <CAN_ProcessTxQueue>
        if ((current_tick - last_heartbeat_tick) >= CAN_HEARTBEAT_INTERVAL_MS) {
 8008414:	1beb      	subs	r3, r5, r7
 8008416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800841a:	d20d      	bcs.n	8008438 <CAN_ManagerTask+0x58>
        if ((current_tick - last_uptime_tick) >= 1000) {
 800841c:	1bab      	subs	r3, r5, r6
 800841e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008422:	d302      	bcc.n	800842a <CAN_ManagerTask+0x4a>
            ErrorMgr_UpdateUptime();
 8008424:	f000 fdd2 	bl	8008fcc <ErrorMgr_UpdateUptime>
            last_uptime_tick = current_tick;
 8008428:	462e      	mov	r6, r5
        osDelay(10);
 800842a:	200a      	movs	r0, #10
 800842c:	f000 fb94 	bl	8008b58 <osDelay>
        current_tick = osKernelGetTickCount();
 8008430:	f000 fb2e 	bl	8008a90 <osKernelGetTickCount>
 8008434:	4605      	mov	r5, r0
        while (osMessageQueueGet(CANRxQueueHandle, &rx_msg, NULL, 0) == osOK) {
 8008436:	e7e2      	b.n	80083fe <CAN_ManagerTask+0x1e>
            CAN_SendHeartbeat();
 8008438:	f7ff ffa2 	bl	8008380 <CAN_SendHeartbeat>
            last_heartbeat_tick = current_tick;
 800843c:	462f      	mov	r7, r5
 800843e:	e7ed      	b.n	800841c <CAN_ManagerTask+0x3c>
 8008440:	20000098 	.word	0x20000098

08008444 <CellTemp_IsADCEnabled>:
  * @param  adc_index: ADC channel index (0-6)
  * @retval 1 if enabled, 0 if disabled
  */
static uint8_t CellTemp_IsADCEnabled(uint8_t adc_index)
{
    if (adc_index >= NUM_ADC_CHANNELS) {
 8008444:	2806      	cmp	r0, #6
 8008446:	d802      	bhi.n	800844e <CellTemp_IsADCEnabled+0xa>
        return 0;
    }
    return adc_channel_enabled[adc_index];
 8008448:	4b02      	ldr	r3, [pc, #8]	@ (8008454 <CellTemp_IsADCEnabled+0x10>)
 800844a:	5c18      	ldrb	r0, [r3, r0]
 800844c:	4770      	bx	lr
        return 0;
 800844e:	2000      	movs	r0, #0
}
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	0800e0d8 	.word	0x0800e0d8

08008458 <CellTemp_ConfigureADCChannel>:
{
 8008458:	b500      	push	{lr}
 800845a:	b087      	sub	sp, #28
    ADC_ChannelConfTypeDef sConfig = {0};
 800845c:	4669      	mov	r1, sp
 800845e:	2300      	movs	r3, #0
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	9302      	str	r3, [sp, #8]
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	9304      	str	r3, [sp, #16]
 800846a:	9305      	str	r3, [sp, #20]
    sConfig.Channel = channel;
 800846c:	9000      	str	r0, [sp, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800846e:	2306      	movs	r3, #6
 8008470:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; // Long sampling for high impedance
 8008472:	2307      	movs	r3, #7
 8008474:	9302      	str	r3, [sp, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008476:	237f      	movs	r3, #127	@ 0x7f
 8008478:	9303      	str	r3, [sp, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800847a:	2304      	movs	r3, #4
 800847c:	9304      	str	r3, [sp, #16]
    return HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800847e:	4803      	ldr	r0, [pc, #12]	@ (800848c <CellTemp_ConfigureADCChannel+0x34>)
 8008480:	f002 f9a6 	bl	800a7d0 <HAL_ADC_ConfigChannel>
}
 8008484:	b007      	add	sp, #28
 8008486:	f85d fb04 	ldr.w	pc, [sp], #4
 800848a:	bf00      	nop
 800848c:	20003cd0 	.word	0x20003cd0

08008490 <CellTemp_SendTemperatureMessage>:
  * @param  msg_index: Message index (0-13, for 14 messages total)
  * @param  start_therm_idx: Starting thermistor index
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef CellTemp_SendTemperatureMessage(uint8_t msg_index, uint8_t start_therm_idx)
{
 8008490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008492:	b083      	sub	sp, #12
 8008494:	4606      	mov	r6, r0
 8008496:	460d      	mov	r5, r1
    uint8_t TxData[8];
    
    // Check if this message corresponds to a disabled ADC channel
    // Each message covers 4 thermistors, determine which ADC channel(s) it uses
    uint8_t first_adc = start_therm_idx / MUX_CHANNELS;
 8008498:	08cc      	lsrs	r4, r1, #3
    uint8_t last_adc = (start_therm_idx + 3) / MUX_CHANNELS;
 800849a:	1ccf      	adds	r7, r1, #3
 800849c:	08ff      	lsrs	r7, r7, #3
    
    // Skip message if all ADC channels for this message are disabled
    uint8_t any_enabled = 0;
    for (uint8_t adc = first_adc; adc <= last_adc && adc < NUM_ADC_CHANNELS; adc++) {
 800849e:	e001      	b.n	80084a4 <CellTemp_SendTemperatureMessage+0x14>
 80084a0:	3401      	adds	r4, #1
 80084a2:	b2e4      	uxtb	r4, r4
 80084a4:	42bc      	cmp	r4, r7
 80084a6:	d80a      	bhi.n	80084be <CellTemp_SendTemperatureMessage+0x2e>
 80084a8:	2c06      	cmp	r4, #6
 80084aa:	d806      	bhi.n	80084ba <CellTemp_SendTemperatureMessage+0x2a>
        if (CellTemp_IsADCEnabled(adc)) {
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff ffc9 	bl	8008444 <CellTemp_IsADCEnabled>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	d0f4      	beq.n	80084a0 <CellTemp_SendTemperatureMessage+0x10>
            any_enabled = 1;
 80084b6:	2001      	movs	r0, #1
 80084b8:	e002      	b.n	80084c0 <CellTemp_SendTemperatureMessage+0x30>
    uint8_t any_enabled = 0;
 80084ba:	2000      	movs	r0, #0
 80084bc:	e000      	b.n	80084c0 <CellTemp_SendTemperatureMessage+0x30>
 80084be:	2000      	movs	r0, #0
            break;
        }
    }
    
    if (!any_enabled) {
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d03e      	beq.n	8008542 <CellTemp_SendTemperatureMessage+0xb2>
    }
    
    // Prepare CAN message with 4 thermistor readings per message
    // Temperature format: temp_celsius * 10 (0.1°C resolution), little endian
    
    for (uint8_t i = 0; i < 4; i++) {
 80084c4:	2400      	movs	r4, #0
 80084c6:	e00d      	b.n	80084e4 <CellTemp_SendTemperatureMessage+0x54>
        uint8_t therm_idx = start_therm_idx + i;
        int16_t temp_data = 0x8000; // Default invalid temperature marker
 80084c8:	4b1f      	ldr	r3, [pc, #124]	@ (8008548 <CellTemp_SendTemperatureMessage+0xb8>)
                temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
            }
        }
        
        // Pack temperature data (little endian)
        TxData[i * 2] = temp_data & 0xFF;         // LSB
 80084ca:	0062      	lsls	r2, r4, #1
 80084cc:	a902      	add	r1, sp, #8
 80084ce:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80084d2:	f801 3c08 	strb.w	r3, [r1, #-8]
        TxData[i * 2 + 1] = (temp_data >> 8) & 0xFF; // MSB
 80084d6:	3209      	adds	r2, #9
 80084d8:	446a      	add	r2, sp
 80084da:	121b      	asrs	r3, r3, #8
 80084dc:	f802 3c08 	strb.w	r3, [r2, #-8]
    for (uint8_t i = 0; i < 4; i++) {
 80084e0:	3401      	adds	r4, #1
 80084e2:	b2e4      	uxtb	r4, r4
 80084e4:	2c03      	cmp	r4, #3
 80084e6:	d823      	bhi.n	8008530 <CellTemp_SendTemperatureMessage+0xa0>
        uint8_t therm_idx = start_therm_idx + i;
 80084e8:	1967      	adds	r7, r4, r5
 80084ea:	b2ff      	uxtb	r7, r7
        if (therm_idx < TOTAL_THERMISTORS) {
 80084ec:	2f37      	cmp	r7, #55	@ 0x37
 80084ee:	d8eb      	bhi.n	80084c8 <CellTemp_SendTemperatureMessage+0x38>
            if (CellTemp_IsADCEnabled(therm_adc) && 
 80084f0:	08f8      	lsrs	r0, r7, #3
 80084f2:	f7ff ffa7 	bl	8008444 <CellTemp_IsADCEnabled>
 80084f6:	b1b8      	cbz	r0, 8008528 <CellTemp_SendTemperatureMessage+0x98>
                temp_state.thermistors[therm_idx].temperature > -126.0f) {
 80084f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80084fc:	4b13      	ldr	r3, [pc, #76]	@ (800854c <CellTemp_SendTemperatureMessage+0xbc>)
 80084fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008502:	edd3 7a01 	vldr	s15, [r3, #4]
            if (CellTemp_IsADCEnabled(therm_adc) && 
 8008506:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8008550 <CellTemp_SendTemperatureMessage+0xc0>
 800850a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008512:	dd0b      	ble.n	800852c <CellTemp_SendTemperatureMessage+0x9c>
                temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
 8008514:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800851c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008520:	ee17 3a90 	vmov	r3, s15
 8008524:	b21b      	sxth	r3, r3
 8008526:	e7d0      	b.n	80084ca <CellTemp_SendTemperatureMessage+0x3a>
        int16_t temp_data = 0x8000; // Default invalid temperature marker
 8008528:	4b07      	ldr	r3, [pc, #28]	@ (8008548 <CellTemp_SendTemperatureMessage+0xb8>)
 800852a:	e7ce      	b.n	80084ca <CellTemp_SendTemperatureMessage+0x3a>
 800852c:	4b06      	ldr	r3, [pc, #24]	@ (8008548 <CellTemp_SendTemperatureMessage+0xb8>)
 800852e:	e7cc      	b.n	80084ca <CellTemp_SendTemperatureMessage+0x3a>
    }
    
    // Send via CAN Manager (non-blocking, queued)
    uint32_t can_id = CAN_TEMP_BASE_ID + msg_index;
    return CAN_SendMessage(can_id, TxData, 8, CAN_PRIORITY_NORMAL);
 8008530:	2302      	movs	r3, #2
 8008532:	2208      	movs	r2, #8
 8008534:	4669      	mov	r1, sp
 8008536:	f106 600f 	add.w	r0, r6, #149946368	@ 0x8f00000
 800853a:	f500 2070 	add.w	r0, r0, #983040	@ 0xf0000
 800853e:	f7ff feb5 	bl	80082ac <CAN_SendMessage>
}
 8008542:	b003      	add	sp, #12
 8008544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008546:	bf00      	nop
 8008548:	ffff8000 	.word	0xffff8000
 800854c:	200000a0 	.word	0x200000a0
 8008550:	c2fc0000 	.word	0xc2fc0000

08008554 <CellTemp_Init>:
{
 8008554:	b510      	push	{r4, lr}
    memset(&temp_state, 0, sizeof(temp_monitor_state_t));
 8008556:	f240 524c 	movw	r2, #1356	@ 0x54c
 800855a:	2100      	movs	r1, #0
 800855c:	481a      	ldr	r0, [pc, #104]	@ (80085c8 <CellTemp_Init+0x74>)
 800855e:	f005 fc3e 	bl	800ddde <memset>
    for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8008562:	2300      	movs	r3, #0
 8008564:	e019      	b.n	800859a <CellTemp_Init+0x46>
        temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 8008566:	4a18      	ldr	r2, [pc, #96]	@ (80085c8 <CellTemp_Init+0x74>)
 8008568:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800856c:	00c8      	lsls	r0, r1, #3
 800856e:	1811      	adds	r1, r2, r0
 8008570:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8008574:	f802 c000 	strb.w	ip, [r2, r0]
        temp_state.thermistors[i].mux_channel = i % MUX_CHANNELS;
 8008578:	f003 0007 	and.w	r0, r3, #7
 800857c:	7048      	strb	r0, [r1, #1]
        temp_state.thermistors[i].temperature = -127.0f; // Invalid temperature marker
 800857e:	4813      	ldr	r0, [pc, #76]	@ (80085cc <CellTemp_Init+0x78>)
 8008580:	6048      	str	r0, [r1, #4]
        temp_state.thermistors[i].raw_adc = 0;
 8008582:	2000      	movs	r0, #0
 8008584:	8108      	strh	r0, [r1, #8]
        temp_state.thermistors[i].last_read_time = 0;
 8008586:	60c8      	str	r0, [r1, #12]
        temp_state.thermistors[i].adc_accumulator = 0;
 8008588:	6108      	str	r0, [r1, #16]
        temp_state.thermistors[i].sample_count = 0;
 800858a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800858e:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 8008592:	440a      	add	r2, r1
 8008594:	8290      	strh	r0, [r2, #20]
    for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8008596:	3301      	adds	r3, #1
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b37      	cmp	r3, #55	@ 0x37
 800859c:	d9e3      	bls.n	8008566 <CellTemp_Init+0x12>
    HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 800859e:	4c0c      	ldr	r4, [pc, #48]	@ (80085d0 <CellTemp_Init+0x7c>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	2102      	movs	r1, #2
 80085a4:	4620      	mov	r0, r4
 80085a6:	f003 f8b1 	bl	800b70c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 80085aa:	2200      	movs	r2, #0
 80085ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80085b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80085b4:	f003 f8aa 	bl	800b70c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 80085b8:	2200      	movs	r2, #0
 80085ba:	2120      	movs	r1, #32
 80085bc:	4620      	mov	r0, r4
 80085be:	f003 f8a5 	bl	800b70c <HAL_GPIO_WritePin>
}
 80085c2:	2000      	movs	r0, #0
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	bf00      	nop
 80085c8:	200000a0 	.word	0x200000a0
 80085cc:	c2fe0000 	.word	0xc2fe0000
 80085d0:	48000400 	.word	0x48000400

080085d4 <CellTemp_ReadADC>:
{
 80085d4:	b510      	push	{r4, lr}
    if (CellTemp_ConfigureADCChannel(adc_channel) != HAL_OK) {
 80085d6:	f7ff ff3f 	bl	8008458 <CellTemp_ConfigureADCChannel>
 80085da:	b110      	cbz	r0, 80085e2 <CellTemp_ReadADC+0xe>
        return 0;
 80085dc:	2400      	movs	r4, #0
}
 80085de:	4620      	mov	r0, r4
 80085e0:	bd10      	pop	{r4, pc}
    if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 80085e2:	480b      	ldr	r0, [pc, #44]	@ (8008610 <CellTemp_ReadADC+0x3c>)
 80085e4:	f002 fbfa 	bl	800addc <HAL_ADC_Start>
 80085e8:	b108      	cbz	r0, 80085ee <CellTemp_ReadADC+0x1a>
    uint16_t adc_value = 0;
 80085ea:	2400      	movs	r4, #0
 80085ec:	e7f7      	b.n	80085de <CellTemp_ReadADC+0xa>
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80085ee:	f04f 31ff 	mov.w	r1, #4294967295
 80085f2:	4807      	ldr	r0, [pc, #28]	@ (8008610 <CellTemp_ReadADC+0x3c>)
 80085f4:	f002 f88e 	bl	800a714 <HAL_ADC_PollForConversion>
 80085f8:	b120      	cbz	r0, 8008604 <CellTemp_ReadADC+0x30>
    uint16_t adc_value = 0;
 80085fa:	2400      	movs	r4, #0
        HAL_ADC_Stop(&hadc1);
 80085fc:	4804      	ldr	r0, [pc, #16]	@ (8008610 <CellTemp_ReadADC+0x3c>)
 80085fe:	f002 fc7d 	bl	800aefc <HAL_ADC_Stop>
 8008602:	e7ec      	b.n	80085de <CellTemp_ReadADC+0xa>
            adc_value = HAL_ADC_GetValue(&hadc1);
 8008604:	4802      	ldr	r0, [pc, #8]	@ (8008610 <CellTemp_ReadADC+0x3c>)
 8008606:	f002 f8df 	bl	800a7c8 <HAL_ADC_GetValue>
 800860a:	b284      	uxth	r4, r0
 800860c:	e7f6      	b.n	80085fc <CellTemp_ReadADC+0x28>
 800860e:	bf00      	nop
 8008610:	20003cd0 	.word	0x20003cd0

08008614 <CellTemp_SetMuxChannel>:
    if (channel > 7) {
 8008614:	2807      	cmp	r0, #7
 8008616:	d833      	bhi.n	8008680 <CellTemp_SetMuxChannel+0x6c>
{
 8008618:	b510      	push	{r4, lr}
 800861a:	4604      	mov	r4, r0
    if (channel & 0x01) {
 800861c:	f010 0f01 	tst.w	r0, #1
 8008620:	d01a      	beq.n	8008658 <CellTemp_SetMuxChannel+0x44>
        HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_SET);
 8008622:	2201      	movs	r2, #1
 8008624:	2102      	movs	r1, #2
 8008626:	4817      	ldr	r0, [pc, #92]	@ (8008684 <CellTemp_SetMuxChannel+0x70>)
 8008628:	f003 f870 	bl	800b70c <HAL_GPIO_WritePin>
    if (channel & 0x02) {
 800862c:	f014 0f02 	tst.w	r4, #2
 8008630:	d018      	beq.n	8008664 <CellTemp_SetMuxChannel+0x50>
        HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_SET);
 8008632:	2201      	movs	r2, #1
 8008634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800863c:	f003 f866 	bl	800b70c <HAL_GPIO_WritePin>
    if (channel & 0x04) {
 8008640:	f014 0f04 	tst.w	r4, #4
 8008644:	d016      	beq.n	8008674 <CellTemp_SetMuxChannel+0x60>
        HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_SET);
 8008646:	2201      	movs	r2, #1
 8008648:	2120      	movs	r1, #32
 800864a:	480e      	ldr	r0, [pc, #56]	@ (8008684 <CellTemp_SetMuxChannel+0x70>)
 800864c:	f003 f85e 	bl	800b70c <HAL_GPIO_WritePin>
    osDelay(2);
 8008650:	2002      	movs	r0, #2
 8008652:	f000 fa81 	bl	8008b58 <osDelay>
}
 8008656:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 8008658:	2200      	movs	r2, #0
 800865a:	2102      	movs	r1, #2
 800865c:	4809      	ldr	r0, [pc, #36]	@ (8008684 <CellTemp_SetMuxChannel+0x70>)
 800865e:	f003 f855 	bl	800b70c <HAL_GPIO_WritePin>
 8008662:	e7e3      	b.n	800862c <CellTemp_SetMuxChannel+0x18>
        HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 8008664:	2200      	movs	r2, #0
 8008666:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800866a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800866e:	f003 f84d 	bl	800b70c <HAL_GPIO_WritePin>
 8008672:	e7e5      	b.n	8008640 <CellTemp_SetMuxChannel+0x2c>
        HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 8008674:	2200      	movs	r2, #0
 8008676:	2120      	movs	r1, #32
 8008678:	4802      	ldr	r0, [pc, #8]	@ (8008684 <CellTemp_SetMuxChannel+0x70>)
 800867a:	f003 f847 	bl	800b70c <HAL_GPIO_WritePin>
 800867e:	e7e7      	b.n	8008650 <CellTemp_SetMuxChannel+0x3c>
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	48000400 	.word	0x48000400

08008688 <CellTemp_CalculateTemperature>:
    float voltage = ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 8008688:	ee07 0a90 	vmov	s15, r0
 800868c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008690:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8008738 <CellTemp_CalculateTemperature+0xb0>
 8008694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008698:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800873c <CellTemp_CalculateTemperature+0xb4>
 800869c:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (adc_value < 10) {  // Less than ~8mV indicates disconnected sensor
 80086a0:	2809      	cmp	r0, #9
 80086a2:	d940      	bls.n	8008726 <CellTemp_CalculateTemperature+0x9e>
    if (voltage >= 3.29f) {  // Close to 3.3V limit, very high resistance (cold)
 80086a4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8008740 <CellTemp_CalculateTemperature+0xb8>
 80086a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b0:	da36      	bge.n	8008720 <CellTemp_CalculateTemperature+0x98>
        r_thermistor = (voltage * PULLUP_RESISTOR) / (ADC_VREF - voltage);
 80086b2:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8008744 <CellTemp_CalculateTemperature+0xbc>
 80086b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80086ba:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800873c <CellTemp_CalculateTemperature+0xb4>
 80086be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    if (r_thermistor <= 0) {
 80086c6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80086ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ce:	d92d      	bls.n	800872c <CellTemp_CalculateTemperature+0xa4>
{
 80086d0:	b508      	push	{r3, lr}
    float ln_ratio = logf(r_thermistor / THERMISTOR_R25);
 80086d2:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8008744 <CellTemp_CalculateTemperature+0xbc>
 80086d6:	ee87 0a00 	vdiv.f32	s0, s14, s0
 80086da:	f005 fbc1 	bl	800de60 <logf>
    float temp_kelvin = 1.0f / ((1.0f / REFERENCE_TEMP_K) + (ln_ratio / THERMISTOR_B_VALUE));
 80086de:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8008748 <CellTemp_CalculateTemperature+0xc0>
 80086e2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80086e6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800874c <CellTemp_CalculateTemperature+0xc4>
 80086ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80086ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80086f2:	ee87 0a27 	vdiv.f32	s0, s14, s15
    float temp_celsius = temp_kelvin - 273.15f;
 80086f6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8008750 <CellTemp_CalculateTemperature+0xc8>
 80086fa:	ee30 0a67 	vsub.f32	s0, s0, s15
    if (temp_celsius < -40.0f) {
 80086fe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008754 <CellTemp_CalculateTemperature+0xcc>
 8008702:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800870a:	d412      	bmi.n	8008732 <CellTemp_CalculateTemperature+0xaa>
    } else if (temp_celsius > 125.0f) {
 800870c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008758 <CellTemp_CalculateTemperature+0xd0>
 8008710:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008718:	dd0d      	ble.n	8008736 <CellTemp_CalculateTemperature+0xae>
        temp_celsius = 125.0f;
 800871a:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8008758 <CellTemp_CalculateTemperature+0xd0>
 800871e:	e00a      	b.n	8008736 <CellTemp_CalculateTemperature+0xae>
        r_thermistor = PULLUP_RESISTOR * 100.0f;  // Assume very high resistance
 8008720:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800875c <CellTemp_CalculateTemperature+0xd4>
 8008724:	e7d4      	b.n	80086d0 <CellTemp_CalculateTemperature+0x48>
        return -127.0f;  // Return obvious error value
 8008726:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8008760 <CellTemp_CalculateTemperature+0xd8>
 800872a:	4770      	bx	lr
        return 125.0f; // Return maximum temperature for very low resistance
 800872c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8008758 <CellTemp_CalculateTemperature+0xd0>
}
 8008730:	4770      	bx	lr
        temp_celsius = -40.0f;
 8008732:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008754 <CellTemp_CalculateTemperature+0xcc>
}
 8008736:	bd08      	pop	{r3, pc}
 8008738:	457ff000 	.word	0x457ff000
 800873c:	40533333 	.word	0x40533333
 8008740:	40528f5c 	.word	0x40528f5c
 8008744:	461c4000 	.word	0x461c4000
 8008748:	45866000 	.word	0x45866000
 800874c:	3b5bcf0f 	.word	0x3b5bcf0f
 8008750:	43889333 	.word	0x43889333
 8008754:	c2200000 	.word	0xc2200000
 8008758:	42fa0000 	.word	0x42fa0000
 800875c:	49742400 	.word	0x49742400
 8008760:	c2fe0000 	.word	0xc2fe0000

08008764 <CellTemp_MonitorTask>:
{
 8008764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (CellTemp_Init() != HAL_OK) {
 8008768:	f7ff fef4 	bl	8008554 <CellTemp_Init>
 800876c:	4607      	mov	r7, r0
 800876e:	2800      	cmp	r0, #0
 8008770:	f000 80ca 	beq.w	8008908 <CellTemp_MonitorTask+0x1a4>
            osDelay(1000);  // Wait 1 second (1000 ticks at 1ms tick rate)
 8008774:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008778:	f000 f9ee 	bl	8008b58 <osDelay>
        while(1) {
 800877c:	e7fa      	b.n	8008774 <CellTemp_MonitorTask+0x10>
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 800877e:	3401      	adds	r4, #1
 8008780:	b2e4      	uxtb	r4, r4
 8008782:	2c06      	cmp	r4, #6
 8008784:	d813      	bhi.n	80087ae <CellTemp_MonitorTask+0x4a>
            if (CellTemp_IsADCEnabled(adc)) {
 8008786:	4620      	mov	r0, r4
 8008788:	f7ff fe5c 	bl	8008444 <CellTemp_IsADCEnabled>
 800878c:	2800      	cmp	r0, #0
 800878e:	d0f6      	beq.n	800877e <CellTemp_MonitorTask+0x1a>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8008790:	00e3      	lsls	r3, r4, #3
 8008792:	b2db      	uxtb	r3, r3
 8008794:	4a9c      	ldr	r2, [pc, #624]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 8008796:	f892 1541 	ldrb.w	r1, [r2, #1345]	@ 0x541
 800879a:	440b      	add	r3, r1
 800879c:	b2db      	uxtb	r3, r3
                temp_state.thermistors[therm_idx].adc_accumulator = 0;
 800879e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80087a2:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80087a6:	2000      	movs	r0, #0
 80087a8:	6108      	str	r0, [r1, #16]
                temp_state.thermistors[therm_idx].sample_count = 0;
 80087aa:	8288      	strh	r0, [r1, #20]
 80087ac:	e7e7      	b.n	800877e <CellTemp_MonitorTask+0x1a>
        for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 80087ae:	2600      	movs	r6, #0
 80087b0:	e02b      	b.n	800880a <CellTemp_MonitorTask+0xa6>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80087b2:	3401      	adds	r4, #1
 80087b4:	b2e4      	uxtb	r4, r4
 80087b6:	2c06      	cmp	r4, #6
 80087b8:	d822      	bhi.n	8008800 <CellTemp_MonitorTask+0x9c>
                if (CellTemp_IsADCEnabled(adc)) {
 80087ba:	4620      	mov	r0, r4
 80087bc:	f7ff fe42 	bl	8008444 <CellTemp_IsADCEnabled>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	d0f6      	beq.n	80087b2 <CellTemp_MonitorTask+0x4e>
                    uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 80087c4:	00e5      	lsls	r5, r4, #3
 80087c6:	b2ed      	uxtb	r5, r5
 80087c8:	4b8f      	ldr	r3, [pc, #572]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 80087ca:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80087ce:	441d      	add	r5, r3
 80087d0:	b2ed      	uxtb	r5, r5
                    uint16_t adc_value = CellTemp_ReadADC(adc_channels[adc]);
 80087d2:	4b8e      	ldr	r3, [pc, #568]	@ (8008a0c <CellTemp_MonitorTask+0x2a8>)
 80087d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80087d8:	f7ff fefc 	bl	80085d4 <CellTemp_ReadADC>
                    if (adc_value >= 10) {  // Valid reading threshold
 80087dc:	2809      	cmp	r0, #9
 80087de:	d9e8      	bls.n	80087b2 <CellTemp_MonitorTask+0x4e>
                        therm->adc_accumulator += adc_value;
 80087e0:	4a89      	ldr	r2, [pc, #548]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 80087e2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80087e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087ea:	6919      	ldr	r1, [r3, #16]
 80087ec:	4408      	add	r0, r1
 80087ee:	6118      	str	r0, [r3, #16]
                        therm->sample_count++;
 80087f0:	8a9b      	ldrh	r3, [r3, #20]
 80087f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087f6:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80087fa:	3301      	adds	r3, #1
 80087fc:	8293      	strh	r3, [r2, #20]
 80087fe:	e7d8      	b.n	80087b2 <CellTemp_MonitorTask+0x4e>
            osDelay(TEMP_SAMPLE_INTERVAL_MS);
 8008800:	200a      	movs	r0, #10
 8008802:	f000 f9a9 	bl	8008b58 <osDelay>
        for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 8008806:	3601      	adds	r6, #1
 8008808:	b2b6      	uxth	r6, r6
 800880a:	2e0b      	cmp	r6, #11
 800880c:	d801      	bhi.n	8008812 <CellTemp_MonitorTask+0xae>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 800880e:	463c      	mov	r4, r7
 8008810:	e7d1      	b.n	80087b6 <CellTemp_MonitorTask+0x52>
        uint32_t current_time = osKernelGetTickCount();
 8008812:	f000 f93d 	bl	8008a90 <osKernelGetTickCount>
 8008816:	4606      	mov	r6, r0
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8008818:	463c      	mov	r4, r7
 800881a:	e026      	b.n	800886a <CellTemp_MonitorTask+0x106>
                            ErrorMgr_SetError(ERROR_OVER_TEMP);
 800881c:	2001      	movs	r0, #1
 800881e:	f000 fb4d 	bl	8008ebc <ErrorMgr_SetError>
 8008822:	e020      	b.n	8008866 <CellTemp_MonitorTask+0x102>
                        ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 8008824:	2004      	movs	r0, #4
 8008826:	f000 fb49 	bl	8008ebc <ErrorMgr_SetError>
 800882a:	e01c      	b.n	8008866 <CellTemp_MonitorTask+0x102>
                    therm->raw_adc = 0;
 800882c:	4b76      	ldr	r3, [pc, #472]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 800882e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8008832:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008836:	2100      	movs	r1, #0
 8008838:	8111      	strh	r1, [r2, #8]
                    therm->temperature = -127.0f;
 800883a:	4613      	mov	r3, r2
 800883c:	4a74      	ldr	r2, [pc, #464]	@ (8008a10 <CellTemp_MonitorTask+0x2ac>)
 800883e:	605a      	str	r2, [r3, #4]
                    ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 8008840:	2004      	movs	r0, #4
 8008842:	f000 fb3b 	bl	8008ebc <ErrorMgr_SetError>
 8008846:	e00e      	b.n	8008866 <CellTemp_MonitorTask+0x102>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8008848:	00e3      	lsls	r3, r4, #3
 800884a:	b2db      	uxtb	r3, r3
 800884c:	4a6e      	ldr	r2, [pc, #440]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 800884e:	f892 1541 	ldrb.w	r1, [r2, #1345]	@ 0x541
 8008852:	440b      	add	r3, r1
 8008854:	b2db      	uxtb	r3, r3
                temp_state.thermistors[therm_idx].temperature = -127.0f;
 8008856:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800885a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800885e:	486c      	ldr	r0, [pc, #432]	@ (8008a10 <CellTemp_MonitorTask+0x2ac>)
 8008860:	6048      	str	r0, [r1, #4]
                temp_state.thermistors[therm_idx].raw_adc = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	810b      	strh	r3, [r1, #8]
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8008866:	3401      	adds	r4, #1
 8008868:	b2e4      	uxtb	r4, r4
 800886a:	2c06      	cmp	r4, #6
 800886c:	d83c      	bhi.n	80088e8 <CellTemp_MonitorTask+0x184>
            if (CellTemp_IsADCEnabled(adc)) {
 800886e:	4620      	mov	r0, r4
 8008870:	f7ff fde8 	bl	8008444 <CellTemp_IsADCEnabled>
 8008874:	2800      	cmp	r0, #0
 8008876:	d0e7      	beq.n	8008848 <CellTemp_MonitorTask+0xe4>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8008878:	00e5      	lsls	r5, r4, #3
 800887a:	b2ed      	uxtb	r5, r5
 800887c:	4b62      	ldr	r3, [pc, #392]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 800887e:	f893 2541 	ldrb.w	r2, [r3, #1345]	@ 0x541
 8008882:	4415      	add	r5, r2
 8008884:	b2ed      	uxtb	r5, r5
                if (therm->sample_count > 0) {
 8008886:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800888a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800888e:	8a9b      	ldrh	r3, [r3, #20]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0cb      	beq.n	800882c <CellTemp_MonitorTask+0xc8>
                    therm->raw_adc = (uint16_t)(therm->adc_accumulator / therm->sample_count);
 8008894:	f8df 9170 	ldr.w	r9, [pc, #368]	@ 8008a08 <CellTemp_MonitorTask+0x2a4>
 8008898:	eb09 08c2 	add.w	r8, r9, r2, lsl #3
 800889c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80088a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80088a4:	b280      	uxth	r0, r0
 80088a6:	f8a8 0008 	strh.w	r0, [r8, #8]
                    therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 80088aa:	f7ff feed 	bl	8008688 <CellTemp_CalculateTemperature>
 80088ae:	ed88 0a01 	vstr	s0, [r8, #4]
                    therm->last_read_time = current_time;
 80088b2:	f8c8 600c 	str.w	r6, [r8, #12]
                    if (therm->temperature > -126.0f) {  // Valid temperature reading
 80088b6:	eddf 7a57 	vldr	s15, [pc, #348]	@ 8008a14 <CellTemp_MonitorTask+0x2b0>
 80088ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80088be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c2:	ddaf      	ble.n	8008824 <CellTemp_MonitorTask+0xc0>
                        if (therm->temperature > TEMP_MAX_CELSIUS) {
 80088c4:	eddf 7a54 	vldr	s15, [pc, #336]	@ 8008a18 <CellTemp_MonitorTask+0x2b4>
 80088c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80088cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d0:	dca4      	bgt.n	800881c <CellTemp_MonitorTask+0xb8>
                        } else if (therm->temperature < TEMP_MIN_CELSIUS) {
 80088d2:	eefb 7a04 	vmov.f32	s15, #180	@ 0xc1a00000 -20.0
 80088d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80088da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088de:	d5c2      	bpl.n	8008866 <CellTemp_MonitorTask+0x102>
                            ErrorMgr_SetError(ERROR_UNDER_TEMP);
 80088e0:	2002      	movs	r0, #2
 80088e2:	f000 faeb 	bl	8008ebc <ErrorMgr_SetError>
 80088e6:	e7be      	b.n	8008866 <CellTemp_MonitorTask+0x102>
        if (temp_state.current_mux == 3 || temp_state.current_mux == 7) {
 80088e8:	4b47      	ldr	r3, [pc, #284]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 80088ea:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80088ee:	2b03      	cmp	r3, #3
 80088f0:	d039      	beq.n	8008966 <CellTemp_MonitorTask+0x202>
 80088f2:	2b07      	cmp	r3, #7
 80088f4:	d039      	beq.n	800896a <CellTemp_MonitorTask+0x206>
        temp_state.current_mux++;
 80088f6:	4a44      	ldr	r2, [pc, #272]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 80088f8:	f892 3541 	ldrb.w	r3, [r2, #1345]	@ 0x541
 80088fc:	3301      	adds	r3, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f882 3541 	strb.w	r3, [r2, #1345]	@ 0x541
        if (temp_state.current_mux >= MUX_CHANNELS) {
 8008904:	2b07      	cmp	r3, #7
 8008906:	d832      	bhi.n	800896e <CellTemp_MonitorTask+0x20a>
        CellTemp_SetMuxChannel(temp_state.current_mux);
 8008908:	4b3f      	ldr	r3, [pc, #252]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 800890a:	f893 0541 	ldrb.w	r0, [r3, #1345]	@ 0x541
 800890e:	f7ff fe81 	bl	8008614 <CellTemp_SetMuxChannel>
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8008912:	463c      	mov	r4, r7
 8008914:	e735      	b.n	8008782 <CellTemp_MonitorTask+0x1e>
                        uint8_t msg_idx = adc * 2;
 8008916:	0060      	lsls	r0, r4, #1
                        uint8_t start_therm_idx = adc * MUX_CHANNELS;
 8008918:	00e1      	lsls	r1, r4, #3
                        CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 800891a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 800891e:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8008922:	f7ff fdb5 	bl	8008490 <CellTemp_SendTemperatureMessage>
                        osDelay(2); // Small delay between messages
 8008926:	2002      	movs	r0, #2
 8008928:	f000 f916 	bl	8008b58 <osDelay>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 800892c:	3401      	adds	r4, #1
 800892e:	b2e4      	uxtb	r4, r4
 8008930:	2c06      	cmp	r4, #6
 8008932:	d8e0      	bhi.n	80088f6 <CellTemp_MonitorTask+0x192>
                if (CellTemp_IsADCEnabled(adc)) {
 8008934:	4620      	mov	r0, r4
 8008936:	f7ff fd85 	bl	8008444 <CellTemp_IsADCEnabled>
 800893a:	2800      	cmp	r0, #0
 800893c:	d0f6      	beq.n	800892c <CellTemp_MonitorTask+0x1c8>
                    if (temp_state.current_mux == 3) {
 800893e:	4b32      	ldr	r3, [pc, #200]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 8008940:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8008944:	2b03      	cmp	r3, #3
 8008946:	d0e6      	beq.n	8008916 <CellTemp_MonitorTask+0x1b2>
                        uint8_t msg_idx = adc * 2 + 1;
 8008948:	0060      	lsls	r0, r4, #1
 800894a:	b2c0      	uxtb	r0, r0
 800894c:	3001      	adds	r0, #1
                        uint8_t start_therm_idx = adc * MUX_CHANNELS + 4;
 800894e:	00e1      	lsls	r1, r4, #3
 8008950:	b2c9      	uxtb	r1, r1
 8008952:	3104      	adds	r1, #4
                        CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 8008954:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8008958:	b2c0      	uxtb	r0, r0
 800895a:	f7ff fd99 	bl	8008490 <CellTemp_SendTemperatureMessage>
                        osDelay(2); // Small delay between messages
 800895e:	2002      	movs	r0, #2
 8008960:	f000 f8fa 	bl	8008b58 <osDelay>
 8008964:	e7e2      	b.n	800892c <CellTemp_MonitorTask+0x1c8>
 8008966:	463c      	mov	r4, r7
 8008968:	e7e2      	b.n	8008930 <CellTemp_MonitorTask+0x1cc>
 800896a:	463c      	mov	r4, r7
 800896c:	e7e0      	b.n	8008930 <CellTemp_MonitorTask+0x1cc>
            temp_state.current_mux = 0;
 800896e:	4613      	mov	r3, r2
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2541 	strb.w	r2, [r3, #1345]	@ 0x541
            temp_state.cycle_count++;
 8008976:	f8d3 2544 	ldr.w	r2, [r3, #1348]	@ 0x544
 800897a:	3201      	adds	r2, #1
 800897c:	f8c3 2544 	str.w	r2, [r3, #1348]	@ 0x544
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8008980:	463c      	mov	r4, r7
            uint8_t any_sensor_fault = 0;
 8008982:	463d      	mov	r5, r7
            uint8_t any_under_temp = 0;
 8008984:	46b8      	mov	r8, r7
            uint8_t any_over_temp = 0;
 8008986:	463e      	mov	r6, r7
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8008988:	e002      	b.n	8008990 <CellTemp_MonitorTask+0x22c>
                        any_sensor_fault = 1;
 800898a:	2501      	movs	r5, #1
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 800898c:	3401      	adds	r4, #1
 800898e:	b2e4      	uxtb	r4, r4
 8008990:	2c37      	cmp	r4, #55	@ 0x37
 8008992:	d826      	bhi.n	80089e2 <CellTemp_MonitorTask+0x27e>
                if (CellTemp_IsADCEnabled(therm_adc)) {
 8008994:	f3c4 00c7 	ubfx	r0, r4, #3, #8
 8008998:	f7ff fd54 	bl	8008444 <CellTemp_IsADCEnabled>
 800899c:	2800      	cmp	r0, #0
 800899e:	d0f5      	beq.n	800898c <CellTemp_MonitorTask+0x228>
                    float temp = temp_state.thermistors[i].temperature;
 80089a0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80089a4:	4b18      	ldr	r3, [pc, #96]	@ (8008a08 <CellTemp_MonitorTask+0x2a4>)
 80089a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089aa:	edd3 7a01 	vldr	s15, [r3, #4]
                    if (temp <= -126.0f) {
 80089ae:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008a14 <CellTemp_MonitorTask+0x2b0>
 80089b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ba:	d9e6      	bls.n	800898a <CellTemp_MonitorTask+0x226>
                    } else if (temp > TEMP_MAX_CELSIUS) {
 80089bc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8008a18 <CellTemp_MonitorTask+0x2b4>
 80089c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c8:	dc09      	bgt.n	80089de <CellTemp_MonitorTask+0x27a>
                    } else if (temp < TEMP_MIN_CELSIUS) {
 80089ca:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 80089ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d6:	d5d9      	bpl.n	800898c <CellTemp_MonitorTask+0x228>
                        any_under_temp = 1;
 80089d8:	f04f 0801 	mov.w	r8, #1
 80089dc:	e7d6      	b.n	800898c <CellTemp_MonitorTask+0x228>
                        any_over_temp = 1;
 80089de:	2601      	movs	r6, #1
 80089e0:	e7d4      	b.n	800898c <CellTemp_MonitorTask+0x228>
            if (!any_over_temp) {
 80089e2:	b146      	cbz	r6, 80089f6 <CellTemp_MonitorTask+0x292>
            if (!any_under_temp) {
 80089e4:	f1b8 0f00 	cmp.w	r8, #0
 80089e8:	d009      	beq.n	80089fe <CellTemp_MonitorTask+0x29a>
            if (!any_sensor_fault) {
 80089ea:	2d00      	cmp	r5, #0
 80089ec:	d18c      	bne.n	8008908 <CellTemp_MonitorTask+0x1a4>
                ErrorMgr_ClearError(ERROR_TEMP_SENSOR_FAULT);
 80089ee:	2004      	movs	r0, #4
 80089f0:	f000 fa8a 	bl	8008f08 <ErrorMgr_ClearError>
 80089f4:	e788      	b.n	8008908 <CellTemp_MonitorTask+0x1a4>
                ErrorMgr_ClearError(ERROR_OVER_TEMP);
 80089f6:	2001      	movs	r0, #1
 80089f8:	f000 fa86 	bl	8008f08 <ErrorMgr_ClearError>
 80089fc:	e7f2      	b.n	80089e4 <CellTemp_MonitorTask+0x280>
                ErrorMgr_ClearError(ERROR_UNDER_TEMP);
 80089fe:	2002      	movs	r0, #2
 8008a00:	f000 fa82 	bl	8008f08 <ErrorMgr_ClearError>
 8008a04:	e7f1      	b.n	80089ea <CellTemp_MonitorTask+0x286>
 8008a06:	bf00      	nop
 8008a08:	200000a0 	.word	0x200000a0
 8008a0c:	0800e0e0 	.word	0x0800e0e0
 8008a10:	c2fe0000 	.word	0xc2fe0000
 8008a14:	c2fc0000 	.word	0xc2fc0000
 8008a18:	42700000 	.word	0x42700000

08008a1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008a1c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8008a1e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008a22:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008a24:	f004 fe86 	bl	800d734 <xTaskGetSchedulerState>
 8008a28:	2801      	cmp	r0, #1
 8008a2a:	d100      	bne.n	8008a2e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8008a2c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8008a2e:	f000 ff49 	bl	80098c4 <xPortSysTickHandler>
}
 8008a32:	e7fb      	b.n	8008a2c <SysTick_Handler+0x10>

08008a34 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a34:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a38:	b92b      	cbnz	r3, 8008a46 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a3a:	4b06      	ldr	r3, [pc, #24]	@ (8008a54 <osKernelInitialize+0x20>)
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	b928      	cbnz	r0, 8008a4c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a40:	2201      	movs	r2, #1
 8008a42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a44:	4770      	bx	lr
    stat = osErrorISR;
 8008a46:	f06f 0005 	mvn.w	r0, #5
 8008a4a:	4770      	bx	lr
    } else {
      stat = osError;
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000ca4 	.word	0x20000ca4

08008a58 <osKernelStart>:
 8008a58:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a5c:	b973      	cbnz	r3, 8008a7c <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008a88 <osKernelStart+0x30>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d10d      	bne.n	8008a82 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8008a66:	b510      	push	{r4, lr}
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a68:	2400      	movs	r4, #0
 8008a6a:	4b08      	ldr	r3, [pc, #32]	@ (8008a8c <osKernelStart+0x34>)
 8008a6c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a6e:	4b06      	ldr	r3, [pc, #24]	@ (8008a88 <osKernelStart+0x30>)
 8008a70:	2202      	movs	r2, #2
 8008a72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a74:	f004 fbac 	bl	800d1d0 <vTaskStartScheduler>
      stat = osOK;
 8008a78:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8008a7a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8008a7c:	f06f 0005 	mvn.w	r0, #5
 8008a80:	4770      	bx	lr
      stat = osError;
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008a86:	4770      	bx	lr
 8008a88:	20000ca4 	.word	0x20000ca4
 8008a8c:	e000ed00 	.word	0xe000ed00

08008a90 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008a90:	b508      	push	{r3, lr}
 8008a92:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 8008a96:	b113      	cbz	r3, 8008a9e <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 8008a98:	f004 fbf4 	bl	800d284 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 8008a9c:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 8008a9e:	f004 fbeb 	bl	800d278 <xTaskGetTickCount>
  return (ticks);
 8008aa2:	e7fb      	b.n	8008a9c <osKernelGetTickCount+0xc>

08008aa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aa6:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008aa8:	2400      	movs	r4, #0
 8008aaa:	9405      	str	r4, [sp, #20]
 8008aac:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008ab0:	bb04      	cbnz	r4, 8008af4 <osThreadNew+0x50>
 8008ab2:	b1f8      	cbz	r0, 8008af4 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	d034      	beq.n	8008b22 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8008ab8:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008aba:	6993      	ldr	r3, [r2, #24]
 8008abc:	b12b      	cbz	r3, 8008aca <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8008abe:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	2b37      	cmp	r3, #55	@ 0x37
 8008ac4:	d902      	bls.n	8008acc <osThreadNew+0x28>
        return (NULL);
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e015      	b.n	8008af6 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8008aca:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008acc:	6853      	ldr	r3, [r2, #4]
 8008ace:	f013 0f01 	tst.w	r3, #1
 8008ad2:	d13f      	bne.n	8008b54 <osThreadNew+0xb0>
      }

      if (attr->stack_size > 0U) {
 8008ad4:	6954      	ldr	r4, [r2, #20]
 8008ad6:	b184      	cbz	r4, 8008afa <osThreadNew+0x56>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ad8:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008adc:	6893      	ldr	r3, [r2, #8]
 8008ade:	b12b      	cbz	r3, 8008aec <osThreadNew+0x48>
 8008ae0:	68d7      	ldr	r7, [r2, #12]
 8008ae2:	2f5b      	cmp	r7, #91	@ 0x5b
 8008ae4:	d902      	bls.n	8008aec <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ae6:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ae8:	b107      	cbz	r7, 8008aec <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008aea:	b984      	cbnz	r4, 8008b0e <osThreadNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008aec:	b143      	cbz	r3, 8008b00 <osThreadNew+0x5c>
    mem  = -1;
 8008aee:	f04f 33ff 	mov.w	r3, #4294967295
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8008af2:	b30b      	cbz	r3, 8008b38 <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008af4:	9805      	ldr	r0, [sp, #20]
}
 8008af6:	b007      	add	sp, #28
 8008af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008afa:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8008afe:	e7ed      	b.n	8008adc <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b00:	68d3      	ldr	r3, [r2, #12]
 8008b02:	b9a3      	cbnz	r3, 8008b2e <osThreadNew+0x8a>
 8008b04:	6913      	ldr	r3, [r2, #16]
 8008b06:	b1ab      	cbz	r3, 8008b34 <osThreadNew+0x90>
    mem  = -1;
 8008b08:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0c:	e7f1      	b.n	8008af2 <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	9701      	str	r7, [sp, #4]
 8008b12:	9600      	str	r6, [sp, #0]
 8008b14:	460b      	mov	r3, r1
 8008b16:	4662      	mov	r2, ip
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f004 faeb 	bl	800d0f4 <xTaskCreateStatic>
 8008b1e:	9005      	str	r0, [sp, #20]
 8008b20:	e7e8      	b.n	8008af4 <osThreadNew+0x50>
    name = NULL;
 8008b22:	4615      	mov	r5, r2
      mem = 0;
 8008b24:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8008b26:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8008b28:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8008b2c:	e7e1      	b.n	8008af2 <osThreadNew+0x4e>
    mem  = -1;
 8008b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b32:	e7de      	b.n	8008af2 <osThreadNew+0x4e>
          mem = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	e7dc      	b.n	8008af2 <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b38:	ab05      	add	r3, sp, #20
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	9600      	str	r6, [sp, #0]
 8008b3e:	460b      	mov	r3, r1
 8008b40:	fa1f f28c 	uxth.w	r2, ip
 8008b44:	4629      	mov	r1, r5
 8008b46:	f004 fb10 	bl	800d16a <xTaskCreate>
 8008b4a:	2801      	cmp	r0, #1
 8008b4c:	d0d2      	beq.n	8008af4 <osThreadNew+0x50>
            hTask = NULL;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	e7cf      	b.n	8008af4 <osThreadNew+0x50>
        return (NULL);
 8008b54:	2000      	movs	r0, #0
 8008b56:	e7ce      	b.n	8008af6 <osThreadNew+0x52>

08008b58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b58:	b508      	push	{r3, lr}
 8008b5a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b5e:	b933      	cbnz	r3, 8008b6e <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008b60:	b908      	cbnz	r0, 8008b66 <osDelay+0xe>
    stat = osOK;
 8008b62:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008b64:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8008b66:	f004 fc9d 	bl	800d4a4 <vTaskDelay>
    stat = osOK;
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	e7fa      	b.n	8008b64 <osDelay+0xc>
    stat = osErrorISR;
 8008b6e:	f06f 0005 	mvn.w	r0, #5
 8008b72:	e7f7      	b.n	8008b64 <osDelay+0xc>

08008b74 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	d13e      	bne.n	8008bfc <osMutexNew+0x88>
 8008b7e:	4604      	mov	r4, r0
    if (attr != NULL) {
 8008b80:	b308      	cbz	r0, 8008bc6 <osMutexNew+0x52>
      type = attr->attr_bits;
 8008b82:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008b84:	f013 0601 	ands.w	r6, r3, #1
 8008b88:	d000      	beq.n	8008b8c <osMutexNew+0x18>
      rmtx = 1U;
 8008b8a:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008b8c:	f013 0f08 	tst.w	r3, #8
 8008b90:	d137      	bne.n	8008c02 <osMutexNew+0x8e>
      mem = -1;

      if (attr != NULL) {
 8008b92:	b354      	cbz	r4, 8008bea <osMutexNew+0x76>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008b94:	68a1      	ldr	r1, [r4, #8]
 8008b96:	b111      	cbz	r1, 8008b9e <osMutexNew+0x2a>
 8008b98:	68e3      	ldr	r3, [r4, #12]
 8008b9a:	2b4f      	cmp	r3, #79	@ 0x4f
 8008b9c:	d81a      	bhi.n	8008bd4 <osMutexNew+0x60>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b9e:	b1a1      	cbz	r1, 8008bca <osMutexNew+0x56>
      mem = -1;
 8008ba0:	f04f 33ff 	mov.w	r3, #4294967295
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008ba4:	bb7b      	cbnz	r3, 8008c06 <osMutexNew+0x92>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008ba6:	b326      	cbz	r6, 8008bf2 <osMutexNew+0x7e>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008ba8:	2004      	movs	r0, #4
 8008baa:	f001 f9a8 	bl	8009efe <xQueueCreateMutex>
 8008bae:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008bb0:	b32d      	cbz	r5, 8008bfe <osMutexNew+0x8a>
        if (attr != NULL) {
 8008bb2:	b104      	cbz	r4, 8008bb6 <osMutexNew+0x42>
          name = attr->name;
 8008bb4:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8008bb6:	4621      	mov	r1, r4
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f001 fc3b 	bl	800a434 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008bbe:	b1f6      	cbz	r6, 8008bfe <osMutexNew+0x8a>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008bc0:	f045 0501 	orr.w	r5, r5, #1
 8008bc4:	e01b      	b.n	8008bfe <osMutexNew+0x8a>
      type = 0U;
 8008bc6:	4633      	mov	r3, r6
 8008bc8:	e7e0      	b.n	8008b8c <osMutexNew+0x18>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008bca:	68e3      	ldr	r3, [r4, #12]
 8008bcc:	b17b      	cbz	r3, 8008bee <osMutexNew+0x7a>
      mem = -1;
 8008bce:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd2:	e7e7      	b.n	8008ba4 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8008bd4:	b126      	cbz	r6, 8008be0 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008bd6:	2004      	movs	r0, #4
 8008bd8:	f001 f99c 	bl	8009f14 <xQueueCreateMutexStatic>
 8008bdc:	4605      	mov	r5, r0
 8008bde:	e7e7      	b.n	8008bb0 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008be0:	2001      	movs	r0, #1
 8008be2:	f001 f997 	bl	8009f14 <xQueueCreateMutexStatic>
 8008be6:	4605      	mov	r5, r0
 8008be8:	e7e2      	b.n	8008bb0 <osMutexNew+0x3c>
        mem = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	e7da      	b.n	8008ba4 <osMutexNew+0x30>
            mem = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e7d8      	b.n	8008ba4 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8008bf2:	2001      	movs	r0, #1
 8008bf4:	f001 f983 	bl	8009efe <xQueueCreateMutex>
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	e7d9      	b.n	8008bb0 <osMutexNew+0x3c>
  hMutex = NULL;
 8008bfc:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8008bfe:	4628      	mov	r0, r5
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8008c02:	2500      	movs	r5, #0
 8008c04:	e7fb      	b.n	8008bfe <osMutexNew+0x8a>
 8008c06:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8008c08:	e7f9      	b.n	8008bfe <osMutexNew+0x8a>

08008c0a <osMutexAcquire>:
 8008c0a:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8008c0e:	b9da      	cbnz	r2, 8008c48 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008c10:	b510      	push	{r4, lr}
 8008c12:	4603      	mov	r3, r0
 8008c14:	460c      	mov	r4, r1
 8008c16:	f020 0001 	bic.w	r0, r0, #1
 8008c1a:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d915      	bls.n	8008c4e <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8008c22:	b141      	cbz	r1, 8008c36 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008c24:	4621      	mov	r1, r4
 8008c26:	f001 fb8d 	bl	800a344 <xQueueTakeMutexRecursive>
 8008c2a:	2801      	cmp	r0, #1
 8008c2c:	d012      	beq.n	8008c54 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8008c2e:	b19c      	cbz	r4, 8008c58 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8008c30:	f06f 0001 	mvn.w	r0, #1
 8008c34:	e00f      	b.n	8008c56 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008c36:	4621      	mov	r1, r4
 8008c38:	f001 fab1 	bl	800a19e <xQueueSemaphoreTake>
 8008c3c:	2801      	cmp	r0, #1
 8008c3e:	d00e      	beq.n	8008c5e <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8008c40:	b17c      	cbz	r4, 8008c62 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8008c42:	f06f 0001 	mvn.w	r0, #1
 8008c46:	e006      	b.n	8008c56 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8008c48:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8008c4c:	4770      	bx	lr
    stat = osErrorParameter;
 8008c4e:	f06f 0003 	mvn.w	r0, #3
 8008c52:	e000      	b.n	8008c56 <osMutexAcquire+0x4c>
  stat = osOK;
 8008c54:	2000      	movs	r0, #0
}
 8008c56:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8008c58:	f06f 0002 	mvn.w	r0, #2
 8008c5c:	e7fb      	b.n	8008c56 <osMutexAcquire+0x4c>
  stat = osOK;
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e7f9      	b.n	8008c56 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8008c62:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008c66:	e7f6      	b.n	8008c56 <osMutexAcquire+0x4c>

08008c68 <osMutexRelease>:
 8008c68:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8008c6c:	b9ba      	cbnz	r2, 8008c9e <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c6e:	b508      	push	{r3, lr}
 8008c70:	4603      	mov	r3, r0
 8008c72:	f020 0001 	bic.w	r0, r0, #1
 8008c76:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d912      	bls.n	8008ca4 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8008c7e:	b129      	cbz	r1, 8008c8c <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008c80:	f001 f957 	bl	8009f32 <xQueueGiveMutexRecursive>
 8008c84:	2801      	cmp	r0, #1
 8008c86:	d110      	bne.n	8008caa <osMutexRelease+0x42>
  stat = osOK;
 8008c88:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008c8a:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	461a      	mov	r2, r3
 8008c90:	4619      	mov	r1, r3
 8008c92:	f001 f864 	bl	8009d5e <xQueueGenericSend>
 8008c96:	2801      	cmp	r0, #1
 8008c98:	d10a      	bne.n	8008cb0 <osMutexRelease+0x48>
  stat = osOK;
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e7f5      	b.n	8008c8a <osMutexRelease+0x22>
    stat = osErrorISR;
 8008c9e:	f06f 0005 	mvn.w	r0, #5
}
 8008ca2:	4770      	bx	lr
    stat = osErrorParameter;
 8008ca4:	f06f 0003 	mvn.w	r0, #3
 8008ca8:	e7ef      	b.n	8008c8a <osMutexRelease+0x22>
        stat = osErrorResource;
 8008caa:	f06f 0002 	mvn.w	r0, #2
 8008cae:	e7ec      	b.n	8008c8a <osMutexRelease+0x22>
        stat = osErrorResource;
 8008cb0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008cb4:	e7e9      	b.n	8008c8a <osMutexRelease+0x22>

08008cb6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008cb6:	b570      	push	{r4, r5, r6, lr}
 8008cb8:	b082      	sub	sp, #8
 8008cba:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d13a      	bne.n	8008d38 <osMessageQueueNew+0x82>
 8008cc2:	4614      	mov	r4, r2
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	d03b      	beq.n	8008d40 <osMessageQueueNew+0x8a>
 8008cc8:	2900      	cmp	r1, #0
 8008cca:	d03b      	beq.n	8008d44 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 8008ccc:	b36a      	cbz	r2, 8008d2a <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008cce:	6893      	ldr	r3, [r2, #8]
 8008cd0:	b14b      	cbz	r3, 8008ce6 <osMessageQueueNew+0x30>
 8008cd2:	68d2      	ldr	r2, [r2, #12]
 8008cd4:	2a4f      	cmp	r2, #79	@ 0x4f
 8008cd6:	d906      	bls.n	8008ce6 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008cd8:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008cda:	b122      	cbz	r2, 8008ce6 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008cdc:	fb01 f500 	mul.w	r5, r1, r0
 8008ce0:	6966      	ldr	r6, [r4, #20]
 8008ce2:	42ae      	cmp	r6, r5
 8008ce4:	d21b      	bcs.n	8008d1e <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008ce6:	b173      	cbz	r3, 8008d06 <osMessageQueueNew+0x50>
    mem = -1;
 8008ce8:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8008cec:	bb63      	cbnz	r3, 8008d48 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f001 f811 	bl	8009d16 <xQueueGenericCreate>
 8008cf4:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008cf6:	b305      	cbz	r5, 8008d3a <osMessageQueueNew+0x84>
      if (attr != NULL) {
 8008cf8:	b104      	cbz	r4, 8008cfc <osMessageQueueNew+0x46>
        name = attr->name;
 8008cfa:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f001 fb98 	bl	800a434 <vQueueAddToRegistry>
 8008d04:	e019      	b.n	8008d3a <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d06:	68e3      	ldr	r3, [r4, #12]
 8008d08:	b98b      	cbnz	r3, 8008d2e <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d0a:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d0c:	b113      	cbz	r3, 8008d14 <osMessageQueueNew+0x5e>
    mem = -1;
 8008d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d12:	e7eb      	b.n	8008cec <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008d14:	6963      	ldr	r3, [r4, #20]
 8008d16:	b16b      	cbz	r3, 8008d34 <osMessageQueueNew+0x7e>
    mem = -1;
 8008d18:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1c:	e7e6      	b.n	8008cec <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008d1e:	2500      	movs	r5, #0
 8008d20:	9500      	str	r5, [sp, #0]
 8008d22:	f000 ffae 	bl	8009c82 <xQueueGenericCreateStatic>
 8008d26:	4605      	mov	r5, r0
 8008d28:	e7e5      	b.n	8008cf6 <osMessageQueueNew+0x40>
      mem = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e7de      	b.n	8008cec <osMessageQueueNew+0x36>
    mem = -1;
 8008d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d32:	e7db      	b.n	8008cec <osMessageQueueNew+0x36>
          mem = 0;
 8008d34:	2300      	movs	r3, #0
 8008d36:	e7d9      	b.n	8008cec <osMessageQueueNew+0x36>
  hQueue = NULL;
 8008d38:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	b002      	add	sp, #8
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8008d40:	2500      	movs	r5, #0
 8008d42:	e7fa      	b.n	8008d3a <osMessageQueueNew+0x84>
 8008d44:	2500      	movs	r5, #0
 8008d46:	e7f8      	b.n	8008d3a <osMessageQueueNew+0x84>
 8008d48:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 8008d4a:	e7f6      	b.n	8008d3a <osMessageQueueNew+0x84>

08008d4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	461c      	mov	r4, r3
 8008d52:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008d56:	b1c3      	cbz	r3, 8008d8a <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d58:	b318      	cbz	r0, 8008da2 <osMessageQueuePut+0x56>
 8008d5a:	b329      	cbz	r1, 8008da8 <osMessageQueuePut+0x5c>
 8008d5c:	bb3c      	cbnz	r4, 8008dae <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008d62:	aa01      	add	r2, sp, #4
 8008d64:	f001 f905 	bl	8009f72 <xQueueGenericSendFromISR>
 8008d68:	2801      	cmp	r0, #1
 8008d6a:	d123      	bne.n	8008db4 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008d6c:	9801      	ldr	r0, [sp, #4]
 8008d6e:	b150      	cbz	r0, 8008d86 <osMessageQueuePut+0x3a>
 8008d70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d78:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8008d84:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008d86:	b002      	add	sp, #8
 8008d88:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d8a:	b1b0      	cbz	r0, 8008dba <osMessageQueuePut+0x6e>
 8008d8c:	b1c1      	cbz	r1, 8008dc0 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d8e:	2300      	movs	r3, #0
 8008d90:	4622      	mov	r2, r4
 8008d92:	f000 ffe4 	bl	8009d5e <xQueueGenericSend>
 8008d96:	2801      	cmp	r0, #1
 8008d98:	d015      	beq.n	8008dc6 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 8008d9a:	b1b4      	cbz	r4, 8008dca <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 8008d9c:	f06f 0001 	mvn.w	r0, #1
 8008da0:	e7f1      	b.n	8008d86 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8008da2:	f06f 0003 	mvn.w	r0, #3
 8008da6:	e7ee      	b.n	8008d86 <osMessageQueuePut+0x3a>
 8008da8:	f06f 0003 	mvn.w	r0, #3
 8008dac:	e7eb      	b.n	8008d86 <osMessageQueuePut+0x3a>
 8008dae:	f06f 0003 	mvn.w	r0, #3
 8008db2:	e7e8      	b.n	8008d86 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8008db4:	f06f 0002 	mvn.w	r0, #2
 8008db8:	e7e5      	b.n	8008d86 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8008dba:	f06f 0003 	mvn.w	r0, #3
 8008dbe:	e7e2      	b.n	8008d86 <osMessageQueuePut+0x3a>
 8008dc0:	f06f 0003 	mvn.w	r0, #3
 8008dc4:	e7df      	b.n	8008d86 <osMessageQueuePut+0x3a>
  stat = osOK;
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	e7dd      	b.n	8008d86 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 8008dca:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008dce:	e7da      	b.n	8008d86 <osMessageQueuePut+0x3a>

08008dd0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008dd0:	b510      	push	{r4, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	461c      	mov	r4, r3
 8008dd6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8008dda:	b1c3      	cbz	r3, 8008e0e <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ddc:	b310      	cbz	r0, 8008e24 <osMessageQueueGet+0x54>
 8008dde:	b321      	cbz	r1, 8008e2a <osMessageQueueGet+0x5a>
 8008de0:	bb34      	cbnz	r4, 8008e30 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008de6:	aa01      	add	r2, sp, #4
 8008de8:	f001 facc 	bl	800a384 <xQueueReceiveFromISR>
 8008dec:	2801      	cmp	r0, #1
 8008dee:	d122      	bne.n	8008e36 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8008df0:	9801      	ldr	r0, [sp, #4]
 8008df2:	b150      	cbz	r0, 8008e0a <osMessageQueueGet+0x3a>
 8008df4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008df8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dfc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8008e08:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8008e0a:	b002      	add	sp, #8
 8008e0c:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e0e:	b1a8      	cbz	r0, 8008e3c <osMessageQueueGet+0x6c>
 8008e10:	b1b9      	cbz	r1, 8008e42 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e12:	4622      	mov	r2, r4
 8008e14:	f001 f914 	bl	800a040 <xQueueReceive>
 8008e18:	2801      	cmp	r0, #1
 8008e1a:	d015      	beq.n	8008e48 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 8008e1c:	b1b4      	cbz	r4, 8008e4c <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 8008e1e:	f06f 0001 	mvn.w	r0, #1
 8008e22:	e7f2      	b.n	8008e0a <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8008e24:	f06f 0003 	mvn.w	r0, #3
 8008e28:	e7ef      	b.n	8008e0a <osMessageQueueGet+0x3a>
 8008e2a:	f06f 0003 	mvn.w	r0, #3
 8008e2e:	e7ec      	b.n	8008e0a <osMessageQueueGet+0x3a>
 8008e30:	f06f 0003 	mvn.w	r0, #3
 8008e34:	e7e9      	b.n	8008e0a <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 8008e36:	f06f 0002 	mvn.w	r0, #2
 8008e3a:	e7e6      	b.n	8008e0a <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 8008e3c:	f06f 0003 	mvn.w	r0, #3
 8008e40:	e7e3      	b.n	8008e0a <osMessageQueueGet+0x3a>
 8008e42:	f06f 0003 	mvn.w	r0, #3
 8008e46:	e7e0      	b.n	8008e0a <osMessageQueueGet+0x3a>
  stat = osOK;
 8008e48:	2000      	movs	r0, #0
 8008e4a:	e7de      	b.n	8008e0a <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 8008e4c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8008e50:	e7db      	b.n	8008e0a <osMessageQueueGet+0x3a>
	...

08008e54 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e54:	4b03      	ldr	r3, [pc, #12]	@ (8008e64 <vApplicationGetIdleTaskMemory+0x10>)
 8008e56:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e58:	4b03      	ldr	r3, [pc, #12]	@ (8008e68 <vApplicationGetIdleTaskMemory+0x14>)
 8008e5a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e5c:	2380      	movs	r3, #128	@ 0x80
 8008e5e:	6013      	str	r3, [r2, #0]
}
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	20000c48 	.word	0x20000c48
 8008e68:	20000a48 	.word	0x20000a48

08008e6c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e6c:	4b03      	ldr	r3, [pc, #12]	@ (8008e7c <vApplicationGetTimerTaskMemory+0x10>)
 8008e6e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e70:	4b03      	ldr	r3, [pc, #12]	@ (8008e80 <vApplicationGetTimerTaskMemory+0x14>)
 8008e72:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e78:	6013      	str	r3, [r2, #0]
}
 8008e7a:	4770      	bx	lr
 8008e7c:	200009ec 	.word	0x200009ec
 8008e80:	200005ec 	.word	0x200005ec

08008e84 <ErrorMgr_Init>:
/**
  * @brief  Initialize error manager
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef ErrorMgr_Init(void)
{
 8008e84:	b510      	push	{r4, lr}
    // Initialize error manager structure
    memset(&error_mgr, 0, sizeof(Error_Manager_t));
 8008e86:	4c0a      	ldr	r4, [pc, #40]	@ (8008eb0 <ErrorMgr_Init+0x2c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6023      	str	r3, [r4, #0]
 8008e8c:	6063      	str	r3, [r4, #4]
 8008e8e:	60a3      	str	r3, [r4, #8]
 8008e90:	60e3      	str	r3, [r4, #12]
 8008e92:	6123      	str	r3, [r4, #16]
    
    // Set initial state
    error_mgr.state = BMS_STATE_INIT;
    error_mgr.uptime_seconds = 0;
    error_mgr.fault_count = 0;
    error_mgr.last_heartbeat = osKernelGetTickCount();
 8008e94:	f7ff fdfc 	bl	8008a90 <osKernelGetTickCount>
 8008e98:	6120      	str	r0, [r4, #16]
    
    // Create mutex for thread-safe access
    error_mutex = osMutexNew(&error_mutex_attributes);
 8008e9a:	4806      	ldr	r0, [pc, #24]	@ (8008eb4 <ErrorMgr_Init+0x30>)
 8008e9c:	f7ff fe6a 	bl	8008b74 <osMutexNew>
 8008ea0:	4b05      	ldr	r3, [pc, #20]	@ (8008eb8 <ErrorMgr_Init+0x34>)
 8008ea2:	6018      	str	r0, [r3, #0]
    if (error_mutex == NULL) {
 8008ea4:	b108      	cbz	r0, 8008eaa <ErrorMgr_Init+0x26>
        return HAL_ERROR;
    }
    
    return HAL_OK;
 8008ea6:	2000      	movs	r0, #0
}
 8008ea8:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8008eaa:	2001      	movs	r0, #1
 8008eac:	e7fc      	b.n	8008ea8 <ErrorMgr_Init+0x24>
 8008eae:	bf00      	nop
 8008eb0:	20000cac 	.word	0x20000cac
 8008eb4:	0800e168 	.word	0x0800e168
 8008eb8:	20000ca8 	.word	0x20000ca8

08008ebc <ErrorMgr_SetError>:
  * @brief  Set an error flag
  * @param  error_flag: Error flag bit to set
  * @retval None
  */
void ErrorMgr_SetError(uint32_t error_flag)
{
 8008ebc:	b510      	push	{r4, lr}
 8008ebe:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8008ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8008efc <ErrorMgr_SetError+0x40>)
 8008ec6:	6818      	ldr	r0, [r3, #0]
 8008ec8:	f7ff fe9f 	bl	8008c0a <osMutexAcquire>
 8008ecc:	b9a0      	cbnz	r0, 8008ef8 <ErrorMgr_SetError+0x3c>
        // Check if this is a new error
        if (!(error_mgr.error_flags & error_flag)) {
 8008ece:	4b0c      	ldr	r3, [pc, #48]	@ (8008f00 <ErrorMgr_SetError+0x44>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4223      	tst	r3, r4
 8008ed4:	d109      	bne.n	8008eea <ErrorMgr_SetError+0x2e>
            error_mgr.fault_count++;
 8008ed6:	490a      	ldr	r1, [pc, #40]	@ (8008f00 <ErrorMgr_SetError+0x44>)
 8008ed8:	7a4a      	ldrb	r2, [r1, #9]
 8008eda:	3201      	adds	r2, #1
 8008edc:	724a      	strb	r2, [r1, #9]
            
            // Auto-transition to error state if critical errors occur
            if (error_flag & (ERROR_OVER_TEMP | ERROR_UNDER_VOLTAGE | 
 8008ede:	4a09      	ldr	r2, [pc, #36]	@ (8008f04 <ErrorMgr_SetError+0x48>)
 8008ee0:	4214      	tst	r4, r2
 8008ee2:	d002      	beq.n	8008eea <ErrorMgr_SetError+0x2e>
                              ERROR_OVER_VOLTAGE | ERROR_SHORT_CIRCUIT)) {
                error_mgr.state = BMS_STATE_ERROR;
 8008ee4:	460a      	mov	r2, r1
 8008ee6:	2105      	movs	r1, #5
 8008ee8:	7211      	strb	r1, [r2, #8]
            }
        }
        
        error_mgr.error_flags |= error_flag;
 8008eea:	4323      	orrs	r3, r4
 8008eec:	4a04      	ldr	r2, [pc, #16]	@ (8008f00 <ErrorMgr_SetError+0x44>)
 8008eee:	6013      	str	r3, [r2, #0]
        osMutexRelease(error_mutex);
 8008ef0:	4b02      	ldr	r3, [pc, #8]	@ (8008efc <ErrorMgr_SetError+0x40>)
 8008ef2:	6818      	ldr	r0, [r3, #0]
 8008ef4:	f7ff feb8 	bl	8008c68 <osMutexRelease>
    }
}
 8008ef8:	bd10      	pop	{r4, pc}
 8008efa:	bf00      	nop
 8008efc:	20000ca8 	.word	0x20000ca8
 8008f00:	20000cac 	.word	0x20000cac
 8008f04:	00080301 	.word	0x00080301

08008f08 <ErrorMgr_ClearError>:
  * @brief  Clear an error flag
  * @param  error_flag: Error flag bit to clear
  * @retval None
  */
void ErrorMgr_ClearError(uint32_t error_flag)
{
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8008f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f10:	4b0b      	ldr	r3, [pc, #44]	@ (8008f40 <ErrorMgr_ClearError+0x38>)
 8008f12:	6818      	ldr	r0, [r3, #0]
 8008f14:	f7ff fe79 	bl	8008c0a <osMutexAcquire>
 8008f18:	b960      	cbnz	r0, 8008f34 <ErrorMgr_ClearError+0x2c>
        error_mgr.error_flags &= ~error_flag;
 8008f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8008f44 <ErrorMgr_ClearError+0x3c>)
 8008f1c:	6813      	ldr	r3, [r2, #0]
 8008f1e:	ea23 0304 	bic.w	r3, r3, r4
 8008f22:	6013      	str	r3, [r2, #0]
        
        // If no errors remain and in error state, transition to idle
        if (error_mgr.error_flags == 0 && error_mgr.state == BMS_STATE_ERROR) {
 8008f24:	b913      	cbnz	r3, 8008f2c <ErrorMgr_ClearError+0x24>
 8008f26:	7a13      	ldrb	r3, [r2, #8]
 8008f28:	2b05      	cmp	r3, #5
 8008f2a:	d004      	beq.n	8008f36 <ErrorMgr_ClearError+0x2e>
            error_mgr.state = BMS_STATE_IDLE;
        }
        
        osMutexRelease(error_mutex);
 8008f2c:	4b04      	ldr	r3, [pc, #16]	@ (8008f40 <ErrorMgr_ClearError+0x38>)
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	f7ff fe9a 	bl	8008c68 <osMutexRelease>
    }
}
 8008f34:	bd10      	pop	{r4, pc}
            error_mgr.state = BMS_STATE_IDLE;
 8008f36:	4613      	mov	r3, r2
 8008f38:	2201      	movs	r2, #1
 8008f3a:	721a      	strb	r2, [r3, #8]
 8008f3c:	e7f6      	b.n	8008f2c <ErrorMgr_ClearError+0x24>
 8008f3e:	bf00      	nop
 8008f40:	20000ca8 	.word	0x20000ca8
 8008f44:	20000cac 	.word	0x20000cac

08008f48 <ErrorMgr_SetState>:
  * @brief  Set BMS state
  * @param  state: New BMS state
  * @retval None
  */
void ErrorMgr_SetState(BMS_State_t state)
{
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8008f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f50:	4b0d      	ldr	r3, [pc, #52]	@ (8008f88 <ErrorMgr_SetState+0x40>)
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	f7ff fe59 	bl	8008c0a <osMutexAcquire>
 8008f58:	b980      	cbnz	r0, 8008f7c <ErrorMgr_SetState+0x34>
        // Don't allow transition out of error state if errors exist
        if (error_mgr.state == BMS_STATE_ERROR && error_mgr.error_flags != 0) {
 8008f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f8c <ErrorMgr_SetState+0x44>)
 8008f5c:	7a1b      	ldrb	r3, [r3, #8]
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d106      	bne.n	8008f70 <ErrorMgr_SetState+0x28>
 8008f62:	4b0a      	ldr	r3, [pc, #40]	@ (8008f8c <ErrorMgr_SetState+0x44>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	b11b      	cbz	r3, 8008f70 <ErrorMgr_SetState+0x28>
            // Only allow error state transitions
            if (state != BMS_STATE_ERROR && state != BMS_STATE_SHUTDOWN) {
 8008f68:	1f63      	subs	r3, r4, #5
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d806      	bhi.n	8008f7e <ErrorMgr_SetState+0x36>
                osMutexRelease(error_mutex);
                return;
            }
        }
        
        error_mgr.state = state;
 8008f70:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <ErrorMgr_SetState+0x44>)
 8008f72:	721c      	strb	r4, [r3, #8]
        osMutexRelease(error_mutex);
 8008f74:	4b04      	ldr	r3, [pc, #16]	@ (8008f88 <ErrorMgr_SetState+0x40>)
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	f7ff fe76 	bl	8008c68 <osMutexRelease>
    }
}
 8008f7c:	bd10      	pop	{r4, pc}
                osMutexRelease(error_mutex);
 8008f7e:	4b02      	ldr	r3, [pc, #8]	@ (8008f88 <ErrorMgr_SetState+0x40>)
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f7ff fe71 	bl	8008c68 <osMutexRelease>
                return;
 8008f86:	e7f9      	b.n	8008f7c <ErrorMgr_SetState+0x34>
 8008f88:	20000ca8 	.word	0x20000ca8
 8008f8c:	20000cac 	.word	0x20000cac

08008f90 <ErrorMgr_GetStatus>:
  * @param  mgr: Pointer to structure to fill
  * @retval None
  */
void ErrorMgr_GetStatus(Error_Manager_t *mgr)
{
    if (mgr == NULL) {
 8008f90:	b1b0      	cbz	r0, 8008fc0 <ErrorMgr_GetStatus+0x30>
{
 8008f92:	b538      	push	{r3, r4, r5, lr}
 8008f94:	4604      	mov	r4, r0
        return;
    }
    
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8008f96:	f04f 31ff 	mov.w	r1, #4294967295
 8008f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc4 <ErrorMgr_GetStatus+0x34>)
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	f7ff fe34 	bl	8008c0a <osMutexAcquire>
 8008fa2:	b100      	cbz	r0, 8008fa6 <ErrorMgr_GetStatus+0x16>
        memcpy(mgr, &error_mgr, sizeof(Error_Manager_t));
        osMutexRelease(error_mutex);
    }
}
 8008fa4:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(mgr, &error_mgr, sizeof(Error_Manager_t));
 8008fa6:	4d08      	ldr	r5, [pc, #32]	@ (8008fc8 <ErrorMgr_GetStatus+0x38>)
 8008fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008faa:	6020      	str	r0, [r4, #0]
 8008fac:	6061      	str	r1, [r4, #4]
 8008fae:	60a2      	str	r2, [r4, #8]
 8008fb0:	60e3      	str	r3, [r4, #12]
 8008fb2:	6828      	ldr	r0, [r5, #0]
 8008fb4:	6120      	str	r0, [r4, #16]
        osMutexRelease(error_mutex);
 8008fb6:	4b03      	ldr	r3, [pc, #12]	@ (8008fc4 <ErrorMgr_GetStatus+0x34>)
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	f7ff fe55 	bl	8008c68 <osMutexRelease>
 8008fbe:	e7f1      	b.n	8008fa4 <ErrorMgr_GetStatus+0x14>
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000ca8 	.word	0x20000ca8
 8008fc8:	20000cac 	.word	0x20000cac

08008fcc <ErrorMgr_UpdateUptime>:
/**
  * @brief  Update system uptime (call every second)
  * @retval None
  */
void ErrorMgr_UpdateUptime(void)
{
 8008fcc:	b508      	push	{r3, lr}
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8008fce:	f04f 31ff 	mov.w	r1, #4294967295
 8008fd2:	4b07      	ldr	r3, [pc, #28]	@ (8008ff0 <ErrorMgr_UpdateUptime+0x24>)
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	f7ff fe18 	bl	8008c0a <osMutexAcquire>
 8008fda:	b100      	cbz	r0, 8008fde <ErrorMgr_UpdateUptime+0x12>
        error_mgr.uptime_seconds++;
        osMutexRelease(error_mutex);
    }
}
 8008fdc:	bd08      	pop	{r3, pc}
        error_mgr.uptime_seconds++;
 8008fde:	4a05      	ldr	r2, [pc, #20]	@ (8008ff4 <ErrorMgr_UpdateUptime+0x28>)
 8008fe0:	68d3      	ldr	r3, [r2, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60d3      	str	r3, [r2, #12]
        osMutexRelease(error_mutex);
 8008fe6:	4b02      	ldr	r3, [pc, #8]	@ (8008ff0 <ErrorMgr_UpdateUptime+0x24>)
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	f7ff fe3d 	bl	8008c68 <osMutexRelease>
}
 8008fee:	e7f5      	b.n	8008fdc <ErrorMgr_UpdateUptime+0x10>
 8008ff0:	20000ca8 	.word	0x20000ca8
 8008ff4:	20000cac 	.word	0x20000cac

08008ff8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ff8:	4a13      	ldr	r2, [pc, #76]	@ (8009048 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ffa:	f012 0f07 	tst.w	r2, #7
 8008ffe:	d01f      	beq.n	8009040 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009000:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009002:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009006:	f5c1 533b 	rsb	r3, r1, #11968	@ 0x2ec0
 800900a:	3320      	adds	r3, #32
 800900c:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800900e:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009010:	480e      	ldr	r0, [pc, #56]	@ (800904c <prvHeapInit+0x54>)
 8009012:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009014:	2100      	movs	r1, #0
 8009016:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009018:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800901a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800901c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8009020:	480b      	ldr	r0, [pc, #44]	@ (8009050 <prvHeapInit+0x58>)
 8009022:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009024:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009026:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009028:	1a99      	subs	r1, r3, r2
 800902a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800902c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800902e:	4b09      	ldr	r3, [pc, #36]	@ (8009054 <prvHeapInit+0x5c>)
 8009030:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009032:	4b09      	ldr	r3, [pc, #36]	@ (8009058 <prvHeapInit+0x60>)
 8009034:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009036:	4b09      	ldr	r3, [pc, #36]	@ (800905c <prvHeapInit+0x64>)
 8009038:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800903c:	601a      	str	r2, [r3, #0]
}
 800903e:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009040:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8009044:	e7e4      	b.n	8009010 <prvHeapInit+0x18>
 8009046:	bf00      	nop
 8009048:	20000ce0 	.word	0x20000ce0
 800904c:	20000cd8 	.word	0x20000cd8
 8009050:	20000cd4 	.word	0x20000cd4
 8009054:	20000ccc 	.word	0x20000ccc
 8009058:	20000cd0 	.word	0x20000cd0
 800905c:	20000cc0 	.word	0x20000cc0

08009060 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009060:	4b16      	ldr	r3, [pc, #88]	@ (80090bc <prvInsertBlockIntoFreeList+0x5c>)
 8009062:	461a      	mov	r2, r3
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4283      	cmp	r3, r0
 8009068:	d3fb      	bcc.n	8009062 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800906a:	6851      	ldr	r1, [r2, #4]
 800906c:	eb02 0c01 	add.w	ip, r2, r1
 8009070:	4584      	cmp	ip, r0
 8009072:	d009      	beq.n	8009088 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009074:	6841      	ldr	r1, [r0, #4]
 8009076:	eb00 0c01 	add.w	ip, r0, r1
 800907a:	4563      	cmp	r3, ip
 800907c:	d009      	beq.n	8009092 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800907e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009080:	4290      	cmp	r0, r2
 8009082:	d019      	beq.n	80090b8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009084:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8009086:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009088:	6840      	ldr	r0, [r0, #4]
 800908a:	4401      	add	r1, r0
 800908c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800908e:	4610      	mov	r0, r2
 8009090:	e7f0      	b.n	8009074 <prvInsertBlockIntoFreeList+0x14>
{
 8009092:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009094:	4c0a      	ldr	r4, [pc, #40]	@ (80090c0 <prvInsertBlockIntoFreeList+0x60>)
 8009096:	6824      	ldr	r4, [r4, #0]
 8009098:	42a3      	cmp	r3, r4
 800909a:	d00b      	beq.n	80090b4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	4419      	add	r1, r3
 80090a0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090a2:	6813      	ldr	r3, [r2, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80090a8:	4290      	cmp	r0, r2
 80090aa:	d000      	beq.n	80090ae <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090ac:	6010      	str	r0, [r2, #0]
	}
}
 80090ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090b2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090b4:	6004      	str	r4, [r0, #0]
 80090b6:	e7f7      	b.n	80090a8 <prvInsertBlockIntoFreeList+0x48>
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	20000cd8 	.word	0x20000cd8
 80090c0:	20000cd4 	.word	0x20000cd4

080090c4 <pvPortMalloc>:
{
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80090c8:	f004 f8ce 	bl	800d268 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80090cc:	4b3d      	ldr	r3, [pc, #244]	@ (80091c4 <pvPortMalloc+0x100>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	b1ab      	cbz	r3, 80090fe <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090d2:	4b3d      	ldr	r3, [pc, #244]	@ (80091c8 <pvPortMalloc+0x104>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	421c      	tst	r4, r3
 80090d8:	d114      	bne.n	8009104 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 80090da:	2c00      	cmp	r4, #0
 80090dc:	d06a      	beq.n	80091b4 <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
 80090de:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090e2:	f014 0f07 	tst.w	r4, #7
 80090e6:	d002      	beq.n	80090ee <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090e8:	f022 0207 	bic.w	r2, r2, #7
 80090ec:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090ee:	b1d2      	cbz	r2, 8009126 <pvPortMalloc+0x62>
 80090f0:	4b36      	ldr	r3, [pc, #216]	@ (80091cc <pvPortMalloc+0x108>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d31a      	bcc.n	800912e <pvPortMalloc+0x6a>
				pxBlock = xStart.pxNextFreeBlock;
 80090f8:	4935      	ldr	r1, [pc, #212]	@ (80091d0 <pvPortMalloc+0x10c>)
 80090fa:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090fc:	e01d      	b.n	800913a <pvPortMalloc+0x76>
			prvHeapInit();
 80090fe:	f7ff ff7b 	bl	8008ff8 <prvHeapInit>
 8009102:	e7e6      	b.n	80090d2 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 8009104:	f004 f952 	bl	800d3ac <xTaskResumeAll>
void *pvReturn = NULL;
 8009108:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
 800910a:	f000 f947 	bl	800939c <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800910e:	f015 0f07 	tst.w	r5, #7
 8009112:	d055      	beq.n	80091c0 <pvPortMalloc+0xfc>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	e7fe      	b.n	8009124 <pvPortMalloc+0x60>
	( void ) xTaskResumeAll();
 8009126:	f004 f941 	bl	800d3ac <xTaskResumeAll>
void *pvReturn = NULL;
 800912a:	2500      	movs	r5, #0
 800912c:	e7ed      	b.n	800910a <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800912e:	f004 f93d 	bl	800d3ac <xTaskResumeAll>
void *pvReturn = NULL;
 8009132:	2500      	movs	r5, #0
 8009134:	e7e9      	b.n	800910a <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 8009136:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8009138:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800913a:	6863      	ldr	r3, [r4, #4]
 800913c:	4293      	cmp	r3, r2
 800913e:	d202      	bcs.n	8009146 <pvPortMalloc+0x82>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f7      	bne.n	8009136 <pvPortMalloc+0x72>
				if( pxBlock != pxEnd )
 8009146:	4b1f      	ldr	r3, [pc, #124]	@ (80091c4 <pvPortMalloc+0x100>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	42a3      	cmp	r3, r4
 800914c:	d014      	beq.n	8009178 <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800914e:	680d      	ldr	r5, [r1, #0]
 8009150:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009156:	6863      	ldr	r3, [r4, #4]
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	2b10      	cmp	r3, #16
 800915c:	d914      	bls.n	8009188 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800915e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009160:	f010 0f07 	tst.w	r0, #7
 8009164:	d00c      	beq.n	8009180 <pvPortMalloc+0xbc>
 8009166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	e7fe      	b.n	8009176 <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8009178:	f004 f918 	bl	800d3ac <xTaskResumeAll>
void *pvReturn = NULL;
 800917c:	2500      	movs	r5, #0
 800917e:	e7c4      	b.n	800910a <pvPortMalloc+0x46>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009180:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009182:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009184:	f7ff ff6c 	bl	8009060 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009188:	6862      	ldr	r2, [r4, #4]
 800918a:	4910      	ldr	r1, [pc, #64]	@ (80091cc <pvPortMalloc+0x108>)
 800918c:	680b      	ldr	r3, [r1, #0]
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009192:	4910      	ldr	r1, [pc, #64]	@ (80091d4 <pvPortMalloc+0x110>)
 8009194:	6809      	ldr	r1, [r1, #0]
 8009196:	428b      	cmp	r3, r1
 8009198:	d201      	bcs.n	800919e <pvPortMalloc+0xda>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800919a:	490e      	ldr	r1, [pc, #56]	@ (80091d4 <pvPortMalloc+0x110>)
 800919c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800919e:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <pvPortMalloc+0x104>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80091aa:	4a0b      	ldr	r2, [pc, #44]	@ (80091d8 <pvPortMalloc+0x114>)
 80091ac:	6813      	ldr	r3, [r2, #0]
 80091ae:	3301      	adds	r3, #1
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	e000      	b.n	80091b6 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 80091b4:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 80091b6:	f004 f8f9 	bl	800d3ac <xTaskResumeAll>
		if( pvReturn == NULL )
 80091ba:	2d00      	cmp	r5, #0
 80091bc:	d1a7      	bne.n	800910e <pvPortMalloc+0x4a>
 80091be:	e7a4      	b.n	800910a <pvPortMalloc+0x46>
}
 80091c0:	4628      	mov	r0, r5
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	20000cd4 	.word	0x20000cd4
 80091c8:	20000cc0 	.word	0x20000cc0
 80091cc:	20000cd0 	.word	0x20000cd0
 80091d0:	20000cd8 	.word	0x20000cd8
 80091d4:	20000ccc 	.word	0x20000ccc
 80091d8:	20000cc8 	.word	0x20000cc8

080091dc <vPortFree>:
	if( pv != NULL )
 80091dc:	2800      	cmp	r0, #0
 80091de:	d034      	beq.n	800924a <vPortFree+0x6e>
{
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 80091e4:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80091ec:	4a17      	ldr	r2, [pc, #92]	@ (800924c <vPortFree+0x70>)
 80091ee:	6812      	ldr	r2, [r2, #0]
 80091f0:	4213      	tst	r3, r2
 80091f2:	d108      	bne.n	8009206 <vPortFree+0x2a>
 80091f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	e7fe      	b.n	8009204 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009206:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800920a:	b141      	cbz	r1, 800921e <vPortFree+0x42>
 800920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	e7fe      	b.n	800921c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800921e:	ea23 0302 	bic.w	r3, r3, r2
 8009222:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009226:	f004 f81f 	bl	800d268 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800922a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800922e:	4a08      	ldr	r2, [pc, #32]	@ (8009250 <vPortFree+0x74>)
 8009230:	6813      	ldr	r3, [r2, #0]
 8009232:	440b      	add	r3, r1
 8009234:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009236:	4628      	mov	r0, r5
 8009238:	f7ff ff12 	bl	8009060 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800923c:	4a05      	ldr	r2, [pc, #20]	@ (8009254 <vPortFree+0x78>)
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8009244:	f004 f8b2 	bl	800d3ac <xTaskResumeAll>
}
 8009248:	bd38      	pop	{r3, r4, r5, pc}
 800924a:	4770      	bx	lr
 800924c:	20000cc0 	.word	0x20000cc0
 8009250:	20000cd0 	.word	0x20000cd0
 8009254:	20000cc4 	.word	0x20000cc4

08009258 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009258:	f100 0308 	add.w	r3, r0, #8
 800925c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800925e:	f04f 32ff 	mov.w	r2, #4294967295
 8009262:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009264:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009266:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009268:	2300      	movs	r3, #0
 800926a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800926c:	4770      	bx	lr

0800926e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800926e:	2300      	movs	r3, #0
 8009270:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009272:	4770      	bx	lr

08009274 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009274:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009276:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009278:	689a      	ldr	r2, [r3, #8]
 800927a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800927c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800927e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009280:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009282:	6803      	ldr	r3, [r0, #0]
 8009284:	3301      	adds	r3, #1
 8009286:	6003      	str	r3, [r0, #0]
}
 8009288:	4770      	bx	lr

0800928a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800928a:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800928c:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800928e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009292:	d011      	beq.n	80092b8 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009294:	f100 0308 	add.w	r3, r0, #8
 8009298:	461c      	mov	r4, r3
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	42aa      	cmp	r2, r5
 80092a0:	d9fa      	bls.n	8009298 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092a2:	6863      	ldr	r3, [r4, #4]
 80092a4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092a6:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092a8:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80092aa:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092ac:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80092ae:	6803      	ldr	r3, [r0, #0]
 80092b0:	3301      	adds	r3, #1
 80092b2:	6003      	str	r3, [r0, #0]
}
 80092b4:	bc30      	pop	{r4, r5}
 80092b6:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80092b8:	6904      	ldr	r4, [r0, #16]
 80092ba:	e7f2      	b.n	80092a2 <vListInsert+0x18>

080092bc <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092bc:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092be:	6841      	ldr	r1, [r0, #4]
 80092c0:	6882      	ldr	r2, [r0, #8]
 80092c2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80092c4:	6841      	ldr	r1, [r0, #4]
 80092c6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80092c8:	685a      	ldr	r2, [r3, #4]
 80092ca:	4282      	cmp	r2, r0
 80092cc:	d006      	beq.n	80092dc <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092ce:	2200      	movs	r2, #0
 80092d0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	3a01      	subs	r2, #1
 80092d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092d8:	6818      	ldr	r0, [r3, #0]
}
 80092da:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092dc:	6882      	ldr	r2, [r0, #8]
 80092de:	605a      	str	r2, [r3, #4]
 80092e0:	e7f5      	b.n	80092ce <uxListRemove+0x12>
	...

080092e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80092e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092e6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092e8:	ad03      	add	r5, sp, #12
 80092ea:	2400      	movs	r4, #0
 80092ec:	9403      	str	r4, [sp, #12]
 80092ee:	9404      	str	r4, [sp, #16]
 80092f0:	9405      	str	r4, [sp, #20]
 80092f2:	9406      	str	r4, [sp, #24]
 80092f4:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80092f6:	4b20      	ldr	r3, [pc, #128]	@ (8009378 <MX_GPIO_Init+0x94>)
 80092f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092fa:	f042 0201 	orr.w	r2, r2, #1
 80092fe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009300:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009302:	f002 0201 	and.w	r2, r2, #1
 8009306:	9201      	str	r2, [sp, #4]
 8009308:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800930a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800930c:	f042 0202 	orr.w	r2, r2, #2
 8009310:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	9302      	str	r3, [sp, #8]
 800931a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SIG1_Pin|MUX_SIG3_Pin|BMS_RESET_Pin, GPIO_PIN_RESET);
 800931c:	4e17      	ldr	r6, [pc, #92]	@ (800937c <MX_GPIO_Init+0x98>)
 800931e:	4622      	mov	r2, r4
 8009320:	2162      	movs	r1, #98	@ 0x62
 8009322:	4630      	mov	r0, r6
 8009324:	f002 f9f2 	bl	800b70c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SIG2_GPIO_Port, MUX_SIG2_Pin, GPIO_PIN_RESET);
 8009328:	4622      	mov	r2, r4
 800932a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800932e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009332:	f002 f9eb 	bl	800b70c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_SIG1_Pin MUX_SIG3_Pin BMS_RESET_Pin */
  GPIO_InitStruct.Pin = MUX_SIG1_Pin|MUX_SIG3_Pin|BMS_RESET_Pin;
 8009336:	2362      	movs	r3, #98	@ 0x62
 8009338:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800933a:	2701      	movs	r7, #1
 800933c:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800933e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009340:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009342:	4629      	mov	r1, r5
 8009344:	4630      	mov	r0, r6
 8009346:	f002 f909 	bl	800b55c <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_SIG2_Pin */
  GPIO_InitStruct.Pin = MUX_SIG2_Pin;
 800934a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800934e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009350:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009352:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009354:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(MUX_SIG2_GPIO_Port, &GPIO_InitStruct);
 8009356:	4629      	mov	r1, r5
 8009358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800935c:	f002 f8fe 	bl	800b55c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALERT_IN_Pin */
  GPIO_InitStruct.Pin = ALERT_IN_Pin;
 8009360:	2380      	movs	r3, #128	@ 0x80
 8009362:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009364:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8009368:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800936a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ALERT_IN_GPIO_Port, &GPIO_InitStruct);
 800936c:	4629      	mov	r1, r5
 800936e:	4630      	mov	r0, r6
 8009370:	f002 f8f4 	bl	800b55c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8009374:	b009      	add	sp, #36	@ 0x24
 8009376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009378:	40021000 	.word	0x40021000
 800937c:	48000400 	.word	0x48000400

08009380 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8009380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009382:	2001      	movs	r0, #1
 8009384:	f7ff fbe8 	bl	8008b58 <osDelay>
  for(;;)
 8009388:	e7fb      	b.n	8009382 <StartDefaultTask+0x2>

0800938a <ReadCellVoltage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellVoltage */
void ReadCellVoltage(void *argument)
{
 800938a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellVoltage */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800938c:	2001      	movs	r0, #1
 800938e:	f7ff fbe3 	bl	8008b58 <osDelay>
  for(;;)
 8009392:	e7fb      	b.n	800938c <ReadCellVoltage+0x2>

08009394 <ReadCellTemps>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellTemps */
void ReadCellTemps(void *argument)
{
 8009394:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellTemps */
  /* Call the cell temperature monitoring task */
  CellTemp_MonitorTask(argument);
 8009396:	f7ff f9e5 	bl	8008764 <CellTemp_MonitorTask>
  /* USER CODE END ReadCellTemps */
}
 800939a:	bd08      	pop	{r3, pc}

0800939c <vApplicationMallocFailedHook>:
{
 800939c:	b500      	push	{lr}
 800939e:	b083      	sub	sp, #12
 80093a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
    HAL_GPIO_TogglePin(GPIOB, MUX_SIG1_Pin);
 80093b0:	2102      	movs	r1, #2
 80093b2:	4806      	ldr	r0, [pc, #24]	@ (80093cc <vApplicationMallocFailedHook+0x30>)
 80093b4:	f002 f9af 	bl	800b716 <HAL_GPIO_TogglePin>
    for(volatile uint32_t i = 0; i < 100000; i++);  // Busy wait
 80093b8:	2300      	movs	r3, #0
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	9a01      	ldr	r2, [sp, #4]
 80093be:	4b04      	ldr	r3, [pc, #16]	@ (80093d0 <vApplicationMallocFailedHook+0x34>)
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d8f5      	bhi.n	80093b0 <vApplicationMallocFailedHook+0x14>
 80093c4:	9b01      	ldr	r3, [sp, #4]
 80093c6:	3301      	adds	r3, #1
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	e7f7      	b.n	80093bc <vApplicationMallocFailedHook+0x20>
 80093cc:	48000400 	.word	0x48000400
 80093d0:	0001869f 	.word	0x0001869f

080093d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80093d6:	6802      	ldr	r2, [r0, #0]
 80093d8:	4b03      	ldr	r3, [pc, #12]	@ (80093e8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80093da:	429a      	cmp	r2, r3
 80093dc:	d000      	beq.n	80093e0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80093de:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80093e0:	f001 f874 	bl	800a4cc <HAL_IncTick>
}
 80093e4:	e7fb      	b.n	80093de <HAL_TIM_PeriodElapsedCallback+0xa>
 80093e6:	bf00      	nop
 80093e8:	40001000 	.word	0x40001000

080093ec <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80093ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80093ee:	e7fe      	b.n	80093ee <Error_Handler+0x2>

080093f0 <MX_ADC1_Init>:
{
 80093f0:	b500      	push	{lr}
 80093f2:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 80093f4:	2300      	movs	r3, #0
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	9302      	str	r3, [sp, #8]
 80093fc:	9303      	str	r3, [sp, #12]
 80093fe:	9304      	str	r3, [sp, #16]
 8009400:	9305      	str	r3, [sp, #20]
  hadc1.Instance = ADC1;
 8009402:	4818      	ldr	r0, [pc, #96]	@ (8009464 <MX_ADC1_Init+0x74>)
 8009404:	4a18      	ldr	r2, [pc, #96]	@ (8009468 <MX_ADC1_Init+0x78>)
 8009406:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8009408:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800940a:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800940c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800940e:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8009410:	2204      	movs	r2, #4
 8009412:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8009414:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8009416:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8009418:	2201      	movs	r2, #1
 800941a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800941c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009420:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009422:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8009424:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8009428:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800942a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800942e:	f001 f88d 	bl	800a54c <HAL_ADC_Init>
 8009432:	b998      	cbnz	r0, 800945c <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_5;  // ADC1 (PA0) - first thermistor channel
 8009434:	4b0d      	ldr	r3, [pc, #52]	@ (800946c <MX_ADC1_Init+0x7c>)
 8009436:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009438:	2306      	movs	r3, #6
 800943a:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;  // Longer sampling for high impedance thermistors
 800943c:	2307      	movs	r3, #7
 800943e:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009440:	237f      	movs	r3, #127	@ 0x7f
 8009442:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8009444:	2304      	movs	r3, #4
 8009446:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 8009448:	2300      	movs	r3, #0
 800944a:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800944c:	4669      	mov	r1, sp
 800944e:	4805      	ldr	r0, [pc, #20]	@ (8009464 <MX_ADC1_Init+0x74>)
 8009450:	f001 f9be 	bl	800a7d0 <HAL_ADC_ConfigChannel>
 8009454:	b920      	cbnz	r0, 8009460 <MX_ADC1_Init+0x70>
}
 8009456:	b007      	add	sp, #28
 8009458:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800945c:	f7ff ffc6 	bl	80093ec <Error_Handler>
    Error_Handler();
 8009460:	f7ff ffc4 	bl	80093ec <Error_Handler>
 8009464:	20003cd0 	.word	0x20003cd0
 8009468:	50040000 	.word	0x50040000
 800946c:	14f00020 	.word	0x14f00020

08009470 <MX_CAN1_Init>:
{
 8009470:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 8009472:	480d      	ldr	r0, [pc, #52]	@ (80094a8 <MX_CAN1_Init+0x38>)
 8009474:	4b0d      	ldr	r3, [pc, #52]	@ (80094ac <MX_CAN1_Init+0x3c>)
 8009476:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 10;
 8009478:	230a      	movs	r3, #10
 800947a:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800947c:	2300      	movs	r3, #0
 800947e:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009480:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8009482:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8009486:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8009488:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800948c:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800948e:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8009490:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009492:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8009494:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8009496:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8009498:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800949a:	f001 fd9c 	bl	800afd6 <HAL_CAN_Init>
 800949e:	b900      	cbnz	r0, 80094a2 <MX_CAN1_Init+0x32>
}
 80094a0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80094a2:	f7ff ffa3 	bl	80093ec <Error_Handler>
 80094a6:	bf00      	nop
 80094a8:	20003ca8 	.word	0x20003ca8
 80094ac:	40006400 	.word	0x40006400

080094b0 <MX_CRC_Init>:
{
 80094b0:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80094b2:	4808      	ldr	r0, [pc, #32]	@ (80094d4 <MX_CRC_Init+0x24>)
 80094b4:	4b08      	ldr	r3, [pc, #32]	@ (80094d8 <MX_CRC_Init+0x28>)
 80094b6:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80094bc:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80094be:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80094c0:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80094c2:	2301      	movs	r3, #1
 80094c4:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80094c6:	f001 ffcd 	bl	800b464 <HAL_CRC_Init>
 80094ca:	b900      	cbnz	r0, 80094ce <MX_CRC_Init+0x1e>
}
 80094cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80094ce:	f7ff ff8d 	bl	80093ec <Error_Handler>
 80094d2:	bf00      	nop
 80094d4:	20003c84 	.word	0x20003c84
 80094d8:	40023000 	.word	0x40023000

080094dc <MX_I2C1_Init>:
{
 80094dc:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80094de:	4811      	ldr	r0, [pc, #68]	@ (8009524 <MX_I2C1_Init+0x48>)
 80094e0:	4b11      	ldr	r3, [pc, #68]	@ (8009528 <MX_I2C1_Init+0x4c>)
 80094e2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80094e4:	4b11      	ldr	r3, [pc, #68]	@ (800952c <MX_I2C1_Init+0x50>)
 80094e6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80094ec:	2201      	movs	r2, #1
 80094ee:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80094f0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80094f2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80094f4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80094f6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80094f8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80094fa:	f002 f915 	bl	800b728 <HAL_I2C_Init>
 80094fe:	b950      	cbnz	r0, 8009516 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009500:	2100      	movs	r1, #0
 8009502:	4808      	ldr	r0, [pc, #32]	@ (8009524 <MX_I2C1_Init+0x48>)
 8009504:	f002 f974 	bl	800b7f0 <HAL_I2CEx_ConfigAnalogFilter>
 8009508:	b938      	cbnz	r0, 800951a <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800950a:	2100      	movs	r1, #0
 800950c:	4805      	ldr	r0, [pc, #20]	@ (8009524 <MX_I2C1_Init+0x48>)
 800950e:	f002 f99c 	bl	800b84a <HAL_I2CEx_ConfigDigitalFilter>
 8009512:	b920      	cbnz	r0, 800951e <MX_I2C1_Init+0x42>
}
 8009514:	bd08      	pop	{r3, pc}
    Error_Handler();
 8009516:	f7ff ff69 	bl	80093ec <Error_Handler>
    Error_Handler();
 800951a:	f7ff ff67 	bl	80093ec <Error_Handler>
    Error_Handler();
 800951e:	f7ff ff65 	bl	80093ec <Error_Handler>
 8009522:	bf00      	nop
 8009524:	20003c30 	.word	0x20003c30
 8009528:	40005400 	.word	0x40005400
 800952c:	00503d58 	.word	0x00503d58

08009530 <MX_I2C3_Init>:
{
 8009530:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 8009532:	4811      	ldr	r0, [pc, #68]	@ (8009578 <MX_I2C3_Init+0x48>)
 8009534:	4b11      	ldr	r3, [pc, #68]	@ (800957c <MX_I2C3_Init+0x4c>)
 8009536:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8009538:	4b11      	ldr	r3, [pc, #68]	@ (8009580 <MX_I2C3_Init+0x50>)
 800953a:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009540:	2201      	movs	r2, #1
 8009542:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009544:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8009546:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009548:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800954a:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800954c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800954e:	f002 f8eb 	bl	800b728 <HAL_I2C_Init>
 8009552:	b950      	cbnz	r0, 800956a <MX_I2C3_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009554:	2100      	movs	r1, #0
 8009556:	4808      	ldr	r0, [pc, #32]	@ (8009578 <MX_I2C3_Init+0x48>)
 8009558:	f002 f94a 	bl	800b7f0 <HAL_I2CEx_ConfigAnalogFilter>
 800955c:	b938      	cbnz	r0, 800956e <MX_I2C3_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800955e:	2100      	movs	r1, #0
 8009560:	4805      	ldr	r0, [pc, #20]	@ (8009578 <MX_I2C3_Init+0x48>)
 8009562:	f002 f972 	bl	800b84a <HAL_I2CEx_ConfigDigitalFilter>
 8009566:	b920      	cbnz	r0, 8009572 <MX_I2C3_Init+0x42>
}
 8009568:	bd08      	pop	{r3, pc}
    Error_Handler();
 800956a:	f7ff ff3f 	bl	80093ec <Error_Handler>
    Error_Handler();
 800956e:	f7ff ff3d 	bl	80093ec <Error_Handler>
    Error_Handler();
 8009572:	f7ff ff3b 	bl	80093ec <Error_Handler>
 8009576:	bf00      	nop
 8009578:	20003bdc 	.word	0x20003bdc
 800957c:	40005c00 	.word	0x40005c00
 8009580:	00503d58 	.word	0x00503d58

08009584 <SystemClock_Config>:
{
 8009584:	b500      	push	{lr}
 8009586:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009588:	2244      	movs	r2, #68	@ 0x44
 800958a:	2100      	movs	r1, #0
 800958c:	a805      	add	r0, sp, #20
 800958e:	f004 fc26 	bl	800ddde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009592:	2300      	movs	r3, #0
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	9302      	str	r3, [sp, #8]
 800959a:	9303      	str	r3, [sp, #12]
 800959c:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800959e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80095a2:	f002 faef 	bl	800bb84 <HAL_PWREx_ControlVoltageScaling>
 80095a6:	bb18      	cbnz	r0, 80095f0 <SystemClock_Config+0x6c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80095a8:	2302      	movs	r3, #2
 80095aa:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80095ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095b0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80095b2:	2210      	movs	r2, #16
 80095b4:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80095b6:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80095b8:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80095ba:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80095bc:	2214      	movs	r2, #20
 80095be:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80095c0:	2207      	movs	r2, #7
 80095c2:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80095c4:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80095c6:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80095c8:	a805      	add	r0, sp, #20
 80095ca:	f002 fbbf 	bl	800bd4c <HAL_RCC_OscConfig>
 80095ce:	b988      	cbnz	r0, 80095f4 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80095d0:	230f      	movs	r3, #15
 80095d2:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80095d4:	2303      	movs	r3, #3
 80095d6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80095d8:	2300      	movs	r3, #0
 80095da:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80095dc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80095de:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80095e0:	2104      	movs	r1, #4
 80095e2:	4668      	mov	r0, sp
 80095e4:	f002 fee8 	bl	800c3b8 <HAL_RCC_ClockConfig>
 80095e8:	b930      	cbnz	r0, 80095f8 <SystemClock_Config+0x74>
}
 80095ea:	b017      	add	sp, #92	@ 0x5c
 80095ec:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80095f0:	f7ff fefc 	bl	80093ec <Error_Handler>
    Error_Handler();
 80095f4:	f7ff fefa 	bl	80093ec <Error_Handler>
    Error_Handler();  
 80095f8:	f7ff fef8 	bl	80093ec <Error_Handler>

080095fc <main>:
{
 80095fc:	b508      	push	{r3, lr}
 80095fe:	b672      	cpsid	i
  SysTick->CTRL = 0;
 8009600:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009604:	2200      	movs	r2, #0
 8009606:	611a      	str	r2, [r3, #16]
  SysTick->LOAD = 0;
 8009608:	615a      	str	r2, [r3, #20]
  SysTick->VAL = 0;
 800960a:	619a      	str	r2, [r3, #24]
  HAL_Init();
 800960c:	f000 ff4f 	bl	800a4ae <HAL_Init>
  SystemClock_Config();
 8009610:	f7ff ffb8 	bl	8009584 <SystemClock_Config>
  MX_GPIO_Init();
 8009614:	f7ff fe66 	bl	80092e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009618:	f7ff feea 	bl	80093f0 <MX_ADC1_Init>
  MX_CAN1_Init();
 800961c:	f7ff ff28 	bl	8009470 <MX_CAN1_Init>
  MX_CRC_Init();
 8009620:	f7ff ff46 	bl	80094b0 <MX_CRC_Init>
  MX_I2C1_Init();
 8009624:	f7ff ff5a 	bl	80094dc <MX_I2C1_Init>
  MX_I2C3_Init();
 8009628:	f7ff ff82 	bl	8009530 <MX_I2C3_Init>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800962c:	217f      	movs	r1, #127	@ 0x7f
 800962e:	4824      	ldr	r0, [pc, #144]	@ (80096c0 <main+0xc4>)
 8009630:	f001 fc85 	bl	800af3e <HAL_ADCEx_Calibration_Start>
 8009634:	b108      	cbz	r0, 800963a <main+0x3e>
    Error_Handler();
 8009636:	f7ff fed9 	bl	80093ec <Error_Handler>
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800963a:	4822      	ldr	r0, [pc, #136]	@ (80096c4 <main+0xc8>)
 800963c:	f001 fdf4 	bl	800b228 <HAL_CAN_Start>
 8009640:	b108      	cbz	r0, 8009646 <main+0x4a>
    Error_Handler();
 8009642:	f7ff fed3 	bl	80093ec <Error_Handler>
  osKernelInitialize();
 8009646:	f7ff f9f5 	bl	8008a34 <osKernelInitialize>
  I2C1Handle = osMutexNew(&I2C1_attributes);
 800964a:	481f      	ldr	r0, [pc, #124]	@ (80096c8 <main+0xcc>)
 800964c:	f7ff fa92 	bl	8008b74 <osMutexNew>
 8009650:	4b1e      	ldr	r3, [pc, #120]	@ (80096cc <main+0xd0>)
 8009652:	6018      	str	r0, [r3, #0]
  I2C3Handle = osMutexNew(&I2C3_attributes);
 8009654:	481e      	ldr	r0, [pc, #120]	@ (80096d0 <main+0xd4>)
 8009656:	f7ff fa8d 	bl	8008b74 <osMutexNew>
 800965a:	4b1e      	ldr	r3, [pc, #120]	@ (80096d4 <main+0xd8>)
 800965c:	6018      	str	r0, [r3, #0]
  CANHandle = osMutexNew(&CAN_attributes);
 800965e:	481e      	ldr	r0, [pc, #120]	@ (80096d8 <main+0xdc>)
 8009660:	f7ff fa88 	bl	8008b74 <osMutexNew>
 8009664:	4b1d      	ldr	r3, [pc, #116]	@ (80096dc <main+0xe0>)
 8009666:	6018      	str	r0, [r3, #0]
  if (ErrorMgr_Init() != HAL_OK)
 8009668:	f7ff fc0c 	bl	8008e84 <ErrorMgr_Init>
 800966c:	b108      	cbz	r0, 8009672 <main+0x76>
    Error_Handler();
 800966e:	f7ff febd 	bl	80093ec <Error_Handler>
  if (CAN_Manager_Init() != HAL_OK)
 8009672:	f7fe fe5b 	bl	800832c <CAN_Manager_Init>
 8009676:	b108      	cbz	r0, 800967c <main+0x80>
    Error_Handler();
 8009678:	f7ff feb8 	bl	80093ec <Error_Handler>
  ErrorMgr_SetState(BMS_STATE_IDLE);
 800967c:	2001      	movs	r0, #1
 800967e:	f7ff fc63 	bl	8008f48 <ErrorMgr_SetState>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8009682:	4a17      	ldr	r2, [pc, #92]	@ (80096e0 <main+0xe4>)
 8009684:	2100      	movs	r1, #0
 8009686:	4817      	ldr	r0, [pc, #92]	@ (80096e4 <main+0xe8>)
 8009688:	f7ff fa0c 	bl	8008aa4 <osThreadNew>
 800968c:	4b16      	ldr	r3, [pc, #88]	@ (80096e8 <main+0xec>)
 800968e:	6018      	str	r0, [r3, #0]
  CellVoltageHandle = osThreadNew(ReadCellVoltage, NULL, &CellVoltage_attributes);
 8009690:	4a16      	ldr	r2, [pc, #88]	@ (80096ec <main+0xf0>)
 8009692:	2100      	movs	r1, #0
 8009694:	4816      	ldr	r0, [pc, #88]	@ (80096f0 <main+0xf4>)
 8009696:	f7ff fa05 	bl	8008aa4 <osThreadNew>
 800969a:	4b16      	ldr	r3, [pc, #88]	@ (80096f4 <main+0xf8>)
 800969c:	6018      	str	r0, [r3, #0]
  CellTemperatureHandle = osThreadNew(ReadCellTemps, NULL, &CellTemperature_attributes);
 800969e:	4a16      	ldr	r2, [pc, #88]	@ (80096f8 <main+0xfc>)
 80096a0:	2100      	movs	r1, #0
 80096a2:	4816      	ldr	r0, [pc, #88]	@ (80096fc <main+0x100>)
 80096a4:	f7ff f9fe 	bl	8008aa4 <osThreadNew>
 80096a8:	4b15      	ldr	r3, [pc, #84]	@ (8009700 <main+0x104>)
 80096aa:	6018      	str	r0, [r3, #0]
  CANManagerHandle = osThreadNew(CAN_ManagerTask, NULL, &CANManager_attributes);
 80096ac:	4a15      	ldr	r2, [pc, #84]	@ (8009704 <main+0x108>)
 80096ae:	2100      	movs	r1, #0
 80096b0:	4815      	ldr	r0, [pc, #84]	@ (8009708 <main+0x10c>)
 80096b2:	f7ff f9f7 	bl	8008aa4 <osThreadNew>
 80096b6:	4b15      	ldr	r3, [pc, #84]	@ (800970c <main+0x110>)
 80096b8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80096ba:	f7ff f9cd 	bl	8008a58 <osKernelStart>
  while (1)
 80096be:	e7fe      	b.n	80096be <main+0xc2>
 80096c0:	20003cd0 	.word	0x20003cd0
 80096c4:	20003ca8 	.word	0x20003ca8
 80096c8:	0800e198 	.word	0x0800e198
 80096cc:	20003bc8 	.word	0x20003bc8
 80096d0:	0800e188 	.word	0x0800e188
 80096d4:	20003bc4 	.word	0x20003bc4
 80096d8:	0800e178 	.word	0x0800e178
 80096dc:	20003bc0 	.word	0x20003bc0
 80096e0:	0800e214 	.word	0x0800e214
 80096e4:	08009381 	.word	0x08009381
 80096e8:	20003bd8 	.word	0x20003bd8
 80096ec:	0800e1f0 	.word	0x0800e1f0
 80096f0:	0800938b 	.word	0x0800938b
 80096f4:	20003bd4 	.word	0x20003bd4
 80096f8:	0800e1cc 	.word	0x0800e1cc
 80096fc:	08009395 	.word	0x08009395
 8009700:	20003bd0 	.word	0x20003bd0
 8009704:	0800e1a8 	.word	0x0800e1a8
 8009708:	080083e1 	.word	0x080083e1
 800970c:	20003bcc 	.word	0x20003bcc

08009710 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009710:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009716:	4b0d      	ldr	r3, [pc, #52]	@ (800974c <prvTaskExitError+0x3c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971e:	d008      	beq.n	8009732 <prvTaskExitError+0x22>
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	e7fe      	b.n	8009730 <prvTaskExitError+0x20>
 8009732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0fc      	beq.n	8009742 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009748:	b002      	add	sp, #8
 800974a:	4770      	bx	lr
 800974c:	20000000 	.word	0x20000000

08009750 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009750:	4808      	ldr	r0, [pc, #32]	@ (8009774 <prvPortStartFirstTask+0x24>)
 8009752:	6800      	ldr	r0, [r0, #0]
 8009754:	6800      	ldr	r0, [r0, #0]
 8009756:	f380 8808 	msr	MSP, r0
 800975a:	f04f 0000 	mov.w	r0, #0
 800975e:	f380 8814 	msr	CONTROL, r0
 8009762:	b662      	cpsie	i
 8009764:	b661      	cpsie	f
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	df00      	svc	0
 8009770:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009772:	0000      	.short	0x0000
 8009774:	e000ed08 	.word	0xe000ed08

08009778 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009778:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009788 <vPortEnableVFP+0x10>
 800977c:	6801      	ldr	r1, [r0, #0]
 800977e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009782:	6001      	str	r1, [r0, #0]
 8009784:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009786:	0000      	.short	0x0000
 8009788:	e000ed88 	.word	0xe000ed88

0800978c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800978c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009790:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009794:	f021 0101 	bic.w	r1, r1, #1
 8009798:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800979c:	4b05      	ldr	r3, [pc, #20]	@ (80097b4 <pxPortInitialiseStack+0x28>)
 800979e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097a2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097a6:	f06f 0302 	mvn.w	r3, #2
 80097aa:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80097ae:	3844      	subs	r0, #68	@ 0x44
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	08009711 	.word	0x08009711
	...

080097c0 <SVC_Handler>:
	__asm volatile (
 80097c0:	4b07      	ldr	r3, [pc, #28]	@ (80097e0 <pxCurrentTCBConst2>)
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	6808      	ldr	r0, [r1, #0]
 80097c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	f380 8809 	msr	PSP, r0
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8811 	msr	BASEPRI, r0
 80097da:	4770      	bx	lr
 80097dc:	f3af 8000 	nop.w

080097e0 <pxCurrentTCBConst2>:
 80097e0:	200042c8 	.word	0x200042c8

080097e4 <vPortEnterCritical>:
 80097e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80097f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009824 <vPortEnterCritical+0x40>)
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d000      	beq.n	8009802 <vPortEnterCritical+0x1e>
}
 8009800:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009802:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009806:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800980a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800980e:	d0f7      	beq.n	8009800 <vPortEnterCritical+0x1c>
 8009810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	e7fe      	b.n	8009820 <vPortEnterCritical+0x3c>
 8009822:	bf00      	nop
 8009824:	20000000 	.word	0x20000000

08009828 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009828:	4b09      	ldr	r3, [pc, #36]	@ (8009850 <vPortExitCritical+0x28>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	b943      	cbnz	r3, 8009840 <vPortExitCritical+0x18>
 800982e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	e7fe      	b.n	800983e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009840:	3b01      	subs	r3, #1
 8009842:	4a03      	ldr	r2, [pc, #12]	@ (8009850 <vPortExitCritical+0x28>)
 8009844:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009846:	b90b      	cbnz	r3, 800984c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009848:	f383 8811 	msr	BASEPRI, r3
}
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	20000000 	.word	0x20000000
	...

08009860 <PendSV_Handler>:
	__asm volatile
 8009860:	f3ef 8009 	mrs	r0, PSP
 8009864:	f3bf 8f6f 	isb	sy
 8009868:	4b15      	ldr	r3, [pc, #84]	@ (80098c0 <pxCurrentTCBConst>)
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	f01e 0f10 	tst.w	lr, #16
 8009870:	bf08      	it	eq
 8009872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987a:	6010      	str	r0, [r2, #0]
 800987c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009880:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009884:	f380 8811 	msr	BASEPRI, r0
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f003 fe2e 	bl	800d4f0 <vTaskSwitchContext>
 8009894:	f04f 0000 	mov.w	r0, #0
 8009898:	f380 8811 	msr	BASEPRI, r0
 800989c:	bc09      	pop	{r0, r3}
 800989e:	6819      	ldr	r1, [r3, #0]
 80098a0:	6808      	ldr	r0, [r1, #0]
 80098a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a6:	f01e 0f10 	tst.w	lr, #16
 80098aa:	bf08      	it	eq
 80098ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098b0:	f380 8809 	msr	PSP, r0
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	f3af 8000 	nop.w

080098c0 <pxCurrentTCBConst>:
 80098c0:	200042c8 	.word	0x200042c8

080098c4 <xPortSysTickHandler>:
{
 80098c4:	b508      	push	{r3, lr}
	__asm volatile
 80098c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ca:	f383 8811 	msr	BASEPRI, r3
 80098ce:	f3bf 8f6f 	isb	sy
 80098d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80098d6:	f003 fcdd 	bl	800d294 <xTaskIncrementTick>
 80098da:	b128      	cbz	r0, 80098e8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80098dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80098e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80098e8:	2300      	movs	r3, #0
 80098ea:	f383 8811 	msr	BASEPRI, r3
}
 80098ee:	bd08      	pop	{r3, pc}

080098f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80098f0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80098f4:	2300      	movs	r3, #0
 80098f6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80098f8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80098fa:	4b05      	ldr	r3, [pc, #20]	@ (8009910 <vPortSetupTimerInterrupt+0x20>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4905      	ldr	r1, [pc, #20]	@ (8009914 <vPortSetupTimerInterrupt+0x24>)
 8009900:	fba1 1303 	umull	r1, r3, r1, r3
 8009904:	099b      	lsrs	r3, r3, #6
 8009906:	3b01      	subs	r3, #1
 8009908:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800990a:	2307      	movs	r3, #7
 800990c:	6113      	str	r3, [r2, #16]
}
 800990e:	4770      	bx	lr
 8009910:	2000000c 	.word	0x2000000c
 8009914:	10624dd3 	.word	0x10624dd3

08009918 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009918:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800991c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8009920:	4b3d      	ldr	r3, [pc, #244]	@ (8009a18 <xPortStartScheduler+0x100>)
 8009922:	429a      	cmp	r2, r3
 8009924:	d01c      	beq.n	8009960 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009926:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800992a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800992e:	4b3b      	ldr	r3, [pc, #236]	@ (8009a1c <xPortStartScheduler+0x104>)
 8009930:	429a      	cmp	r2, r3
 8009932:	d01e      	beq.n	8009972 <xPortStartScheduler+0x5a>
{
 8009934:	b530      	push	{r4, r5, lr}
 8009936:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009938:	4b39      	ldr	r3, [pc, #228]	@ (8009a20 <xPortStartScheduler+0x108>)
 800993a:	781a      	ldrb	r2, [r3, #0]
 800993c:	b2d2      	uxtb	r2, r2
 800993e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009940:	22ff      	movs	r2, #255	@ 0xff
 8009942:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800994c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009950:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009954:	4a33      	ldr	r2, [pc, #204]	@ (8009a24 <xPortStartScheduler+0x10c>)
 8009956:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009958:	4b33      	ldr	r3, [pc, #204]	@ (8009a28 <xPortStartScheduler+0x110>)
 800995a:	2207      	movs	r2, #7
 800995c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800995e:	e01b      	b.n	8009998 <xPortStartScheduler+0x80>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009970:	e7fe      	b.n	8009970 <xPortStartScheduler+0x58>
 8009972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009976:	f383 8811 	msr	BASEPRI, r3
 800997a:	f3bf 8f6f 	isb	sy
 800997e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009982:	e7fe      	b.n	8009982 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 8009984:	4a28      	ldr	r2, [pc, #160]	@ (8009a28 <xPortStartScheduler+0x110>)
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	3b01      	subs	r3, #1
 800998a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800998c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009998:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800999c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099a0:	d1f0      	bne.n	8009984 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099a2:	4b21      	ldr	r3, [pc, #132]	@ (8009a28 <xPortStartScheduler+0x110>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d008      	beq.n	80099bc <xPortStartScheduler+0xa4>
 80099aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	e7fe      	b.n	80099ba <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099bc:	021b      	lsls	r3, r3, #8
 80099be:	4a1a      	ldr	r2, [pc, #104]	@ (8009a28 <xPortStartScheduler+0x110>)
 80099c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80099c6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099c8:	9b01      	ldr	r3, [sp, #4]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	4a14      	ldr	r2, [pc, #80]	@ (8009a20 <xPortStartScheduler+0x108>)
 80099ce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099d0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 80099d4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80099d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80099dc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099e0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80099e4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80099e8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80099ec:	f7ff ff80 	bl	80098f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80099f0:	2500      	movs	r5, #0
 80099f2:	4b0e      	ldr	r3, [pc, #56]	@ (8009a2c <xPortStartScheduler+0x114>)
 80099f4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80099f6:	f7ff febf 	bl	8009778 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099fa:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80099fe:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009a02:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8009a06:	f7ff fea3 	bl	8009750 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009a0a:	f003 fd71 	bl	800d4f0 <vTaskSwitchContext>
	prvTaskExitError();
 8009a0e:	f7ff fe7f 	bl	8009710 <prvTaskExitError>
}
 8009a12:	4628      	mov	r0, r5
 8009a14:	b003      	add	sp, #12
 8009a16:	bd30      	pop	{r4, r5, pc}
 8009a18:	410fc271 	.word	0x410fc271
 8009a1c:	410fc270 	.word	0x410fc270
 8009a20:	e000e400 	.word	0xe000e400
 8009a24:	20003d38 	.word	0x20003d38
 8009a28:	20003d34 	.word	0x20003d34
 8009a2c:	20000000 	.word	0x20000000

08009a30 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a30:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a34:	2b0f      	cmp	r3, #15
 8009a36:	d90e      	bls.n	8009a56 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a38:	4a11      	ldr	r2, [pc, #68]	@ (8009a80 <vPortValidateInterruptPriority+0x50>)
 8009a3a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a3c:	4b11      	ldr	r3, [pc, #68]	@ (8009a84 <vPortValidateInterruptPriority+0x54>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d208      	bcs.n	8009a56 <vPortValidateInterruptPriority+0x26>
 8009a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	e7fe      	b.n	8009a54 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009a5a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8009a5e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a62:	4a09      	ldr	r2, [pc, #36]	@ (8009a88 <vPortValidateInterruptPriority+0x58>)
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d908      	bls.n	8009a7c <vPortValidateInterruptPriority+0x4c>
 8009a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6e:	f383 8811 	msr	BASEPRI, r3
 8009a72:	f3bf 8f6f 	isb	sy
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	e7fe      	b.n	8009a7a <vPortValidateInterruptPriority+0x4a>
	}
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	e000e3f0 	.word	0xe000e3f0
 8009a84:	20003d38 	.word	0x20003d38
 8009a88:	20003d34 	.word	0x20003d34

08009a8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a8c:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a8e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8009a90:	b118      	cbz	r0, 8009a9a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a94:	6818      	ldr	r0, [r3, #0]
 8009a96:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8009a9a:	4770      	bx	lr

08009a9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009aa0:	f7ff fea0 	bl	80097e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009aa4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009aa6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d004      	beq.n	8009ab6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8009aac:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8009aae:	f7ff febb 	bl	8009828 <vPortExitCritical>

	return xReturn;
}
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009ab6:	2401      	movs	r4, #1
 8009ab8:	e7f9      	b.n	8009aae <prvIsQueueFull+0x12>

08009aba <prvIsQueueEmpty>:
{
 8009aba:	b510      	push	{r4, lr}
 8009abc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009abe:	f7ff fe91 	bl	80097e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ac2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009ac4:	b923      	cbnz	r3, 8009ad0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8009ac6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009ac8:	f7ff feae 	bl	8009828 <vPortExitCritical>
}
 8009acc:	4620      	mov	r0, r4
 8009ace:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 8009ad0:	2400      	movs	r4, #0
 8009ad2:	e7f9      	b.n	8009ac8 <prvIsQueueEmpty+0xe>

08009ad4 <prvCopyDataToQueue>:
{
 8009ad4:	b570      	push	{r4, r5, r6, lr}
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ada:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009adc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8009ade:	b95a      	cbnz	r2, 8009af8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ae0:	6803      	ldr	r3, [r0, #0]
 8009ae2:	b11b      	cbz	r3, 8009aec <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009ae4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009aec:	6880      	ldr	r0, [r0, #8]
 8009aee:	f003 fe7d 	bl	800d7ec <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60a3      	str	r3, [r4, #8]
 8009af6:	e7f6      	b.n	8009ae6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009af8:	b96d      	cbnz	r5, 8009b16 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009afa:	6840      	ldr	r0, [r0, #4]
 8009afc:	f004 f9a2 	bl	800de44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b00:	6863      	ldr	r3, [r4, #4]
 8009b02:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009b04:	4413      	add	r3, r2
 8009b06:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b08:	68a2      	ldr	r2, [r4, #8]
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d319      	bcc.n	8009b42 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8009b12:	4628      	mov	r0, r5
 8009b14:	e7e7      	b.n	8009ae6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b16:	68c0      	ldr	r0, [r0, #12]
 8009b18:	f004 f994 	bl	800de44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b1c:	68e3      	ldr	r3, [r4, #12]
 8009b1e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009b20:	4251      	negs	r1, r2
 8009b22:	1a9b      	subs	r3, r3, r2
 8009b24:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d202      	bcs.n	8009b32 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b2c:	68a3      	ldr	r3, [r4, #8]
 8009b2e:	440b      	add	r3, r1
 8009b30:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8009b32:	2d02      	cmp	r5, #2
 8009b34:	d001      	beq.n	8009b3a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8009b36:	2000      	movs	r0, #0
 8009b38:	e7d5      	b.n	8009ae6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b3a:	b126      	cbz	r6, 8009b46 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8009b3c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8009b3e:	2000      	movs	r0, #0
 8009b40:	e7d1      	b.n	8009ae6 <prvCopyDataToQueue+0x12>
 8009b42:	4628      	mov	r0, r5
 8009b44:	e7cf      	b.n	8009ae6 <prvCopyDataToQueue+0x12>
 8009b46:	2000      	movs	r0, #0
 8009b48:	e7cd      	b.n	8009ae6 <prvCopyDataToQueue+0x12>

08009b4a <prvCopyDataFromQueue>:
{
 8009b4a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b4c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8009b4e:	b16a      	cbz	r2, 8009b6c <prvCopyDataFromQueue+0x22>
{
 8009b50:	b510      	push	{r4, lr}
 8009b52:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b54:	68d9      	ldr	r1, [r3, #12]
 8009b56:	4411      	add	r1, r2
 8009b58:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b5a:	689c      	ldr	r4, [r3, #8]
 8009b5c:	42a1      	cmp	r1, r4
 8009b5e:	d301      	bcc.n	8009b64 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b60:	6819      	ldr	r1, [r3, #0]
 8009b62:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b64:	68d9      	ldr	r1, [r3, #12]
 8009b66:	f004 f96d 	bl	800de44 <memcpy>
}
 8009b6a:	bd10      	pop	{r4, pc}
 8009b6c:	4770      	bx	lr

08009b6e <prvUnlockQueue>:
{
 8009b6e:	b538      	push	{r3, r4, r5, lr}
 8009b70:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8009b72:	f7ff fe37 	bl	80097e4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009b76:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8009b7a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b7c:	e001      	b.n	8009b82 <prvUnlockQueue+0x14>
			--cTxLock;
 8009b7e:	3c01      	subs	r4, #1
 8009b80:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b82:	2c00      	cmp	r4, #0
 8009b84:	dd0a      	ble.n	8009b9c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b86:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8009b88:	b143      	cbz	r3, 8009b9c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b8a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8009b8e:	f003 fd2f 	bl	800d5f0 <xTaskRemoveFromEventList>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d0f3      	beq.n	8009b7e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 8009b96:	f003 fdc1 	bl	800d71c <vTaskMissedYield>
 8009b9a:	e7f0      	b.n	8009b7e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8009b9c:	23ff      	movs	r3, #255	@ 0xff
 8009b9e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8009ba2:	f7ff fe41 	bl	8009828 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009ba6:	f7ff fe1d 	bl	80097e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009baa:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8009bae:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bb0:	e001      	b.n	8009bb6 <prvUnlockQueue+0x48>
				--cRxLock;
 8009bb2:	3c01      	subs	r4, #1
 8009bb4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bb6:	2c00      	cmp	r4, #0
 8009bb8:	dd0a      	ble.n	8009bd0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bba:	692b      	ldr	r3, [r5, #16]
 8009bbc:	b143      	cbz	r3, 8009bd0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bbe:	f105 0010 	add.w	r0, r5, #16
 8009bc2:	f003 fd15 	bl	800d5f0 <xTaskRemoveFromEventList>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d0f3      	beq.n	8009bb2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 8009bca:	f003 fda7 	bl	800d71c <vTaskMissedYield>
 8009bce:	e7f0      	b.n	8009bb2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 8009bd0:	23ff      	movs	r3, #255	@ 0xff
 8009bd2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8009bd6:	f7ff fe27 	bl	8009828 <vPortExitCritical>
}
 8009bda:	bd38      	pop	{r3, r4, r5, pc}

08009bdc <xQueueGenericReset>:
{
 8009bdc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8009bde:	b1e0      	cbz	r0, 8009c1a <xQueueGenericReset+0x3e>
 8009be0:	460d      	mov	r5, r1
 8009be2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009be4:	f7ff fdfe 	bl	80097e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009bec:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8009bee:	fb01 3002 	mla	r0, r1, r2, r3
 8009bf2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bf8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bfa:	3a01      	subs	r2, #1
 8009bfc:	fb02 3301 	mla	r3, r2, r1, r3
 8009c00:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c02:	23ff      	movs	r3, #255	@ 0xff
 8009c04:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c08:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8009c0c:	b9fd      	cbnz	r5, 8009c4e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	b963      	cbnz	r3, 8009c2c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8009c12:	f7ff fe09 	bl	8009828 <vPortExitCritical>
}
 8009c16:	2001      	movs	r0, #1
 8009c18:	bd38      	pop	{r3, r4, r5, pc}
 8009c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009c2a:	e7fe      	b.n	8009c2a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c2c:	f104 0010 	add.w	r0, r4, #16
 8009c30:	f003 fcde 	bl	800d5f0 <xTaskRemoveFromEventList>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d0ec      	beq.n	8009c12 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8009c38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	e7e1      	b.n	8009c12 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c4e:	f104 0010 	add.w	r0, r4, #16
 8009c52:	f7ff fb01 	bl	8009258 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c56:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009c5a:	f7ff fafd 	bl	8009258 <vListInitialise>
 8009c5e:	e7d8      	b.n	8009c12 <xQueueGenericReset+0x36>

08009c60 <prvInitialiseNewQueue>:
{
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	461d      	mov	r5, r3
 8009c64:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8009c66:	460b      	mov	r3, r1
 8009c68:	b949      	cbnz	r1, 8009c7e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009c6a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8009c6c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009c6e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009c70:	2101      	movs	r1, #1
 8009c72:	4620      	mov	r0, r4
 8009c74:	f7ff ffb2 	bl	8009bdc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009c78:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 8009c7c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	e7f4      	b.n	8009c6c <prvInitialiseNewQueue+0xc>

08009c82 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c82:	b940      	cbnz	r0, 8009c96 <xQueueGenericCreateStatic+0x14>
 8009c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	e7fe      	b.n	8009c94 <xQueueGenericCreateStatic+0x12>
	{
 8009c96:	b510      	push	{r4, lr}
 8009c98:	b084      	sub	sp, #16
 8009c9a:	461c      	mov	r4, r3
 8009c9c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 8009c9e:	b153      	cbz	r3, 8009cb6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ca0:	b192      	cbz	r2, 8009cc8 <xQueueGenericCreateStatic+0x46>
 8009ca2:	b989      	cbnz	r1, 8009cc8 <xQueueGenericCreateStatic+0x46>
 8009ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	e7fe      	b.n	8009cb4 <xQueueGenericCreateStatic+0x32>
 8009cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009cc6:	e7fe      	b.n	8009cc6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cc8:	b16a      	cbz	r2, 8009ce6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009cca:	2350      	movs	r3, #80	@ 0x50
 8009ccc:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009cce:	9b03      	ldr	r3, [sp, #12]
 8009cd0:	2b50      	cmp	r3, #80	@ 0x50
 8009cd2:	d013      	beq.n	8009cfc <xQueueGenericCreateStatic+0x7a>
 8009cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	e7fe      	b.n	8009ce4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d0ef      	beq.n	8009cca <xQueueGenericCreateStatic+0x48>
 8009cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	e7fe      	b.n	8009cfa <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009cfc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d04:	9400      	str	r4, [sp, #0]
 8009d06:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009d0a:	4660      	mov	r0, ip
 8009d0c:	f7ff ffa8 	bl	8009c60 <prvInitialiseNewQueue>
	}
 8009d10:	4620      	mov	r0, r4
 8009d12:	b004      	add	sp, #16
 8009d14:	bd10      	pop	{r4, pc}

08009d16 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d16:	b940      	cbnz	r0, 8009d2a <xQueueGenericCreate+0x14>
 8009d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
 8009d28:	e7fe      	b.n	8009d28 <xQueueGenericCreate+0x12>
	{
 8009d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	460d      	mov	r5, r1
 8009d30:	4614      	mov	r4, r2
 8009d32:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d34:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009d38:	3050      	adds	r0, #80	@ 0x50
 8009d3a:	f7ff f9c3 	bl	80090c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8009d3e:	4607      	mov	r7, r0
 8009d40:	b150      	cbz	r0, 8009d58 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009d42:	2300      	movs	r3, #0
 8009d44:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d48:	9000      	str	r0, [sp, #0]
 8009d4a:	4623      	mov	r3, r4
 8009d4c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 8009d50:	4629      	mov	r1, r5
 8009d52:	4630      	mov	r0, r6
 8009d54:	f7ff ff84 	bl	8009c60 <prvInitialiseNewQueue>
	}
 8009d58:	4638      	mov	r0, r7
 8009d5a:	b003      	add	sp, #12
 8009d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d5e <xQueueGenericSend>:
{
 8009d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d60:	b085      	sub	sp, #20
 8009d62:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8009d64:	b188      	cbz	r0, 8009d8a <xQueueGenericSend+0x2c>
 8009d66:	460f      	mov	r7, r1
 8009d68:	461d      	mov	r5, r3
 8009d6a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d6c:	b1b1      	cbz	r1, 8009d9c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d6e:	2d02      	cmp	r5, #2
 8009d70:	d120      	bne.n	8009db4 <xQueueGenericSend+0x56>
 8009d72:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d01d      	beq.n	8009db4 <xQueueGenericSend+0x56>
 8009d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	e7fe      	b.n	8009d88 <xQueueGenericSend+0x2a>
 8009d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009d9a:	e7fe      	b.n	8009d9a <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d9c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d0e5      	beq.n	8009d6e <xQueueGenericSend+0x10>
 8009da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	e7fe      	b.n	8009db2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009db4:	f003 fcbe 	bl	800d734 <xTaskGetSchedulerState>
 8009db8:	4606      	mov	r6, r0
 8009dba:	b958      	cbnz	r0, 8009dd4 <xQueueGenericSend+0x76>
 8009dbc:	9b01      	ldr	r3, [sp, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d048      	beq.n	8009e54 <xQueueGenericSend+0xf6>
 8009dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	e7fe      	b.n	8009dd2 <xQueueGenericSend+0x74>
 8009dd4:	2600      	movs	r6, #0
 8009dd6:	e03d      	b.n	8009e54 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dd8:	462a      	mov	r2, r5
 8009dda:	4639      	mov	r1, r7
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f7ff fe79 	bl	8009ad4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009de2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009de4:	b97b      	cbnz	r3, 8009e06 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 8009de6:	b148      	cbz	r0, 8009dfc <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8009de8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8009dfc:	f7ff fd14 	bl	8009828 <vPortExitCritical>
				return pdPASS;
 8009e00:	2001      	movs	r0, #1
}
 8009e02:	b005      	add	sp, #20
 8009e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e06:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8009e0a:	f003 fbf1 	bl	800d5f0 <xTaskRemoveFromEventList>
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d0f4      	beq.n	8009dfc <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 8009e12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	e7e9      	b.n	8009dfc <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 8009e28:	f7ff fcfe 	bl	8009828 <vPortExitCritical>
					return errQUEUE_FULL;
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e7e8      	b.n	8009e02 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e30:	a802      	add	r0, sp, #8
 8009e32:	f003 fc23 	bl	800d67c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e36:	2601      	movs	r6, #1
 8009e38:	e019      	b.n	8009e6e <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8009e40:	e021      	b.n	8009e86 <xQueueGenericSend+0x128>
 8009e42:	2300      	movs	r3, #0
 8009e44:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8009e48:	e023      	b.n	8009e92 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f7ff fe8f 	bl	8009b6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e50:	f003 faac 	bl	800d3ac <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009e54:	f7ff fcc6 	bl	80097e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e58:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009e5a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d3bb      	bcc.n	8009dd8 <xQueueGenericSend+0x7a>
 8009e60:	2d02      	cmp	r5, #2
 8009e62:	d0b9      	beq.n	8009dd8 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d0de      	beq.n	8009e28 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 8009e6a:	2e00      	cmp	r6, #0
 8009e6c:	d0e0      	beq.n	8009e30 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8009e6e:	f7ff fcdb 	bl	8009828 <vPortExitCritical>
		vTaskSuspendAll();
 8009e72:	f003 f9f9 	bl	800d268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e76:	f7ff fcb5 	bl	80097e4 <vPortEnterCritical>
 8009e7a:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 8009e7e:	b252      	sxtb	r2, r2
 8009e80:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e84:	d0d9      	beq.n	8009e3a <xQueueGenericSend+0xdc>
 8009e86:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8009e8a:	b252      	sxtb	r2, r2
 8009e8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e90:	d0d7      	beq.n	8009e42 <xQueueGenericSend+0xe4>
 8009e92:	f7ff fcc9 	bl	8009828 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e96:	a901      	add	r1, sp, #4
 8009e98:	a802      	add	r0, sp, #8
 8009e9a:	f003 fbfb 	bl	800d694 <xTaskCheckForTimeOut>
 8009e9e:	b9d8      	cbnz	r0, 8009ed8 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f7ff fdfb 	bl	8009a9c <prvIsQueueFull>
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d0cf      	beq.n	8009e4a <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009eaa:	9901      	ldr	r1, [sp, #4]
 8009eac:	f104 0010 	add.w	r0, r4, #16
 8009eb0:	f003 fb6a 	bl	800d588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f7ff fe5a 	bl	8009b6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009eba:	f003 fa77 	bl	800d3ac <xTaskResumeAll>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d1c8      	bne.n	8009e54 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 8009ec2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	e7bd      	b.n	8009e54 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f7ff fe48 	bl	8009b6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ede:	f003 fa65 	bl	800d3ac <xTaskResumeAll>
			return errQUEUE_FULL;
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	e78d      	b.n	8009e02 <xQueueGenericSend+0xa4>

08009ee6 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8009ee6:	b148      	cbz	r0, 8009efc <prvInitialiseMutex+0x16>
	{
 8009ee8:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009eea:	2100      	movs	r1, #0
 8009eec:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009eee:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009ef0:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	460a      	mov	r2, r1
 8009ef6:	f7ff ff32 	bl	8009d5e <xQueueGenericSend>
	}
 8009efa:	bd08      	pop	{r3, pc}
 8009efc:	4770      	bx	lr

08009efe <xQueueCreateMutex>:
	{
 8009efe:	b510      	push	{r4, lr}
 8009f00:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009f02:	2100      	movs	r1, #0
 8009f04:	2001      	movs	r0, #1
 8009f06:	f7ff ff06 	bl	8009d16 <xQueueGenericCreate>
 8009f0a:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009f0c:	f7ff ffeb 	bl	8009ee6 <prvInitialiseMutex>
	}
 8009f10:	4620      	mov	r0, r4
 8009f12:	bd10      	pop	{r4, pc}

08009f14 <xQueueCreateMutexStatic>:
	{
 8009f14:	b510      	push	{r4, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009f1a:	9000      	str	r0, [sp, #0]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	4611      	mov	r1, r2
 8009f20:	2001      	movs	r0, #1
 8009f22:	f7ff feae 	bl	8009c82 <xQueueGenericCreateStatic>
 8009f26:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009f28:	f7ff ffdd 	bl	8009ee6 <prvInitialiseMutex>
	}
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	b002      	add	sp, #8
 8009f30:	bd10      	pop	{r4, pc}

08009f32 <xQueueGiveMutexRecursive>:
	{
 8009f32:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8009f34:	b138      	cbz	r0, 8009f46 <xQueueGiveMutexRecursive+0x14>
 8009f36:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009f38:	6885      	ldr	r5, [r0, #8]
 8009f3a:	f003 fbf5 	bl	800d728 <xTaskGetCurrentTaskHandle>
 8009f3e:	4285      	cmp	r5, r0
 8009f40:	d00a      	beq.n	8009f58 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8009f42:	2000      	movs	r0, #0
	}
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4a:	f383 8811 	msr	BASEPRI, r3
 8009f4e:	f3bf 8f6f 	isb	sy
 8009f52:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8009f56:	e7fe      	b.n	8009f56 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009f58:	68e3      	ldr	r3, [r4, #12]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009f5e:	b10b      	cbz	r3, 8009f64 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8009f60:	2001      	movs	r0, #1
		return xReturn;
 8009f62:	e7ef      	b.n	8009f44 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009f64:	461a      	mov	r2, r3
 8009f66:	4619      	mov	r1, r3
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f7ff fef8 	bl	8009d5e <xQueueGenericSend>
			xReturn = pdPASS;
 8009f6e:	2001      	movs	r0, #1
 8009f70:	e7e8      	b.n	8009f44 <xQueueGiveMutexRecursive+0x12>

08009f72 <xQueueGenericSendFromISR>:
{
 8009f72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009f76:	b190      	cbz	r0, 8009f9e <xQueueGenericSendFromISR+0x2c>
 8009f78:	460f      	mov	r7, r1
 8009f7a:	4616      	mov	r6, r2
 8009f7c:	461c      	mov	r4, r3
 8009f7e:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f80:	b1b1      	cbz	r1, 8009fb0 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f82:	2c02      	cmp	r4, #2
 8009f84:	d120      	bne.n	8009fc8 <xQueueGenericSendFromISR+0x56>
 8009f86:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d01d      	beq.n	8009fc8 <xQueueGenericSendFromISR+0x56>
 8009f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	e7fe      	b.n	8009f9c <xQueueGenericSendFromISR+0x2a>
 8009f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa2:	f383 8811 	msr	BASEPRI, r3
 8009fa6:	f3bf 8f6f 	isb	sy
 8009faa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009fae:	e7fe      	b.n	8009fae <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fb0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0e5      	beq.n	8009f82 <xQueueGenericSendFromISR+0x10>
 8009fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	e7fe      	b.n	8009fc6 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fc8:	f7ff fd32 	bl	8009a30 <vPortValidateInterruptPriority>
	__asm volatile
 8009fcc:	f3ef 8811 	mrs	r8, BASEPRI
 8009fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fe0:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8009fe2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d306      	bcc.n	8009ff6 <xQueueGenericSendFromISR+0x84>
 8009fe8:	2c02      	cmp	r4, #2
 8009fea:	d004      	beq.n	8009ff6 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8009fec:	2000      	movs	r0, #0
	__asm volatile
 8009fee:	f388 8811 	msr	BASEPRI, r8
}
 8009ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ff6:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 8009ffa:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ffe:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a000:	4622      	mov	r2, r4
 800a002:	4639      	mov	r1, r7
 800a004:	4628      	mov	r0, r5
 800a006:	f7ff fd65 	bl	8009ad4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a00a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800a00e:	d006      	beq.n	800a01e <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a010:	f109 0301 	add.w	r3, r9, #1
 800a014:	b25b      	sxtb	r3, r3
 800a016:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800a01a:	2001      	movs	r0, #1
 800a01c:	e7e7      	b.n	8009fee <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a01e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a020:	b90b      	cbnz	r3, 800a026 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800a022:	2001      	movs	r0, #1
 800a024:	e7e3      	b.n	8009fee <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a026:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800a02a:	f003 fae1 	bl	800d5f0 <xTaskRemoveFromEventList>
 800a02e:	b118      	cbz	r0, 800a038 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800a030:	b126      	cbz	r6, 800a03c <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a032:	2001      	movs	r0, #1
 800a034:	6030      	str	r0, [r6, #0]
 800a036:	e7da      	b.n	8009fee <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800a038:	2001      	movs	r0, #1
 800a03a:	e7d8      	b.n	8009fee <xQueueGenericSendFromISR+0x7c>
 800a03c:	2001      	movs	r0, #1
 800a03e:	e7d6      	b.n	8009fee <xQueueGenericSendFromISR+0x7c>

0800a040 <xQueueReceive>:
{
 800a040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a042:	b085      	sub	sp, #20
 800a044:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a046:	b190      	cbz	r0, 800a06e <xQueueReceive+0x2e>
 800a048:	460f      	mov	r7, r1
 800a04a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a04c:	b1c1      	cbz	r1, 800a080 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a04e:	f003 fb71 	bl	800d734 <xTaskGetSchedulerState>
 800a052:	4606      	mov	r6, r0
 800a054:	bb00      	cbnz	r0, 800a098 <xQueueReceive+0x58>
 800a056:	9b01      	ldr	r3, [sp, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d05e      	beq.n	800a11a <xQueueReceive+0xda>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	e7fe      	b.n	800a06c <xQueueReceive+0x2c>
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800a07e:	e7fe      	b.n	800a07e <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a080:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0e3      	beq.n	800a04e <xQueueReceive+0xe>
 800a086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	e7fe      	b.n	800a096 <xQueueReceive+0x56>
 800a098:	2600      	movs	r6, #0
 800a09a:	e03e      	b.n	800a11a <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a09c:	4639      	mov	r1, r7
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f7ff fd53 	bl	8009b4a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0a4:	3d01      	subs	r5, #1
 800a0a6:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0a8:	6923      	ldr	r3, [r4, #16]
 800a0aa:	b923      	cbnz	r3, 800a0b6 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800a0ac:	f7ff fbbc 	bl	8009828 <vPortExitCritical>
				return pdPASS;
 800a0b0:	2001      	movs	r0, #1
}
 800a0b2:	b005      	add	sp, #20
 800a0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0b6:	f104 0010 	add.w	r0, r4, #16
 800a0ba:	f003 fa99 	bl	800d5f0 <xTaskRemoveFromEventList>
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	d0f4      	beq.n	800a0ac <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800a0c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a0c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	e7e9      	b.n	800a0ac <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800a0d8:	f7ff fba6 	bl	8009828 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a0dc:	2000      	movs	r0, #0
 800a0de:	e7e8      	b.n	800a0b2 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0e0:	a802      	add	r0, sp, #8
 800a0e2:	f003 facb 	bl	800d67c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0e6:	2601      	movs	r6, #1
 800a0e8:	e021      	b.n	800a12e <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a0f0:	e029      	b.n	800a146 <xQueueReceive+0x106>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a0f8:	e02b      	b.n	800a152 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f7ff fd37 	bl	8009b6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a100:	f003 f954 	bl	800d3ac <xTaskResumeAll>
 800a104:	e009      	b.n	800a11a <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800a106:	4620      	mov	r0, r4
 800a108:	f7ff fd31 	bl	8009b6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a10c:	f003 f94e 	bl	800d3ac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a110:	4620      	mov	r0, r4
 800a112:	f7ff fcd2 	bl	8009aba <prvIsQueueEmpty>
 800a116:	2800      	cmp	r0, #0
 800a118:	d13f      	bne.n	800a19a <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800a11a:	f7ff fb63 	bl	80097e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a11e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a120:	2d00      	cmp	r5, #0
 800a122:	d1bb      	bne.n	800a09c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0d6      	beq.n	800a0d8 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800a12a:	2e00      	cmp	r6, #0
 800a12c:	d0d8      	beq.n	800a0e0 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800a12e:	f7ff fb7b 	bl	8009828 <vPortExitCritical>
		vTaskSuspendAll();
 800a132:	f003 f899 	bl	800d268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a136:	f7ff fb55 	bl	80097e4 <vPortEnterCritical>
 800a13a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a13e:	b25b      	sxtb	r3, r3
 800a140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a144:	d0d1      	beq.n	800a0ea <xQueueReceive+0xaa>
 800a146:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a14a:	b25b      	sxtb	r3, r3
 800a14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a150:	d0cf      	beq.n	800a0f2 <xQueueReceive+0xb2>
 800a152:	f7ff fb69 	bl	8009828 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a156:	a901      	add	r1, sp, #4
 800a158:	a802      	add	r0, sp, #8
 800a15a:	f003 fa9b 	bl	800d694 <xTaskCheckForTimeOut>
 800a15e:	2800      	cmp	r0, #0
 800a160:	d1d1      	bne.n	800a106 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a162:	4620      	mov	r0, r4
 800a164:	f7ff fca9 	bl	8009aba <prvIsQueueEmpty>
 800a168:	2800      	cmp	r0, #0
 800a16a:	d0c6      	beq.n	800a0fa <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a16c:	9901      	ldr	r1, [sp, #4]
 800a16e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a172:	f003 fa09 	bl	800d588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a176:	4620      	mov	r0, r4
 800a178:	f7ff fcf9 	bl	8009b6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a17c:	f003 f916 	bl	800d3ac <xTaskResumeAll>
 800a180:	2800      	cmp	r0, #0
 800a182:	d1ca      	bne.n	800a11a <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800a184:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a18c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	e7bf      	b.n	800a11a <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800a19a:	2000      	movs	r0, #0
 800a19c:	e789      	b.n	800a0b2 <xQueueReceive+0x72>

0800a19e <xQueueSemaphoreTake>:
{
 800a19e:	b570      	push	{r4, r5, r6, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a1a4:	b158      	cbz	r0, 800a1be <xQueueSemaphoreTake+0x20>
 800a1a6:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a1aa:	b18b      	cbz	r3, 800a1d0 <xQueueSemaphoreTake+0x32>
 800a1ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	e7fe      	b.n	800a1bc <xQueueSemaphoreTake+0x1e>
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800a1ce:	e7fe      	b.n	800a1ce <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1d0:	f003 fab0 	bl	800d734 <xTaskGetSchedulerState>
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	b950      	cbnz	r0, 800a1ee <xQueueSemaphoreTake+0x50>
 800a1d8:	9b01      	ldr	r3, [sp, #4]
 800a1da:	b15b      	cbz	r3, 800a1f4 <xQueueSemaphoreTake+0x56>
 800a1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	e7fe      	b.n	800a1ec <xQueueSemaphoreTake+0x4e>
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	4635      	mov	r5, r6
 800a1f2:	e055      	b.n	800a2a0 <xQueueSemaphoreTake+0x102>
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	e053      	b.n	800a2a0 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	b13b      	cbz	r3, 800a210 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	b94b      	cbnz	r3, 800a218 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800a204:	f7ff fb10 	bl	8009828 <vPortExitCritical>
				return pdPASS;
 800a208:	2601      	movs	r6, #1
}
 800a20a:	4630      	mov	r0, r6
 800a20c:	b004      	add	sp, #16
 800a20e:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a210:	f003 fb84 	bl	800d91c <pvTaskIncrementMutexHeldCount>
 800a214:	60a0      	str	r0, [r4, #8]
 800a216:	e7f3      	b.n	800a200 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a218:	f104 0010 	add.w	r0, r4, #16
 800a21c:	f003 f9e8 	bl	800d5f0 <xTaskRemoveFromEventList>
 800a220:	2800      	cmp	r0, #0
 800a222:	d0ef      	beq.n	800a204 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800a224:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a22c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	e7e4      	b.n	800a204 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a23a:	b146      	cbz	r6, 800a24e <xQueueSemaphoreTake+0xb0>
 800a23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	e7fe      	b.n	800a24c <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800a24e:	f7ff faeb 	bl	8009828 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a252:	e7da      	b.n	800a20a <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a254:	a802      	add	r0, sp, #8
 800a256:	f003 fa11 	bl	800d67c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a25a:	2501      	movs	r5, #1
 800a25c:	e02a      	b.n	800a2b4 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800a25e:	2300      	movs	r3, #0
 800a260:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a264:	e032      	b.n	800a2cc <xQueueSemaphoreTake+0x12e>
 800a266:	2300      	movs	r3, #0
 800a268:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a26c:	e034      	b.n	800a2d8 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800a26e:	f7ff fab9 	bl	80097e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a272:	68a0      	ldr	r0, [r4, #8]
 800a274:	f003 fa6e 	bl	800d754 <xTaskPriorityInherit>
 800a278:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800a27a:	f7ff fad5 	bl	8009828 <vPortExitCritical>
 800a27e:	e03b      	b.n	800a2f8 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800a280:	4620      	mov	r0, r4
 800a282:	f7ff fc74 	bl	8009b6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a286:	f003 f891 	bl	800d3ac <xTaskResumeAll>
 800a28a:	e009      	b.n	800a2a0 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800a28c:	4620      	mov	r0, r4
 800a28e:	f7ff fc6e 	bl	8009b6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a292:	f003 f88b 	bl	800d3ac <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a296:	4620      	mov	r0, r4
 800a298:	f7ff fc0f 	bl	8009aba <prvIsQueueEmpty>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d142      	bne.n	800a326 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800a2a0:	f7ff faa0 	bl	80097e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a2a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d1a6      	bne.n	800a1f8 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d0c4      	beq.n	800a23a <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800a2b0:	2d00      	cmp	r5, #0
 800a2b2:	d0cf      	beq.n	800a254 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800a2b4:	f7ff fab8 	bl	8009828 <vPortExitCritical>
		vTaskSuspendAll();
 800a2b8:	f002 ffd6 	bl	800d268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2bc:	f7ff fa92 	bl	80097e4 <vPortEnterCritical>
 800a2c0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a2c4:	b25b      	sxtb	r3, r3
 800a2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ca:	d0c8      	beq.n	800a25e <xQueueSemaphoreTake+0xc0>
 800a2cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a2d0:	b25b      	sxtb	r3, r3
 800a2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d6:	d0c6      	beq.n	800a266 <xQueueSemaphoreTake+0xc8>
 800a2d8:	f7ff faa6 	bl	8009828 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2dc:	a901      	add	r1, sp, #4
 800a2de:	a802      	add	r0, sp, #8
 800a2e0:	f003 f9d8 	bl	800d694 <xTaskCheckForTimeOut>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	d1d1      	bne.n	800a28c <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f7ff fbe6 	bl	8009aba <prvIsQueueEmpty>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	d0c6      	beq.n	800a280 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0ba      	beq.n	800a26e <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2f8:	9901      	ldr	r1, [sp, #4]
 800a2fa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a2fe:	f003 f943 	bl	800d588 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a302:	4620      	mov	r0, r4
 800a304:	f7ff fc33 	bl	8009b6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a308:	f003 f850 	bl	800d3ac <xTaskResumeAll>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1c7      	bne.n	800a2a0 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800a310:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a314:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a318:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	e7bc      	b.n	800a2a0 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800a326:	b90e      	cbnz	r6, 800a32c <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800a328:	2600      	movs	r6, #0
 800a32a:	e76e      	b.n	800a20a <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800a32c:	f7ff fa5a 	bl	80097e4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a330:	4620      	mov	r0, r4
 800a332:	f7ff fbab 	bl	8009a8c <prvGetDisinheritPriorityAfterTimeout>
 800a336:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a338:	68a0      	ldr	r0, [r4, #8]
 800a33a:	f003 fa9f 	bl	800d87c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a33e:	f7ff fa73 	bl	8009828 <vPortExitCritical>
 800a342:	e7f1      	b.n	800a328 <xQueueSemaphoreTake+0x18a>

0800a344 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800a344:	b180      	cbz	r0, 800a368 <xQueueTakeMutexRecursive+0x24>
	{
 800a346:	b570      	push	{r4, r5, r6, lr}
 800a348:	460c      	mov	r4, r1
 800a34a:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a34c:	6886      	ldr	r6, [r0, #8]
 800a34e:	f003 f9eb 	bl	800d728 <xTaskGetCurrentTaskHandle>
 800a352:	4286      	cmp	r6, r0
 800a354:	d011      	beq.n	800a37a <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a356:	4621      	mov	r1, r4
 800a358:	4628      	mov	r0, r5
 800a35a:	f7ff ff20 	bl	800a19e <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800a35e:	b180      	cbz	r0, 800a382 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a360:	68eb      	ldr	r3, [r5, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	60eb      	str	r3, [r5, #12]
		return xReturn;
 800a366:	e00c      	b.n	800a382 <xQueueTakeMutexRecursive+0x3e>
 800a368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800a378:	e7fe      	b.n	800a378 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a37a:	68eb      	ldr	r3, [r5, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 800a380:	2001      	movs	r0, #1
	}
 800a382:	bd70      	pop	{r4, r5, r6, pc}

0800a384 <xQueueReceiveFromISR>:
{
 800a384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a388:	b1b0      	cbz	r0, 800a3b8 <xQueueReceiveFromISR+0x34>
 800a38a:	460d      	mov	r5, r1
 800a38c:	4690      	mov	r8, r2
 800a38e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a390:	b1d9      	cbz	r1, 800a3ca <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a392:	f7ff fb4d 	bl	8009a30 <vPortValidateInterruptPriority>
	__asm volatile
 800a396:	f3ef 8711 	mrs	r7, BASEPRI
 800a39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3ac:	b9ce      	cbnz	r6, 800a3e2 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800a3ae:	2000      	movs	r0, #0
	__asm volatile
 800a3b0:	f387 8811 	msr	BASEPRI, r7
}
 800a3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800a3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a3c8:	e7fe      	b.n	800a3c8 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0e0      	beq.n	800a392 <xQueueReceiveFromISR+0xe>
 800a3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	e7fe      	b.n	800a3e0 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a3e2:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800a3e6:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a3ea:	4629      	mov	r1, r5
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f7ff fbac 	bl	8009b4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a3f2:	1e73      	subs	r3, r6, #1
 800a3f4:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800a3f6:	f1b9 3fff 	cmp.w	r9, #4294967295
 800a3fa:	d006      	beq.n	800a40a <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a3fc:	f109 0301 	add.w	r3, r9, #1
 800a400:	b25b      	sxtb	r3, r3
 800a402:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800a406:	2001      	movs	r0, #1
 800a408:	e7d2      	b.n	800a3b0 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a40a:	6923      	ldr	r3, [r4, #16]
 800a40c:	b90b      	cbnz	r3, 800a412 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800a40e:	2001      	movs	r0, #1
 800a410:	e7ce      	b.n	800a3b0 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a412:	f104 0010 	add.w	r0, r4, #16
 800a416:	f003 f8eb 	bl	800d5f0 <xTaskRemoveFromEventList>
 800a41a:	b130      	cbz	r0, 800a42a <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800a41c:	f1b8 0f00 	cmp.w	r8, #0
 800a420:	d005      	beq.n	800a42e <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a422:	2001      	movs	r0, #1
 800a424:	f8c8 0000 	str.w	r0, [r8]
 800a428:	e7c2      	b.n	800a3b0 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800a42a:	2001      	movs	r0, #1
 800a42c:	e7c0      	b.n	800a3b0 <xQueueReceiveFromISR+0x2c>
 800a42e:	2001      	movs	r0, #1
 800a430:	e7be      	b.n	800a3b0 <xQueueReceiveFromISR+0x2c>
	...

0800a434 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a434:	2300      	movs	r3, #0
 800a436:	2b07      	cmp	r3, #7
 800a438:	d80c      	bhi.n	800a454 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a43a:	4a07      	ldr	r2, [pc, #28]	@ (800a458 <vQueueAddToRegistry+0x24>)
 800a43c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a440:	b10a      	cbz	r2, 800a446 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a442:	3301      	adds	r3, #1
 800a444:	e7f7      	b.n	800a436 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a446:	4a04      	ldr	r2, [pc, #16]	@ (800a458 <vQueueAddToRegistry+0x24>)
 800a448:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a44c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a450:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a452:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	20003d3c 	.word	0x20003d3c

0800a45c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a45c:	b570      	push	{r4, r5, r6, lr}
 800a45e:	4604      	mov	r4, r0
 800a460:	460d      	mov	r5, r1
 800a462:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a464:	f7ff f9be 	bl	80097e4 <vPortEnterCritical>
 800a468:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a46c:	b25b      	sxtb	r3, r3
 800a46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a472:	d00d      	beq.n	800a490 <vQueueWaitForMessageRestricted+0x34>
 800a474:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a478:	b25b      	sxtb	r3, r3
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d00b      	beq.n	800a498 <vQueueWaitForMessageRestricted+0x3c>
 800a480:	f7ff f9d2 	bl	8009828 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a484:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a486:	b15b      	cbz	r3, 800a4a0 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a488:	4620      	mov	r0, r4
 800a48a:	f7ff fb70 	bl	8009b6e <prvUnlockQueue>
	}
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800a490:	2300      	movs	r3, #0
 800a492:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800a496:	e7ed      	b.n	800a474 <vQueueWaitForMessageRestricted+0x18>
 800a498:	2300      	movs	r3, #0
 800a49a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800a49e:	e7ef      	b.n	800a480 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	4629      	mov	r1, r5
 800a4a4:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a4a8:	f003 f886 	bl	800d5b8 <vTaskPlaceOnEventListRestricted>
 800a4ac:	e7ec      	b.n	800a488 <vQueueWaitForMessageRestricted+0x2c>

0800a4ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a4ae:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a4b0:	2003      	movs	r0, #3
 800a4b2:	f000 ffb1 	bl	800b418 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a4b6:	200f      	movs	r0, #15
 800a4b8:	f002 fc12 	bl	800cce0 <HAL_InitTick>
 800a4bc:	b110      	cbz	r0, 800a4c4 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800a4be:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	bd10      	pop	{r4, pc}
 800a4c4:	4604      	mov	r4, r0
    HAL_MspInit();
 800a4c6:	f001 f9eb 	bl	800b8a0 <HAL_MspInit>
 800a4ca:	e7f9      	b.n	800a4c0 <HAL_Init+0x12>

0800a4cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800a4cc:	4b03      	ldr	r3, [pc, #12]	@ (800a4dc <HAL_IncTick+0x10>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	4a03      	ldr	r2, [pc, #12]	@ (800a4e0 <HAL_IncTick+0x14>)
 800a4d2:	6811      	ldr	r1, [r2, #0]
 800a4d4:	440b      	add	r3, r1
 800a4d6:	6013      	str	r3, [r2, #0]
}
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	20000004 	.word	0x20000004
 800a4e0:	20003d7c 	.word	0x20003d7c

0800a4e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800a4e4:	4b01      	ldr	r3, [pc, #4]	@ (800a4ec <HAL_GetTick+0x8>)
 800a4e6:	6818      	ldr	r0, [r3, #0]
}
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	20003d7c 	.word	0x20003d7c

0800a4f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a4f0:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a4f2:	3030      	adds	r0, #48	@ 0x30
 800a4f4:	0a0b      	lsrs	r3, r1, #8
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a4fc:	58c4      	ldr	r4, [r0, r3]
 800a4fe:	f001 011f 	and.w	r1, r1, #31
 800a502:	f04f 0c1f 	mov.w	ip, #31
 800a506:	fa0c fc01 	lsl.w	ip, ip, r1
 800a50a:	ea24 0c0c 	bic.w	ip, r4, ip
 800a50e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800a512:	408a      	lsls	r2, r1
 800a514:	ea4c 0202 	orr.w	r2, ip, r2
 800a518:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a520:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a522:	3014      	adds	r0, #20
 800a524:	0e4b      	lsrs	r3, r1, #25
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a52c:	58c4      	ldr	r4, [r0, r3]
 800a52e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800a532:	f04f 0c07 	mov.w	ip, #7
 800a536:	fa0c fc01 	lsl.w	ip, ip, r1
 800a53a:	ea24 0c0c 	bic.w	ip, r4, ip
 800a53e:	408a      	lsls	r2, r1
 800a540:	ea4c 0202 	orr.w	r2, ip, r2
 800a544:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a54c:	b530      	push	{r4, r5, lr}
 800a54e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a550:	2300      	movs	r3, #0
 800a552:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800a554:	2800      	cmp	r0, #0
 800a556:	f000 80d0 	beq.w	800a6fa <HAL_ADC_Init+0x1ae>
 800a55a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a55c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a55e:	b313      	cbz	r3, 800a5a6 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a560:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a562:	689a      	ldr	r2, [r3, #8]
 800a564:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 800a568:	d005      	beq.n	800a576 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 800a570:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800a574:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a576:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a578:	6893      	ldr	r3, [r2, #8]
 800a57a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800a57e:	d11f      	bne.n	800a5c0 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 800a580:	6893      	ldr	r3, [r2, #8]
 800a582:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a586:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a58a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a58e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a590:	4b5b      	ldr	r3, [pc, #364]	@ (800a700 <HAL_ADC_Init+0x1b4>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	099b      	lsrs	r3, r3, #6
 800a596:	4a5b      	ldr	r2, [pc, #364]	@ (800a704 <HAL_ADC_Init+0x1b8>)
 800a598:	fba2 2303 	umull	r2, r3, r2, r3
 800a59c:	099b      	lsrs	r3, r3, #6
 800a59e:	3301      	adds	r3, #1
 800a5a0:	005b      	lsls	r3, r3, #1
 800a5a2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a5a4:	e009      	b.n	800a5ba <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800a5a6:	f001 f99b 	bl	800b8e0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800a5ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800a5b2:	e7d5      	b.n	800a560 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800a5b4:	9b01      	ldr	r3, [sp, #4]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a5ba:	9b01      	ldr	r3, [sp, #4]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1f9      	bne.n	800a5b4 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a5c0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a5c2:	6893      	ldr	r3, [r2, #8]
 800a5c4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800a5c8:	d170      	bne.n	800a6ac <HAL_ADC_Init+0x160>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a5ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a5cc:	f043 0310 	orr.w	r3, r3, #16
 800a5d0:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a5d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a5d4:	f043 0301 	orr.w	r3, r3, #1
 800a5d8:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800a5da:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a5dc:	6893      	ldr	r3, [r2, #8]
 800a5de:	f013 0304 	ands.w	r3, r3, #4
 800a5e2:	d000      	beq.n	800a5e6 <HAL_ADC_Init+0x9a>
 800a5e4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a5e6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800a5e8:	f011 0f10 	tst.w	r1, #16
 800a5ec:	d17e      	bne.n	800a6ec <HAL_ADC_Init+0x1a0>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d17c      	bne.n	800a6ec <HAL_ADC_Init+0x1a0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a5f2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a5f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a5f8:	f043 0302 	orr.w	r3, r3, #2
 800a5fc:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a5fe:	6893      	ldr	r3, [r2, #8]
 800a600:	f013 0f01 	tst.w	r3, #1
 800a604:	d10b      	bne.n	800a61e <HAL_ADC_Init+0xd2>
 800a606:	4b40      	ldr	r3, [pc, #256]	@ (800a708 <HAL_ADC_Init+0x1bc>)
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f013 0f01 	tst.w	r3, #1
 800a60e:	d106      	bne.n	800a61e <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a610:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a612:	493e      	ldr	r1, [pc, #248]	@ (800a70c <HAL_ADC_Init+0x1c0>)
 800a614:	688a      	ldr	r2, [r1, #8]
 800a616:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 800a61a:	4313      	orrs	r3, r2
 800a61c:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a61e:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 800a620:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a622:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 800a626:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 800a628:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 800a62a:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 800a62c:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a62e:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a636:	2a01      	cmp	r2, #1
 800a638:	d03a      	beq.n	800a6b0 <HAL_ADC_Init+0x164>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a63a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a63c:	b122      	cbz	r2, 800a648 <HAL_ADC_Init+0xfc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a63e:	f402 7270 	and.w	r2, r2, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800a642:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a644:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a646:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a648:	6821      	ldr	r1, [r4, #0]
 800a64a:	68cd      	ldr	r5, [r1, #12]
 800a64c:	4a30      	ldr	r2, [pc, #192]	@ (800a710 <HAL_ADC_Init+0x1c4>)
 800a64e:	402a      	ands	r2, r5
 800a650:	431a      	orrs	r2, r3
 800a652:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a654:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a656:	6893      	ldr	r3, [r2, #8]
 800a658:	f013 0308 	ands.w	r3, r3, #8
 800a65c:	d000      	beq.n	800a660 <HAL_ADC_Init+0x114>
 800a65e:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a660:	b9ab      	cbnz	r3, 800a68e <HAL_ADC_Init+0x142>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a662:	7e23      	ldrb	r3, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a664:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800a668:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a66a:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a66e:	68d3      	ldr	r3, [r2, #12]
 800a670:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a674:	f023 0302 	bic.w	r3, r3, #2
 800a678:	430b      	orrs	r3, r1
 800a67a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a67c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a680:	2b01      	cmp	r3, #1
 800a682:	d01a      	beq.n	800a6ba <HAL_ADC_Init+0x16e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a684:	6822      	ldr	r2, [r4, #0]
 800a686:	6913      	ldr	r3, [r2, #16]
 800a688:	f023 0301 	bic.w	r3, r3, #1
 800a68c:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d022      	beq.n	800a6da <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a698:	f023 030f 	bic.w	r3, r3, #15
 800a69c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a69e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a6a0:	f023 0303 	bic.w	r3, r3, #3
 800a6a4:	f043 0301 	orr.w	r3, r3, #1
 800a6a8:	6563      	str	r3, [r4, #84]	@ 0x54
 800a6aa:	e024      	b.n	800a6f6 <HAL_ADC_Init+0x1aa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	e795      	b.n	800a5dc <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a6b0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a6b2:	3a01      	subs	r2, #1
 800a6b4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800a6b8:	e7bf      	b.n	800a63a <HAL_ADC_Init+0xee>
        MODIFY_REG(hadc->Instance->CFGR2,
 800a6ba:	6821      	ldr	r1, [r4, #0]
 800a6bc:	690b      	ldr	r3, [r1, #16]
 800a6be:	f36f 038a 	bfc	r3, #2, #9
 800a6c2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a6c4:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800a6c6:	432a      	orrs	r2, r5
 800a6c8:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 800a6ca:	432a      	orrs	r2, r5
 800a6cc:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800a6ce:	432a      	orrs	r2, r5
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	f043 0301 	orr.w	r3, r3, #1
 800a6d6:	610b      	str	r3, [r1, #16]
 800a6d8:	e7d9      	b.n	800a68e <HAL_ADC_Init+0x142>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a6da:	6821      	ldr	r1, [r4, #0]
 800a6dc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800a6de:	f023 030f 	bic.w	r3, r3, #15
 800a6e2:	69e2      	ldr	r2, [r4, #28]
 800a6e4:	3a01      	subs	r2, #1
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	630b      	str	r3, [r1, #48]	@ 0x30
 800a6ea:	e7d8      	b.n	800a69e <HAL_ADC_Init+0x152>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a6ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a6ee:	f043 0310 	orr.w	r3, r3, #16
 800a6f2:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a6f4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 800a6f6:	b003      	add	sp, #12
 800a6f8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800a6fa:	2001      	movs	r0, #1
 800a6fc:	e7fb      	b.n	800a6f6 <HAL_ADC_Init+0x1aa>
 800a6fe:	bf00      	nop
 800a700:	2000000c 	.word	0x2000000c
 800a704:	053e2d63 	.word	0x053e2d63
 800a708:	50040000 	.word	0x50040000
 800a70c:	50040300 	.word	0x50040300
 800a710:	fff0c007 	.word	0xfff0c007

0800a714 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	4604      	mov	r4, r0
 800a718:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a71a:	6945      	ldr	r5, [r0, #20]
 800a71c:	2d08      	cmp	r5, #8
 800a71e:	d005      	beq.n	800a72c <HAL_ADC_PollForConversion+0x18>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800a720:	6803      	ldr	r3, [r0, #0]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	f013 0f01 	tst.w	r3, #1
 800a728:	d11e      	bne.n	800a768 <HAL_ADC_PollForConversion+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800a72a:	2504      	movs	r5, #4
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a72c:	f7ff feda 	bl	800a4e4 <HAL_GetTick>
 800a730:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800a732:	6823      	ldr	r3, [r4, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	422a      	tst	r2, r5
 800a738:	d11c      	bne.n	800a774 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a73a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a73e:	d0f8      	beq.n	800a732 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800a740:	f7ff fed0 	bl	800a4e4 <HAL_GetTick>
 800a744:	1bc3      	subs	r3, r0, r7
 800a746:	42b3      	cmp	r3, r6
 800a748:	d801      	bhi.n	800a74e <HAL_ADC_PollForConversion+0x3a>
 800a74a:	2e00      	cmp	r6, #0
 800a74c:	d1f1      	bne.n	800a732 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800a74e:	6823      	ldr	r3, [r4, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	422b      	tst	r3, r5
 800a754:	d1ed      	bne.n	800a732 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a756:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a758:	f043 0304 	orr.w	r3, r3, #4
 800a75c:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a75e:	2300      	movs	r3, #0
 800a760:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

          return HAL_TIMEOUT;
 800a764:	2003      	movs	r0, #3
 800a766:	e004      	b.n	800a772 <HAL_ADC_PollForConversion+0x5e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a768:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a76a:	f043 0320 	orr.w	r3, r3, #32
 800a76e:	6543      	str	r3, [r0, #84]	@ 0x54
      return HAL_ERROR;
 800a770:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800a772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a774:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a77a:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a77c:	68da      	ldr	r2, [r3, #12]
 800a77e:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800a782:	d111      	bne.n	800a7a8 <HAL_ADC_PollForConversion+0x94>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800a784:	7e62      	ldrb	r2, [r4, #25]
 800a786:	b97a      	cbnz	r2, 800a7a8 <HAL_ADC_PollForConversion+0x94>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	f012 0f08 	tst.w	r2, #8
 800a78e:	d00b      	beq.n	800a7a8 <HAL_ADC_PollForConversion+0x94>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a792:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a796:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a798:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a79a:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800a79e:	d103      	bne.n	800a7a8 <HAL_ADC_PollForConversion+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a7a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7a2:	f042 0201 	orr.w	r2, r2, #1
 800a7a6:	6562      	str	r2, [r4, #84]	@ 0x54
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800a7a8:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800a7aa:	2d08      	cmp	r5, #8
 800a7ac:	d006      	beq.n	800a7bc <HAL_ADC_PollForConversion+0xa8>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800a7ae:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800a7b2:	d107      	bne.n	800a7c4 <HAL_ADC_PollForConversion+0xb0>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a7b4:	220c      	movs	r2, #12
 800a7b6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	e7da      	b.n	800a772 <HAL_ADC_PollForConversion+0x5e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800a7bc:	2208      	movs	r2, #8
 800a7be:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	e7d6      	b.n	800a772 <HAL_ADC_PollForConversion+0x5e>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	e7d4      	b.n	800a772 <HAL_ADC_PollForConversion+0x5e>

0800a7c8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a7c8:	6803      	ldr	r3, [r0, #0]
 800a7ca:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7d2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a7d8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	f000 8203 	beq.w	800abe8 <HAL_ADC_ConfigChannel+0x418>
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	460d      	mov	r5, r1
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a7ec:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a7ee:	6883      	ldr	r3, [r0, #8]
 800a7f0:	f013 0f04 	tst.w	r3, #4
 800a7f4:	d009      	beq.n	800a80a <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a7f6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a7f8:	f043 0320 	orr.w	r3, r3, #32
 800a7fc:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a7fe:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a800:	2300      	movs	r3, #0
 800a802:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800a806:	b003      	add	sp, #12
 800a808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t config_rank = pConfig->Rank;
 800a80a:	6849      	ldr	r1, [r1, #4]
    if (pConfig->Rank <= 5U)
 800a80c:	2905      	cmp	r1, #5
 800a80e:	d807      	bhi.n	800a820 <HAL_ADC_ConfigChannel+0x50>
      switch (pConfig->Rank)
 800a810:	3902      	subs	r1, #2
 800a812:	2903      	cmp	r1, #3
 800a814:	d84e      	bhi.n	800a8b4 <HAL_ADC_ConfigChannel+0xe4>
 800a816:	e8df f001 	tbb	[pc, r1]
 800a81a:	4f02      	.short	0x4f02
 800a81c:	4a48      	.short	0x4a48
 800a81e:	210c      	movs	r1, #12
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800a820:	682a      	ldr	r2, [r5, #0]
 800a822:	f7ff fe65 	bl	800a4f0 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a826:	6820      	ldr	r0, [r4, #0]
 800a828:	6883      	ldr	r3, [r0, #8]
 800a82a:	f013 0304 	ands.w	r3, r3, #4
 800a82e:	d000      	beq.n	800a832 <HAL_ADC_ConfigChannel+0x62>
 800a830:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a832:	6882      	ldr	r2, [r0, #8]
 800a834:	f012 0208 	ands.w	r2, r2, #8
 800a838:	d000      	beq.n	800a83c <HAL_ADC_ConfigChannel+0x6c>
 800a83a:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a83c:	b90b      	cbnz	r3, 800a842 <HAL_ADC_ConfigChannel+0x72>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a83e:	2a00      	cmp	r2, #0
 800a840:	d03c      	beq.n	800a8bc <HAL_ADC_ConfigChannel+0xec>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a842:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a844:	6893      	ldr	r3, [r2, #8]
 800a846:	f013 0f01 	tst.w	r3, #1
 800a84a:	d117      	bne.n	800a87c <HAL_ADC_ConfigChannel+0xac>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800a850:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 800a854:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800a858:	ea21 0106 	bic.w	r1, r1, r6
 800a85c:	f000 0c18 	and.w	ip, r0, #24
 800a860:	48a8      	ldr	r0, [pc, #672]	@ (800ab04 <HAL_ADC_ConfigChannel+0x334>)
 800a862:	fa20 f00c 	lsr.w	r0, r0, ip
 800a866:	4003      	ands	r3, r0
 800a868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a86c:	430b      	orrs	r3, r1
 800a86e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800a872:	68ea      	ldr	r2, [r5, #12]
 800a874:	4ba4      	ldr	r3, [pc, #656]	@ (800ab08 <HAL_ADC_ConfigChannel+0x338>)
 800a876:	429a      	cmp	r2, r3
 800a878:	f000 80a5 	beq.w	800a9c6 <HAL_ADC_ConfigChannel+0x1f6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	4aa3      	ldr	r2, [pc, #652]	@ (800ab0c <HAL_ADC_ConfigChannel+0x33c>)
 800a880:	4213      	tst	r3, r2
 800a882:	f000 81ad 	beq.w	800abe0 <HAL_ADC_ConfigChannel+0x410>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a886:	4aa2      	ldr	r2, [pc, #648]	@ (800ab10 <HAL_ADC_ConfigChannel+0x340>)
 800a888:	6892      	ldr	r2, [r2, #8]
 800a88a:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a88e:	49a1      	ldr	r1, [pc, #644]	@ (800ab14 <HAL_ADC_ConfigChannel+0x344>)
 800a890:	428b      	cmp	r3, r1
 800a892:	f000 8158 	beq.w	800ab46 <HAL_ADC_ConfigChannel+0x376>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a896:	49a0      	ldr	r1, [pc, #640]	@ (800ab18 <HAL_ADC_ConfigChannel+0x348>)
 800a898:	428b      	cmp	r3, r1
 800a89a:	f000 817a 	beq.w	800ab92 <HAL_ADC_ConfigChannel+0x3c2>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a89e:	499f      	ldr	r1, [pc, #636]	@ (800ab1c <HAL_ADC_ConfigChannel+0x34c>)
 800a8a0:	428b      	cmp	r3, r1
 800a8a2:	f000 818a 	beq.w	800abba <HAL_ADC_ConfigChannel+0x3ea>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	e7aa      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
          config_rank = ADC_REGULAR_RANK_4;
 800a8aa:	2118      	movs	r1, #24
          break;
 800a8ac:	e7b8      	b.n	800a820 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_5;
 800a8ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
          break;
 800a8b2:	e7b5      	b.n	800a820 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_1;
 800a8b4:	2106      	movs	r1, #6
          break;
 800a8b6:	e7b3      	b.n	800a820 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_3;
 800a8b8:	2112      	movs	r1, #18
 800a8ba:	e7b1      	b.n	800a820 <HAL_ADC_ConfigChannel+0x50>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a8bc:	68aa      	ldr	r2, [r5, #8]
 800a8be:	6829      	ldr	r1, [r5, #0]
 800a8c0:	f7ff fe2e 	bl	800a520 <LL_ADC_SetChannelSamplingTime>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a8c4:	6969      	ldr	r1, [r5, #20]
 800a8c6:	6822      	ldr	r2, [r4, #0]
 800a8c8:	68d3      	ldr	r3, [r2, #12]
 800a8ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a8d2:	6928      	ldr	r0, [r5, #16]
 800a8d4:	2804      	cmp	r0, #4
 800a8d6:	d00e      	beq.n	800a8f6 <HAL_ADC_ConfigChannel+0x126>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a8d8:	682e      	ldr	r6, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a8da:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 800a8dc:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 800a8e0:	4b8f      	ldr	r3, [pc, #572]	@ (800ab20 <HAL_ADC_ConfigChannel+0x350>)
 800a8e2:	403b      	ands	r3, r7
 800a8e4:	f006 46f8 	and.w	r6, r6, #2080374784	@ 0x7c000000
 800a8e8:	4331      	orrs	r1, r6
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a8f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800a8f4:	e7a5      	b.n	800a842 <HAL_ADC_ConfigChannel+0x72>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a8f6:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800a8f8:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a8fa:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a8fe:	682b      	ldr	r3, [r5, #0]
 800a900:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800a904:	bb80      	cbnz	r0, 800a968 <HAL_ADC_ConfigChannel+0x198>
 800a906:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a90a:	4299      	cmp	r1, r3
 800a90c:	d034      	beq.n	800a978 <HAL_ADC_ConfigChannel+0x1a8>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a90e:	6821      	ldr	r1, [r4, #0]
 800a910:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800a912:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 800a914:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800a91e:	bb80      	cbnz	r0, 800a982 <HAL_ADC_ConfigChannel+0x1b2>
 800a920:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a924:	429a      	cmp	r2, r3
 800a926:	d034      	beq.n	800a992 <HAL_ADC_ConfigChannel+0x1c2>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a928:	6821      	ldr	r1, [r4, #0]
 800a92a:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 800a92c:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 800a92e:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a932:	682b      	ldr	r3, [r5, #0]
 800a934:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800a938:	bb80      	cbnz	r0, 800a99c <HAL_ADC_ConfigChannel+0x1cc>
 800a93a:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a93e:	429a      	cmp	r2, r3
 800a940:	d034      	beq.n	800a9ac <HAL_ADC_ConfigChannel+0x1dc>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a942:	6821      	ldr	r1, [r4, #0]
 800a944:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800a946:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 800a948:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800a952:	bb80      	cbnz	r0, 800a9b6 <HAL_ADC_ConfigChannel+0x1e6>
 800a954:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a958:	429a      	cmp	r2, r3
 800a95a:	f47f af72 	bne.w	800a842 <HAL_ADC_ConfigChannel+0x72>
  MODIFY_REG(*preg,
 800a95e:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800a960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a964:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 800a966:	e76c      	b.n	800a842 <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a968:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a96c:	b113      	cbz	r3, 800a974 <HAL_ADC_ConfigChannel+0x1a4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800a96e:	fab3 f383 	clz	r3, r3
 800a972:	e7ca      	b.n	800a90a <HAL_ADC_ConfigChannel+0x13a>
    return 32U;
 800a974:	2320      	movs	r3, #32
 800a976:	e7c8      	b.n	800a90a <HAL_ADC_ConfigChannel+0x13a>
  MODIFY_REG(*preg,
 800a978:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800a97a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a97e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800a980:	e7c5      	b.n	800a90e <HAL_ADC_ConfigChannel+0x13e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a982:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800a986:	b113      	cbz	r3, 800a98e <HAL_ADC_ConfigChannel+0x1be>
  return __builtin_clz(value);
 800a988:	fab3 f383 	clz	r3, r3
 800a98c:	e7ca      	b.n	800a924 <HAL_ADC_ConfigChannel+0x154>
    return 32U;
 800a98e:	2320      	movs	r3, #32
 800a990:	e7c8      	b.n	800a924 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(*preg,
 800a992:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800a994:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a998:	664b      	str	r3, [r1, #100]	@ 0x64
}
 800a99a:	e7c5      	b.n	800a928 <HAL_ADC_ConfigChannel+0x158>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a99c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800a9a0:	b113      	cbz	r3, 800a9a8 <HAL_ADC_ConfigChannel+0x1d8>
  return __builtin_clz(value);
 800a9a2:	fab3 f383 	clz	r3, r3
 800a9a6:	e7ca      	b.n	800a93e <HAL_ADC_ConfigChannel+0x16e>
    return 32U;
 800a9a8:	2320      	movs	r3, #32
 800a9aa:	e7c8      	b.n	800a93e <HAL_ADC_ConfigChannel+0x16e>
  MODIFY_REG(*preg,
 800a9ac:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 800a9ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9b2:	668b      	str	r3, [r1, #104]	@ 0x68
}
 800a9b4:	e7c5      	b.n	800a942 <HAL_ADC_ConfigChannel+0x172>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9b6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800a9ba:	b113      	cbz	r3, 800a9c2 <HAL_ADC_ConfigChannel+0x1f2>
  return __builtin_clz(value);
 800a9bc:	fab3 f383 	clz	r3, r3
 800a9c0:	e7ca      	b.n	800a958 <HAL_ADC_ConfigChannel+0x188>
    return 32U;
 800a9c2:	2320      	movs	r3, #32
 800a9c4:	e7c8      	b.n	800a958 <HAL_ADC_ConfigChannel+0x188>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a9c6:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800a9ce:	bb3e      	cbnz	r6, 800aa20 <HAL_ADC_ConfigChannel+0x250>
 800a9d0:	0e9a      	lsrs	r2, r3, #26
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	f002 021f 	and.w	r2, r2, #31
 800a9d8:	2a09      	cmp	r2, #9
 800a9da:	bf8c      	ite	hi
 800a9dc:	2200      	movhi	r2, #0
 800a9de:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	d055      	beq.n	800aa90 <HAL_ADC_ConfigChannel+0x2c0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a9e4:	bb5e      	cbnz	r6, 800aa3e <HAL_ADC_ConfigChannel+0x26e>
 800a9e6:	0e99      	lsrs	r1, r3, #26
 800a9e8:	3101      	adds	r1, #1
 800a9ea:	0689      	lsls	r1, r1, #26
 800a9ec:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800a9f0:	bb8e      	cbnz	r6, 800aa56 <HAL_ADC_ConfigChannel+0x286>
 800a9f2:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800a9f6:	f10c 0c01 	add.w	ip, ip, #1
 800a9fa:	f00c 0c1f 	and.w	ip, ip, #31
 800a9fe:	2201      	movs	r2, #1
 800aa00:	fa02 f20c 	lsl.w	r2, r2, ip
 800aa04:	4311      	orrs	r1, r2
 800aa06:	bbae      	cbnz	r6, 800aa74 <HAL_ADC_ConfigChannel+0x2a4>
 800aa08:	0e9b      	lsrs	r3, r3, #26
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	f003 031f 	and.w	r3, r3, #31
 800aa10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aa14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aa16:	4319      	orrs	r1, r3
 800aa18:	68aa      	ldr	r2, [r5, #8]
 800aa1a:	f7ff fd81 	bl	800a520 <LL_ADC_SetChannelSamplingTime>
 800aa1e:	e72d      	b.n	800a87c <HAL_ADC_ConfigChannel+0xac>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa20:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800aa24:	b14a      	cbz	r2, 800aa3a <HAL_ADC_ConfigChannel+0x26a>
  return __builtin_clz(value);
 800aa26:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800aa2a:	3201      	adds	r2, #1
 800aa2c:	f002 021f 	and.w	r2, r2, #31
 800aa30:	2a09      	cmp	r2, #9
 800aa32:	bf8c      	ite	hi
 800aa34:	2200      	movhi	r2, #0
 800aa36:	2201      	movls	r2, #1
 800aa38:	e7d2      	b.n	800a9e0 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	e7f5      	b.n	800aa2a <HAL_ADC_ConfigChannel+0x25a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa3e:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800aa42:	b131      	cbz	r1, 800aa52 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 800aa44:	fab1 f181 	clz	r1, r1
 800aa48:	3101      	adds	r1, #1
 800aa4a:	0689      	lsls	r1, r1, #26
 800aa4c:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800aa50:	e7ce      	b.n	800a9f0 <HAL_ADC_ConfigChannel+0x220>
    return 32U;
 800aa52:	2120      	movs	r1, #32
 800aa54:	e7f8      	b.n	800aa48 <HAL_ADC_ConfigChannel+0x278>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa56:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800aa5a:	b14a      	cbz	r2, 800aa70 <HAL_ADC_ConfigChannel+0x2a0>
  return __builtin_clz(value);
 800aa5c:	fab2 f282 	clz	r2, r2
 800aa60:	3201      	adds	r2, #1
 800aa62:	f002 021f 	and.w	r2, r2, #31
 800aa66:	f04f 0c01 	mov.w	ip, #1
 800aa6a:	fa0c f202 	lsl.w	r2, ip, r2
 800aa6e:	e7c9      	b.n	800aa04 <HAL_ADC_ConfigChannel+0x234>
    return 32U;
 800aa70:	2220      	movs	r2, #32
 800aa72:	e7f5      	b.n	800aa60 <HAL_ADC_ConfigChannel+0x290>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa74:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800aa78:	b143      	cbz	r3, 800aa8c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800aa7a:	fab3 f383 	clz	r3, r3
 800aa7e:	3301      	adds	r3, #1
 800aa80:	f003 031f 	and.w	r3, r3, #31
 800aa84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aa88:	051b      	lsls	r3, r3, #20
 800aa8a:	e7c4      	b.n	800aa16 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800aa8c:	2320      	movs	r3, #32
 800aa8e:	e7f6      	b.n	800aa7e <HAL_ADC_ConfigChannel+0x2ae>
 800aa90:	b9e6      	cbnz	r6, 800aacc <HAL_ADC_ConfigChannel+0x2fc>
 800aa92:	0e99      	lsrs	r1, r3, #26
 800aa94:	3101      	adds	r1, #1
 800aa96:	0689      	lsls	r1, r1, #26
 800aa98:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800aa9c:	bb16      	cbnz	r6, 800aae4 <HAL_ADC_ConfigChannel+0x314>
 800aa9e:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800aaa2:	f10c 0c01 	add.w	ip, ip, #1
 800aaa6:	f00c 0c1f 	and.w	ip, ip, #31
 800aaaa:	2201      	movs	r2, #1
 800aaac:	fa02 f20c 	lsl.w	r2, r2, ip
 800aab0:	4311      	orrs	r1, r2
 800aab2:	bbbe      	cbnz	r6, 800ab24 <HAL_ADC_ConfigChannel+0x354>
 800aab4:	0e9b      	lsrs	r3, r3, #26
 800aab6:	3301      	adds	r3, #1
 800aab8:	f003 031f 	and.w	r3, r3, #31
 800aabc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aac0:	3b1e      	subs	r3, #30
 800aac2:	051b      	lsls	r3, r3, #20
 800aac4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aac8:	4319      	orrs	r1, r3
 800aaca:	e7a5      	b.n	800aa18 <HAL_ADC_ConfigChannel+0x248>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aacc:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800aad0:	b131      	cbz	r1, 800aae0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800aad2:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800aad6:	3101      	adds	r1, #1
 800aad8:	0689      	lsls	r1, r1, #26
 800aada:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800aade:	e7dd      	b.n	800aa9c <HAL_ADC_ConfigChannel+0x2cc>
    return 32U;
 800aae0:	2120      	movs	r1, #32
 800aae2:	e7f8      	b.n	800aad6 <HAL_ADC_ConfigChannel+0x306>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aae4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800aae8:	b14a      	cbz	r2, 800aafe <HAL_ADC_ConfigChannel+0x32e>
  return __builtin_clz(value);
 800aaea:	fab2 f282 	clz	r2, r2
 800aaee:	3201      	adds	r2, #1
 800aaf0:	f002 021f 	and.w	r2, r2, #31
 800aaf4:	f04f 0c01 	mov.w	ip, #1
 800aaf8:	fa0c f202 	lsl.w	r2, ip, r2
 800aafc:	e7d8      	b.n	800aab0 <HAL_ADC_ConfigChannel+0x2e0>
    return 32U;
 800aafe:	2220      	movs	r2, #32
 800ab00:	e7f5      	b.n	800aaee <HAL_ADC_ConfigChannel+0x31e>
 800ab02:	bf00      	nop
 800ab04:	0007ffff 	.word	0x0007ffff
 800ab08:	407f0000 	.word	0x407f0000
 800ab0c:	80080000 	.word	0x80080000
 800ab10:	50040300 	.word	0x50040300
 800ab14:	c7520000 	.word	0xc7520000
 800ab18:	cb840000 	.word	0xcb840000
 800ab1c:	80000001 	.word	0x80000001
 800ab20:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab24:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800ab28:	b15b      	cbz	r3, 800ab42 <HAL_ADC_ConfigChannel+0x372>
  return __builtin_clz(value);
 800ab2a:	fab3 f383 	clz	r3, r3
 800ab2e:	3301      	adds	r3, #1
 800ab30:	f003 031f 	and.w	r3, r3, #31
 800ab34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ab38:	3b1e      	subs	r3, #30
 800ab3a:	051b      	lsls	r3, r3, #20
 800ab3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ab40:	e7c2      	b.n	800aac8 <HAL_ADC_ConfigChannel+0x2f8>
    return 32U;
 800ab42:	2320      	movs	r3, #32
 800ab44:	e7f3      	b.n	800ab2e <HAL_ADC_ConfigChannel+0x35e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ab46:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 800ab4a:	f47f aea4 	bne.w	800a896 <HAL_ADC_ConfigChannel+0xc6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ab4e:	6822      	ldr	r2, [r4, #0]
 800ab50:	4b26      	ldr	r3, [pc, #152]	@ (800abec <HAL_ADC_ConfigChannel+0x41c>)
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d001      	beq.n	800ab5a <HAL_ADC_ConfigChannel+0x38a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ab56:	2000      	movs	r0, #0
 800ab58:	e652      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ab5a:	f440 0300 	orr.w	r3, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ab5e:	4924      	ldr	r1, [pc, #144]	@ (800abf0 <HAL_ADC_ConfigChannel+0x420>)
 800ab60:	688a      	ldr	r2, [r1, #8]
 800ab62:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800ab66:	4313      	orrs	r3, r2
 800ab68:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ab6a:	4b22      	ldr	r3, [pc, #136]	@ (800abf4 <HAL_ADC_ConfigChannel+0x424>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	099b      	lsrs	r3, r3, #6
 800ab70:	4a21      	ldr	r2, [pc, #132]	@ (800abf8 <HAL_ADC_ConfigChannel+0x428>)
 800ab72:	fba2 2303 	umull	r2, r3, r2, r3
 800ab76:	099b      	lsrs	r3, r3, #6
 800ab78:	3301      	adds	r3, #1
 800ab7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800ab82:	9b01      	ldr	r3, [sp, #4]
 800ab84:	b11b      	cbz	r3, 800ab8e <HAL_ADC_ConfigChannel+0x3be>
            wait_loop_index--;
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	3b01      	subs	r3, #1
 800ab8a:	9301      	str	r3, [sp, #4]
 800ab8c:	e7f9      	b.n	800ab82 <HAL_ADC_ConfigChannel+0x3b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ab8e:	2000      	movs	r0, #0
 800ab90:	e636      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ab92:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 800ab96:	f47f ae82 	bne.w	800a89e <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ab9a:	6822      	ldr	r2, [r4, #0]
 800ab9c:	4b13      	ldr	r3, [pc, #76]	@ (800abec <HAL_ADC_ConfigChannel+0x41c>)
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d001      	beq.n	800aba6 <HAL_ADC_ConfigChannel+0x3d6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aba2:	2000      	movs	r0, #0
 800aba4:	e62c      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aba6:	f040 7380 	orr.w	r3, r0, #16777216	@ 0x1000000
 800abaa:	4911      	ldr	r1, [pc, #68]	@ (800abf0 <HAL_ADC_ConfigChannel+0x420>)
 800abac:	688a      	ldr	r2, [r1, #8]
 800abae:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800abb2:	4313      	orrs	r3, r2
 800abb4:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800abb6:	2000      	movs	r0, #0
}
 800abb8:	e622      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800abba:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800abbe:	d111      	bne.n	800abe4 <HAL_ADC_ConfigChannel+0x414>
        if (ADC_VREFINT_INSTANCE(hadc))
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	4b0a      	ldr	r3, [pc, #40]	@ (800abec <HAL_ADC_ConfigChannel+0x41c>)
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d001      	beq.n	800abcc <HAL_ADC_ConfigChannel+0x3fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800abc8:	2000      	movs	r0, #0
 800abca:	e619      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800abcc:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800abd0:	4907      	ldr	r1, [pc, #28]	@ (800abf0 <HAL_ADC_ConfigChannel+0x420>)
 800abd2:	688a      	ldr	r2, [r1, #8]
 800abd4:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800abd8:	4313      	orrs	r3, r2
 800abda:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800abdc:	2000      	movs	r0, #0
}
 800abde:	e60f      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
 800abe0:	2000      	movs	r0, #0
 800abe2:	e60d      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
 800abe4:	2000      	movs	r0, #0
 800abe6:	e60b      	b.n	800a800 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800abe8:	2002      	movs	r0, #2
 800abea:	e60c      	b.n	800a806 <HAL_ADC_ConfigChannel+0x36>
 800abec:	50040000 	.word	0x50040000
 800abf0:	50040300 	.word	0x50040300
 800abf4:	2000000c 	.word	0x2000000c
 800abf8:	053e2d63 	.word	0x053e2d63

0800abfc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ac00:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ac02:	689a      	ldr	r2, [r3, #8]
 800ac04:	f012 0204 	ands.w	r2, r2, #4
 800ac08:	d000      	beq.n	800ac0c <ADC_ConversionStop+0x10>
 800ac0a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800ac0c:	6898      	ldr	r0, [r3, #8]
 800ac0e:	f010 0008 	ands.w	r0, r0, #8
 800ac12:	d000      	beq.n	800ac16 <ADC_ConversionStop+0x1a>
 800ac14:	2001      	movs	r0, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800ac16:	b90a      	cbnz	r2, 800ac1c <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d06d      	beq.n	800acf8 <ADC_ConversionStop+0xfc>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800ac1c:	68da      	ldr	r2, [r3, #12]
 800ac1e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800ac22:	d004      	beq.n	800ac2e <ADC_ConversionStop+0x32>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800ac24:	8b20      	ldrh	r0, [r4, #24]
 800ac26:	f240 1201 	movw	r2, #257	@ 0x101
 800ac2a:	4290      	cmp	r0, r2
 800ac2c:	d04e      	beq.n	800accc <ADC_ConversionStop+0xd0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800ac2e:	2902      	cmp	r1, #2
 800ac30:	d012      	beq.n	800ac58 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800ac32:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ac34:	689a      	ldr	r2, [r3, #8]
 800ac36:	f012 0f04 	tst.w	r2, #4
 800ac3a:	d00b      	beq.n	800ac54 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ac3c:	689a      	ldr	r2, [r3, #8]
 800ac3e:	f012 0f02 	tst.w	r2, #2
 800ac42:	d107      	bne.n	800ac54 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 800ac44:	689a      	ldr	r2, [r3, #8]
 800ac46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac4a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800ac4e:	f042 0210 	orr.w	r2, r2, #16
 800ac52:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800ac54:	2901      	cmp	r1, #1
 800ac56:	d047      	beq.n	800ace8 <ADC_ConversionStop+0xec>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800ac58:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800ac5a:	689a      	ldr	r2, [r3, #8]
 800ac5c:	f012 0f08 	tst.w	r2, #8
 800ac60:	d00b      	beq.n	800ac7a <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ac62:	689a      	ldr	r2, [r3, #8]
 800ac64:	f012 0f02 	tst.w	r2, #2
 800ac68:	d107      	bne.n	800ac7a <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800ac6a:	689a      	ldr	r2, [r3, #8]
 800ac6c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ac70:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800ac74:	f042 0220 	orr.w	r2, r2, #32
 800ac78:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800ac7a:	2902      	cmp	r1, #2
 800ac7c:	d036      	beq.n	800acec <ADC_ConversionStop+0xf0>
 800ac7e:	2903      	cmp	r1, #3
 800ac80:	d136      	bne.n	800acf0 <ADC_ConversionStop+0xf4>
 800ac82:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800ac84:	f7ff fc2e 	bl	800a4e4 <HAL_GetTick>
 800ac88:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	422b      	tst	r3, r5
 800ac90:	d030      	beq.n	800acf4 <ADC_ConversionStop+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800ac92:	f7ff fc27 	bl	800a4e4 <HAL_GetTick>
 800ac96:	1b80      	subs	r0, r0, r6
 800ac98:	2805      	cmp	r0, #5
 800ac9a:	d9f6      	bls.n	800ac8a <ADC_ConversionStop+0x8e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	422b      	tst	r3, r5
 800aca2:	d0f2      	beq.n	800ac8a <ADC_ConversionStop+0x8e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aca4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aca6:	f043 0310 	orr.w	r3, r3, #16
 800acaa:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800acac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800acae:	f043 0301 	orr.w	r3, r3, #1
 800acb2:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800acb4:	2001      	movs	r0, #1
 800acb6:	e01e      	b.n	800acf6 <ADC_ConversionStop+0xfa>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800acb8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800acba:	f043 0310 	orr.w	r3, r3, #16
 800acbe:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800acc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800acc2:	f043 0301 	orr.w	r3, r3, #1
 800acc6:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 800acc8:	2001      	movs	r0, #1
 800acca:	e014      	b.n	800acf6 <ADC_ConversionStop+0xfa>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800accc:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800acce:	6819      	ldr	r1, [r3, #0]
 800acd0:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800acd4:	d104      	bne.n	800ace0 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800acd6:	4909      	ldr	r1, [pc, #36]	@ (800acfc <ADC_ConversionStop+0x100>)
 800acd8:	428a      	cmp	r2, r1
 800acda:	d8ed      	bhi.n	800acb8 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 800acdc:	3201      	adds	r2, #1
 800acde:	e7f6      	b.n	800acce <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800ace0:	2240      	movs	r2, #64	@ 0x40
 800ace2:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800ace4:	2101      	movs	r1, #1
 800ace6:	e7a4      	b.n	800ac32 <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800ace8:	2504      	movs	r5, #4
 800acea:	e7cb      	b.n	800ac84 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800acec:	2508      	movs	r5, #8
 800acee:	e7c9      	b.n	800ac84 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800acf0:	2504      	movs	r5, #4
 800acf2:	e7c7      	b.n	800ac84 <ADC_ConversionStop+0x88>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800acf4:	2000      	movs	r0, #0
}
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800acf8:	2000      	movs	r0, #0
 800acfa:	e7fc      	b.n	800acf6 <ADC_ConversionStop+0xfa>
 800acfc:	a33fffff 	.word	0xa33fffff

0800ad00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ad00:	b530      	push	{r4, r5, lr}
 800ad02:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ad08:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ad0a:	689a      	ldr	r2, [r3, #8]
 800ad0c:	f012 0f01 	tst.w	r2, #1
 800ad10:	d158      	bne.n	800adc4 <ADC_Enable+0xc4>
 800ad12:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ad14:	6899      	ldr	r1, [r3, #8]
 800ad16:	4a2d      	ldr	r2, [pc, #180]	@ (800adcc <ADC_Enable+0xcc>)
 800ad18:	4211      	tst	r1, r2
 800ad1a:	d119      	bne.n	800ad50 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 800ad1c:	689a      	ldr	r2, [r3, #8]
 800ad1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ad22:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800ad26:	f042 0201 	orr.w	r2, r2, #1
 800ad2a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ad2c:	4b28      	ldr	r3, [pc, #160]	@ (800add0 <ADC_Enable+0xd0>)
 800ad2e:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800ad30:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800ad34:	d01c      	beq.n	800ad70 <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ad36:	4b27      	ldr	r3, [pc, #156]	@ (800add4 <ADC_Enable+0xd4>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	099b      	lsrs	r3, r3, #6
 800ad3c:	4a26      	ldr	r2, [pc, #152]	@ (800add8 <ADC_Enable+0xd8>)
 800ad3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ad42:	099b      	lsrs	r3, r3, #6
 800ad44:	3301      	adds	r3, #1
 800ad46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800ad4e:	e00c      	b.n	800ad6a <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ad50:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ad52:	f043 0310 	orr.w	r3, r3, #16
 800ad56:	6543      	str	r3, [r0, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ad58:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800ad5a:	f043 0301 	orr.w	r3, r3, #1
 800ad5e:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 800ad60:	2001      	movs	r0, #1
 800ad62:	e030      	b.n	800adc6 <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 800ad64:	9b01      	ldr	r3, [sp, #4]
 800ad66:	3b01      	subs	r3, #1
 800ad68:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800ad6a:	9b01      	ldr	r3, [sp, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d1f9      	bne.n	800ad64 <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ad70:	f7ff fbb8 	bl	800a4e4 <HAL_GetTick>
 800ad74:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ad76:	6823      	ldr	r3, [r4, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	f012 0f01 	tst.w	r2, #1
 800ad7e:	d11f      	bne.n	800adc0 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ad80:	689a      	ldr	r2, [r3, #8]
 800ad82:	f012 0f01 	tst.w	r2, #1
 800ad86:	d107      	bne.n	800ad98 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 800ad88:	689a      	ldr	r2, [r3, #8]
 800ad8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ad8e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800ad92:	f042 0201 	orr.w	r2, r2, #1
 800ad96:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ad98:	f7ff fba4 	bl	800a4e4 <HAL_GetTick>
 800ad9c:	1b43      	subs	r3, r0, r5
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d9e9      	bls.n	800ad76 <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f013 0f01 	tst.w	r3, #1
 800adaa:	d1e4      	bne.n	800ad76 <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800adac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800adae:	f043 0310 	orr.w	r3, r3, #16
 800adb2:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800adb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800adb6:	f043 0301 	orr.w	r3, r3, #1
 800adba:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800adbc:	2001      	movs	r0, #1
 800adbe:	e002      	b.n	800adc6 <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800adc0:	2000      	movs	r0, #0
 800adc2:	e000      	b.n	800adc6 <ADC_Enable+0xc6>
 800adc4:	2000      	movs	r0, #0
}
 800adc6:	b003      	add	sp, #12
 800adc8:	bd30      	pop	{r4, r5, pc}
 800adca:	bf00      	nop
 800adcc:	8000003f 	.word	0x8000003f
 800add0:	50040300 	.word	0x50040300
 800add4:	2000000c 	.word	0x2000000c
 800add8:	053e2d63 	.word	0x053e2d63

0800addc <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800addc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f013 0f04 	tst.w	r3, #4
 800ade4:	d13c      	bne.n	800ae60 <HAL_ADC_Start+0x84>
{
 800ade6:	b510      	push	{r4, lr}
 800ade8:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800adea:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d038      	beq.n	800ae64 <HAL_ADC_Start+0x88>
 800adf2:	2301      	movs	r3, #1
 800adf4:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800adf8:	f7ff ff82 	bl	800ad00 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800adfc:	bb60      	cbnz	r0, 800ae58 <HAL_ADC_Start+0x7c>
      ADC_STATE_CLR_SET(hadc->State,
 800adfe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ae00:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ae04:	f023 0301 	bic.w	r3, r3, #1
 800ae08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae0c:	6563      	str	r3, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ae0e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ae10:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800ae14:	d01d      	beq.n	800ae52 <HAL_ADC_Start+0x76>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ae16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae18:	f023 0306 	bic.w	r3, r3, #6
 800ae1c:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	221c      	movs	r2, #28
 800ae22:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800ae24:	2300      	movs	r3, #0
 800ae26:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800ae2a:	6822      	ldr	r2, [r4, #0]
 800ae2c:	68d3      	ldr	r3, [r2, #12]
 800ae2e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800ae32:	d005      	beq.n	800ae40 <HAL_ADC_Start+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ae34:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ae36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800ae3a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae3e:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 800ae40:	6893      	ldr	r3, [r2, #8]
 800ae42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ae46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ae4a:	f043 0304 	orr.w	r3, r3, #4
 800ae4e:	6093      	str	r3, [r2, #8]
}
 800ae50:	bd10      	pop	{r4, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 800ae52:	2300      	movs	r3, #0
 800ae54:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ae56:	e7e2      	b.n	800ae1e <HAL_ADC_Start+0x42>
      __HAL_UNLOCK(hadc);
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800ae5e:	e7f7      	b.n	800ae50 <HAL_ADC_Start+0x74>
    tmp_hal_status = HAL_BUSY;
 800ae60:	2002      	movs	r0, #2
}
 800ae62:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800ae64:	2002      	movs	r0, #2
 800ae66:	e7f3      	b.n	800ae50 <HAL_ADC_Start+0x74>

0800ae68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ae6c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ae6e:	6893      	ldr	r3, [r2, #8]
 800ae70:	f013 0302 	ands.w	r3, r3, #2
 800ae74:	d000      	beq.n	800ae78 <ADC_Disable+0x10>
 800ae76:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ae78:	6891      	ldr	r1, [r2, #8]
 800ae7a:	f011 0f01 	tst.w	r1, #1
 800ae7e:	d039      	beq.n	800aef4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d139      	bne.n	800aef8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ae84:	6893      	ldr	r3, [r2, #8]
 800ae86:	f003 030d 	and.w	r3, r3, #13
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d009      	beq.n	800aea2 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ae90:	f043 0310 	orr.w	r3, r3, #16
 800ae94:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae98:	f043 0301 	orr.w	r3, r3, #1
 800ae9c:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 800ae9e:	2001      	movs	r0, #1
 800aea0:	e029      	b.n	800aef6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800aea2:	6893      	ldr	r3, [r2, #8]
 800aea4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aea8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aeac:	f043 0302 	orr.w	r3, r3, #2
 800aeb0:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800aeb8:	f7ff fb14 	bl	800a4e4 <HAL_GetTick>
 800aebc:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aebe:	6823      	ldr	r3, [r4, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f013 0f01 	tst.w	r3, #1
 800aec6:	d013      	beq.n	800aef0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800aec8:	f7ff fb0c 	bl	800a4e4 <HAL_GetTick>
 800aecc:	1b40      	subs	r0, r0, r5
 800aece:	2802      	cmp	r0, #2
 800aed0:	d9f5      	bls.n	800aebe <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f013 0f01 	tst.w	r3, #1
 800aeda:	d0f0      	beq.n	800aebe <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aedc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800aede:	f043 0310 	orr.w	r3, r3, #16
 800aee2:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800aee4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aee6:	f043 0301 	orr.w	r3, r3, #1
 800aeea:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800aeec:	2001      	movs	r0, #1
 800aeee:	e002      	b.n	800aef6 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800aef0:	2000      	movs	r0, #0
 800aef2:	e000      	b.n	800aef6 <ADC_Disable+0x8e>
 800aef4:	2000      	movs	r0, #0
}
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800aef8:	2000      	movs	r0, #0
 800aefa:	e7fc      	b.n	800aef6 <ADC_Disable+0x8e>

0800aefc <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800aefc:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800af00:	2b01      	cmp	r3, #1
 800af02:	d01a      	beq.n	800af3a <HAL_ADC_Stop+0x3e>
{
 800af04:	b510      	push	{r4, lr}
 800af06:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800af08:	2301      	movs	r3, #1
 800af0a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800af0e:	2103      	movs	r1, #3
 800af10:	f7ff fe74 	bl	800abfc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800af14:	b118      	cbz	r0, 800af1e <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800af16:	2300      	movs	r3, #0
 800af18:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800af1c:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800af1e:	4620      	mov	r0, r4
 800af20:	f7ff ffa2 	bl	800ae68 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800af24:	2800      	cmp	r0, #0
 800af26:	d1f6      	bne.n	800af16 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800af28:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800af2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800af2e:	f023 0301 	bic.w	r3, r3, #1
 800af32:	f043 0301 	orr.w	r3, r3, #1
 800af36:	6563      	str	r3, [r4, #84]	@ 0x54
 800af38:	e7ed      	b.n	800af16 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800af3a:	2002      	movs	r0, #2
}
 800af3c:	4770      	bx	lr

0800af3e <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800af3e:	b530      	push	{r4, r5, lr}
 800af40:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800af42:	2300      	movs	r3, #0
 800af44:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800af46:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d041      	beq.n	800afd2 <HAL_ADCEx_Calibration_Start+0x94>
 800af4e:	4604      	mov	r4, r0
 800af50:	460d      	mov	r5, r1
 800af52:	2301      	movs	r3, #1
 800af54:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800af58:	f7ff ff86 	bl	800ae68 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800af5c:	bb80      	cbnz	r0, 800afc0 <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800af5e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800af60:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800af64:	f023 0302 	bic.w	r3, r3, #2
 800af68:	f043 0302 	orr.w	r3, r3, #2
 800af6c:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800af6e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800af70:	6893      	ldr	r3, [r2, #8]
 800af72:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800af76:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af7a:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 800af7e:	432b      	orrs	r3, r5
 800af80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af84:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800af86:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	db06      	blt.n	800af9c <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800af8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800af90:	f023 0303 	bic.w	r3, r3, #3
 800af94:	f043 0301 	orr.w	r3, r3, #1
 800af98:	6563      	str	r3, [r4, #84]	@ 0x54
 800af9a:	e015      	b.n	800afc8 <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 800af9c:	9b01      	ldr	r3, [sp, #4]
 800af9e:	3301      	adds	r3, #1
 800afa0:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800afa8:	d3ed      	bcc.n	800af86 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800afaa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800afac:	f023 0312 	bic.w	r3, r3, #18
 800afb0:	f043 0310 	orr.w	r3, r3, #16
 800afb4:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 800afb6:	2300      	movs	r3, #0
 800afb8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800afbc:	2001      	movs	r0, #1
 800afbe:	e006      	b.n	800afce <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afc0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800afc2:	f043 0310 	orr.w	r3, r3, #16
 800afc6:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800afc8:	2300      	movs	r3, #0
 800afca:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800afce:	b003      	add	sp, #12
 800afd0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 800afd2:	2002      	movs	r0, #2
 800afd4:	e7fb      	b.n	800afce <HAL_ADCEx_Calibration_Start+0x90>

0800afd6 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800afd6:	2800      	cmp	r0, #0
 800afd8:	f000 80a1 	beq.w	800b11e <HAL_CAN_Init+0x148>
{
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800afe0:	f890 3020 	ldrb.w	r3, [r0, #32]
 800afe4:	b1d3      	cbz	r3, 800b01c <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800afe6:	6822      	ldr	r2, [r4, #0]
 800afe8:	6813      	ldr	r3, [r2, #0]
 800afea:	f043 0301 	orr.w	r3, r3, #1
 800afee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aff0:	f7ff fa78 	bl	800a4e4 <HAL_GetTick>
 800aff4:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	685a      	ldr	r2, [r3, #4]
 800affa:	f012 0f01 	tst.w	r2, #1
 800affe:	d110      	bne.n	800b022 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b000:	f7ff fa70 	bl	800a4e4 <HAL_GetTick>
 800b004:	1b40      	subs	r0, r0, r5
 800b006:	280a      	cmp	r0, #10
 800b008:	d9f5      	bls.n	800aff6 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b00a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b00c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b010:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b012:	2305      	movs	r3, #5
 800b014:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800b018:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800b01c:	f000 fcc4 	bl	800b9a8 <HAL_CAN_MspInit>
 800b020:	e7e1      	b.n	800afe6 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	f022 0202 	bic.w	r2, r2, #2
 800b028:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800b02a:	f7ff fa5b 	bl	800a4e4 <HAL_GetTick>
 800b02e:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b030:	6823      	ldr	r3, [r4, #0]
 800b032:	685a      	ldr	r2, [r3, #4]
 800b034:	f012 0f02 	tst.w	r2, #2
 800b038:	d00d      	beq.n	800b056 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b03a:	f7ff fa53 	bl	800a4e4 <HAL_GetTick>
 800b03e:	1b40      	subs	r0, r0, r5
 800b040:	280a      	cmp	r0, #10
 800b042:	d9f5      	bls.n	800b030 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b044:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b04a:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800b04c:	2305      	movs	r3, #5
 800b04e:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800b052:	2001      	movs	r0, #1
 800b054:	e7e1      	b.n	800b01a <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b056:	7e22      	ldrb	r2, [r4, #24]
 800b058:	2a01      	cmp	r2, #1
 800b05a:	d03d      	beq.n	800b0d8 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b062:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800b064:	7e63      	ldrb	r3, [r4, #25]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d03b      	beq.n	800b0e2 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b06a:	6822      	ldr	r2, [r4, #0]
 800b06c:	6813      	ldr	r3, [r2, #0]
 800b06e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b072:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b074:	7ea3      	ldrb	r3, [r4, #26]
 800b076:	2b01      	cmp	r3, #1
 800b078:	d039      	beq.n	800b0ee <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b07a:	6822      	ldr	r2, [r4, #0]
 800b07c:	6813      	ldr	r3, [r2, #0]
 800b07e:	f023 0320 	bic.w	r3, r3, #32
 800b082:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b084:	7ee3      	ldrb	r3, [r4, #27]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d037      	beq.n	800b0fa <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b08a:	6822      	ldr	r2, [r4, #0]
 800b08c:	6813      	ldr	r3, [r2, #0]
 800b08e:	f043 0310 	orr.w	r3, r3, #16
 800b092:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b094:	7f23      	ldrb	r3, [r4, #28]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d035      	beq.n	800b106 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b09a:	6822      	ldr	r2, [r4, #0]
 800b09c:	6813      	ldr	r3, [r2, #0]
 800b09e:	f023 0308 	bic.w	r3, r3, #8
 800b0a2:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b0a4:	7f63      	ldrb	r3, [r4, #29]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d033      	beq.n	800b112 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b0aa:	6822      	ldr	r2, [r4, #0]
 800b0ac:	6813      	ldr	r3, [r2, #0]
 800b0ae:	f023 0304 	bic.w	r3, r3, #4
 800b0b2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b0b4:	68a3      	ldr	r3, [r4, #8]
 800b0b6:	68e2      	ldr	r2, [r4, #12]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	6922      	ldr	r2, [r4, #16]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	6962      	ldr	r2, [r4, #20]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	6862      	ldr	r2, [r4, #4]
 800b0c4:	3a01      	subs	r2, #1
 800b0c6:	6821      	ldr	r1, [r4, #0]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800b0d6:	e7a0      	b.n	800b01a <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	e7c0      	b.n	800b064 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b0e2:	6822      	ldr	r2, [r4, #0]
 800b0e4:	6813      	ldr	r3, [r2, #0]
 800b0e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	e7c2      	b.n	800b074 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	6813      	ldr	r3, [r2, #0]
 800b0f2:	f043 0320 	orr.w	r3, r3, #32
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	e7c4      	b.n	800b084 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b0fa:	6822      	ldr	r2, [r4, #0]
 800b0fc:	6813      	ldr	r3, [r2, #0]
 800b0fe:	f023 0310 	bic.w	r3, r3, #16
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	e7c6      	b.n	800b094 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b106:	6822      	ldr	r2, [r4, #0]
 800b108:	6813      	ldr	r3, [r2, #0]
 800b10a:	f043 0308 	orr.w	r3, r3, #8
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	e7c8      	b.n	800b0a4 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	6813      	ldr	r3, [r2, #0]
 800b116:	f043 0304 	orr.w	r3, r3, #4
 800b11a:	6013      	str	r3, [r2, #0]
 800b11c:	e7ca      	b.n	800b0b4 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800b11e:	2001      	movs	r0, #1
}
 800b120:	4770      	bx	lr

0800b122 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b122:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b124:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800b128:	3b01      	subs	r3, #1
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d905      	bls.n	800b13c <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b130:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b132:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b136:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800b138:	2001      	movs	r0, #1
  }
}
 800b13a:	4770      	bx	lr
{
 800b13c:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b13e:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800b142:	f043 0301 	orr.w	r3, r3, #1
 800b146:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b14a:	694b      	ldr	r3, [r1, #20]
 800b14c:	f003 031f 	and.w	r3, r3, #31
 800b150:	2001      	movs	r0, #1
 800b152:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b156:	f8d2 021c 	ldr.w	r0, [r2, #540]	@ 0x21c
 800b15a:	ea6f 0c03 	mvn.w	ip, r3
 800b15e:	ea20 0003 	bic.w	r0, r0, r3
 800b162:	f8c2 021c 	str.w	r0, [r2, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b166:	69c8      	ldr	r0, [r1, #28]
 800b168:	b9b0      	cbnz	r0, 800b198 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b16a:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800b16e:	ea0c 0000 	and.w	r0, ip, r0
 800b172:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b176:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b178:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b17a:	68cd      	ldr	r5, [r1, #12]
 800b17c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b180:	3048      	adds	r0, #72	@ 0x48
 800b182:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b186:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b188:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b18a:	688d      	ldr	r5, [r1, #8]
 800b18c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b190:	3048      	adds	r0, #72	@ 0x48
 800b192:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800b196:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b198:	69c8      	ldr	r0, [r1, #28]
 800b19a:	2801      	cmp	r0, #1
 800b19c:	d01b      	beq.n	800b1d6 <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b19e:	6988      	ldr	r0, [r1, #24]
 800b1a0:	bb80      	cbnz	r0, 800b204 <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b1a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b1a6:	ea0c 0000 	and.w	r0, ip, r0
 800b1aa:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b1ae:	6908      	ldr	r0, [r1, #16]
 800b1b0:	bb70      	cbnz	r0, 800b210 <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b1b2:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800b1b6:	ea0c 0000 	and.w	r0, ip, r0
 800b1ba:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b1be:	6a09      	ldr	r1, [r1, #32]
 800b1c0:	2901      	cmp	r1, #1
 800b1c2:	d02b      	beq.n	800b21c <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b1c4:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800b1c8:	f023 0301 	bic.w	r3, r3, #1
 800b1cc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 800b1d0:	2000      	movs	r0, #0
}
 800b1d2:	bc30      	pop	{r4, r5}
 800b1d4:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b1d6:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800b1da:	4318      	orrs	r0, r3
 800b1dc:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b1e0:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b1e2:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b1e4:	680d      	ldr	r5, [r1, #0]
 800b1e6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b1ea:	3048      	adds	r0, #72	@ 0x48
 800b1ec:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b1f0:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b1f2:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b1f4:	688d      	ldr	r5, [r1, #8]
 800b1f6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b1fa:	3048      	adds	r0, #72	@ 0x48
 800b1fc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800b200:	6044      	str	r4, [r0, #4]
 800b202:	e7cc      	b.n	800b19e <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b204:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b208:	4318      	orrs	r0, r3
 800b20a:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
 800b20e:	e7ce      	b.n	800b1ae <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b210:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800b214:	4318      	orrs	r0, r3
 800b216:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
 800b21a:	e7d0      	b.n	800b1be <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b21c:	f8d2 121c 	ldr.w	r1, [r2, #540]	@ 0x21c
 800b220:	430b      	orrs	r3, r1
 800b222:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
 800b226:	e7cd      	b.n	800b1c4 <HAL_CAN_ConfigFilter+0xa2>

0800b228 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b228:	b570      	push	{r4, r5, r6, lr}
 800b22a:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b22c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d006      	beq.n	800b242 <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b234:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b236:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b23a:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800b23c:	2601      	movs	r6, #1
  }
}
 800b23e:	4630      	mov	r0, r6
 800b240:	bd70      	pop	{r4, r5, r6, pc}
 800b242:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b244:	2302      	movs	r3, #2
 800b246:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b24a:	6802      	ldr	r2, [r0, #0]
 800b24c:	6813      	ldr	r3, [r2, #0]
 800b24e:	f023 0301 	bic.w	r3, r3, #1
 800b252:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800b254:	f7ff f946 	bl	800a4e4 <HAL_GetTick>
 800b258:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	f013 0f01 	tst.w	r3, #1
 800b262:	d00c      	beq.n	800b27e <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b264:	f7ff f93e 	bl	800a4e4 <HAL_GetTick>
 800b268:	1b43      	subs	r3, r0, r5
 800b26a:	2b0a      	cmp	r3, #10
 800b26c:	d9f5      	bls.n	800b25a <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b26e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b274:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800b276:	2305      	movs	r3, #5
 800b278:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800b27c:	e7df      	b.n	800b23e <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b27e:	2600      	movs	r6, #0
 800b280:	6266      	str	r6, [r4, #36]	@ 0x24
    return HAL_OK;
 800b282:	e7dc      	b.n	800b23e <HAL_CAN_Start+0x16>

0800b284 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800b284:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b286:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b28a:	6804      	ldr	r4, [r0, #0]
 800b28c:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b28e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b292:	fa5f fc8c 	uxtb.w	ip, ip
 800b296:	f1bc 0f01 	cmp.w	ip, #1
 800b29a:	d862      	bhi.n	800b362 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b29c:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 800b2a0:	d059      	beq.n	800b356 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b2a2:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b2a6:	2401      	movs	r4, #1
 800b2a8:	fa04 f40c 	lsl.w	r4, r4, ip
 800b2ac:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b2ae:	688b      	ldr	r3, [r1, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d13d      	bne.n	800b330 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b2b4:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 800b2b6:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b2b8:	6804      	ldr	r4, [r0, #0]
 800b2ba:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 800b2be:	f10c 0318 	add.w	r3, ip, #24
 800b2c2:	011b      	lsls	r3, r3, #4
 800b2c4:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b2c6:	6803      	ldr	r3, [r0, #0]
 800b2c8:	690c      	ldr	r4, [r1, #16]
 800b2ca:	f10c 0e18 	add.w	lr, ip, #24
 800b2ce:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800b2d2:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b2d4:	7d0b      	ldrb	r3, [r1, #20]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d035      	beq.n	800b346 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b2da:	79d1      	ldrb	r1, [r2, #7]
 800b2dc:	7993      	ldrb	r3, [r2, #6]
 800b2de:	041b      	lsls	r3, r3, #16
 800b2e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b2e4:	7951      	ldrb	r1, [r2, #5]
 800b2e6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b2ea:	7914      	ldrb	r4, [r2, #4]
 800b2ec:	6801      	ldr	r1, [r0, #0]
 800b2ee:	4323      	orrs	r3, r4
 800b2f0:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 800b2f4:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b2f8:	78d1      	ldrb	r1, [r2, #3]
 800b2fa:	7893      	ldrb	r3, [r2, #2]
 800b2fc:	041b      	lsls	r3, r3, #16
 800b2fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800b302:	7851      	ldrb	r1, [r2, #1]
 800b304:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b308:	7811      	ldrb	r1, [r2, #0]
 800b30a:	6802      	ldr	r2, [r0, #0]
 800b30c:	430b      	orrs	r3, r1
 800b30e:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800b312:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b316:	6802      	ldr	r2, [r0, #0]
 800b318:	f10c 0c18 	add.w	ip, ip, #24
 800b31c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800b320:	f852 300c 	ldr.w	r3, [r2, ip]
 800b324:	f043 0301 	orr.w	r3, r3, #1
 800b328:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 800b32c:	2000      	movs	r0, #0
 800b32e:	e01d      	b.n	800b36c <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b330:	684c      	ldr	r4, [r1, #4]
 800b332:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 800b336:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 800b338:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b33a:	f10c 0418 	add.w	r4, ip, #24
 800b33e:	0124      	lsls	r4, r4, #4
 800b340:	6805      	ldr	r5, [r0, #0]
 800b342:	512b      	str	r3, [r5, r4]
 800b344:	e7bf      	b.n	800b2c6 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b346:	6803      	ldr	r3, [r0, #0]
 800b348:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800b34c:	6859      	ldr	r1, [r3, #4]
 800b34e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800b352:	6059      	str	r1, [r3, #4]
 800b354:	e7c1      	b.n	800b2da <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b356:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b358:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b35c:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 800b35e:	2001      	movs	r0, #1
 800b360:	e004      	b.n	800b36c <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b362:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b368:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800b36a:	2001      	movs	r0, #1
  }
}
 800b36c:	bd30      	pop	{r4, r5, pc}

0800b36e <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800b36e:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800b372:	3b01      	subs	r3, #1
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b01      	cmp	r3, #1
 800b378:	d905      	bls.n	800b386 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b37a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800b37c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b380:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800b382:	2001      	movs	r0, #1
  }
}
 800b384:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800b386:	6802      	ldr	r2, [r0, #0]
 800b388:	6953      	ldr	r3, [r2, #20]
 800b38a:	430b      	orrs	r3, r1
 800b38c:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800b38e:	2000      	movs	r0, #0
 800b390:	4770      	bx	lr
	...

0800b394 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800b394:	2800      	cmp	r0, #0
 800b396:	db07      	blt.n	800b3a8 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b398:	f000 021f 	and.w	r2, r0, #31
 800b39c:	0940      	lsrs	r0, r0, #5
 800b39e:	2301      	movs	r3, #1
 800b3a0:	4093      	lsls	r3, r2
 800b3a2:	4a02      	ldr	r2, [pc, #8]	@ (800b3ac <__NVIC_EnableIRQ+0x18>)
 800b3a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	e000e100 	.word	0xe000e100

0800b3b0 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	db08      	blt.n	800b3c6 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3b4:	0109      	lsls	r1, r1, #4
 800b3b6:	b2c9      	uxtb	r1, r1
 800b3b8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800b3bc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800b3c0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800b3c4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b3c6:	f000 000f 	and.w	r0, r0, #15
 800b3ca:	0109      	lsls	r1, r1, #4
 800b3cc:	b2c9      	uxtb	r1, r1
 800b3ce:	4b01      	ldr	r3, [pc, #4]	@ (800b3d4 <__NVIC_SetPriority+0x24>)
 800b3d0:	5419      	strb	r1, [r3, r0]
  }
}
 800b3d2:	4770      	bx	lr
 800b3d4:	e000ed14 	.word	0xe000ed14

0800b3d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b3d8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b3da:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b3de:	f1c0 0c07 	rsb	ip, r0, #7
 800b3e2:	f1bc 0f04 	cmp.w	ip, #4
 800b3e6:	bf28      	it	cs
 800b3e8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b3ec:	1d03      	adds	r3, r0, #4
 800b3ee:	2b06      	cmp	r3, #6
 800b3f0:	d90f      	bls.n	800b412 <NVIC_EncodePriority+0x3a>
 800b3f2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b3f4:	f04f 3eff 	mov.w	lr, #4294967295
 800b3f8:	fa0e f00c 	lsl.w	r0, lr, ip
 800b3fc:	ea21 0100 	bic.w	r1, r1, r0
 800b400:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b402:	fa0e fe03 	lsl.w	lr, lr, r3
 800b406:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800b40a:	ea41 0002 	orr.w	r0, r1, r2
 800b40e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b412:	2300      	movs	r3, #0
 800b414:	e7ee      	b.n	800b3f4 <NVIC_EncodePriority+0x1c>
	...

0800b418 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b418:	4a07      	ldr	r2, [pc, #28]	@ (800b438 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800b41a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b41c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800b420:	041b      	lsls	r3, r3, #16
 800b422:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b424:	0200      	lsls	r0, r0, #8
 800b426:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b42a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800b42c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800b434:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800b436:	4770      	bx	lr
 800b438:	e000ed00 	.word	0xe000ed00

0800b43c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b43c:	b510      	push	{r4, lr}
 800b43e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b440:	4b05      	ldr	r3, [pc, #20]	@ (800b458 <HAL_NVIC_SetPriority+0x1c>)
 800b442:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b444:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800b448:	f7ff ffc6 	bl	800b3d8 <NVIC_EncodePriority>
 800b44c:	4601      	mov	r1, r0
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff ffae 	bl	800b3b0 <__NVIC_SetPriority>
}
 800b454:	bd10      	pop	{r4, pc}
 800b456:	bf00      	nop
 800b458:	e000ed00 	.word	0xe000ed00

0800b45c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b45c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b45e:	f7ff ff99 	bl	800b394 <__NVIC_EnableIRQ>
}
 800b462:	bd08      	pop	{r3, pc}

0800b464 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800b464:	2800      	cmp	r0, #0
 800b466:	d038      	beq.n	800b4da <HAL_CRC_Init+0x76>
{
 800b468:	b510      	push	{r4, lr}
 800b46a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800b46c:	7f43      	ldrb	r3, [r0, #29]
 800b46e:	b31b      	cbz	r3, 800b4b8 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800b470:	2302      	movs	r3, #2
 800b472:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800b474:	7923      	ldrb	r3, [r4, #4]
 800b476:	bb1b      	cbnz	r3, 800b4c0 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	4a19      	ldr	r2, [pc, #100]	@ (800b4e0 <HAL_CRC_Init+0x7c>)
 800b47c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800b47e:	6822      	ldr	r2, [r4, #0]
 800b480:	6893      	ldr	r3, [r2, #8]
 800b482:	f023 0318 	bic.w	r3, r3, #24
 800b486:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800b488:	7963      	ldrb	r3, [r4, #5]
 800b48a:	bb13      	cbnz	r3, 800b4d2 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295
 800b492:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800b494:	6822      	ldr	r2, [r4, #0]
 800b496:	6893      	ldr	r3, [r2, #8]
 800b498:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800b49c:	6961      	ldr	r1, [r4, #20]
 800b49e:	430b      	orrs	r3, r1
 800b4a0:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800b4a2:	6822      	ldr	r2, [r4, #0]
 800b4a4:	6893      	ldr	r3, [r2, #8]
 800b4a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4aa:	69a1      	ldr	r1, [r4, #24]
 800b4ac:	430b      	orrs	r3, r1
 800b4ae:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800b4b4:	2000      	movs	r0, #0
}
 800b4b6:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800b4b8:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800b4ba:	f000 faa9 	bl	800ba10 <HAL_CRC_MspInit>
 800b4be:	e7d7      	b.n	800b470 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800b4c0:	68e2      	ldr	r2, [r4, #12]
 800b4c2:	68a1      	ldr	r1, [r4, #8]
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f000 f80d 	bl	800b4e4 <HAL_CRCEx_Polynomial_Set>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d0dc      	beq.n	800b488 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800b4ce:	2001      	movs	r0, #1
 800b4d0:	e7f1      	b.n	800b4b6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	6922      	ldr	r2, [r4, #16]
 800b4d6:	611a      	str	r2, [r3, #16]
 800b4d8:	e7dc      	b.n	800b494 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800b4da:	2001      	movs	r0, #1
}
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	04c11db7 	.word	0x04c11db7

0800b4e4 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800b4e4:	f011 0f01 	tst.w	r1, #1
 800b4e8:	d030      	beq.n	800b54c <HAL_CRCEx_Polynomial_Set+0x68>
{
 800b4ea:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800b4ec:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800b4ee:	461c      	mov	r4, r3
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	b134      	cbz	r4, 800b502 <HAL_CRCEx_Polynomial_Set+0x1e>
 800b4f4:	f003 0c1f 	and.w	ip, r3, #31
 800b4f8:	fa21 fc0c 	lsr.w	ip, r1, ip
 800b4fc:	f01c 0f01 	tst.w	ip, #1
 800b500:	d0f5      	beq.n	800b4ee <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
 800b502:	2a18      	cmp	r2, #24
 800b504:	d824      	bhi.n	800b550 <HAL_CRCEx_Polynomial_Set+0x6c>
 800b506:	e8df f002 	tbb	[pc, r2]
 800b50a:	230f      	.short	0x230f
 800b50c:	23232323 	.word	0x23232323
 800b510:	231d2323 	.word	0x231d2323
 800b514:	23232323 	.word	0x23232323
 800b518:	23192323 	.word	0x23192323
 800b51c:	23232323 	.word	0x23232323
 800b520:	2323      	.short	0x2323
 800b522:	0d          	.byte	0x0d
 800b523:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800b524:	2b06      	cmp	r3, #6
 800b526:	d817      	bhi.n	800b558 <HAL_CRCEx_Polynomial_Set+0x74>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800b528:	6803      	ldr	r3, [r0, #0]
 800b52a:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800b52c:	6801      	ldr	r1, [r0, #0]
 800b52e:	688b      	ldr	r3, [r1, #8]
 800b530:	f023 0318 	bic.w	r3, r3, #24
 800b534:	4313      	orrs	r3, r2
 800b536:	608b      	str	r3, [r1, #8]
 800b538:	2000      	movs	r0, #0
 800b53a:	e00a      	b.n	800b552 <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_8B)
 800b53c:	2b07      	cmp	r3, #7
 800b53e:	d9f3      	bls.n	800b528 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800b540:	2001      	movs	r0, #1
 800b542:	e006      	b.n	800b552 <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_16B)
 800b544:	2b0f      	cmp	r3, #15
 800b546:	d9ef      	bls.n	800b528 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800b548:	2001      	movs	r0, #1
 800b54a:	e002      	b.n	800b552 <HAL_CRCEx_Polynomial_Set+0x6e>
    status =  HAL_ERROR;
 800b54c:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800b54e:	4770      	bx	lr
    switch (PolyLength)
 800b550:	2001      	movs	r0, #1
}
 800b552:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b556:	4770      	bx	lr
          status =   HAL_ERROR;
 800b558:	2001      	movs	r0, #1
 800b55a:	e7fa      	b.n	800b552 <HAL_CRCEx_Polynomial_Set+0x6e>

0800b55c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b55e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800b560:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b562:	e062      	b.n	800b62a <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b564:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b566:	005e      	lsls	r6, r3, #1
 800b568:	2403      	movs	r4, #3
 800b56a:	40b4      	lsls	r4, r6
 800b56c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b570:	68cc      	ldr	r4, [r1, #12]
 800b572:	40b4      	lsls	r4, r6
 800b574:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800b576:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b578:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b57a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b57e:	684c      	ldr	r4, [r1, #4]
 800b580:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800b584:	409c      	lsls	r4, r3
 800b586:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800b588:	6044      	str	r4, [r0, #4]
 800b58a:	e05f      	b.n	800b64c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b58c:	08dd      	lsrs	r5, r3, #3
 800b58e:	3508      	adds	r5, #8
 800b590:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b594:	f003 0c07 	and.w	ip, r3, #7
 800b598:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800b59c:	f04f 0e0f 	mov.w	lr, #15
 800b5a0:	fa0e fe0c 	lsl.w	lr, lr, ip
 800b5a4:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b5a8:	690c      	ldr	r4, [r1, #16]
 800b5aa:	fa04 f40c 	lsl.w	r4, r4, ip
 800b5ae:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800b5b2:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800b5b6:	e060      	b.n	800b67a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b5b8:	2402      	movs	r4, #2
 800b5ba:	e000      	b.n	800b5be <HAL_GPIO_Init+0x62>
 800b5bc:	2400      	movs	r4, #0
 800b5be:	fa04 f40e 	lsl.w	r4, r4, lr
 800b5c2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b5c4:	f10c 0c02 	add.w	ip, ip, #2
 800b5c8:	4d4c      	ldr	r5, [pc, #304]	@ (800b6fc <HAL_GPIO_Init+0x1a0>)
 800b5ca:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b5ce:	4c4c      	ldr	r4, [pc, #304]	@ (800b700 <HAL_GPIO_Init+0x1a4>)
 800b5d0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800b5d2:	43d4      	mvns	r4, r2
 800b5d4:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b5d8:	684f      	ldr	r7, [r1, #4]
 800b5da:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800b5de:	d001      	beq.n	800b5e4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800b5e0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800b5e4:	4d46      	ldr	r5, [pc, #280]	@ (800b700 <HAL_GPIO_Init+0x1a4>)
 800b5e6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800b5e8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800b5ea:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b5ee:	684f      	ldr	r7, [r1, #4]
 800b5f0:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 800b5f4:	d001      	beq.n	800b5fa <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800b5f6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800b5fa:	4d41      	ldr	r5, [pc, #260]	@ (800b700 <HAL_GPIO_Init+0x1a4>)
 800b5fc:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800b5fe:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800b600:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b604:	684f      	ldr	r7, [r1, #4]
 800b606:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800b60a:	d001      	beq.n	800b610 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 800b60c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800b610:	4d3b      	ldr	r5, [pc, #236]	@ (800b700 <HAL_GPIO_Init+0x1a4>)
 800b612:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800b614:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800b616:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b618:	684e      	ldr	r6, [r1, #4]
 800b61a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800b61e:	d001      	beq.n	800b624 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800b620:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800b624:	4a36      	ldr	r2, [pc, #216]	@ (800b700 <HAL_GPIO_Init+0x1a4>)
 800b626:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800b628:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b62a:	680a      	ldr	r2, [r1, #0]
 800b62c:	fa32 f403 	lsrs.w	r4, r2, r3
 800b630:	d062      	beq.n	800b6f8 <HAL_GPIO_Init+0x19c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b632:	f04f 0c01 	mov.w	ip, #1
 800b636:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800b63a:	ea1c 0202 	ands.w	r2, ip, r2
 800b63e:	d0f3      	beq.n	800b628 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b640:	684c      	ldr	r4, [r1, #4]
 800b642:	f004 0403 	and.w	r4, r4, #3
 800b646:	3c01      	subs	r4, #1
 800b648:	2c01      	cmp	r4, #1
 800b64a:	d98b      	bls.n	800b564 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b64c:	684c      	ldr	r4, [r1, #4]
 800b64e:	f004 0403 	and.w	r4, r4, #3
 800b652:	2c03      	cmp	r4, #3
 800b654:	d00c      	beq.n	800b670 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800b656:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b658:	005d      	lsls	r5, r3, #1
 800b65a:	f04f 0c03 	mov.w	ip, #3
 800b65e:	fa0c fc05 	lsl.w	ip, ip, r5
 800b662:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b666:	688c      	ldr	r4, [r1, #8]
 800b668:	40ac      	lsls	r4, r5
 800b66a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800b66e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b670:	684c      	ldr	r4, [r1, #4]
 800b672:	f004 0403 	and.w	r4, r4, #3
 800b676:	2c02      	cmp	r4, #2
 800b678:	d088      	beq.n	800b58c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800b67a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b67c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800b680:	f04f 0c03 	mov.w	ip, #3
 800b684:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b688:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b68c:	684c      	ldr	r4, [r1, #4]
 800b68e:	f004 0403 	and.w	r4, r4, #3
 800b692:	fa04 f40e 	lsl.w	r4, r4, lr
 800b696:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800b69a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b69c:	684c      	ldr	r4, [r1, #4]
 800b69e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800b6a2:	d0c1      	beq.n	800b628 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6a4:	4c17      	ldr	r4, [pc, #92]	@ (800b704 <HAL_GPIO_Init+0x1a8>)
 800b6a6:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800b6a8:	f045 0501 	orr.w	r5, r5, #1
 800b6ac:	6625      	str	r5, [r4, #96]	@ 0x60
 800b6ae:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 800b6b0:	f004 0401 	and.w	r4, r4, #1
 800b6b4:	9401      	str	r4, [sp, #4]
 800b6b6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800b6b8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800b6bc:	f10c 0502 	add.w	r5, ip, #2
 800b6c0:	4c0e      	ldr	r4, [pc, #56]	@ (800b6fc <HAL_GPIO_Init+0x1a0>)
 800b6c2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b6c6:	f003 0e03 	and.w	lr, r3, #3
 800b6ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800b6ce:	240f      	movs	r4, #15
 800b6d0:	fa04 f40e 	lsl.w	r4, r4, lr
 800b6d4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b6d8:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800b6dc:	f43f af6e 	beq.w	800b5bc <HAL_GPIO_Init+0x60>
 800b6e0:	4c09      	ldr	r4, [pc, #36]	@ (800b708 <HAL_GPIO_Init+0x1ac>)
 800b6e2:	42a0      	cmp	r0, r4
 800b6e4:	d006      	beq.n	800b6f4 <HAL_GPIO_Init+0x198>
 800b6e6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800b6ea:	42a0      	cmp	r0, r4
 800b6ec:	f43f af64 	beq.w	800b5b8 <HAL_GPIO_Init+0x5c>
 800b6f0:	2407      	movs	r4, #7
 800b6f2:	e764      	b.n	800b5be <HAL_GPIO_Init+0x62>
 800b6f4:	2401      	movs	r4, #1
 800b6f6:	e762      	b.n	800b5be <HAL_GPIO_Init+0x62>
  }
}
 800b6f8:	b003      	add	sp, #12
 800b6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6fc:	40010000 	.word	0x40010000
 800b700:	40010400 	.word	0x40010400
 800b704:	40021000 	.word	0x40021000
 800b708:	48000400 	.word	0x48000400

0800b70c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b70c:	b10a      	cbz	r2, 800b712 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b70e:	6181      	str	r1, [r0, #24]
 800b710:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b712:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800b714:	4770      	bx	lr

0800b716 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b716:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b718:	ea01 0203 	and.w	r2, r1, r3
 800b71c:	ea21 0103 	bic.w	r1, r1, r3
 800b720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b724:	6181      	str	r1, [r0, #24]
}
 800b726:	4770      	bx	lr

0800b728 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b728:	2800      	cmp	r0, #0
 800b72a:	d05f      	beq.n	800b7ec <HAL_I2C_Init+0xc4>
{
 800b72c:	b510      	push	{r4, lr}
 800b72e:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b730:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800b734:	2b00      	cmp	r3, #0
 800b736:	d048      	beq.n	800b7ca <HAL_I2C_Init+0xa2>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b738:	2324      	movs	r3, #36	@ 0x24
 800b73a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b73e:	6822      	ldr	r2, [r4, #0]
 800b740:	6813      	ldr	r3, [r2, #0]
 800b742:	f023 0301 	bic.w	r3, r3, #1
 800b746:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b748:	6863      	ldr	r3, [r4, #4]
 800b74a:	6822      	ldr	r2, [r4, #0]
 800b74c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800b750:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b752:	6822      	ldr	r2, [r4, #0]
 800b754:	6893      	ldr	r3, [r2, #8]
 800b756:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b75a:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b75c:	68e3      	ldr	r3, [r4, #12]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d038      	beq.n	800b7d4 <HAL_I2C_Init+0xac>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	6822      	ldr	r2, [r4, #0]
 800b766:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 800b76a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b76c:	68e3      	ldr	r3, [r4, #12]
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d036      	beq.n	800b7e0 <HAL_I2C_Init+0xb8>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b772:	6822      	ldr	r2, [r4, #0]
 800b774:	6853      	ldr	r3, [r2, #4]
 800b776:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b77a:	6053      	str	r3, [r2, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b77c:	6822      	ldr	r2, [r4, #0]
 800b77e:	6853      	ldr	r3, [r2, #4]
 800b780:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b788:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b78a:	6822      	ldr	r2, [r4, #0]
 800b78c:	68d3      	ldr	r3, [r2, #12]
 800b78e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b792:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b794:	6923      	ldr	r3, [r4, #16]
 800b796:	6962      	ldr	r2, [r4, #20]
 800b798:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b79a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800b7a2:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b7a4:	69e3      	ldr	r3, [r4, #28]
 800b7a6:	6a21      	ldr	r1, [r4, #32]
 800b7a8:	6822      	ldr	r2, [r4, #0]
 800b7aa:	430b      	orrs	r3, r1
 800b7ac:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b7ae:	6822      	ldr	r2, [r4, #0]
 800b7b0:	6813      	ldr	r3, [r2, #0]
 800b7b2:	f043 0301 	orr.w	r3, r3, #1
 800b7b6:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b7bc:	2320      	movs	r3, #32
 800b7be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b7c2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7c4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42

  return HAL_OK;
}
 800b7c8:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800b7ca:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800b7ce:	f000 f935 	bl	800ba3c <HAL_I2C_MspInit>
 800b7d2:	e7b1      	b.n	800b738 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	6822      	ldr	r2, [r4, #0]
 800b7d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7dc:	6093      	str	r3, [r2, #8]
 800b7de:	e7c5      	b.n	800b76c <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800b7e0:	6822      	ldr	r2, [r4, #0]
 800b7e2:	6853      	ldr	r3, [r2, #4]
 800b7e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b7e8:	6053      	str	r3, [r2, #4]
 800b7ea:	e7c7      	b.n	800b77c <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 800b7ec:	2001      	movs	r0, #1
}
 800b7ee:	4770      	bx	lr

0800b7f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b7f0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7f2:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800b7f6:	2a20      	cmp	r2, #32
 800b7f8:	d123      	bne.n	800b842 <HAL_I2CEx_ConfigAnalogFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7fa:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800b7fe:	2a01      	cmp	r2, #1
 800b800:	d021      	beq.n	800b846 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800b802:	2201      	movs	r2, #1
 800b804:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b808:	2224      	movs	r2, #36	@ 0x24
 800b80a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b80e:	6800      	ldr	r0, [r0, #0]
 800b810:	6802      	ldr	r2, [r0, #0]
 800b812:	f022 0201 	bic.w	r2, r2, #1
 800b816:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b818:	6818      	ldr	r0, [r3, #0]
 800b81a:	6802      	ldr	r2, [r0, #0]
 800b81c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b820:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b822:	6818      	ldr	r0, [r3, #0]
 800b824:	6802      	ldr	r2, [r0, #0]
 800b826:	430a      	orrs	r2, r1
 800b828:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b82a:	6819      	ldr	r1, [r3, #0]
 800b82c:	680a      	ldr	r2, [r1, #0]
 800b82e:	f042 0201 	orr.w	r2, r2, #1
 800b832:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b834:	2220      	movs	r2, #32
 800b836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b83a:	2000      	movs	r0, #0
 800b83c:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800b840:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800b842:	2002      	movs	r0, #2
 800b844:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800b846:	2002      	movs	r0, #2
  }
}
 800b848:	4770      	bx	lr

0800b84a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b84a:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b84c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800b850:	2a20      	cmp	r2, #32
 800b852:	d121      	bne.n	800b898 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b854:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800b858:	2a01      	cmp	r2, #1
 800b85a:	d01f      	beq.n	800b89c <HAL_I2CEx_ConfigDigitalFilter+0x52>
 800b85c:	2201      	movs	r2, #1
 800b85e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b862:	2224      	movs	r2, #36	@ 0x24
 800b864:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b868:	6800      	ldr	r0, [r0, #0]
 800b86a:	6802      	ldr	r2, [r0, #0]
 800b86c:	f022 0201 	bic.w	r2, r2, #1
 800b870:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b872:	6818      	ldr	r0, [r3, #0]
 800b874:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b876:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b87a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b87e:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b880:	6819      	ldr	r1, [r3, #0]
 800b882:	680a      	ldr	r2, [r1, #0]
 800b884:	f042 0201 	orr.w	r2, r2, #1
 800b888:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b88a:	2220      	movs	r2, #32
 800b88c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b890:	2000      	movs	r0, #0
 800b892:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800b896:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800b898:	2002      	movs	r0, #2
 800b89a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800b89c:	2002      	movs	r0, #2
  }
}
 800b89e:	4770      	bx	lr

0800b8a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b8a0:	b500      	push	{lr}
 800b8a2:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b8dc <HAL_MspInit+0x3c>)
 800b8a6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b8a8:	f042 0201 	orr.w	r2, r2, #1
 800b8ac:	661a      	str	r2, [r3, #96]	@ 0x60
 800b8ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b8b0:	f002 0201 	and.w	r2, r2, #1
 800b8b4:	9200      	str	r2, [sp, #0]
 800b8b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b8b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b8ba:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800b8be:	659a      	str	r2, [r3, #88]	@ 0x58
 800b8c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	210f      	movs	r1, #15
 800b8ce:	f06f 0001 	mvn.w	r0, #1
 800b8d2:	f7ff fdb3 	bl	800b43c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b8d6:	b003      	add	sp, #12
 800b8d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8dc:	40021000 	.word	0x40021000

0800b8e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	b09e      	sub	sp, #120	@ 0x78
 800b8e4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800b8ea:	911a      	str	r1, [sp, #104]	@ 0x68
 800b8ec:	911b      	str	r1, [sp, #108]	@ 0x6c
 800b8ee:	911c      	str	r1, [sp, #112]	@ 0x70
 800b8f0:	911d      	str	r1, [sp, #116]	@ 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b8f2:	2254      	movs	r2, #84	@ 0x54
 800b8f4:	a804      	add	r0, sp, #16
 800b8f6:	f002 fa72 	bl	800ddde <memset>
  if(hadc->Instance==ADC1)
 800b8fa:	6822      	ldr	r2, [r4, #0]
 800b8fc:	4b27      	ldr	r3, [pc, #156]	@ (800b99c <HAL_ADC_MspInit+0xbc>)
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d001      	beq.n	800b906 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800b902:	b01e      	add	sp, #120	@ 0x78
 800b904:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800b906:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b90a:	9304      	str	r3, [sp, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800b90c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800b910:	9316      	str	r3, [sp, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800b912:	2302      	movs	r3, #2
 800b914:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800b916:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800b918:	2208      	movs	r2, #8
 800b91a:	9207      	str	r2, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b91c:	2207      	movs	r2, #7
 800b91e:	9208      	str	r2, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b920:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b922:	930a      	str	r3, [sp, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800b924:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b928:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b92a:	a804      	add	r0, sp, #16
 800b92c:	f000 fef6 	bl	800c71c <HAL_RCCEx_PeriphCLKConfig>
 800b930:	2800      	cmp	r0, #0
 800b932:	d130      	bne.n	800b996 <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_ADC_CLK_ENABLE();
 800b934:	4b1a      	ldr	r3, [pc, #104]	@ (800b9a0 <HAL_ADC_MspInit+0xc0>)
 800b936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b93c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b93e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b940:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800b944:	9201      	str	r2, [sp, #4]
 800b946:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b948:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b94a:	f042 0201 	orr.w	r2, r2, #1
 800b94e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b950:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b952:	f002 0201 	and.w	r2, r2, #1
 800b956:	9202      	str	r2, [sp, #8]
 800b958:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b95a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b95c:	f042 0202 	orr.w	r2, r2, #2
 800b960:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b964:	f003 0302 	and.w	r3, r3, #2
 800b968:	9303      	str	r3, [sp, #12]
 800b96a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC4_Pin|ADC5_Pin
 800b96c:	237b      	movs	r3, #123	@ 0x7b
 800b96e:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800b970:	260b      	movs	r6, #11
 800b972:	961a      	str	r6, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b974:	2500      	movs	r5, #0
 800b976:	951b      	str	r5, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b978:	ac19      	add	r4, sp, #100	@ 0x64
 800b97a:	4621      	mov	r1, r4
 800b97c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b980:	f7ff fdec 	bl	800b55c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC7_Pin;
 800b984:	2301      	movs	r3, #1
 800b986:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800b988:	961a      	str	r6, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b98a:	951b      	str	r5, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(ADC7_GPIO_Port, &GPIO_InitStruct);
 800b98c:	4621      	mov	r1, r4
 800b98e:	4805      	ldr	r0, [pc, #20]	@ (800b9a4 <HAL_ADC_MspInit+0xc4>)
 800b990:	f7ff fde4 	bl	800b55c <HAL_GPIO_Init>
}
 800b994:	e7b5      	b.n	800b902 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 800b996:	f7fd fd29 	bl	80093ec <Error_Handler>
 800b99a:	e7cb      	b.n	800b934 <HAL_ADC_MspInit+0x54>
 800b99c:	50040000 	.word	0x50040000
 800b9a0:	40021000 	.word	0x40021000
 800b9a4:	48000400 	.word	0x48000400

0800b9a8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800b9a8:	b500      	push	{lr}
 800b9aa:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	9303      	str	r3, [sp, #12]
 800b9b0:	9304      	str	r3, [sp, #16]
 800b9b2:	9305      	str	r3, [sp, #20]
 800b9b4:	9306      	str	r3, [sp, #24]
 800b9b6:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 800b9b8:	6802      	ldr	r2, [r0, #0]
 800b9ba:	4b14      	ldr	r3, [pc, #80]	@ (800ba0c <HAL_CAN_MspInit+0x64>)
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d002      	beq.n	800b9c6 <HAL_CAN_MspInit+0x1e>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800b9c0:	b009      	add	sp, #36	@ 0x24
 800b9c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800b9c6:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 800b9ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b9cc:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800b9d0:	659a      	str	r2, [r3, #88]	@ 0x58
 800b9d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b9d4:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 800b9d8:	9201      	str	r2, [sp, #4]
 800b9da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9de:	f042 0201 	orr.w	r2, r2, #1
 800b9e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b9e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	9302      	str	r3, [sp, #8]
 800b9ec:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b9ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b9f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9f8:	2303      	movs	r3, #3
 800b9fa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800b9fc:	2309      	movs	r3, #9
 800b9fe:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba00:	a903      	add	r1, sp, #12
 800ba02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ba06:	f7ff fda9 	bl	800b55c <HAL_GPIO_Init>
}
 800ba0a:	e7d9      	b.n	800b9c0 <HAL_CAN_MspInit+0x18>
 800ba0c:	40006400 	.word	0x40006400

0800ba10 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800ba10:	6802      	ldr	r2, [r0, #0]
 800ba12:	4b09      	ldr	r3, [pc, #36]	@ (800ba38 <HAL_CRC_MspInit+0x28>)
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d000      	beq.n	800ba1a <HAL_CRC_MspInit+0xa>
 800ba18:	4770      	bx	lr
{
 800ba1a:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800ba1c:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800ba20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ba26:	649a      	str	r2, [r3, #72]	@ 0x48
 800ba28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ba2e:	9301      	str	r3, [sp, #4]
 800ba30:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800ba32:	b002      	add	sp, #8
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	40023000 	.word	0x40023000

0800ba3c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ba3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba40:	b0a1      	sub	sp, #132	@ 0x84
 800ba42:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ba44:	2100      	movs	r1, #0
 800ba46:	911b      	str	r1, [sp, #108]	@ 0x6c
 800ba48:	911c      	str	r1, [sp, #112]	@ 0x70
 800ba4a:	911d      	str	r1, [sp, #116]	@ 0x74
 800ba4c:	911e      	str	r1, [sp, #120]	@ 0x78
 800ba4e:	911f      	str	r1, [sp, #124]	@ 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba50:	2254      	movs	r2, #84	@ 0x54
 800ba52:	a806      	add	r0, sp, #24
 800ba54:	f002 f9c3 	bl	800ddde <memset>
  if(hi2c->Instance==I2C1)
 800ba58:	6823      	ldr	r3, [r4, #0]
 800ba5a:	4a42      	ldr	r2, [pc, #264]	@ (800bb64 <HAL_I2C_MspInit+0x128>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d005      	beq.n	800ba6c <HAL_I2C_MspInit+0x30>
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* USER CODE BEGIN I2C1_MspInit 1 */

    /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800ba60:	4a41      	ldr	r2, [pc, #260]	@ (800bb68 <HAL_I2C_MspInit+0x12c>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d032      	beq.n	800bacc <HAL_I2C_MspInit+0x90>
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800ba66:	b021      	add	sp, #132	@ 0x84
 800ba68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800ba6c:	2340      	movs	r3, #64	@ 0x40
 800ba6e:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800ba70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ba74:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba76:	a806      	add	r0, sp, #24
 800ba78:	f000 fe50 	bl	800c71c <HAL_RCCEx_PeriphCLKConfig>
 800ba7c:	bb18      	cbnz	r0, 800bac6 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba7e:	4c3b      	ldr	r4, [pc, #236]	@ (800bb6c <HAL_I2C_MspInit+0x130>)
 800ba80:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ba82:	f043 0301 	orr.w	r3, r3, #1
 800ba86:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ba88:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	9301      	str	r3, [sp, #4]
 800ba90:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ba92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800ba96:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ba98:	2312      	movs	r3, #18
 800ba9a:	931c      	str	r3, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baa0:	2303      	movs	r3, #3
 800baa2:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800baa4:	2304      	movs	r3, #4
 800baa6:	931f      	str	r3, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800baa8:	a91b      	add	r1, sp, #108	@ 0x6c
 800baaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800baae:	f7ff fd55 	bl	800b55c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800bab2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bab4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bab8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800baba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800babc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bac0:	9302      	str	r3, [sp, #8]
 800bac2:	9b02      	ldr	r3, [sp, #8]
 800bac4:	e7cf      	b.n	800ba66 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 800bac6:	f7fd fc91 	bl	80093ec <Error_Handler>
 800baca:	e7d8      	b.n	800ba7e <HAL_I2C_MspInit+0x42>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800bacc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bad0:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800bad2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800bad6:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bad8:	a806      	add	r0, sp, #24
 800bada:	f000 fe1f 	bl	800c71c <HAL_RCCEx_PeriphCLKConfig>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d13c      	bne.n	800bb5c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bae2:	4c22      	ldr	r4, [pc, #136]	@ (800bb6c <HAL_I2C_MspInit+0x130>)
 800bae4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800bae6:	f043 0301 	orr.w	r3, r3, #1
 800baea:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800baec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	9303      	str	r3, [sp, #12]
 800baf4:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800baf6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800baf8:	f043 0302 	orr.w	r3, r3, #2
 800bafc:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800bafe:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800bb00:	f003 0302 	and.w	r3, r3, #2
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800bb08:	2380      	movs	r3, #128	@ 0x80
 800bb0a:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bb0c:	f04f 0912 	mov.w	r9, #18
 800bb10:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb14:	f04f 0801 	mov.w	r8, #1
 800bb18:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb1c:	2703      	movs	r7, #3
 800bb1e:	971e      	str	r7, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bb20:	2604      	movs	r6, #4
 800bb22:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb24:	ad1b      	add	r5, sp, #108	@ 0x6c
 800bb26:	4629      	mov	r1, r5
 800bb28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800bb2c:	f7ff fd16 	bl	800b55c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800bb30:	2310      	movs	r3, #16
 800bb32:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bb34:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb38:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bb3c:	971e      	str	r7, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800bb3e:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bb40:	4629      	mov	r1, r5
 800bb42:	480b      	ldr	r0, [pc, #44]	@ (800bb70 <HAL_I2C_MspInit+0x134>)
 800bb44:	f7ff fd0a 	bl	800b55c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800bb48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bb4e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bb50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb56:	9305      	str	r3, [sp, #20]
 800bb58:	9b05      	ldr	r3, [sp, #20]
}
 800bb5a:	e784      	b.n	800ba66 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 800bb5c:	f7fd fc46 	bl	80093ec <Error_Handler>
 800bb60:	e7bf      	b.n	800bae2 <HAL_I2C_MspInit+0xa6>
 800bb62:	bf00      	nop
 800bb64:	40005400 	.word	0x40005400
 800bb68:	40005c00 	.word	0x40005c00
 800bb6c:	40021000 	.word	0x40021000
 800bb70:	48000400 	.word	0x48000400

0800bb74 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800bb74:	4b02      	ldr	r3, [pc, #8]	@ (800bb80 <HAL_PWREx_GetVoltageRange+0xc>)
 800bb76:	6818      	ldr	r0, [r3, #0]
#endif
}
 800bb78:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	40007000 	.word	0x40007000

0800bb84 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bb84:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800bb88:	d00f      	beq.n	800bbaa <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800bb8a:	4b1f      	ldr	r3, [pc, #124]	@ (800bc08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bb92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb96:	d034      	beq.n	800bc02 <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800bb98:	4a1b      	ldr	r2, [pc, #108]	@ (800bc08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800bb9a:	6813      	ldr	r3, [r2, #0]
 800bb9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bba0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bba4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800bba6:	2000      	movs	r0, #0
 800bba8:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800bbaa:	4b17      	ldr	r3, [pc, #92]	@ (800bc08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bbb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbb6:	d020      	beq.n	800bbfa <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800bbb8:	4a13      	ldr	r2, [pc, #76]	@ (800bc08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800bbba:	6813      	ldr	r3, [r2, #0]
 800bbbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800bbc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bbc4:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800bbc6:	4b11      	ldr	r3, [pc, #68]	@ (800bc0c <HAL_PWREx_ControlVoltageScaling+0x88>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2232      	movs	r2, #50	@ 0x32
 800bbcc:	fb02 f303 	mul.w	r3, r2, r3
 800bbd0:	4a0f      	ldr	r2, [pc, #60]	@ (800bc10 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800bbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbd6:	0c9b      	lsrs	r3, r3, #18
 800bbd8:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bbda:	e000      	b.n	800bbde <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800bbdc:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800bbde:	4a0a      	ldr	r2, [pc, #40]	@ (800bc08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800bbe0:	6952      	ldr	r2, [r2, #20]
 800bbe2:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800bbe6:	d001      	beq.n	800bbec <HAL_PWREx_ControlVoltageScaling+0x68>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d1f7      	bne.n	800bbdc <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800bbec:	4b06      	ldr	r3, [pc, #24]	@ (800bc08 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800bbee:	695b      	ldr	r3, [r3, #20]
 800bbf0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800bbf4:	d103      	bne.n	800bbfe <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	4770      	bx	lr
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	4770      	bx	lr
        return HAL_TIMEOUT;
 800bbfe:	2003      	movs	r0, #3
 800bc00:	4770      	bx	lr
  return HAL_OK;
 800bc02:	2000      	movs	r0, #0
}
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	40007000 	.word	0x40007000
 800bc0c:	2000000c 	.word	0x2000000c
 800bc10:	431bde83 	.word	0x431bde83

0800bc14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800bc14:	b530      	push	{r4, r5, lr}
 800bc16:	b083      	sub	sp, #12
 800bc18:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bc1a:	4b20      	ldr	r3, [pc, #128]	@ (800bc9c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800bc1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc1e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800bc22:	d00b      	beq.n	800bc3c <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bc24:	f7ff ffa6 	bl	800bb74 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bc28:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800bc2c:	d017      	beq.n	800bc5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bc2e:	2c80      	cmp	r4, #128	@ 0x80
 800bc30:	d81f      	bhi.n	800bc72 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bc32:	d02d      	beq.n	800bc90 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bc34:	2c70      	cmp	r4, #112	@ 0x70
 800bc36:	d02d      	beq.n	800bc94 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bc38:	2100      	movs	r1, #0
 800bc3a:	e01b      	b.n	800bc74 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800bc3c:	4d17      	ldr	r5, [pc, #92]	@ (800bc9c <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800bc3e:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800bc40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc44:	65ab      	str	r3, [r5, #88]	@ 0x58
 800bc46:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800bc48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc4c:	9301      	str	r3, [sp, #4]
 800bc4e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800bc50:	f7ff ff90 	bl	800bb74 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800bc54:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800bc56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc5a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800bc5c:	e7e4      	b.n	800bc28 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800bc5e:	2c80      	cmp	r4, #128	@ 0x80
 800bc60:	d903      	bls.n	800bc6a <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 800bc62:	2ca0      	cmp	r4, #160	@ 0xa0
 800bc64:	d903      	bls.n	800bc6e <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800bc66:	2102      	movs	r1, #2
 800bc68:	e004      	b.n	800bc74 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	e002      	b.n	800bc74 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800bc6e:	2101      	movs	r1, #1
 800bc70:	e000      	b.n	800bc74 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800bc72:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bc74:	4a0a      	ldr	r2, [pc, #40]	@ (800bca0 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800bc76:	6813      	ldr	r3, [r2, #0]
 800bc78:	f023 0307 	bic.w	r3, r3, #7
 800bc7c:	430b      	orrs	r3, r1
 800bc7e:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bc80:	6813      	ldr	r3, [r2, #0]
 800bc82:	f003 0307 	and.w	r3, r3, #7
 800bc86:	428b      	cmp	r3, r1
 800bc88:	d106      	bne.n	800bc98 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800bc8a:	2000      	movs	r0, #0
}
 800bc8c:	b003      	add	sp, #12
 800bc8e:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 800bc90:	2102      	movs	r1, #2
 800bc92:	e7ef      	b.n	800bc74 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800bc94:	2101      	movs	r1, #1
 800bc96:	e7ed      	b.n	800bc74 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 800bc98:	2001      	movs	r0, #1
 800bc9a:	e7f7      	b.n	800bc8c <RCC_SetFlashLatencyFromMSIRange+0x78>
 800bc9c:	40021000 	.word	0x40021000
 800bca0:	40022000 	.word	0x40022000

0800bca4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bca4:	4a25      	ldr	r2, [pc, #148]	@ (800bd3c <HAL_RCC_GetSysClockFreq+0x98>)
 800bca6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bca8:	68d2      	ldr	r2, [r2, #12]
 800bcaa:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bcae:	f013 030c 	ands.w	r3, r3, #12
 800bcb2:	d009      	beq.n	800bcc8 <HAL_RCC_GetSysClockFreq+0x24>
 800bcb4:	2b0c      	cmp	r3, #12
 800bcb6:	d005      	beq.n	800bcc4 <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bcb8:	2b04      	cmp	r3, #4
 800bcba:	d03b      	beq.n	800bd34 <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bcbc:	2b08      	cmp	r3, #8
 800bcbe:	d03b      	beq.n	800bd38 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	e00f      	b.n	800bce4 <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bcc4:	2a01      	cmp	r2, #1
 800bcc6:	d1f7      	bne.n	800bcb8 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bcc8:	4a1c      	ldr	r2, [pc, #112]	@ (800bd3c <HAL_RCC_GetSysClockFreq+0x98>)
 800bcca:	6812      	ldr	r2, [r2, #0]
 800bccc:	f012 0f08 	tst.w	r2, #8
 800bcd0:	d10c      	bne.n	800bcec <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bcd2:	4a1a      	ldr	r2, [pc, #104]	@ (800bd3c <HAL_RCC_GetSysClockFreq+0x98>)
 800bcd4:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800bcd8:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800bcdc:	4918      	ldr	r1, [pc, #96]	@ (800bd40 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bcde:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bce2:	b113      	cbz	r3, 800bcea <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bce4:	2b0c      	cmp	r3, #12
 800bce6:	d006      	beq.n	800bcf6 <HAL_RCC_GetSysClockFreq+0x52>
 800bce8:	2000      	movs	r0, #0
}
 800bcea:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bcec:	4a13      	ldr	r2, [pc, #76]	@ (800bd3c <HAL_RCC_GetSysClockFreq+0x98>)
 800bcee:	6812      	ldr	r2, [r2, #0]
 800bcf0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800bcf4:	e7f2      	b.n	800bcdc <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bcf6:	4b11      	ldr	r3, [pc, #68]	@ (800bd3c <HAL_RCC_GetSysClockFreq+0x98>)
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	d016      	beq.n	800bd30 <HAL_RCC_GetSysClockFreq+0x8c>
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	d100      	bne.n	800bd08 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 800bd06:	480f      	ldr	r0, [pc, #60]	@ (800bd44 <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bd08:	490c      	ldr	r1, [pc, #48]	@ (800bd3c <HAL_RCC_GetSysClockFreq+0x98>)
 800bd0a:	68ca      	ldr	r2, [r1, #12]
 800bd0c:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800bd10:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800bd12:	68cb      	ldr	r3, [r1, #12]
 800bd14:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800bd18:	fb00 f303 	mul.w	r3, r0, r3
 800bd1c:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bd20:	68c8      	ldr	r0, [r1, #12]
 800bd22:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800bd26:	3001      	adds	r0, #1
 800bd28:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800bd2a:	fbb3 f0f0 	udiv	r0, r3, r0
 800bd2e:	4770      	bx	lr
    switch (pllsource)
 800bd30:	4805      	ldr	r0, [pc, #20]	@ (800bd48 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bd32:	e7e9      	b.n	800bd08 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 800bd34:	4804      	ldr	r0, [pc, #16]	@ (800bd48 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bd36:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800bd38:	4802      	ldr	r0, [pc, #8]	@ (800bd44 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bd3a:	4770      	bx	lr
 800bd3c:	40021000 	.word	0x40021000
 800bd40:	0800e238 	.word	0x0800e238
 800bd44:	007a1200 	.word	0x007a1200
 800bd48:	00f42400 	.word	0x00f42400

0800bd4c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f000 831c 	beq.w	800c38a <HAL_RCC_OscConfig+0x63e>
{
 800bd52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd54:	b083      	sub	sp, #12
 800bd56:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd58:	4b96      	ldr	r3, [pc, #600]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bd5a:	689d      	ldr	r5, [r3, #8]
 800bd5c:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd60:	68de      	ldr	r6, [r3, #12]
 800bd62:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bd66:	6803      	ldr	r3, [r0, #0]
 800bd68:	f013 0f10 	tst.w	r3, #16
 800bd6c:	d05a      	beq.n	800be24 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bd6e:	b1e5      	cbz	r5, 800bdaa <HAL_RCC_OscConfig+0x5e>
 800bd70:	2d0c      	cmp	r5, #12
 800bd72:	d018      	beq.n	800bda6 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bd74:	69a3      	ldr	r3, [r4, #24]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	f000 80bb 	beq.w	800bef2 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800bd7c:	4a8d      	ldr	r2, [pc, #564]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bd7e:	6813      	ldr	r3, [r2, #0]
 800bd80:	f043 0301 	orr.w	r3, r3, #1
 800bd84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800bd86:	f7fe fbad 	bl	800a4e4 <HAL_GetTick>
 800bd8a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bd8c:	4b89      	ldr	r3, [pc, #548]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f013 0f02 	tst.w	r3, #2
 800bd94:	f040 809a 	bne.w	800becc <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bd98:	f7fe fba4 	bl	800a4e4 <HAL_GetTick>
 800bd9c:	1bc0      	subs	r0, r0, r7
 800bd9e:	2802      	cmp	r0, #2
 800bda0:	d9f4      	bls.n	800bd8c <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800bda2:	2003      	movs	r0, #3
 800bda4:	e2fc      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800bda6:	2e01      	cmp	r6, #1
 800bda8:	d1e4      	bne.n	800bd74 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bdaa:	4b82      	ldr	r3, [pc, #520]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f013 0f02 	tst.w	r3, #2
 800bdb2:	d003      	beq.n	800bdbc <HAL_RCC_OscConfig+0x70>
 800bdb4:	69a3      	ldr	r3, [r4, #24]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	f000 82e9 	beq.w	800c38e <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bdbc:	6a20      	ldr	r0, [r4, #32]
 800bdbe:	4b7d      	ldr	r3, [pc, #500]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f013 0f08 	tst.w	r3, #8
 800bdc6:	d05b      	beq.n	800be80 <HAL_RCC_OscConfig+0x134>
 800bdc8:	4b7a      	ldr	r3, [pc, #488]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bdd0:	4298      	cmp	r0, r3
 800bdd2:	d85c      	bhi.n	800be8e <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bdd4:	4b77      	ldr	r3, [pc, #476]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	f042 0208 	orr.w	r2, r2, #8
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800bde4:	6a21      	ldr	r1, [r4, #32]
 800bde6:	430a      	orrs	r2, r1
 800bde8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800bdf0:	69e1      	ldr	r1, [r4, #28]
 800bdf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800bdf6:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bdf8:	2d00      	cmp	r5, #0
 800bdfa:	d060      	beq.n	800bebe <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bdfc:	f7ff ff52 	bl	800bca4 <HAL_RCC_GetSysClockFreq>
 800be00:	4b6c      	ldr	r3, [pc, #432]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800be08:	4a6b      	ldr	r2, [pc, #428]	@ (800bfb8 <HAL_RCC_OscConfig+0x26c>)
 800be0a:	5cd3      	ldrb	r3, [r2, r3]
 800be0c:	f003 031f 	and.w	r3, r3, #31
 800be10:	40d8      	lsrs	r0, r3
 800be12:	4b6a      	ldr	r3, [pc, #424]	@ (800bfbc <HAL_RCC_OscConfig+0x270>)
 800be14:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800be16:	4b6a      	ldr	r3, [pc, #424]	@ (800bfc0 <HAL_RCC_OscConfig+0x274>)
 800be18:	6818      	ldr	r0, [r3, #0]
 800be1a:	f000 ff61 	bl	800cce0 <HAL_InitTick>
        if(status != HAL_OK)
 800be1e:	2800      	cmp	r0, #0
 800be20:	f040 82be 	bne.w	800c3a0 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	f013 0f01 	tst.w	r3, #1
 800be2a:	f000 8081 	beq.w	800bf30 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800be2e:	2d08      	cmp	r5, #8
 800be30:	d075      	beq.n	800bf1e <HAL_RCC_OscConfig+0x1d2>
 800be32:	2d0c      	cmp	r5, #12
 800be34:	d071      	beq.n	800bf1a <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be36:	6863      	ldr	r3, [r4, #4]
 800be38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be3c:	f000 8097 	beq.w	800bf6e <HAL_RCC_OscConfig+0x222>
 800be40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be44:	f000 8099 	beq.w	800bf7a <HAL_RCC_OscConfig+0x22e>
 800be48:	4b5a      	ldr	r3, [pc, #360]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800be58:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be5a:	6863      	ldr	r3, [r4, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 8099 	beq.w	800bf94 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800be62:	f7fe fb3f 	bl	800a4e4 <HAL_GetTick>
 800be66:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800be68:	4b52      	ldr	r3, [pc, #328]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800be70:	d15e      	bne.n	800bf30 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be72:	f7fe fb37 	bl	800a4e4 <HAL_GetTick>
 800be76:	1bc0      	subs	r0, r0, r7
 800be78:	2864      	cmp	r0, #100	@ 0x64
 800be7a:	d9f5      	bls.n	800be68 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800be7c:	2003      	movs	r0, #3
 800be7e:	e28f      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800be80:	4b4c      	ldr	r3, [pc, #304]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800be82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be86:	091b      	lsrs	r3, r3, #4
 800be88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be8c:	e7a0      	b.n	800bdd0 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be8e:	f7ff fec1 	bl	800bc14 <RCC_SetFlashLatencyFromMSIRange>
 800be92:	2800      	cmp	r0, #0
 800be94:	f040 827d 	bne.w	800c392 <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be98:	4b46      	ldr	r3, [pc, #280]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	f042 0208 	orr.w	r2, r2, #8
 800bea0:	601a      	str	r2, [r3, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800bea8:	6a21      	ldr	r1, [r4, #32]
 800beaa:	430a      	orrs	r2, r1
 800beac:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800beb4:	69e1      	ldr	r1, [r4, #28]
 800beb6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800beba:	605a      	str	r2, [r3, #4]
 800bebc:	e79e      	b.n	800bdfc <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bebe:	6a20      	ldr	r0, [r4, #32]
 800bec0:	f7ff fea8 	bl	800bc14 <RCC_SetFlashLatencyFromMSIRange>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d099      	beq.n	800bdfc <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800bec8:	2001      	movs	r0, #1
 800beca:	e269      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800becc:	4b39      	ldr	r3, [pc, #228]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	f042 0208 	orr.w	r2, r2, #8
 800bed4:	601a      	str	r2, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800bedc:	6a21      	ldr	r1, [r4, #32]
 800bede:	430a      	orrs	r2, r1
 800bee0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800bee8:	69e1      	ldr	r1, [r4, #28]
 800beea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800beee:	605a      	str	r2, [r3, #4]
 800bef0:	e798      	b.n	800be24 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800bef2:	4a30      	ldr	r2, [pc, #192]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bef4:	6813      	ldr	r3, [r2, #0]
 800bef6:	f023 0301 	bic.w	r3, r3, #1
 800befa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800befc:	f7fe faf2 	bl	800a4e4 <HAL_GetTick>
 800bf00:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800bf02:	4b2c      	ldr	r3, [pc, #176]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f013 0f02 	tst.w	r3, #2
 800bf0a:	d08b      	beq.n	800be24 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf0c:	f7fe faea 	bl	800a4e4 <HAL_GetTick>
 800bf10:	1bc0      	subs	r0, r0, r7
 800bf12:	2802      	cmp	r0, #2
 800bf14:	d9f5      	bls.n	800bf02 <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800bf16:	2003      	movs	r0, #3
 800bf18:	e242      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800bf1a:	2e03      	cmp	r6, #3
 800bf1c:	d18b      	bne.n	800be36 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bf1e:	4b25      	ldr	r3, [pc, #148]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800bf26:	d003      	beq.n	800bf30 <HAL_RCC_OscConfig+0x1e4>
 800bf28:	6863      	ldr	r3, [r4, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f000 8233 	beq.w	800c396 <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf30:	6823      	ldr	r3, [r4, #0]
 800bf32:	f013 0f02 	tst.w	r3, #2
 800bf36:	d058      	beq.n	800bfea <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bf38:	2d04      	cmp	r5, #4
 800bf3a:	d045      	beq.n	800bfc8 <HAL_RCC_OscConfig+0x27c>
 800bf3c:	2d0c      	cmp	r5, #12
 800bf3e:	d041      	beq.n	800bfc4 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf40:	68e3      	ldr	r3, [r4, #12]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d077      	beq.n	800c036 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800bf46:	4a1b      	ldr	r2, [pc, #108]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bf48:	6813      	ldr	r3, [r2, #0]
 800bf4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bf4e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800bf50:	f7fe fac8 	bl	800a4e4 <HAL_GetTick>
 800bf54:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bf56:	4b17      	ldr	r3, [pc, #92]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800bf5e:	d161      	bne.n	800c024 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf60:	f7fe fac0 	bl	800a4e4 <HAL_GetTick>
 800bf64:	1b80      	subs	r0, r0, r6
 800bf66:	2802      	cmp	r0, #2
 800bf68:	d9f5      	bls.n	800bf56 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800bf6a:	2003      	movs	r0, #3
 800bf6c:	e218      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf6e:	4a11      	ldr	r2, [pc, #68]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bf70:	6813      	ldr	r3, [r2, #0]
 800bf72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bf76:	6013      	str	r3, [r2, #0]
 800bf78:	e76f      	b.n	800be5a <HAL_RCC_OscConfig+0x10e>
 800bf7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf7e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800bf88:	601a      	str	r2, [r3, #0]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bf90:	601a      	str	r2, [r3, #0]
 800bf92:	e762      	b.n	800be5a <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800bf94:	f7fe faa6 	bl	800a4e4 <HAL_GetTick>
 800bf98:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bf9a:	4b06      	ldr	r3, [pc, #24]	@ (800bfb4 <HAL_RCC_OscConfig+0x268>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800bfa2:	d0c5      	beq.n	800bf30 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bfa4:	f7fe fa9e 	bl	800a4e4 <HAL_GetTick>
 800bfa8:	1bc0      	subs	r0, r0, r7
 800bfaa:	2864      	cmp	r0, #100	@ 0x64
 800bfac:	d9f5      	bls.n	800bf9a <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800bfae:	2003      	movs	r0, #3
 800bfb0:	e1f6      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
 800bfb2:	bf00      	nop
 800bfb4:	40021000 	.word	0x40021000
 800bfb8:	0800e270 	.word	0x0800e270
 800bfbc:	2000000c 	.word	0x2000000c
 800bfc0:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bfc4:	2e02      	cmp	r6, #2
 800bfc6:	d1bb      	bne.n	800bf40 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bfc8:	4ba4      	ldr	r3, [pc, #656]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800bfd0:	d003      	beq.n	800bfda <HAL_RCC_OscConfig+0x28e>
 800bfd2:	68e3      	ldr	r3, [r4, #12]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 81e0 	beq.w	800c39a <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfda:	4aa0      	ldr	r2, [pc, #640]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800bfdc:	6853      	ldr	r3, [r2, #4]
 800bfde:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800bfe2:	6921      	ldr	r1, [r4, #16]
 800bfe4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bfe8:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfea:	6823      	ldr	r3, [r4, #0]
 800bfec:	f013 0f08 	tst.w	r3, #8
 800bff0:	d04c      	beq.n	800c08c <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bff2:	6963      	ldr	r3, [r4, #20]
 800bff4:	b39b      	cbz	r3, 800c05e <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800bff6:	4a99      	ldr	r2, [pc, #612]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800bff8:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800bffc:	f043 0301 	orr.w	r3, r3, #1
 800c000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800c004:	f7fe fa6e 	bl	800a4e4 <HAL_GetTick>
 800c008:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c00a:	4b94      	ldr	r3, [pc, #592]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c00c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c010:	f013 0f02 	tst.w	r3, #2
 800c014:	d13a      	bne.n	800c08c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c016:	f7fe fa65 	bl	800a4e4 <HAL_GetTick>
 800c01a:	1b80      	subs	r0, r0, r6
 800c01c:	2802      	cmp	r0, #2
 800c01e:	d9f4      	bls.n	800c00a <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800c020:	2003      	movs	r0, #3
 800c022:	e1bd      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c024:	4a8d      	ldr	r2, [pc, #564]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c026:	6853      	ldr	r3, [r2, #4]
 800c028:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800c02c:	6921      	ldr	r1, [r4, #16]
 800c02e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c032:	6053      	str	r3, [r2, #4]
 800c034:	e7d9      	b.n	800bfea <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800c036:	4a89      	ldr	r2, [pc, #548]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c038:	6813      	ldr	r3, [r2, #0]
 800c03a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c03e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c040:	f7fe fa50 	bl	800a4e4 <HAL_GetTick>
 800c044:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c046:	4b85      	ldr	r3, [pc, #532]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800c04e:	d0cc      	beq.n	800bfea <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c050:	f7fe fa48 	bl	800a4e4 <HAL_GetTick>
 800c054:	1b80      	subs	r0, r0, r6
 800c056:	2802      	cmp	r0, #2
 800c058:	d9f5      	bls.n	800c046 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800c05a:	2003      	movs	r0, #3
 800c05c:	e1a0      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 800c05e:	4a7f      	ldr	r2, [pc, #508]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c060:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800c064:	f023 0301 	bic.w	r3, r3, #1
 800c068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800c06c:	f7fe fa3a 	bl	800a4e4 <HAL_GetTick>
 800c070:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c072:	4b7a      	ldr	r3, [pc, #488]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c078:	f013 0f02 	tst.w	r3, #2
 800c07c:	d006      	beq.n	800c08c <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c07e:	f7fe fa31 	bl	800a4e4 <HAL_GetTick>
 800c082:	1b80      	subs	r0, r0, r6
 800c084:	2802      	cmp	r0, #2
 800c086:	d9f4      	bls.n	800c072 <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800c088:	2003      	movs	r0, #3
 800c08a:	e189      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	f013 0f04 	tst.w	r3, #4
 800c092:	d07a      	beq.n	800c18a <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800c094:	4b71      	ldr	r3, [pc, #452]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c098:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c09c:	d136      	bne.n	800c10c <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c09e:	4b6f      	ldr	r3, [pc, #444]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c0a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c0a2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c0a6:	659a      	str	r2, [r3, #88]	@ 0x58
 800c0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c0ae:	9301      	str	r3, [sp, #4]
 800c0b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c0b2:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c0b4:	4b6a      	ldr	r3, [pc, #424]	@ (800c260 <HAL_RCC_OscConfig+0x514>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800c0bc:	d028      	beq.n	800c110 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c0be:	68a3      	ldr	r3, [r4, #8]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d039      	beq.n	800c138 <HAL_RCC_OscConfig+0x3ec>
 800c0c4:	2b05      	cmp	r3, #5
 800c0c6:	d03f      	beq.n	800c148 <HAL_RCC_OscConfig+0x3fc>
 800c0c8:	4b64      	ldr	r3, [pc, #400]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c0ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800c0ce:	f022 0201 	bic.w	r2, r2, #1
 800c0d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800c0d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800c0da:	f022 0204 	bic.w	r2, r2, #4
 800c0de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c0e2:	68a3      	ldr	r3, [r4, #8]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d03d      	beq.n	800c164 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800c0e8:	f7fe f9fc 	bl	800a4e4 <HAL_GetTick>
 800c0ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0ee:	4b5b      	ldr	r3, [pc, #364]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c0f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0f4:	f013 0f02 	tst.w	r3, #2
 800c0f8:	d146      	bne.n	800c188 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0fa:	f7fe f9f3 	bl	800a4e4 <HAL_GetTick>
 800c0fe:	1bc0      	subs	r0, r0, r7
 800c100:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c104:	4298      	cmp	r0, r3
 800c106:	d9f2      	bls.n	800c0ee <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 800c108:	2003      	movs	r0, #3
 800c10a:	e149      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 800c10c:	2600      	movs	r6, #0
 800c10e:	e7d1      	b.n	800c0b4 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c110:	4a53      	ldr	r2, [pc, #332]	@ (800c260 <HAL_RCC_OscConfig+0x514>)
 800c112:	6813      	ldr	r3, [r2, #0]
 800c114:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c118:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800c11a:	f7fe f9e3 	bl	800a4e4 <HAL_GetTick>
 800c11e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c120:	4b4f      	ldr	r3, [pc, #316]	@ (800c260 <HAL_RCC_OscConfig+0x514>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800c128:	d1c9      	bne.n	800c0be <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c12a:	f7fe f9db 	bl	800a4e4 <HAL_GetTick>
 800c12e:	1bc0      	subs	r0, r0, r7
 800c130:	2802      	cmp	r0, #2
 800c132:	d9f5      	bls.n	800c120 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800c134:	2003      	movs	r0, #3
 800c136:	e133      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c138:	4a48      	ldr	r2, [pc, #288]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c13a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800c13e:	f043 0301 	orr.w	r3, r3, #1
 800c142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c146:	e7cc      	b.n	800c0e2 <HAL_RCC_OscConfig+0x396>
 800c148:	4b44      	ldr	r3, [pc, #272]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c14a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800c14e:	f042 0204 	orr.w	r2, r2, #4
 800c152:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800c156:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800c15a:	f042 0201 	orr.w	r2, r2, #1
 800c15e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800c162:	e7be      	b.n	800c0e2 <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800c164:	f7fe f9be 	bl	800a4e4 <HAL_GetTick>
 800c168:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c16a:	4b3c      	ldr	r3, [pc, #240]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c170:	f013 0f02 	tst.w	r3, #2
 800c174:	d008      	beq.n	800c188 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c176:	f7fe f9b5 	bl	800a4e4 <HAL_GetTick>
 800c17a:	1bc0      	subs	r0, r0, r7
 800c17c:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c180:	4298      	cmp	r0, r3
 800c182:	d9f2      	bls.n	800c16a <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800c184:	2003      	movs	r0, #3
 800c186:	e10b      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 800c188:	b9e6      	cbnz	r6, 800c1c4 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	f013 0f20 	tst.w	r3, #32
 800c190:	d035      	beq.n	800c1fe <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c192:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800c194:	b1e3      	cbz	r3, 800c1d0 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800c196:	4a31      	ldr	r2, [pc, #196]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c198:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800c19c:	f043 0301 	orr.w	r3, r3, #1
 800c1a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800c1a4:	f7fe f99e 	bl	800a4e4 <HAL_GetTick>
 800c1a8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c1aa:	4b2c      	ldr	r3, [pc, #176]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c1ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1b0:	f013 0f02 	tst.w	r3, #2
 800c1b4:	d123      	bne.n	800c1fe <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c1b6:	f7fe f995 	bl	800a4e4 <HAL_GetTick>
 800c1ba:	1b80      	subs	r0, r0, r6
 800c1bc:	2802      	cmp	r0, #2
 800c1be:	d9f4      	bls.n	800c1aa <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	e0ed      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c1c4:	4a25      	ldr	r2, [pc, #148]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c1c6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c1c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c1cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800c1ce:	e7dc      	b.n	800c18a <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 800c1d0:	4a22      	ldr	r2, [pc, #136]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c1d2:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800c1d6:	f023 0301 	bic.w	r3, r3, #1
 800c1da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800c1de:	f7fe f981 	bl	800a4e4 <HAL_GetTick>
 800c1e2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c1e4:	4b1d      	ldr	r3, [pc, #116]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c1e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1ea:	f013 0f02 	tst.w	r3, #2
 800c1ee:	d006      	beq.n	800c1fe <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c1f0:	f7fe f978 	bl	800a4e4 <HAL_GetTick>
 800c1f4:	1b80      	subs	r0, r0, r6
 800c1f6:	2802      	cmp	r0, #2
 800c1f8:	d9f4      	bls.n	800c1e4 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800c1fa:	2003      	movs	r0, #3
 800c1fc:	e0d0      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c1fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c200:	2b00      	cmp	r3, #0
 800c202:	f000 80cc 	beq.w	800c39e <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c206:	2b02      	cmp	r3, #2
 800c208:	d017      	beq.n	800c23a <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c20a:	2d0c      	cmp	r5, #12
 800c20c:	f000 80cc 	beq.w	800c3a8 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 800c210:	4a12      	ldr	r2, [pc, #72]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c212:	6813      	ldr	r3, [r2, #0]
 800c214:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c218:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800c21a:	f7fe f963 	bl	800a4e4 <HAL_GetTick>
 800c21e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c220:	4b0e      	ldr	r3, [pc, #56]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c228:	f000 80a8 	beq.w	800c37c <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c22c:	f7fe f95a 	bl	800a4e4 <HAL_GetTick>
 800c230:	1b00      	subs	r0, r0, r4
 800c232:	2802      	cmp	r0, #2
 800c234:	d9f4      	bls.n	800c220 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 800c236:	2003      	movs	r0, #3
 800c238:	e0b2      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 800c23a:	4b08      	ldr	r3, [pc, #32]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c23c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c23e:	f003 0103 	and.w	r1, r3, #3
 800c242:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c244:	4291      	cmp	r1, r2
 800c246:	d00d      	beq.n	800c264 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800c248:	2d0c      	cmp	r5, #12
 800c24a:	f000 80ab 	beq.w	800c3a4 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c24e:	4b03      	ldr	r3, [pc, #12]	@ (800c25c <HAL_RCC_OscConfig+0x510>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800c256:	d02f      	beq.n	800c2b8 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 800c258:	2001      	movs	r0, #1
 800c25a:	e0a1      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
 800c25c:	40021000 	.word	0x40021000
 800c260:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c264:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c268:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c26a:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800c26c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800c270:	d1ea      	bne.n	800c248 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c272:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c276:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c278:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800c27c:	d1e4      	bne.n	800c248 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c27e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c282:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800c284:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800c288:	d1de      	bne.n	800c248 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c28a:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800c28e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c290:	0852      	lsrs	r2, r2, #1
 800c292:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c294:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800c298:	d1d6      	bne.n	800c248 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c29a:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800c29e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800c2a0:	0852      	lsrs	r2, r2, #1
 800c2a2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c2a4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800c2a8:	d1ce      	bne.n	800c248 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c2aa:	4b40      	ldr	r3, [pc, #256]	@ (800c3ac <HAL_RCC_OscConfig+0x660>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c2b2:	d049      	beq.n	800c348 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	e073      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 800c2b8:	4a3c      	ldr	r2, [pc, #240]	@ (800c3ac <HAL_RCC_OscConfig+0x660>)
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c2c0:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800c2c2:	f7fe f90f 	bl	800a4e4 <HAL_GetTick>
 800c2c6:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c2c8:	4b38      	ldr	r3, [pc, #224]	@ (800c3ac <HAL_RCC_OscConfig+0x660>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c2d0:	d006      	beq.n	800c2e0 <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2d2:	f7fe f907 	bl	800a4e4 <HAL_GetTick>
 800c2d6:	1b40      	subs	r0, r0, r5
 800c2d8:	2802      	cmp	r0, #2
 800c2da:	d9f5      	bls.n	800c2c8 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 800c2dc:	2003      	movs	r0, #3
 800c2de:	e05f      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c2e0:	4a32      	ldr	r2, [pc, #200]	@ (800c3ac <HAL_RCC_OscConfig+0x660>)
 800c2e2:	68d3      	ldr	r3, [r2, #12]
 800c2e4:	4932      	ldr	r1, [pc, #200]	@ (800c3b0 <HAL_RCC_OscConfig+0x664>)
 800c2e6:	4019      	ands	r1, r3
 800c2e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c2ea:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c2ec:	3801      	subs	r0, #1
 800c2ee:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800c2f2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800c2f4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800c2f8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800c2fa:	0840      	lsrs	r0, r0, #1
 800c2fc:	3801      	subs	r0, #1
 800c2fe:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800c302:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800c304:	0840      	lsrs	r0, r0, #1
 800c306:	3801      	subs	r0, #1
 800c308:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800c30c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800c30e:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800c312:	4319      	orrs	r1, r3
 800c314:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800c316:	6813      	ldr	r3, [r2, #0]
 800c318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c31c:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c31e:	68d3      	ldr	r3, [r2, #12]
 800c320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c324:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800c326:	f7fe f8dd 	bl	800a4e4 <HAL_GetTick>
 800c32a:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c32c:	4b1f      	ldr	r3, [pc, #124]	@ (800c3ac <HAL_RCC_OscConfig+0x660>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c334:	d106      	bne.n	800c344 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c336:	f7fe f8d5 	bl	800a4e4 <HAL_GetTick>
 800c33a:	1b00      	subs	r0, r0, r4
 800c33c:	2802      	cmp	r0, #2
 800c33e:	d9f5      	bls.n	800c32c <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 800c340:	2003      	movs	r0, #3
 800c342:	e02d      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800c344:	2000      	movs	r0, #0
 800c346:	e02b      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 800c348:	4b18      	ldr	r3, [pc, #96]	@ (800c3ac <HAL_RCC_OscConfig+0x660>)
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800c350:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c352:	68da      	ldr	r2, [r3, #12]
 800c354:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800c358:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800c35a:	f7fe f8c3 	bl	800a4e4 <HAL_GetTick>
 800c35e:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c360:	4b12      	ldr	r3, [pc, #72]	@ (800c3ac <HAL_RCC_OscConfig+0x660>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c368:	d106      	bne.n	800c378 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c36a:	f7fe f8bb 	bl	800a4e4 <HAL_GetTick>
 800c36e:	1b03      	subs	r3, r0, r4
 800c370:	2b02      	cmp	r3, #2
 800c372:	d9f5      	bls.n	800c360 <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 800c374:	2003      	movs	r0, #3
 800c376:	e013      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800c378:	2000      	movs	r0, #0
 800c37a:	e011      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800c37c:	4a0b      	ldr	r2, [pc, #44]	@ (800c3ac <HAL_RCC_OscConfig+0x660>)
 800c37e:	68d1      	ldr	r1, [r2, #12]
 800c380:	4b0c      	ldr	r3, [pc, #48]	@ (800c3b4 <HAL_RCC_OscConfig+0x668>)
 800c382:	400b      	ands	r3, r1
 800c384:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800c386:	2000      	movs	r0, #0
 800c388:	e00a      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 800c38a:	2001      	movs	r0, #1
}
 800c38c:	4770      	bx	lr
        return HAL_ERROR;
 800c38e:	2001      	movs	r0, #1
 800c390:	e006      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 800c392:	2001      	movs	r0, #1
 800c394:	e004      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800c396:	2001      	movs	r0, #1
 800c398:	e002      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800c39a:	2001      	movs	r0, #1
 800c39c:	e000      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800c39e:	2000      	movs	r0, #0
}
 800c3a0:	b003      	add	sp, #12
 800c3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800c3a4:	2001      	movs	r0, #1
 800c3a6:	e7fb      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800c3a8:	2001      	movs	r0, #1
 800c3aa:	e7f9      	b.n	800c3a0 <HAL_RCC_OscConfig+0x654>
 800c3ac:	40021000 	.word	0x40021000
 800c3b0:	019d808c 	.word	0x019d808c
 800c3b4:	feeefffc 	.word	0xfeeefffc

0800c3b8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	f000 80af 	beq.w	800c51c <HAL_RCC_ClockConfig+0x164>
{
 800c3be:	b570      	push	{r4, r5, r6, lr}
 800c3c0:	460d      	mov	r5, r1
 800c3c2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c3c4:	4b59      	ldr	r3, [pc, #356]	@ (800c52c <HAL_RCC_ClockConfig+0x174>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f003 0307 	and.w	r3, r3, #7
 800c3cc:	428b      	cmp	r3, r1
 800c3ce:	d20b      	bcs.n	800c3e8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3d0:	4a56      	ldr	r2, [pc, #344]	@ (800c52c <HAL_RCC_ClockConfig+0x174>)
 800c3d2:	6813      	ldr	r3, [r2, #0]
 800c3d4:	f023 0307 	bic.w	r3, r3, #7
 800c3d8:	430b      	orrs	r3, r1
 800c3da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3dc:	6813      	ldr	r3, [r2, #0]
 800c3de:	f003 0307 	and.w	r3, r3, #7
 800c3e2:	428b      	cmp	r3, r1
 800c3e4:	f040 809c 	bne.w	800c520 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	f013 0f02 	tst.w	r3, #2
 800c3ee:	d00c      	beq.n	800c40a <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c3f0:	68a2      	ldr	r2, [r4, #8]
 800c3f2:	4b4f      	ldr	r3, [pc, #316]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d905      	bls.n	800c40a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c3fe:	494c      	ldr	r1, [pc, #304]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c400:	688b      	ldr	r3, [r1, #8]
 800c402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c406:	431a      	orrs	r2, r3
 800c408:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c40a:	6823      	ldr	r3, [r4, #0]
 800c40c:	f013 0f01 	tst.w	r3, #1
 800c410:	d039      	beq.n	800c486 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c412:	6863      	ldr	r3, [r4, #4]
 800c414:	2b03      	cmp	r3, #3
 800c416:	d009      	beq.n	800c42c <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d026      	beq.n	800c46a <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c41c:	bb63      	cbnz	r3, 800c478 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c41e:	4a44      	ldr	r2, [pc, #272]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c420:	6812      	ldr	r2, [r2, #0]
 800c422:	f012 0f02 	tst.w	r2, #2
 800c426:	d106      	bne.n	800c436 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800c428:	2001      	movs	r0, #1
 800c42a:	e076      	b.n	800c51a <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c42c:	4a40      	ldr	r2, [pc, #256]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c42e:	6812      	ldr	r2, [r2, #0]
 800c430:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800c434:	d076      	beq.n	800c524 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c436:	493e      	ldr	r1, [pc, #248]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c438:	688a      	ldr	r2, [r1, #8]
 800c43a:	f022 0203 	bic.w	r2, r2, #3
 800c43e:	4313      	orrs	r3, r2
 800c440:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800c442:	f7fe f84f 	bl	800a4e4 <HAL_GetTick>
 800c446:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c448:	4b39      	ldr	r3, [pc, #228]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f003 030c 	and.w	r3, r3, #12
 800c450:	6862      	ldr	r2, [r4, #4]
 800c452:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800c456:	d016      	beq.n	800c486 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c458:	f7fe f844 	bl	800a4e4 <HAL_GetTick>
 800c45c:	1b80      	subs	r0, r0, r6
 800c45e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c462:	4298      	cmp	r0, r3
 800c464:	d9f0      	bls.n	800c448 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800c466:	2003      	movs	r0, #3
 800c468:	e057      	b.n	800c51a <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c46a:	4a31      	ldr	r2, [pc, #196]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c46c:	6812      	ldr	r2, [r2, #0]
 800c46e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800c472:	d1e0      	bne.n	800c436 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800c474:	2001      	movs	r0, #1
 800c476:	e050      	b.n	800c51a <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c478:	4a2d      	ldr	r2, [pc, #180]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c47a:	6812      	ldr	r2, [r2, #0]
 800c47c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c480:	d1d9      	bne.n	800c436 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800c482:	2001      	movs	r0, #1
 800c484:	e049      	b.n	800c51a <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	f013 0f02 	tst.w	r3, #2
 800c48c:	d00c      	beq.n	800c4a8 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c48e:	68a2      	ldr	r2, [r4, #8]
 800c490:	4b27      	ldr	r3, [pc, #156]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c498:	429a      	cmp	r2, r3
 800c49a:	d205      	bcs.n	800c4a8 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c49c:	4924      	ldr	r1, [pc, #144]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c49e:	688b      	ldr	r3, [r1, #8]
 800c4a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c4a4:	431a      	orrs	r2, r3
 800c4a6:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c4a8:	4b20      	ldr	r3, [pc, #128]	@ (800c52c <HAL_RCC_ClockConfig+0x174>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 0307 	and.w	r3, r3, #7
 800c4b0:	42ab      	cmp	r3, r5
 800c4b2:	d90a      	bls.n	800c4ca <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800c52c <HAL_RCC_ClockConfig+0x174>)
 800c4b6:	6813      	ldr	r3, [r2, #0]
 800c4b8:	f023 0307 	bic.w	r3, r3, #7
 800c4bc:	432b      	orrs	r3, r5
 800c4be:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4c0:	6813      	ldr	r3, [r2, #0]
 800c4c2:	f003 0307 	and.w	r3, r3, #7
 800c4c6:	42ab      	cmp	r3, r5
 800c4c8:	d12e      	bne.n	800c528 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	f013 0f04 	tst.w	r3, #4
 800c4d0:	d006      	beq.n	800c4e0 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c4d2:	4a17      	ldr	r2, [pc, #92]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c4d4:	6893      	ldr	r3, [r2, #8]
 800c4d6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c4da:	68e1      	ldr	r1, [r4, #12]
 800c4dc:	430b      	orrs	r3, r1
 800c4de:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4e0:	6823      	ldr	r3, [r4, #0]
 800c4e2:	f013 0f08 	tst.w	r3, #8
 800c4e6:	d007      	beq.n	800c4f8 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c4e8:	4a11      	ldr	r2, [pc, #68]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c4ea:	6893      	ldr	r3, [r2, #8]
 800c4ec:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800c4f0:	6921      	ldr	r1, [r4, #16]
 800c4f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800c4f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c4f8:	f7ff fbd4 	bl	800bca4 <HAL_RCC_GetSysClockFreq>
 800c4fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c530 <HAL_RCC_ClockConfig+0x178>)
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c504:	4a0b      	ldr	r2, [pc, #44]	@ (800c534 <HAL_RCC_ClockConfig+0x17c>)
 800c506:	5cd3      	ldrb	r3, [r2, r3]
 800c508:	f003 031f 	and.w	r3, r3, #31
 800c50c:	40d8      	lsrs	r0, r3
 800c50e:	4b0a      	ldr	r3, [pc, #40]	@ (800c538 <HAL_RCC_ClockConfig+0x180>)
 800c510:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800c512:	4b0a      	ldr	r3, [pc, #40]	@ (800c53c <HAL_RCC_ClockConfig+0x184>)
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	f000 fbe3 	bl	800cce0 <HAL_InitTick>
}
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800c51c:	2001      	movs	r0, #1
}
 800c51e:	4770      	bx	lr
      return HAL_ERROR;
 800c520:	2001      	movs	r0, #1
 800c522:	e7fa      	b.n	800c51a <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 800c524:	2001      	movs	r0, #1
 800c526:	e7f8      	b.n	800c51a <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 800c528:	2001      	movs	r0, #1
 800c52a:	e7f6      	b.n	800c51a <HAL_RCC_ClockConfig+0x162>
 800c52c:	40022000 	.word	0x40022000
 800c530:	40021000 	.word	0x40021000
 800c534:	0800e270 	.word	0x0800e270
 800c538:	2000000c 	.word	0x2000000c
 800c53c:	20000008 	.word	0x20000008

0800c540 <HAL_RCC_GetHCLKFreq>:
}
 800c540:	4b01      	ldr	r3, [pc, #4]	@ (800c548 <HAL_RCC_GetHCLKFreq+0x8>)
 800c542:	6818      	ldr	r0, [r3, #0]
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	2000000c 	.word	0x2000000c

0800c54c <HAL_RCC_GetPCLK1Freq>:
{
 800c54c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c54e:	f7ff fff7 	bl	800c540 <HAL_RCC_GetHCLKFreq>
 800c552:	4b05      	ldr	r3, [pc, #20]	@ (800c568 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800c55a:	4a04      	ldr	r2, [pc, #16]	@ (800c56c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c55c:	5cd3      	ldrb	r3, [r2, r3]
 800c55e:	f003 031f 	and.w	r3, r3, #31
}
 800c562:	40d8      	lsrs	r0, r3
 800c564:	bd08      	pop	{r3, pc}
 800c566:	bf00      	nop
 800c568:	40021000 	.word	0x40021000
 800c56c:	0800e268 	.word	0x0800e268

0800c570 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c570:	230f      	movs	r3, #15
 800c572:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800c574:	4b0b      	ldr	r3, [pc, #44]	@ (800c5a4 <HAL_RCC_GetClockConfig+0x34>)
 800c576:	689a      	ldr	r2, [r3, #8]
 800c578:	f002 0203 	and.w	r2, r2, #3
 800c57c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800c584:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800c586:	689a      	ldr	r2, [r3, #8]
 800c588:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800c58c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	08db      	lsrs	r3, r3, #3
 800c592:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c596:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800c598:	4b03      	ldr	r3, [pc, #12]	@ (800c5a8 <HAL_RCC_GetClockConfig+0x38>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 0307 	and.w	r3, r3, #7
 800c5a0:	600b      	str	r3, [r1, #0]
}
 800c5a2:	4770      	bx	lr
 800c5a4:	40021000 	.word	0x40021000
 800c5a8:	40022000 	.word	0x40022000

0800c5ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	4604      	mov	r4, r0
 800c5b0:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c5b2:	4b59      	ldr	r3, [pc, #356]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	f013 0f03 	tst.w	r3, #3
 800c5ba:	d018      	beq.n	800c5ee <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c5bc:	4b56      	ldr	r3, [pc, #344]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f003 0303 	and.w	r3, r3, #3
 800c5c4:	6802      	ldr	r2, [r0, #0]
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d002      	beq.n	800c5d0 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800c5ca:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800c5d0:	2a00      	cmp	r2, #0
 800c5d2:	f000 809c 	beq.w	800c70e <RCCEx_PLLSAI1_Config+0x162>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c5d6:	4b50      	ldr	r3, [pc, #320]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c5de:	3301      	adds	r3, #1
 800c5e0:	6842      	ldr	r2, [r0, #4]
       ||
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d001      	beq.n	800c5ea <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 800c5e6:	2601      	movs	r6, #1
 800c5e8:	e7f0      	b.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800c5ea:	2600      	movs	r6, #0
 800c5ec:	e019      	b.n	800c622 <RCCEx_PLLSAI1_Config+0x76>
    switch(PllSai1->PLLSAI1Source)
 800c5ee:	6803      	ldr	r3, [r0, #0]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d055      	beq.n	800c6a0 <RCCEx_PLLSAI1_Config+0xf4>
 800c5f4:	2b03      	cmp	r3, #3
 800c5f6:	d05a      	beq.n	800c6ae <RCCEx_PLLSAI1_Config+0x102>
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	f040 808a 	bne.w	800c712 <RCCEx_PLLSAI1_Config+0x166>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c5fe:	4a46      	ldr	r2, [pc, #280]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c600:	6812      	ldr	r2, [r2, #0]
 800c602:	f012 0f02 	tst.w	r2, #2
 800c606:	d05e      	beq.n	800c6c6 <RCCEx_PLLSAI1_Config+0x11a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c608:	4843      	ldr	r0, [pc, #268]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c60a:	68c2      	ldr	r2, [r0, #12]
 800c60c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800c610:	6861      	ldr	r1, [r4, #4]
 800c612:	3901      	subs	r1, #1
 800c614:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800c618:	4313      	orrs	r3, r2
 800c61a:	60c3      	str	r3, [r0, #12]
 800c61c:	2600      	movs	r6, #0
  if(status == HAL_OK)
 800c61e:	2e00      	cmp	r6, #0
 800c620:	d1d4      	bne.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800c622:	4a3d      	ldr	r2, [pc, #244]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c624:	6813      	ldr	r3, [r2, #0]
 800c626:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c62a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c62c:	f7fd ff5a 	bl	800a4e4 <HAL_GetTick>
 800c630:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c632:	4b39      	ldr	r3, [pc, #228]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800c63a:	d005      	beq.n	800c648 <RCCEx_PLLSAI1_Config+0x9c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c63c:	f7fd ff52 	bl	800a4e4 <HAL_GetTick>
 800c640:	1bc3      	subs	r3, r0, r7
 800c642:	2b02      	cmp	r3, #2
 800c644:	d9f5      	bls.n	800c632 <RCCEx_PLLSAI1_Config+0x86>
        status = HAL_TIMEOUT;
 800c646:	2603      	movs	r6, #3
    if(status == HAL_OK)
 800c648:	2e00      	cmp	r6, #0
 800c64a:	d1bf      	bne.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800c64c:	2d00      	cmp	r5, #0
 800c64e:	d13c      	bne.n	800c6ca <RCCEx_PLLSAI1_Config+0x11e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c650:	4931      	ldr	r1, [pc, #196]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c652:	690b      	ldr	r3, [r1, #16]
 800c654:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800c658:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c65c:	68a0      	ldr	r0, [r4, #8]
 800c65e:	68e2      	ldr	r2, [r4, #12]
 800c660:	06d2      	lsls	r2, r2, #27
 800c662:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800c666:	4313      	orrs	r3, r2
 800c668:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800c66a:	4a2b      	ldr	r2, [pc, #172]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c66c:	6813      	ldr	r3, [r2, #0]
 800c66e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c672:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800c674:	f7fd ff36 	bl	800a4e4 <HAL_GetTick>
 800c678:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c67a:	4b27      	ldr	r3, [pc, #156]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800c682:	d105      	bne.n	800c690 <RCCEx_PLLSAI1_Config+0xe4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c684:	f7fd ff2e 	bl	800a4e4 <HAL_GetTick>
 800c688:	1b40      	subs	r0, r0, r5
 800c68a:	2802      	cmp	r0, #2
 800c68c:	d9f5      	bls.n	800c67a <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_TIMEOUT;
 800c68e:	2603      	movs	r6, #3
      if(status == HAL_OK)
 800c690:	2e00      	cmp	r6, #0
 800c692:	d19b      	bne.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c694:	4a20      	ldr	r2, [pc, #128]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c696:	6913      	ldr	r3, [r2, #16]
 800c698:	69a1      	ldr	r1, [r4, #24]
 800c69a:	430b      	orrs	r3, r1
 800c69c:	6113      	str	r3, [r2, #16]
 800c69e:	e795      	b.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c6a2:	6812      	ldr	r2, [r2, #0]
 800c6a4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800c6a8:	d1ae      	bne.n	800c608 <RCCEx_PLLSAI1_Config+0x5c>
 800c6aa:	2601      	movs	r6, #1
 800c6ac:	e78e      	b.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c6ae:	4a1a      	ldr	r2, [pc, #104]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c6b0:	6812      	ldr	r2, [r2, #0]
 800c6b2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800c6b6:	d1a7      	bne.n	800c608 <RCCEx_PLLSAI1_Config+0x5c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c6b8:	4a17      	ldr	r2, [pc, #92]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c6ba:	6812      	ldr	r2, [r2, #0]
 800c6bc:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800c6c0:	d1a2      	bne.n	800c608 <RCCEx_PLLSAI1_Config+0x5c>
 800c6c2:	2601      	movs	r6, #1
 800c6c4:	e782      	b.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
        status = HAL_ERROR;
 800c6c6:	2601      	movs	r6, #1
 800c6c8:	e7a9      	b.n	800c61e <RCCEx_PLLSAI1_Config+0x72>
      else if(Divider == DIVIDER_Q_UPDATE)
 800c6ca:	2d01      	cmp	r5, #1
 800c6cc:	d00f      	beq.n	800c6ee <RCCEx_PLLSAI1_Config+0x142>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c6ce:	4812      	ldr	r0, [pc, #72]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c6d0:	6902      	ldr	r2, [r0, #16]
 800c6d2:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 800c6d6:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800c6da:	68a1      	ldr	r1, [r4, #8]
 800c6dc:	6963      	ldr	r3, [r4, #20]
 800c6de:	085b      	lsrs	r3, r3, #1
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	065b      	lsls	r3, r3, #25
 800c6e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	6102      	str	r2, [r0, #16]
 800c6ec:	e7bd      	b.n	800c66a <RCCEx_PLLSAI1_Config+0xbe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c6ee:	480a      	ldr	r0, [pc, #40]	@ (800c718 <RCCEx_PLLSAI1_Config+0x16c>)
 800c6f0:	6902      	ldr	r2, [r0, #16]
 800c6f2:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800c6f6:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800c6fa:	68a1      	ldr	r1, [r4, #8]
 800c6fc:	6923      	ldr	r3, [r4, #16]
 800c6fe:	085b      	lsrs	r3, r3, #1
 800c700:	3b01      	subs	r3, #1
 800c702:	055b      	lsls	r3, r3, #21
 800c704:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c708:	431a      	orrs	r2, r3
 800c70a:	6102      	str	r2, [r0, #16]
 800c70c:	e7ad      	b.n	800c66a <RCCEx_PLLSAI1_Config+0xbe>
      status = HAL_ERROR;
 800c70e:	2601      	movs	r6, #1
 800c710:	e75c      	b.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
    switch(PllSai1->PLLSAI1Source)
 800c712:	2601      	movs	r6, #1
 800c714:	e75a      	b.n	800c5cc <RCCEx_PLLSAI1_Config+0x20>
 800c716:	bf00      	nop
 800c718:	40021000 	.word	0x40021000

0800c71c <HAL_RCCEx_PeriphCLKConfig>:
{
 800c71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c720:	b082      	sub	sp, #8
 800c722:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c724:	6803      	ldr	r3, [r0, #0]
 800c726:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800c72a:	d026      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c72c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c72e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c732:	d006      	beq.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800c734:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c738:	d01d      	beq.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800c73a:	b19b      	cbz	r3, 800c764 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800c73c:	2601      	movs	r6, #1
 800c73e:	4637      	mov	r7, r6
 800c740:	e01d      	b.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c742:	4aae      	ldr	r2, [pc, #696]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c744:	68d3      	ldr	r3, [r2, #12]
 800c746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c74a:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c74c:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c74e:	4aab      	ldr	r2, [pc, #684]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c750:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c754:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800c758:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800c75a:	430b      	orrs	r3, r1
 800c75c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c760:	2600      	movs	r6, #0
 800c762:	e00c      	b.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c764:	2100      	movs	r1, #0
 800c766:	3004      	adds	r0, #4
 800c768:	f7ff ff20 	bl	800c5ac <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800c76c:	4607      	mov	r7, r0
 800c76e:	2800      	cmp	r0, #0
 800c770:	d0ed      	beq.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x32>
      status = ret;
 800c772:	4606      	mov	r6, r0
 800c774:	e003      	b.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch(PeriphClkInit->Sai1ClockSelection)
 800c776:	2700      	movs	r7, #0
 800c778:	e7e9      	b.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c77a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c77c:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800c784:	d06b      	beq.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c786:	4b9d      	ldr	r3, [pc, #628]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c78a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c78e:	d14c      	bne.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800c790:	4b9a      	ldr	r3, [pc, #616]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c792:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c794:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800c798:	659a      	str	r2, [r3, #88]	@ 0x58
 800c79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c79c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800c7a4:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c7a8:	4a95      	ldr	r2, [pc, #596]	@ (800ca00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800c7aa:	6813      	ldr	r3, [r2, #0]
 800c7ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7b0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800c7b2:	f7fd fe97 	bl	800a4e4 <HAL_GetTick>
 800c7b6:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c7b8:	4b91      	ldr	r3, [pc, #580]	@ (800ca00 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800c7c0:	d105      	bne.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7c2:	f7fd fe8f 	bl	800a4e4 <HAL_GetTick>
 800c7c6:	1b40      	subs	r0, r0, r5
 800c7c8:	2802      	cmp	r0, #2
 800c7ca:	d9f5      	bls.n	800c7b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 800c7cc:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 800c7ce:	2f00      	cmp	r7, #0
 800c7d0:	d140      	bne.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c7d2:	4b8a      	ldr	r3, [pc, #552]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c7d8:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800c7dc:	d018      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800c7de:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d012      	beq.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c7e4:	4a85      	ldr	r2, [pc, #532]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c7e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800c7ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800c7ee:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800c7f2:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800c7f6:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c7fa:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800c7fe:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800c802:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800c806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c80a:	f013 0f01 	tst.w	r3, #1
 800c80e:	d10f      	bne.n	800c830 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 800c810:	2f00      	cmp	r7, #0
 800c812:	f040 80c9 	bne.w	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c816:	4a79      	ldr	r2, [pc, #484]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c818:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800c81c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c820:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800c822:	430b      	orrs	r3, r1
 800c824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c828:	e015      	b.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 800c82a:	f04f 0800 	mov.w	r8, #0
 800c82e:	e7bb      	b.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 800c830:	f7fd fe58 	bl	800a4e4 <HAL_GetTick>
 800c834:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c836:	4b71      	ldr	r3, [pc, #452]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c83c:	f013 0f02 	tst.w	r3, #2
 800c840:	d1e6      	bne.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c842:	f7fd fe4f 	bl	800a4e4 <HAL_GetTick>
 800c846:	1b40      	subs	r0, r0, r5
 800c848:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c84c:	4298      	cmp	r0, r3
 800c84e:	d9f2      	bls.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 800c850:	2703      	movs	r7, #3
 800c852:	e7dd      	b.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 800c854:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 800c856:	f1b8 0f00 	cmp.w	r8, #0
 800c85a:	f040 80a7 	bne.w	800c9ac <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	f013 0f01 	tst.w	r3, #1
 800c864:	d008      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c866:	4a65      	ldr	r2, [pc, #404]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c868:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c86c:	f023 0303 	bic.w	r3, r3, #3
 800c870:	6a21      	ldr	r1, [r4, #32]
 800c872:	430b      	orrs	r3, r1
 800c874:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	f013 0f02 	tst.w	r3, #2
 800c87e:	d008      	beq.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c880:	4a5e      	ldr	r2, [pc, #376]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c882:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c886:	f023 030c 	bic.w	r3, r3, #12
 800c88a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c88c:	430b      	orrs	r3, r1
 800c88e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	f013 0f20 	tst.w	r3, #32
 800c898:	d008      	beq.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c89a:	4a58      	ldr	r2, [pc, #352]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c89c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c8a0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800c8a4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c8a6:	430b      	orrs	r3, r1
 800c8a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800c8b2:	d008      	beq.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c8b4:	4a51      	ldr	r2, [pc, #324]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c8b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c8ba:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800c8be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8c0:	430b      	orrs	r3, r1
 800c8c2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c8c6:	6823      	ldr	r3, [r4, #0]
 800c8c8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800c8cc:	d008      	beq.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c8ce:	4a4b      	ldr	r2, [pc, #300]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c8d0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c8d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c8d8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800c8da:	430b      	orrs	r3, r1
 800c8dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800c8e6:	d008      	beq.n	800c8fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c8e8:	4a44      	ldr	r2, [pc, #272]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c8ea:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c8ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c8f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c8f4:	430b      	orrs	r3, r1
 800c8f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800c900:	d008      	beq.n	800c914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c902:	4a3e      	ldr	r2, [pc, #248]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c904:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c908:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800c90c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c90e:	430b      	orrs	r3, r1
 800c910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c914:	6823      	ldr	r3, [r4, #0]
 800c916:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800c91a:	d00f      	beq.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c91c:	4a37      	ldr	r2, [pc, #220]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c91e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c922:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800c926:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800c928:	430b      	orrs	r3, r1
 800c92a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c92e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c930:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c934:	d040      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c936:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c93a:	d042      	beq.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800c942:	d00f      	beq.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c944:	4a2d      	ldr	r2, [pc, #180]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c946:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c94a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800c94e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800c950:	430b      	orrs	r3, r1
 800c952:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c956:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800c958:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c95c:	d039      	beq.n	800c9d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c95e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c962:	d03b      	beq.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800c96a:	d00c      	beq.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c96c:	4a23      	ldr	r2, [pc, #140]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c96e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c972:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800c976:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800c978:	430b      	orrs	r3, r1
 800c97a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c97e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800c980:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c984:	d032      	beq.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800c98c:	d008      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c98e:	4a1b      	ldr	r2, [pc, #108]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c990:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800c994:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c998:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800c99a:	430b      	orrs	r3, r1
 800c99c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800c9a0:	4630      	mov	r0, r6
 800c9a2:	b002      	add	sp, #8
 800c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 800c9a8:	463e      	mov	r6, r7
 800c9aa:	e754      	b.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9ac:	4a13      	ldr	r2, [pc, #76]	@ (800c9fc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c9ae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c9b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c9b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800c9b6:	e752      	b.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c9b8:	68d3      	ldr	r3, [r2, #12]
 800c9ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9be:	60d3      	str	r3, [r2, #12]
 800c9c0:	e7bc      	b.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	1d20      	adds	r0, r4, #4
 800c9c6:	f7ff fdf1 	bl	800c5ac <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800c9ca:	2800      	cmp	r0, #0
 800c9cc:	d0b6      	beq.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 800c9ce:	4606      	mov	r6, r0
 800c9d0:	e7b4      	b.n	800c93c <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c9d2:	68d3      	ldr	r3, [r2, #12]
 800c9d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9d8:	60d3      	str	r3, [r2, #12]
 800c9da:	e7c3      	b.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c9dc:	2101      	movs	r1, #1
 800c9de:	1d20      	adds	r0, r4, #4
 800c9e0:	f7ff fde4 	bl	800c5ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d0bd      	beq.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	e7bb      	b.n	800c964 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c9ec:	2102      	movs	r1, #2
 800c9ee:	1d20      	adds	r0, r4, #4
 800c9f0:	f7ff fddc 	bl	800c5ac <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	d0c6      	beq.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	e7c4      	b.n	800c986 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800c9fc:	40021000 	.word	0x40021000
 800ca00:	40007000 	.word	0x40007000

0800ca04 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ca04:	4770      	bx	lr
	...

0800ca08 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ca08:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d126      	bne.n	800ca5e <HAL_TIM_Base_Start_IT+0x56>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca10:	2302      	movs	r3, #2
 800ca12:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ca16:	6802      	ldr	r2, [r0, #0]
 800ca18:	68d3      	ldr	r3, [r2, #12]
 800ca1a:	f043 0301 	orr.w	r3, r3, #1
 800ca1e:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca20:	6803      	ldr	r3, [r0, #0]
 800ca22:	4a12      	ldr	r2, [pc, #72]	@ (800ca6c <HAL_TIM_Base_Start_IT+0x64>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d00c      	beq.n	800ca42 <HAL_TIM_Base_Start_IT+0x3a>
 800ca28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca2c:	d009      	beq.n	800ca42 <HAL_TIM_Base_Start_IT+0x3a>
 800ca2e:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800ca32:	4293      	cmp	r3, r2
 800ca34:	d005      	beq.n	800ca42 <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	f042 0201 	orr.w	r2, r2, #1
 800ca3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca3e:	2000      	movs	r0, #0
 800ca40:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca42:	6899      	ldr	r1, [r3, #8]
 800ca44:	4a0a      	ldr	r2, [pc, #40]	@ (800ca70 <HAL_TIM_Base_Start_IT+0x68>)
 800ca46:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca48:	2a06      	cmp	r2, #6
 800ca4a:	d00a      	beq.n	800ca62 <HAL_TIM_Base_Start_IT+0x5a>
 800ca4c:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800ca50:	d009      	beq.n	800ca66 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	f042 0201 	orr.w	r2, r2, #1
 800ca58:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	4770      	bx	lr
    return HAL_ERROR;
 800ca5e:	2001      	movs	r0, #1
 800ca60:	4770      	bx	lr
  return HAL_OK;
 800ca62:	2000      	movs	r0, #0
 800ca64:	4770      	bx	lr
 800ca66:	2000      	movs	r0, #0
}
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	40012c00 	.word	0x40012c00
 800ca70:	00010007 	.word	0x00010007

0800ca74 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca74:	4770      	bx	lr

0800ca76 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca76:	4770      	bx	lr

0800ca78 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca78:	4770      	bx	lr

0800ca7a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca7a:	4770      	bx	lr

0800ca7c <HAL_TIM_IRQHandler>:
{
 800ca7c:	b570      	push	{r4, r5, r6, lr}
 800ca7e:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800ca80:	6803      	ldr	r3, [r0, #0]
 800ca82:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ca84:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ca86:	f015 0f02 	tst.w	r5, #2
 800ca8a:	d010      	beq.n	800caae <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ca8c:	f016 0f02 	tst.w	r6, #2
 800ca90:	d00d      	beq.n	800caae <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ca92:	f06f 0202 	mvn.w	r2, #2
 800ca96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ca9c:	6803      	ldr	r3, [r0, #0]
 800ca9e:	699b      	ldr	r3, [r3, #24]
 800caa0:	f013 0f03 	tst.w	r3, #3
 800caa4:	d064      	beq.n	800cb70 <HAL_TIM_IRQHandler+0xf4>
          HAL_TIM_IC_CaptureCallback(htim);
 800caa6:	f7ff ffe6 	bl	800ca76 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caaa:	2300      	movs	r3, #0
 800caac:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800caae:	f015 0f04 	tst.w	r5, #4
 800cab2:	d012      	beq.n	800cada <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cab4:	f016 0f04 	tst.w	r6, #4
 800cab8:	d00f      	beq.n	800cada <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	f06f 0204 	mvn.w	r2, #4
 800cac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cac2:	2302      	movs	r3, #2
 800cac4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	699b      	ldr	r3, [r3, #24]
 800caca:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800cace:	d055      	beq.n	800cb7c <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 800cad0:	4620      	mov	r0, r4
 800cad2:	f7ff ffd0 	bl	800ca76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cad6:	2300      	movs	r3, #0
 800cad8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800cada:	f015 0f08 	tst.w	r5, #8
 800cade:	d012      	beq.n	800cb06 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800cae0:	f016 0f08 	tst.w	r6, #8
 800cae4:	d00f      	beq.n	800cb06 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800cae6:	6823      	ldr	r3, [r4, #0]
 800cae8:	f06f 0208 	mvn.w	r2, #8
 800caec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800caee:	2304      	movs	r3, #4
 800caf0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	69db      	ldr	r3, [r3, #28]
 800caf6:	f013 0f03 	tst.w	r3, #3
 800cafa:	d046      	beq.n	800cb8a <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 800cafc:	4620      	mov	r0, r4
 800cafe:	f7ff ffba 	bl	800ca76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb02:	2300      	movs	r3, #0
 800cb04:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800cb06:	f015 0f10 	tst.w	r5, #16
 800cb0a:	d012      	beq.n	800cb32 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800cb0c:	f016 0f10 	tst.w	r6, #16
 800cb10:	d00f      	beq.n	800cb32 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	f06f 0210 	mvn.w	r2, #16
 800cb18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cb1a:	2308      	movs	r3, #8
 800cb1c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	69db      	ldr	r3, [r3, #28]
 800cb22:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800cb26:	d037      	beq.n	800cb98 <HAL_TIM_IRQHandler+0x11c>
        HAL_TIM_IC_CaptureCallback(htim);
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f7ff ffa4 	bl	800ca76 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800cb32:	f015 0f01 	tst.w	r5, #1
 800cb36:	d002      	beq.n	800cb3e <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800cb38:	f016 0f01 	tst.w	r6, #1
 800cb3c:	d133      	bne.n	800cba6 <HAL_TIM_IRQHandler+0x12a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800cb3e:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 800cb42:	d002      	beq.n	800cb4a <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cb44:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800cb48:	d135      	bne.n	800cbb6 <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800cb4a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800cb4e:	d002      	beq.n	800cb56 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800cb50:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800cb54:	d137      	bne.n	800cbc6 <HAL_TIM_IRQHandler+0x14a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800cb56:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800cb5a:	d002      	beq.n	800cb62 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800cb5c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800cb60:	d139      	bne.n	800cbd6 <HAL_TIM_IRQHandler+0x15a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800cb62:	f015 0f20 	tst.w	r5, #32
 800cb66:	d002      	beq.n	800cb6e <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800cb68:	f016 0f20 	tst.w	r6, #32
 800cb6c:	d13b      	bne.n	800cbe6 <HAL_TIM_IRQHandler+0x16a>
}
 800cb6e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb70:	f7ff ff80 	bl	800ca74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb74:	4620      	mov	r0, r4
 800cb76:	f7ff ff7f 	bl	800ca78 <HAL_TIM_PWM_PulseFinishedCallback>
 800cb7a:	e796      	b.n	800caaa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	f7ff ff79 	bl	800ca74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb82:	4620      	mov	r0, r4
 800cb84:	f7ff ff78 	bl	800ca78 <HAL_TIM_PWM_PulseFinishedCallback>
 800cb88:	e7a5      	b.n	800cad6 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb8a:	4620      	mov	r0, r4
 800cb8c:	f7ff ff72 	bl	800ca74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb90:	4620      	mov	r0, r4
 800cb92:	f7ff ff71 	bl	800ca78 <HAL_TIM_PWM_PulseFinishedCallback>
 800cb96:	e7b4      	b.n	800cb02 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f7ff ff6b 	bl	800ca74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff ff6a 	bl	800ca78 <HAL_TIM_PWM_PulseFinishedCallback>
 800cba4:	e7c3      	b.n	800cb2e <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	f06f 0201 	mvn.w	r2, #1
 800cbac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f7fc fc10 	bl	80093d4 <HAL_TIM_PeriodElapsedCallback>
 800cbb4:	e7c3      	b.n	800cb3e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800cbbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 f88b 	bl	800ccda <HAL_TIMEx_BreakCallback>
 800cbc4:	e7c1      	b.n	800cb4a <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800cbcc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 f884 	bl	800ccdc <HAL_TIMEx_Break2Callback>
 800cbd4:	e7bf      	b.n	800cb56 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cbdc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f7ff ff4b 	bl	800ca7a <HAL_TIM_TriggerCallback>
 800cbe4:	e7bd      	b.n	800cb62 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800cbe6:	6823      	ldr	r3, [r4, #0]
 800cbe8:	f06f 0220 	mvn.w	r2, #32
 800cbec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f000 f872 	bl	800ccd8 <HAL_TIMEx_CommutCallback>
}
 800cbf4:	e7bb      	b.n	800cb6e <HAL_TIM_IRQHandler+0xf2>
	...

0800cbf8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbf8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbfa:	4a1e      	ldr	r2, [pc, #120]	@ (800cc74 <TIM_Base_SetConfig+0x7c>)
 800cbfc:	4290      	cmp	r0, r2
 800cbfe:	d002      	beq.n	800cc06 <TIM_Base_SetConfig+0xe>
 800cc00:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800cc04:	d103      	bne.n	800cc0e <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800cc0a:	684a      	ldr	r2, [r1, #4]
 800cc0c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc0e:	4a19      	ldr	r2, [pc, #100]	@ (800cc74 <TIM_Base_SetConfig+0x7c>)
 800cc10:	4290      	cmp	r0, r2
 800cc12:	d00a      	beq.n	800cc2a <TIM_Base_SetConfig+0x32>
 800cc14:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800cc18:	d007      	beq.n	800cc2a <TIM_Base_SetConfig+0x32>
 800cc1a:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800cc1e:	4290      	cmp	r0, r2
 800cc20:	d003      	beq.n	800cc2a <TIM_Base_SetConfig+0x32>
 800cc22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cc26:	4290      	cmp	r0, r2
 800cc28:	d103      	bne.n	800cc32 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc2e:	68ca      	ldr	r2, [r1, #12]
 800cc30:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc36:	694a      	ldr	r2, [r1, #20]
 800cc38:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800cc3a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc3c:	688b      	ldr	r3, [r1, #8]
 800cc3e:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc40:	680b      	ldr	r3, [r1, #0]
 800cc42:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc44:	4b0b      	ldr	r3, [pc, #44]	@ (800cc74 <TIM_Base_SetConfig+0x7c>)
 800cc46:	4298      	cmp	r0, r3
 800cc48:	d007      	beq.n	800cc5a <TIM_Base_SetConfig+0x62>
 800cc4a:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800cc4e:	4298      	cmp	r0, r3
 800cc50:	d003      	beq.n	800cc5a <TIM_Base_SetConfig+0x62>
 800cc52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc56:	4298      	cmp	r0, r3
 800cc58:	d101      	bne.n	800cc5e <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc5a:	690b      	ldr	r3, [r1, #16]
 800cc5c:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cc62:	6903      	ldr	r3, [r0, #16]
 800cc64:	f013 0f01 	tst.w	r3, #1
 800cc68:	d003      	beq.n	800cc72 <TIM_Base_SetConfig+0x7a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cc6a:	6903      	ldr	r3, [r0, #16]
 800cc6c:	f023 0301 	bic.w	r3, r3, #1
 800cc70:	6103      	str	r3, [r0, #16]
  }
}
 800cc72:	4770      	bx	lr
 800cc74:	40012c00 	.word	0x40012c00

0800cc78 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800cc78:	b360      	cbz	r0, 800ccd4 <HAL_TIM_Base_Init+0x5c>
{
 800cc7a:	b510      	push	{r4, lr}
 800cc7c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800cc7e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800cc82:	b313      	cbz	r3, 800ccca <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800cc84:	2302      	movs	r3, #2
 800cc86:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	f851 0b04 	ldr.w	r0, [r1], #4
 800cc90:	f7ff ffb2 	bl	800cbf8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc94:	2301      	movs	r3, #1
 800cc96:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc9a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800cc9e:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800cca2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800cca6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ccaa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ccae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ccb2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ccb6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ccba:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800ccbe:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ccc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800ccc6:	2000      	movs	r0, #0
}
 800ccc8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800ccca:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ccce:	f7ff fe99 	bl	800ca04 <HAL_TIM_Base_MspInit>
 800ccd2:	e7d7      	b.n	800cc84 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800ccd4:	2001      	movs	r0, #1
}
 800ccd6:	4770      	bx	lr

0800ccd8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ccd8:	4770      	bx	lr

0800ccda <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ccda:	4770      	bx	lr

0800ccdc <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ccdc:	4770      	bx	lr
	...

0800cce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cce0:	b530      	push	{r4, r5, lr}
 800cce2:	b089      	sub	sp, #36	@ 0x24
 800cce4:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800cce6:	4b21      	ldr	r3, [pc, #132]	@ (800cd6c <HAL_InitTick+0x8c>)
 800cce8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ccea:	f042 0210 	orr.w	r2, r2, #16
 800ccee:	659a      	str	r2, [r3, #88]	@ 0x58
 800ccf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccf2:	f003 0310 	and.w	r3, r3, #16
 800ccf6:	9301      	str	r3, [sp, #4]
 800ccf8:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800ccfa:	a902      	add	r1, sp, #8
 800ccfc:	a803      	add	r0, sp, #12
 800ccfe:	f7ff fc37 	bl	800c570 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800cd02:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800cd04:	b9cb      	cbnz	r3, 800cd3a <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800cd06:	f7ff fc21 	bl	800c54c <HAL_RCC_GetPCLK1Freq>
 800cd0a:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800cd0c:	4a18      	ldr	r2, [pc, #96]	@ (800cd70 <HAL_InitTick+0x90>)
 800cd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd12:	0c9b      	lsrs	r3, r3, #18
 800cd14:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800cd16:	4817      	ldr	r0, [pc, #92]	@ (800cd74 <HAL_InitTick+0x94>)
 800cd18:	4a17      	ldr	r2, [pc, #92]	@ (800cd78 <HAL_InitTick+0x98>)
 800cd1a:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800cd1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800cd20:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800cd22:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800cd24:	2300      	movs	r3, #0
 800cd26:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cd28:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cd2a:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800cd2c:	f7ff ffa4 	bl	800cc78 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800cd30:	4605      	mov	r5, r0
 800cd32:	b130      	cbz	r0, 800cd42 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 800cd34:	4628      	mov	r0, r5
 800cd36:	b009      	add	sp, #36	@ 0x24
 800cd38:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800cd3a:	f7ff fc07 	bl	800c54c <HAL_RCC_GetPCLK1Freq>
 800cd3e:	0043      	lsls	r3, r0, #1
 800cd40:	e7e4      	b.n	800cd0c <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800cd42:	480c      	ldr	r0, [pc, #48]	@ (800cd74 <HAL_InitTick+0x94>)
 800cd44:	f7ff fe60 	bl	800ca08 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800cd48:	4605      	mov	r5, r0
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d1f2      	bne.n	800cd34 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800cd4e:	2036      	movs	r0, #54	@ 0x36
 800cd50:	f7fe fb84 	bl	800b45c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cd54:	2c0f      	cmp	r4, #15
 800cd56:	d901      	bls.n	800cd5c <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 800cd58:	2501      	movs	r5, #1
 800cd5a:	e7eb      	b.n	800cd34 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	4621      	mov	r1, r4
 800cd60:	2036      	movs	r0, #54	@ 0x36
 800cd62:	f7fe fb6b 	bl	800b43c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800cd66:	4b05      	ldr	r3, [pc, #20]	@ (800cd7c <HAL_InitTick+0x9c>)
 800cd68:	601c      	str	r4, [r3, #0]
 800cd6a:	e7e3      	b.n	800cd34 <HAL_InitTick+0x54>
 800cd6c:	40021000 	.word	0x40021000
 800cd70:	431bde83 	.word	0x431bde83
 800cd74:	20003d80 	.word	0x20003d80
 800cd78:	40001000 	.word	0x40001000
 800cd7c:	20000008 	.word	0x20000008

0800cd80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800cd80:	e7fe      	b.n	800cd80 <NMI_Handler>

0800cd82 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cd82:	e7fe      	b.n	800cd82 <HardFault_Handler>

0800cd84 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cd84:	e7fe      	b.n	800cd84 <MemManage_Handler>

0800cd86 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cd86:	e7fe      	b.n	800cd86 <BusFault_Handler>

0800cd88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cd88:	e7fe      	b.n	800cd88 <UsageFault_Handler>

0800cd8a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cd8a:	4770      	bx	lr

0800cd8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800cd8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800cd8e:	4802      	ldr	r0, [pc, #8]	@ (800cd98 <TIM6_DAC_IRQHandler+0xc>)
 800cd90:	f7ff fe74 	bl	800ca7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800cd94:	bd08      	pop	{r3, pc}
 800cd96:	bf00      	nop
 800cd98:	20003d80 	.word	0x20003d80

0800cd9c <SystemInit>:

void SystemInit(void)
{
  /* Reset RCC clock configuration to default state (coming from bootloader) */
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800cd9c:	4b0f      	ldr	r3, [pc, #60]	@ (800cddc <SystemInit+0x40>)
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	f042 0201 	orr.w	r2, r2, #1
 800cda4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register (switch to MSI as system clock) */
  RCC->CFGR = 0x00000000U;
 800cda6:	2100      	movs	r1, #0
 800cda8:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON, HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 800cdb0:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 800cdb4:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register to default */
  RCC->PLLCFGR = 0x00001000U;
 800cdb6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cdba:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800cdc2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800cdc4:	6199      	str	r1, [r3, #24]

#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800cdc6:	4b06      	ldr	r3, [pc, #24]	@ (800cde0 <SystemInit+0x44>)
 800cdc8:	4a06      	ldr	r2, [pc, #24]	@ (800cde4 <SystemInit+0x48>)
 800cdca:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800cdcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cdd0:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800cdd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif
}
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	40021000 	.word	0x40021000
 800cde0:	e000ed00 	.word	0xe000ed00
 800cde4:	08008000 	.word	0x08008000

0800cde8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cde8:	4b08      	ldr	r3, [pc, #32]	@ (800ce0c <prvResetNextTaskUnblockTime+0x24>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	b923      	cbnz	r3, 800cdfa <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cdf0:	4b07      	ldr	r3, [pc, #28]	@ (800ce10 <prvResetNextTaskUnblockTime+0x28>)
 800cdf2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdfa:	4b04      	ldr	r3, [pc, #16]	@ (800ce0c <prvResetNextTaskUnblockTime+0x24>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68db      	ldr	r3, [r3, #12]
 800ce00:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ce02:	685a      	ldr	r2, [r3, #4]
 800ce04:	4b02      	ldr	r3, [pc, #8]	@ (800ce10 <prvResetNextTaskUnblockTime+0x28>)
 800ce06:	601a      	str	r2, [r3, #0]
	}
}
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	20003e3c 	.word	0x20003e3c
 800ce10:	20003dd4 	.word	0x20003dd4

0800ce14 <prvInitialiseNewTask>:
{
 800ce14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce18:	4680      	mov	r8, r0
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	4617      	mov	r7, r2
 800ce1e:	4699      	mov	r9, r3
 800ce20:	9e08      	ldr	r6, [sp, #32]
 800ce22:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800ce26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce28:	0092      	lsls	r2, r2, #2
 800ce2a:	21a5      	movs	r1, #165	@ 0xa5
 800ce2c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ce2e:	f000 ffd6 	bl	800ddde <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ce34:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 800ce38:	3a01      	subs	r2, #1
 800ce3a:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce3e:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800ce42:	b3a5      	cbz	r5, 800ceae <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce44:	f04f 0c00 	mov.w	ip, #0
 800ce48:	f1bc 0f0f 	cmp.w	ip, #15
 800ce4c:	d809      	bhi.n	800ce62 <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce4e:	f815 300c 	ldrb.w	r3, [r5, ip]
 800ce52:	eb04 020c 	add.w	r2, r4, ip
 800ce56:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800ce5a:	b113      	cbz	r3, 800ce62 <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce5c:	f10c 0c01 	add.w	ip, ip, #1
 800ce60:	e7f2      	b.n	800ce48 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce62:	2300      	movs	r3, #0
 800ce64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce68:	2e37      	cmp	r6, #55	@ 0x37
 800ce6a:	d900      	bls.n	800ce6e <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce6c:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800ce6e:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ce70:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce72:	2500      	movs	r5, #0
 800ce74:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce76:	1d20      	adds	r0, r4, #4
 800ce78:	f7fc f9f9 	bl	800926e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce7c:	f104 0018 	add.w	r0, r4, #24
 800ce80:	f7fc f9f5 	bl	800926e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce84:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce86:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800ce8a:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce8c:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800ce8e:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce90:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce94:	464a      	mov	r2, r9
 800ce96:	4641      	mov	r1, r8
 800ce98:	4638      	mov	r0, r7
 800ce9a:	f7fc fc77 	bl	800978c <pxPortInitialiseStack>
 800ce9e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800cea0:	f1ba 0f00 	cmp.w	sl, #0
 800cea4:	d001      	beq.n	800ceaa <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cea6:	f8ca 4000 	str.w	r4, [sl]
}
 800ceaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800ceb4:	e7d8      	b.n	800ce68 <prvInitialiseNewTask+0x54>
	...

0800ceb8 <prvInitialiseTaskLists>:
{
 800ceb8:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ceba:	2400      	movs	r4, #0
 800cebc:	e007      	b.n	800cece <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cebe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800cec2:	0093      	lsls	r3, r2, #2
 800cec4:	480e      	ldr	r0, [pc, #56]	@ (800cf00 <prvInitialiseTaskLists+0x48>)
 800cec6:	4418      	add	r0, r3
 800cec8:	f7fc f9c6 	bl	8009258 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cecc:	3401      	adds	r4, #1
 800cece:	2c37      	cmp	r4, #55	@ 0x37
 800ced0:	d9f5      	bls.n	800cebe <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800ced2:	4d0c      	ldr	r5, [pc, #48]	@ (800cf04 <prvInitialiseTaskLists+0x4c>)
 800ced4:	4628      	mov	r0, r5
 800ced6:	f7fc f9bf 	bl	8009258 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ceda:	4c0b      	ldr	r4, [pc, #44]	@ (800cf08 <prvInitialiseTaskLists+0x50>)
 800cedc:	4620      	mov	r0, r4
 800cede:	f7fc f9bb 	bl	8009258 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cee2:	480a      	ldr	r0, [pc, #40]	@ (800cf0c <prvInitialiseTaskLists+0x54>)
 800cee4:	f7fc f9b8 	bl	8009258 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800cee8:	4809      	ldr	r0, [pc, #36]	@ (800cf10 <prvInitialiseTaskLists+0x58>)
 800ceea:	f7fc f9b5 	bl	8009258 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ceee:	4809      	ldr	r0, [pc, #36]	@ (800cf14 <prvInitialiseTaskLists+0x5c>)
 800cef0:	f7fc f9b2 	bl	8009258 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800cef4:	4b08      	ldr	r3, [pc, #32]	@ (800cf18 <prvInitialiseTaskLists+0x60>)
 800cef6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cef8:	4b08      	ldr	r3, [pc, #32]	@ (800cf1c <prvInitialiseTaskLists+0x64>)
 800cefa:	601c      	str	r4, [r3, #0]
}
 800cefc:	bd38      	pop	{r3, r4, r5, pc}
 800cefe:	bf00      	nop
 800cf00:	20003e68 	.word	0x20003e68
 800cf04:	20003e54 	.word	0x20003e54
 800cf08:	20003e40 	.word	0x20003e40
 800cf0c:	20003e24 	.word	0x20003e24
 800cf10:	20003e10 	.word	0x20003e10
 800cf14:	20003df8 	.word	0x20003df8
 800cf18:	20003e3c 	.word	0x20003e3c
 800cf1c:	20003e38 	.word	0x20003e38

0800cf20 <prvAddNewTaskToReadyList>:
{
 800cf20:	b510      	push	{r4, lr}
 800cf22:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800cf24:	f7fc fc5e 	bl	80097e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800cf28:	4a22      	ldr	r2, [pc, #136]	@ (800cfb4 <prvAddNewTaskToReadyList+0x94>)
 800cf2a:	6813      	ldr	r3, [r2, #0]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf30:	4b21      	ldr	r3, [pc, #132]	@ (800cfb8 <prvAddNewTaskToReadyList+0x98>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	b15b      	cbz	r3, 800cf4e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800cf36:	4b21      	ldr	r3, [pc, #132]	@ (800cfbc <prvAddNewTaskToReadyList+0x9c>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	b96b      	cbnz	r3, 800cf58 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf3c:	4b1e      	ldr	r3, [pc, #120]	@ (800cfb8 <prvAddNewTaskToReadyList+0x98>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf42:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d807      	bhi.n	800cf58 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800cf48:	4b1b      	ldr	r3, [pc, #108]	@ (800cfb8 <prvAddNewTaskToReadyList+0x98>)
 800cf4a:	601c      	str	r4, [r3, #0]
 800cf4c:	e004      	b.n	800cf58 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800cf4e:	4b1a      	ldr	r3, [pc, #104]	@ (800cfb8 <prvAddNewTaskToReadyList+0x98>)
 800cf50:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cf52:	6813      	ldr	r3, [r2, #0]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d029      	beq.n	800cfac <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800cf58:	4a19      	ldr	r2, [pc, #100]	@ (800cfc0 <prvAddNewTaskToReadyList+0xa0>)
 800cf5a:	6813      	ldr	r3, [r2, #0]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf60:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800cf62:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800cf64:	4b17      	ldr	r3, [pc, #92]	@ (800cfc4 <prvAddNewTaskToReadyList+0xa4>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4298      	cmp	r0, r3
 800cf6a:	d901      	bls.n	800cf70 <prvAddNewTaskToReadyList+0x50>
 800cf6c:	4b15      	ldr	r3, [pc, #84]	@ (800cfc4 <prvAddNewTaskToReadyList+0xa4>)
 800cf6e:	6018      	str	r0, [r3, #0]
 800cf70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800cf74:	1d21      	adds	r1, r4, #4
 800cf76:	4b14      	ldr	r3, [pc, #80]	@ (800cfc8 <prvAddNewTaskToReadyList+0xa8>)
 800cf78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf7c:	f7fc f97a 	bl	8009274 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800cf80:	f7fc fc52 	bl	8009828 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800cf84:	4b0d      	ldr	r3, [pc, #52]	@ (800cfbc <prvAddNewTaskToReadyList+0x9c>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	b17b      	cbz	r3, 800cfaa <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf8a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb8 <prvAddNewTaskToReadyList+0x98>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf90:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d209      	bcs.n	800cfaa <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800cf96:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf9e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cfa2:	f3bf 8f4f 	dsb	sy
 800cfa6:	f3bf 8f6f 	isb	sy
}
 800cfaa:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800cfac:	f7ff ff84 	bl	800ceb8 <prvInitialiseTaskLists>
 800cfb0:	e7d2      	b.n	800cf58 <prvAddNewTaskToReadyList+0x38>
 800cfb2:	bf00      	nop
 800cfb4:	20003df4 	.word	0x20003df4
 800cfb8:	200042c8 	.word	0x200042c8
 800cfbc:	20003de8 	.word	0x20003de8
 800cfc0:	20003dd8 	.word	0x20003dd8
 800cfc4:	20003dec 	.word	0x20003dec
 800cfc8:	20003e68 	.word	0x20003e68

0800cfcc <prvDeleteTCB>:
	{
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cfd0:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 800cfd4:	b163      	cbz	r3, 800cff0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cfd6:	2b01      	cmp	r3, #1
 800cfd8:	d011      	beq.n	800cffe <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d00e      	beq.n	800cffc <prvDeleteTCB+0x30>
 800cfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	e7fe      	b.n	800cfee <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800cff0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800cff2:	f7fc f8f3 	bl	80091dc <vPortFree>
				vPortFree( pxTCB );
 800cff6:	4620      	mov	r0, r4
 800cff8:	f7fc f8f0 	bl	80091dc <vPortFree>
	}
 800cffc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800cffe:	f7fc f8ed 	bl	80091dc <vPortFree>
 800d002:	e7fb      	b.n	800cffc <prvDeleteTCB+0x30>

0800d004 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d004:	4b0f      	ldr	r3, [pc, #60]	@ (800d044 <prvCheckTasksWaitingTermination+0x40>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	b1d3      	cbz	r3, 800d040 <prvCheckTasksWaitingTermination+0x3c>
{
 800d00a:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800d00c:	f7fc fbea 	bl	80097e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d010:	4b0d      	ldr	r3, [pc, #52]	@ (800d048 <prvCheckTasksWaitingTermination+0x44>)
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d016:	1d20      	adds	r0, r4, #4
 800d018:	f7fc f950 	bl	80092bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d01c:	4a0b      	ldr	r2, [pc, #44]	@ (800d04c <prvCheckTasksWaitingTermination+0x48>)
 800d01e:	6813      	ldr	r3, [r2, #0]
 800d020:	3b01      	subs	r3, #1
 800d022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d024:	4a07      	ldr	r2, [pc, #28]	@ (800d044 <prvCheckTasksWaitingTermination+0x40>)
 800d026:	6813      	ldr	r3, [r2, #0]
 800d028:	3b01      	subs	r3, #1
 800d02a:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800d02c:	f7fc fbfc 	bl	8009828 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800d030:	4620      	mov	r0, r4
 800d032:	f7ff ffcb 	bl	800cfcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d036:	4b03      	ldr	r3, [pc, #12]	@ (800d044 <prvCheckTasksWaitingTermination+0x40>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1e6      	bne.n	800d00c <prvCheckTasksWaitingTermination+0x8>
}
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	20003e0c 	.word	0x20003e0c
 800d048:	20003e10 	.word	0x20003e10
 800d04c:	20003df4 	.word	0x20003df4

0800d050 <prvIdleTask>:
{
 800d050:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800d052:	f7ff ffd7 	bl	800d004 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d056:	4b07      	ldr	r3, [pc, #28]	@ (800d074 <prvIdleTask+0x24>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d9f9      	bls.n	800d052 <prvIdleTask+0x2>
				taskYIELD();
 800d05e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d066:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	e7ee      	b.n	800d052 <prvIdleTask+0x2>
 800d074:	20003e68 	.word	0x20003e68

0800d078 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d078:	b570      	push	{r4, r5, r6, lr}
 800d07a:	4604      	mov	r4, r0
 800d07c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d07e:	4b17      	ldr	r3, [pc, #92]	@ (800d0dc <prvAddCurrentTaskToDelayedList+0x64>)
 800d080:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d082:	4b17      	ldr	r3, [pc, #92]	@ (800d0e0 <prvAddCurrentTaskToDelayedList+0x68>)
 800d084:	6818      	ldr	r0, [r3, #0]
 800d086:	3004      	adds	r0, #4
 800d088:	f7fc f918 	bl	80092bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d08c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d090:	d00d      	beq.n	800d0ae <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d092:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d094:	4b12      	ldr	r3, [pc, #72]	@ (800d0e0 <prvAddCurrentTaskToDelayedList+0x68>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800d09a:	42a6      	cmp	r6, r4
 800d09c:	d910      	bls.n	800d0c0 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d09e:	4b11      	ldr	r3, [pc, #68]	@ (800d0e4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800d0a0:	6818      	ldr	r0, [r3, #0]
 800d0a2:	4b0f      	ldr	r3, [pc, #60]	@ (800d0e0 <prvAddCurrentTaskToDelayedList+0x68>)
 800d0a4:	6819      	ldr	r1, [r3, #0]
 800d0a6:	3104      	adds	r1, #4
 800d0a8:	f7fc f8ef 	bl	800928a <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d0ac:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d0ae:	2d00      	cmp	r5, #0
 800d0b0:	d0ef      	beq.n	800d092 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e0 <prvAddCurrentTaskToDelayedList+0x68>)
 800d0b4:	6819      	ldr	r1, [r3, #0]
 800d0b6:	3104      	adds	r1, #4
 800d0b8:	480b      	ldr	r0, [pc, #44]	@ (800d0e8 <prvAddCurrentTaskToDelayedList+0x70>)
 800d0ba:	f7fc f8db 	bl	8009274 <vListInsertEnd>
 800d0be:	e7f5      	b.n	800d0ac <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d0ec <prvAddCurrentTaskToDelayedList+0x74>)
 800d0c2:	6818      	ldr	r0, [r3, #0]
 800d0c4:	4b06      	ldr	r3, [pc, #24]	@ (800d0e0 <prvAddCurrentTaskToDelayedList+0x68>)
 800d0c6:	6819      	ldr	r1, [r3, #0]
 800d0c8:	3104      	adds	r1, #4
 800d0ca:	f7fc f8de 	bl	800928a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d0ce:	4b08      	ldr	r3, [pc, #32]	@ (800d0f0 <prvAddCurrentTaskToDelayedList+0x78>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	42a3      	cmp	r3, r4
 800d0d4:	d9ea      	bls.n	800d0ac <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800d0d6:	4b06      	ldr	r3, [pc, #24]	@ (800d0f0 <prvAddCurrentTaskToDelayedList+0x78>)
 800d0d8:	601c      	str	r4, [r3, #0]
}
 800d0da:	e7e7      	b.n	800d0ac <prvAddCurrentTaskToDelayedList+0x34>
 800d0dc:	20003df0 	.word	0x20003df0
 800d0e0:	200042c8 	.word	0x200042c8
 800d0e4:	20003e38 	.word	0x20003e38
 800d0e8:	20003df8 	.word	0x20003df8
 800d0ec:	20003e3c 	.word	0x20003e3c
 800d0f0:	20003dd4 	.word	0x20003dd4

0800d0f4 <xTaskCreateStatic>:
	{
 800d0f4:	b530      	push	{r4, r5, lr}
 800d0f6:	b087      	sub	sp, #28
 800d0f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800d0fa:	b17c      	cbz	r4, 800d11c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d0fc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d0fe:	b1b5      	cbz	r5, 800d12e <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d100:	255c      	movs	r5, #92	@ 0x5c
 800d102:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d104:	9d04      	ldr	r5, [sp, #16]
 800d106:	2d5c      	cmp	r5, #92	@ 0x5c
 800d108:	d01a      	beq.n	800d140 <xTaskCreateStatic+0x4c>
 800d10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d10e:	f383 8811 	msr	BASEPRI, r3
 800d112:	f3bf 8f6f 	isb	sy
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	e7fe      	b.n	800d11a <xTaskCreateStatic+0x26>
 800d11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d12c:	e7fe      	b.n	800d12c <xTaskCreateStatic+0x38>
 800d12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d13e:	e7fe      	b.n	800d13e <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d140:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d142:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800d144:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d146:	2402      	movs	r4, #2
 800d148:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d14c:	2400      	movs	r4, #0
 800d14e:	9403      	str	r4, [sp, #12]
 800d150:	9502      	str	r5, [sp, #8]
 800d152:	ac05      	add	r4, sp, #20
 800d154:	9401      	str	r4, [sp, #4]
 800d156:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d158:	9400      	str	r4, [sp, #0]
 800d15a:	f7ff fe5b 	bl	800ce14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d15e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800d160:	f7ff fede 	bl	800cf20 <prvAddNewTaskToReadyList>
	}
 800d164:	9805      	ldr	r0, [sp, #20]
 800d166:	b007      	add	sp, #28
 800d168:	bd30      	pop	{r4, r5, pc}

0800d16a <xTaskCreate>:
	{
 800d16a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d16e:	b085      	sub	sp, #20
 800d170:	4607      	mov	r7, r0
 800d172:	4688      	mov	r8, r1
 800d174:	4614      	mov	r4, r2
 800d176:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d178:	0090      	lsls	r0, r2, #2
 800d17a:	f7fb ffa3 	bl	80090c4 <pvPortMalloc>
			if( pxStack != NULL )
 800d17e:	b308      	cbz	r0, 800d1c4 <xTaskCreate+0x5a>
 800d180:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d182:	205c      	movs	r0, #92	@ 0x5c
 800d184:	f7fb ff9e 	bl	80090c4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d188:	4605      	mov	r5, r0
 800d18a:	b1a8      	cbz	r0, 800d1b8 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800d18c:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d190:	2300      	movs	r3, #0
 800d192:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	9002      	str	r0, [sp, #8]
 800d19a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d19c:	9301      	str	r3, [sp, #4]
 800d19e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	4633      	mov	r3, r6
 800d1a4:	4622      	mov	r2, r4
 800d1a6:	4641      	mov	r1, r8
 800d1a8:	4638      	mov	r0, r7
 800d1aa:	f7ff fe33 	bl	800ce14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f7ff feb6 	bl	800cf20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d1b4:	2001      	movs	r0, #1
 800d1b6:	e007      	b.n	800d1c8 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800d1b8:	4648      	mov	r0, r9
 800d1ba:	f7fc f80f 	bl	80091dc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1be:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c2:	e001      	b.n	800d1c8 <xTaskCreate+0x5e>
 800d1c4:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d1c8:	b005      	add	sp, #20
 800d1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800d1d0 <vTaskStartScheduler>:
{
 800d1d0:	b510      	push	{r4, lr}
 800d1d2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d1d4:	2400      	movs	r4, #0
 800d1d6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d1d8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d1da:	aa07      	add	r2, sp, #28
 800d1dc:	a906      	add	r1, sp, #24
 800d1de:	a805      	add	r0, sp, #20
 800d1e0:	f7fb fe38 	bl	8008e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d1e4:	9b05      	ldr	r3, [sp, #20]
 800d1e6:	9302      	str	r3, [sp, #8]
 800d1e8:	9b06      	ldr	r3, [sp, #24]
 800d1ea:	9301      	str	r3, [sp, #4]
 800d1ec:	9400      	str	r4, [sp, #0]
 800d1ee:	4623      	mov	r3, r4
 800d1f0:	9a07      	ldr	r2, [sp, #28]
 800d1f2:	4917      	ldr	r1, [pc, #92]	@ (800d250 <vTaskStartScheduler+0x80>)
 800d1f4:	4817      	ldr	r0, [pc, #92]	@ (800d254 <vTaskStartScheduler+0x84>)
 800d1f6:	f7ff ff7d 	bl	800d0f4 <xTaskCreateStatic>
 800d1fa:	4b17      	ldr	r3, [pc, #92]	@ (800d258 <vTaskStartScheduler+0x88>)
 800d1fc:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800d1fe:	b1c0      	cbz	r0, 800d232 <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800d200:	f000 fc06 	bl	800da10 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d204:	2801      	cmp	r0, #1
 800d206:	d115      	bne.n	800d234 <vTaskStartScheduler+0x64>
 800d208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20c:	f383 8811 	msr	BASEPRI, r3
 800d210:	f3bf 8f6f 	isb	sy
 800d214:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800d218:	4b10      	ldr	r3, [pc, #64]	@ (800d25c <vTaskStartScheduler+0x8c>)
 800d21a:	f04f 32ff 	mov.w	r2, #4294967295
 800d21e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d220:	4b0f      	ldr	r3, [pc, #60]	@ (800d260 <vTaskStartScheduler+0x90>)
 800d222:	2201      	movs	r2, #1
 800d224:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d226:	4b0f      	ldr	r3, [pc, #60]	@ (800d264 <vTaskStartScheduler+0x94>)
 800d228:	2200      	movs	r2, #0
 800d22a:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d22c:	f7fc fb74 	bl	8009918 <xPortStartScheduler>
		}
 800d230:	e003      	b.n	800d23a <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 800d232:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d234:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d238:	d001      	beq.n	800d23e <vTaskStartScheduler+0x6e>
}
 800d23a:	b008      	add	sp, #32
 800d23c:	bd10      	pop	{r4, pc}
 800d23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d24e:	e7fe      	b.n	800d24e <vTaskStartScheduler+0x7e>
 800d250:	0800e150 	.word	0x0800e150
 800d254:	0800d051 	.word	0x0800d051
 800d258:	20003dd0 	.word	0x20003dd0
 800d25c:	20003dd4 	.word	0x20003dd4
 800d260:	20003de8 	.word	0x20003de8
 800d264:	20003df0 	.word	0x20003df0

0800d268 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d268:	4a02      	ldr	r2, [pc, #8]	@ (800d274 <vTaskSuspendAll+0xc>)
 800d26a:	6813      	ldr	r3, [r2, #0]
 800d26c:	3301      	adds	r3, #1
 800d26e:	6013      	str	r3, [r2, #0]
}
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	20003dcc 	.word	0x20003dcc

0800d278 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d278:	4b01      	ldr	r3, [pc, #4]	@ (800d280 <xTaskGetTickCount+0x8>)
 800d27a:	6818      	ldr	r0, [r3, #0]
}
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	20003df0 	.word	0x20003df0

0800d284 <xTaskGetTickCountFromISR>:
{
 800d284:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d286:	f7fc fbd3 	bl	8009a30 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800d28a:	4b01      	ldr	r3, [pc, #4]	@ (800d290 <xTaskGetTickCountFromISR+0xc>)
 800d28c:	6818      	ldr	r0, [r3, #0]
}
 800d28e:	bd08      	pop	{r3, pc}
 800d290:	20003df0 	.word	0x20003df0

0800d294 <xTaskIncrementTick>:
{
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d296:	4b3a      	ldr	r3, [pc, #232]	@ (800d380 <xTaskIncrementTick+0xec>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d169      	bne.n	800d372 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d29e:	4b39      	ldr	r3, [pc, #228]	@ (800d384 <xTaskIncrementTick+0xf0>)
 800d2a0:	681d      	ldr	r5, [r3, #0]
 800d2a2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800d2a4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d2a6:	b9c5      	cbnz	r5, 800d2da <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d2a8:	4b37      	ldr	r3, [pc, #220]	@ (800d388 <xTaskIncrementTick+0xf4>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	b143      	cbz	r3, 800d2c2 <xTaskIncrementTick+0x2e>
 800d2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b4:	f383 8811 	msr	BASEPRI, r3
 800d2b8:	f3bf 8f6f 	isb	sy
 800d2bc:	f3bf 8f4f 	dsb	sy
 800d2c0:	e7fe      	b.n	800d2c0 <xTaskIncrementTick+0x2c>
 800d2c2:	4a31      	ldr	r2, [pc, #196]	@ (800d388 <xTaskIncrementTick+0xf4>)
 800d2c4:	6811      	ldr	r1, [r2, #0]
 800d2c6:	4b31      	ldr	r3, [pc, #196]	@ (800d38c <xTaskIncrementTick+0xf8>)
 800d2c8:	6818      	ldr	r0, [r3, #0]
 800d2ca:	6010      	str	r0, [r2, #0]
 800d2cc:	6019      	str	r1, [r3, #0]
 800d2ce:	4a30      	ldr	r2, [pc, #192]	@ (800d390 <xTaskIncrementTick+0xfc>)
 800d2d0:	6813      	ldr	r3, [r2, #0]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	f7ff fd87 	bl	800cde8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d2da:	4b2e      	ldr	r3, [pc, #184]	@ (800d394 <xTaskIncrementTick+0x100>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	42ab      	cmp	r3, r5
 800d2e0:	d93d      	bls.n	800d35e <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800d2e2:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2e4:	4b2c      	ldr	r3, [pc, #176]	@ (800d398 <xTaskIncrementTick+0x104>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d2ee:	009a      	lsls	r2, r3, #2
 800d2f0:	4b2a      	ldr	r3, [pc, #168]	@ (800d39c <xTaskIncrementTick+0x108>)
 800d2f2:	589b      	ldr	r3, [r3, r2]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d900      	bls.n	800d2fa <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800d2f8:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800d2fa:	4b29      	ldr	r3, [pc, #164]	@ (800d3a0 <xTaskIncrementTick+0x10c>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d03c      	beq.n	800d37c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800d302:	2701      	movs	r7, #1
	return xSwitchRequired;
 800d304:	e03a      	b.n	800d37c <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800d306:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d308:	4b1f      	ldr	r3, [pc, #124]	@ (800d388 <xTaskIncrementTick+0xf4>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	b343      	cbz	r3, 800d362 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d310:	4b1d      	ldr	r3, [pc, #116]	@ (800d388 <xTaskIncrementTick+0xf4>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d318:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800d31a:	429d      	cmp	r5, r3
 800d31c:	d326      	bcc.n	800d36c <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d31e:	1d26      	adds	r6, r4, #4
 800d320:	4630      	mov	r0, r6
 800d322:	f7fb ffcb 	bl	80092bc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d326:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d328:	b11b      	cbz	r3, 800d332 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d32a:	f104 0018 	add.w	r0, r4, #24
 800d32e:	f7fb ffc5 	bl	80092bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d332:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d334:	4a1b      	ldr	r2, [pc, #108]	@ (800d3a4 <xTaskIncrementTick+0x110>)
 800d336:	6812      	ldr	r2, [r2, #0]
 800d338:	4293      	cmp	r3, r2
 800d33a:	d901      	bls.n	800d340 <xTaskIncrementTick+0xac>
 800d33c:	4a19      	ldr	r2, [pc, #100]	@ (800d3a4 <xTaskIncrementTick+0x110>)
 800d33e:	6013      	str	r3, [r2, #0]
 800d340:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d344:	009a      	lsls	r2, r3, #2
 800d346:	4631      	mov	r1, r6
 800d348:	4814      	ldr	r0, [pc, #80]	@ (800d39c <xTaskIncrementTick+0x108>)
 800d34a:	4410      	add	r0, r2
 800d34c:	f7fb ff92 	bl	8009274 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d350:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d352:	4b11      	ldr	r3, [pc, #68]	@ (800d398 <xTaskIncrementTick+0x104>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d358:	429a      	cmp	r2, r3
 800d35a:	d2d4      	bcs.n	800d306 <xTaskIncrementTick+0x72>
 800d35c:	e7d4      	b.n	800d308 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800d35e:	2700      	movs	r7, #0
 800d360:	e7d2      	b.n	800d308 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d362:	4b0c      	ldr	r3, [pc, #48]	@ (800d394 <xTaskIncrementTick+0x100>)
 800d364:	f04f 32ff 	mov.w	r2, #4294967295
 800d368:	601a      	str	r2, [r3, #0]
					break;
 800d36a:	e7bb      	b.n	800d2e4 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800d36c:	4a09      	ldr	r2, [pc, #36]	@ (800d394 <xTaskIncrementTick+0x100>)
 800d36e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d370:	e7b8      	b.n	800d2e4 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800d372:	4a0d      	ldr	r2, [pc, #52]	@ (800d3a8 <xTaskIncrementTick+0x114>)
 800d374:	6813      	ldr	r3, [r2, #0]
 800d376:	3301      	adds	r3, #1
 800d378:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800d37a:	2700      	movs	r7, #0
}
 800d37c:	4638      	mov	r0, r7
 800d37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d380:	20003dcc 	.word	0x20003dcc
 800d384:	20003df0 	.word	0x20003df0
 800d388:	20003e3c 	.word	0x20003e3c
 800d38c:	20003e38 	.word	0x20003e38
 800d390:	20003ddc 	.word	0x20003ddc
 800d394:	20003dd4 	.word	0x20003dd4
 800d398:	200042c8 	.word	0x200042c8
 800d39c:	20003e68 	.word	0x20003e68
 800d3a0:	20003de0 	.word	0x20003de0
 800d3a4:	20003dec 	.word	0x20003dec
 800d3a8:	20003de4 	.word	0x20003de4

0800d3ac <xTaskResumeAll>:
{
 800d3ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800d3ae:	4b35      	ldr	r3, [pc, #212]	@ (800d484 <xTaskResumeAll+0xd8>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	b943      	cbnz	r3, 800d3c6 <xTaskResumeAll+0x1a>
 800d3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	e7fe      	b.n	800d3c4 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800d3c6:	f7fc fa0d 	bl	80097e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d3ca:	4b2e      	ldr	r3, [pc, #184]	@ (800d484 <xTaskResumeAll+0xd8>)
 800d3cc:	681a      	ldr	r2, [r3, #0]
 800d3ce:	3a01      	subs	r2, #1
 800d3d0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d14f      	bne.n	800d478 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3d8:	4b2b      	ldr	r3, [pc, #172]	@ (800d488 <xTaskResumeAll+0xdc>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	b90b      	cbnz	r3, 800d3e2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d3de:	2400      	movs	r4, #0
 800d3e0:	e04b      	b.n	800d47a <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800d3e2:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d3e4:	4b29      	ldr	r3, [pc, #164]	@ (800d48c <xTaskResumeAll+0xe0>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	b31b      	cbz	r3, 800d432 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3ea:	4b28      	ldr	r3, [pc, #160]	@ (800d48c <xTaskResumeAll+0xe0>)
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3f0:	f104 0018 	add.w	r0, r4, #24
 800d3f4:	f7fb ff62 	bl	80092bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3f8:	1d25      	adds	r5, r4, #4
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f7fb ff5e 	bl	80092bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d400:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d402:	4b23      	ldr	r3, [pc, #140]	@ (800d490 <xTaskResumeAll+0xe4>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4298      	cmp	r0, r3
 800d408:	d901      	bls.n	800d40e <xTaskResumeAll+0x62>
 800d40a:	4b21      	ldr	r3, [pc, #132]	@ (800d490 <xTaskResumeAll+0xe4>)
 800d40c:	6018      	str	r0, [r3, #0]
 800d40e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d412:	4629      	mov	r1, r5
 800d414:	4b1f      	ldr	r3, [pc, #124]	@ (800d494 <xTaskResumeAll+0xe8>)
 800d416:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d41a:	f7fb ff2b 	bl	8009274 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d41e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d420:	4b1d      	ldr	r3, [pc, #116]	@ (800d498 <xTaskResumeAll+0xec>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d426:	429a      	cmp	r2, r3
 800d428:	d3dc      	bcc.n	800d3e4 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800d42a:	4b1c      	ldr	r3, [pc, #112]	@ (800d49c <xTaskResumeAll+0xf0>)
 800d42c:	2201      	movs	r2, #1
 800d42e:	601a      	str	r2, [r3, #0]
 800d430:	e7d8      	b.n	800d3e4 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800d432:	b10c      	cbz	r4, 800d438 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800d434:	f7ff fcd8 	bl	800cde8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d438:	4b19      	ldr	r3, [pc, #100]	@ (800d4a0 <xTaskResumeAll+0xf4>)
 800d43a:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d43c:	b984      	cbnz	r4, 800d460 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800d43e:	4b17      	ldr	r3, [pc, #92]	@ (800d49c <xTaskResumeAll+0xf0>)
 800d440:	681c      	ldr	r4, [r3, #0]
 800d442:	b1d4      	cbz	r4, 800d47a <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800d444:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d44c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d450:	f3bf 8f4f 	dsb	sy
 800d454:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d458:	2401      	movs	r4, #1
 800d45a:	e00e      	b.n	800d47a <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d45c:	3c01      	subs	r4, #1
 800d45e:	d007      	beq.n	800d470 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800d460:	f7ff ff18 	bl	800d294 <xTaskIncrementTick>
 800d464:	2800      	cmp	r0, #0
 800d466:	d0f9      	beq.n	800d45c <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800d468:	4b0c      	ldr	r3, [pc, #48]	@ (800d49c <xTaskResumeAll+0xf0>)
 800d46a:	2201      	movs	r2, #1
 800d46c:	601a      	str	r2, [r3, #0]
 800d46e:	e7f5      	b.n	800d45c <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800d470:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a0 <xTaskResumeAll+0xf4>)
 800d472:	2200      	movs	r2, #0
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	e7e2      	b.n	800d43e <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800d478:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d47a:	f7fc f9d5 	bl	8009828 <vPortExitCritical>
}
 800d47e:	4620      	mov	r0, r4
 800d480:	bd38      	pop	{r3, r4, r5, pc}
 800d482:	bf00      	nop
 800d484:	20003dcc 	.word	0x20003dcc
 800d488:	20003df4 	.word	0x20003df4
 800d48c:	20003e24 	.word	0x20003e24
 800d490:	20003dec 	.word	0x20003dec
 800d494:	20003e68 	.word	0x20003e68
 800d498:	200042c8 	.word	0x200042c8
 800d49c:	20003de0 	.word	0x20003de0
 800d4a0:	20003de4 	.word	0x20003de4

0800d4a4 <vTaskDelay>:
	{
 800d4a4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d4a6:	b1a8      	cbz	r0, 800d4d4 <vTaskDelay+0x30>
 800d4a8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800d4aa:	4b10      	ldr	r3, [pc, #64]	@ (800d4ec <vTaskDelay+0x48>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	b143      	cbz	r3, 800d4c2 <vTaskDelay+0x1e>
 800d4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	e7fe      	b.n	800d4c0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800d4c2:	f7ff fed1 	bl	800d268 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d4c6:	2100      	movs	r1, #0
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	f7ff fdd5 	bl	800d078 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800d4ce:	f7ff ff6d 	bl	800d3ac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800d4d2:	b948      	cbnz	r0, 800d4e8 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800d4d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d4d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d4dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d4e0:	f3bf 8f4f 	dsb	sy
 800d4e4:	f3bf 8f6f 	isb	sy
	}
 800d4e8:	bd10      	pop	{r4, pc}
 800d4ea:	bf00      	nop
 800d4ec:	20003dcc 	.word	0x20003dcc

0800d4f0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4f0:	4b20      	ldr	r3, [pc, #128]	@ (800d574 <vTaskSwitchContext+0x84>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	b11b      	cbz	r3, 800d4fe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800d4f6:	4b20      	ldr	r3, [pc, #128]	@ (800d578 <vTaskSwitchContext+0x88>)
 800d4f8:	2201      	movs	r2, #1
 800d4fa:	601a      	str	r2, [r3, #0]
 800d4fc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800d4fe:	4b1e      	ldr	r3, [pc, #120]	@ (800d578 <vTaskSwitchContext+0x88>)
 800d500:	2200      	movs	r2, #0
 800d502:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d504:	4b1d      	ldr	r3, [pc, #116]	@ (800d57c <vTaskSwitchContext+0x8c>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d50c:	008a      	lsls	r2, r1, #2
 800d50e:	491c      	ldr	r1, [pc, #112]	@ (800d580 <vTaskSwitchContext+0x90>)
 800d510:	588a      	ldr	r2, [r1, r2]
 800d512:	b95a      	cbnz	r2, 800d52c <vTaskSwitchContext+0x3c>
 800d514:	b10b      	cbz	r3, 800d51a <vTaskSwitchContext+0x2a>
 800d516:	3b01      	subs	r3, #1
 800d518:	e7f6      	b.n	800d508 <vTaskSwitchContext+0x18>
 800d51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d51e:	f383 8811 	msr	BASEPRI, r3
 800d522:	f3bf 8f6f 	isb	sy
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	e7fe      	b.n	800d52a <vTaskSwitchContext+0x3a>
 800d52c:	4608      	mov	r0, r1
 800d52e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800d532:	008a      	lsls	r2, r1, #2
 800d534:	4402      	add	r2, r0
 800d536:	6851      	ldr	r1, [r2, #4]
 800d538:	6849      	ldr	r1, [r1, #4]
 800d53a:	6051      	str	r1, [r2, #4]
 800d53c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800d540:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d544:	3208      	adds	r2, #8
 800d546:	4402      	add	r2, r0
 800d548:	4291      	cmp	r1, r2
 800d54a:	d00b      	beq.n	800d564 <vTaskSwitchContext+0x74>
 800d54c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800d550:	0091      	lsls	r1, r2, #2
 800d552:	4a0b      	ldr	r2, [pc, #44]	@ (800d580 <vTaskSwitchContext+0x90>)
 800d554:	440a      	add	r2, r1
 800d556:	6852      	ldr	r2, [r2, #4]
 800d558:	68d1      	ldr	r1, [r2, #12]
 800d55a:	4a0a      	ldr	r2, [pc, #40]	@ (800d584 <vTaskSwitchContext+0x94>)
 800d55c:	6011      	str	r1, [r2, #0]
 800d55e:	4a07      	ldr	r2, [pc, #28]	@ (800d57c <vTaskSwitchContext+0x8c>)
 800d560:	6013      	str	r3, [r2, #0]
}
 800d562:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d564:	6848      	ldr	r0, [r1, #4]
 800d566:	4662      	mov	r2, ip
 800d568:	0091      	lsls	r1, r2, #2
 800d56a:	4a05      	ldr	r2, [pc, #20]	@ (800d580 <vTaskSwitchContext+0x90>)
 800d56c:	440a      	add	r2, r1
 800d56e:	6050      	str	r0, [r2, #4]
 800d570:	e7ec      	b.n	800d54c <vTaskSwitchContext+0x5c>
 800d572:	bf00      	nop
 800d574:	20003dcc 	.word	0x20003dcc
 800d578:	20003de0 	.word	0x20003de0
 800d57c:	20003dec 	.word	0x20003dec
 800d580:	20003e68 	.word	0x20003e68
 800d584:	200042c8 	.word	0x200042c8

0800d588 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800d588:	b158      	cbz	r0, 800d5a2 <vTaskPlaceOnEventList+0x1a>
{
 800d58a:	b510      	push	{r4, lr}
 800d58c:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d58e:	4a09      	ldr	r2, [pc, #36]	@ (800d5b4 <vTaskPlaceOnEventList+0x2c>)
 800d590:	6811      	ldr	r1, [r2, #0]
 800d592:	3118      	adds	r1, #24
 800d594:	f7fb fe79 	bl	800928a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d598:	2101      	movs	r1, #1
 800d59a:	4620      	mov	r0, r4
 800d59c:	f7ff fd6c 	bl	800d078 <prvAddCurrentTaskToDelayedList>
}
 800d5a0:	bd10      	pop	{r4, pc}
 800d5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a6:	f383 8811 	msr	BASEPRI, r3
 800d5aa:	f3bf 8f6f 	isb	sy
 800d5ae:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800d5b2:	e7fe      	b.n	800d5b2 <vTaskPlaceOnEventList+0x2a>
 800d5b4:	200042c8 	.word	0x200042c8

0800d5b8 <vTaskPlaceOnEventListRestricted>:
	{
 800d5b8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800d5ba:	b170      	cbz	r0, 800d5da <vTaskPlaceOnEventListRestricted+0x22>
 800d5bc:	460d      	mov	r5, r1
 800d5be:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d5ec <vTaskPlaceOnEventListRestricted+0x34>)
 800d5c2:	6811      	ldr	r1, [r2, #0]
 800d5c4:	3118      	adds	r1, #24
 800d5c6:	f7fb fe55 	bl	8009274 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800d5ca:	b10c      	cbz	r4, 800d5d0 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800d5cc:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	f7ff fd50 	bl	800d078 <prvAddCurrentTaskToDelayedList>
	}
 800d5d8:	bd38      	pop	{r3, r4, r5, pc}
 800d5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800d5ea:	e7fe      	b.n	800d5ea <vTaskPlaceOnEventListRestricted+0x32>
 800d5ec:	200042c8 	.word	0x200042c8

0800d5f0 <xTaskRemoveFromEventList>:
{
 800d5f0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5f2:	68c3      	ldr	r3, [r0, #12]
 800d5f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d5f6:	b324      	cbz	r4, 800d642 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d5f8:	f104 0518 	add.w	r5, r4, #24
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f7fb fe5d 	bl	80092bc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d602:	4b18      	ldr	r3, [pc, #96]	@ (800d664 <xTaskRemoveFromEventList+0x74>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	bb2b      	cbnz	r3, 800d654 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d608:	1d25      	adds	r5, r4, #4
 800d60a:	4628      	mov	r0, r5
 800d60c:	f7fb fe56 	bl	80092bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d610:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d612:	4b15      	ldr	r3, [pc, #84]	@ (800d668 <xTaskRemoveFromEventList+0x78>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4298      	cmp	r0, r3
 800d618:	d901      	bls.n	800d61e <xTaskRemoveFromEventList+0x2e>
 800d61a:	4b13      	ldr	r3, [pc, #76]	@ (800d668 <xTaskRemoveFromEventList+0x78>)
 800d61c:	6018      	str	r0, [r3, #0]
 800d61e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d622:	4629      	mov	r1, r5
 800d624:	4b11      	ldr	r3, [pc, #68]	@ (800d66c <xTaskRemoveFromEventList+0x7c>)
 800d626:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d62a:	f7fb fe23 	bl	8009274 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d62e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d630:	4b0f      	ldr	r3, [pc, #60]	@ (800d670 <xTaskRemoveFromEventList+0x80>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d636:	429a      	cmp	r2, r3
 800d638:	d911      	bls.n	800d65e <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800d63a:	2001      	movs	r0, #1
 800d63c:	4b0d      	ldr	r3, [pc, #52]	@ (800d674 <xTaskRemoveFromEventList+0x84>)
 800d63e:	6018      	str	r0, [r3, #0]
}
 800d640:	bd38      	pop	{r3, r4, r5, pc}
 800d642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d646:	f383 8811 	msr	BASEPRI, r3
 800d64a:	f3bf 8f6f 	isb	sy
 800d64e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800d652:	e7fe      	b.n	800d652 <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d654:	4629      	mov	r1, r5
 800d656:	4808      	ldr	r0, [pc, #32]	@ (800d678 <xTaskRemoveFromEventList+0x88>)
 800d658:	f7fb fe0c 	bl	8009274 <vListInsertEnd>
 800d65c:	e7e7      	b.n	800d62e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800d65e:	2000      	movs	r0, #0
	return xReturn;
 800d660:	e7ee      	b.n	800d640 <xTaskRemoveFromEventList+0x50>
 800d662:	bf00      	nop
 800d664:	20003dcc 	.word	0x20003dcc
 800d668:	20003dec 	.word	0x20003dec
 800d66c:	20003e68 	.word	0x20003e68
 800d670:	200042c8 	.word	0x200042c8
 800d674:	20003de0 	.word	0x20003de0
 800d678:	20003e24 	.word	0x20003e24

0800d67c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d67c:	4b03      	ldr	r3, [pc, #12]	@ (800d68c <vTaskInternalSetTimeOutState+0x10>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d682:	4b03      	ldr	r3, [pc, #12]	@ (800d690 <vTaskInternalSetTimeOutState+0x14>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6043      	str	r3, [r0, #4]
}
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	20003ddc 	.word	0x20003ddc
 800d690:	20003df0 	.word	0x20003df0

0800d694 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800d694:	b1e0      	cbz	r0, 800d6d0 <xTaskCheckForTimeOut+0x3c>
{
 800d696:	b570      	push	{r4, r5, r6, lr}
 800d698:	460c      	mov	r4, r1
 800d69a:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800d69c:	b309      	cbz	r1, 800d6e2 <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800d69e:	f7fc f8a1 	bl	80097e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800d6a2:	4b1c      	ldr	r3, [pc, #112]	@ (800d714 <xTaskCheckForTimeOut+0x80>)
 800d6a4:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d6a6:	686b      	ldr	r3, [r5, #4]
 800d6a8:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800d6aa:	6822      	ldr	r2, [r4, #0]
 800d6ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d6b0:	d028      	beq.n	800d704 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d6b2:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800d718 <xTaskCheckForTimeOut+0x84>
 800d6b6:	f8dc c000 	ldr.w	ip, [ip]
 800d6ba:	682e      	ldr	r6, [r5, #0]
 800d6bc:	4566      	cmp	r6, ip
 800d6be:	d001      	beq.n	800d6c4 <xTaskCheckForTimeOut+0x30>
 800d6c0:	428b      	cmp	r3, r1
 800d6c2:	d924      	bls.n	800d70e <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d6c4:	4282      	cmp	r2, r0
 800d6c6:	d815      	bhi.n	800d6f4 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800d6cc:	2401      	movs	r4, #1
 800d6ce:	e01a      	b.n	800d706 <xTaskCheckForTimeOut+0x72>
 800d6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800d6e0:	e7fe      	b.n	800d6e0 <xTaskCheckForTimeOut+0x4c>
 800d6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800d6f2:	e7fe      	b.n	800d6f2 <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 800d6f4:	1a5b      	subs	r3, r3, r1
 800d6f6:	4413      	add	r3, r2
 800d6f8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f7ff ffbe 	bl	800d67c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d700:	2400      	movs	r4, #0
 800d702:	e000      	b.n	800d706 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 800d704:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d706:	f7fc f88f 	bl	8009828 <vPortExitCritical>
}
 800d70a:	4620      	mov	r0, r4
 800d70c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800d70e:	2401      	movs	r4, #1
 800d710:	e7f9      	b.n	800d706 <xTaskCheckForTimeOut+0x72>
 800d712:	bf00      	nop
 800d714:	20003df0 	.word	0x20003df0
 800d718:	20003ddc 	.word	0x20003ddc

0800d71c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800d71c:	4b01      	ldr	r3, [pc, #4]	@ (800d724 <vTaskMissedYield+0x8>)
 800d71e:	2201      	movs	r2, #1
 800d720:	601a      	str	r2, [r3, #0]
}
 800d722:	4770      	bx	lr
 800d724:	20003de0 	.word	0x20003de0

0800d728 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800d728:	4b01      	ldr	r3, [pc, #4]	@ (800d730 <xTaskGetCurrentTaskHandle+0x8>)
 800d72a:	6818      	ldr	r0, [r3, #0]
	}
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	200042c8 	.word	0x200042c8

0800d734 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800d734:	4b05      	ldr	r3, [pc, #20]	@ (800d74c <xTaskGetSchedulerState+0x18>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	b133      	cbz	r3, 800d748 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d73a:	4b05      	ldr	r3, [pc, #20]	@ (800d750 <xTaskGetSchedulerState+0x1c>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	b10b      	cbz	r3, 800d744 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800d740:	2000      	movs	r0, #0
	}
 800d742:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800d744:	2002      	movs	r0, #2
 800d746:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d748:	2001      	movs	r0, #1
 800d74a:	4770      	bx	lr
 800d74c:	20003de8 	.word	0x20003de8
 800d750:	20003dcc 	.word	0x20003dcc

0800d754 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800d754:	2800      	cmp	r0, #0
 800d756:	d03e      	beq.n	800d7d6 <xTaskPriorityInherit+0x82>
	{
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d75c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800d75e:	4a20      	ldr	r2, [pc, #128]	@ (800d7e0 <xTaskPriorityInherit+0x8c>)
 800d760:	6812      	ldr	r2, [r2, #0]
 800d762:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d764:	4293      	cmp	r3, r2
 800d766:	d22e      	bcs.n	800d7c6 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d768:	6982      	ldr	r2, [r0, #24]
 800d76a:	2a00      	cmp	r2, #0
 800d76c:	db05      	blt.n	800d77a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d76e:	4a1c      	ldr	r2, [pc, #112]	@ (800d7e0 <xTaskPriorityInherit+0x8c>)
 800d770:	6812      	ldr	r2, [r2, #0]
 800d772:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d774:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800d778:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d77a:	6961      	ldr	r1, [r4, #20]
 800d77c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d780:	4a18      	ldr	r2, [pc, #96]	@ (800d7e4 <xTaskPriorityInherit+0x90>)
 800d782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d786:	4299      	cmp	r1, r3
 800d788:	d005      	beq.n	800d796 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d78a:	4b15      	ldr	r3, [pc, #84]	@ (800d7e0 <xTaskPriorityInherit+0x8c>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d790:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800d792:	2001      	movs	r0, #1
	}
 800d794:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d796:	1d25      	adds	r5, r4, #4
 800d798:	4628      	mov	r0, r5
 800d79a:	f7fb fd8f 	bl	80092bc <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d79e:	4b10      	ldr	r3, [pc, #64]	@ (800d7e0 <xTaskPriorityInherit+0x8c>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800d7a4:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d7a6:	4b10      	ldr	r3, [pc, #64]	@ (800d7e8 <xTaskPriorityInherit+0x94>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4298      	cmp	r0, r3
 800d7ac:	d901      	bls.n	800d7b2 <xTaskPriorityInherit+0x5e>
 800d7ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d7e8 <xTaskPriorityInherit+0x94>)
 800d7b0:	6018      	str	r0, [r3, #0]
 800d7b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d7b6:	4629      	mov	r1, r5
 800d7b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d7e4 <xTaskPriorityInherit+0x90>)
 800d7ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d7be:	f7fb fd59 	bl	8009274 <vListInsertEnd>
				xReturn = pdTRUE;
 800d7c2:	2001      	movs	r0, #1
 800d7c4:	e7e6      	b.n	800d794 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d7c6:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d7c8:	4b05      	ldr	r3, [pc, #20]	@ (800d7e0 <xTaskPriorityInherit+0x8c>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d303      	bcc.n	800d7da <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	e7de      	b.n	800d794 <xTaskPriorityInherit+0x40>
 800d7d6:	2000      	movs	r0, #0
	}
 800d7d8:	4770      	bx	lr
					xReturn = pdTRUE;
 800d7da:	2001      	movs	r0, #1
		return xReturn;
 800d7dc:	e7da      	b.n	800d794 <xTaskPriorityInherit+0x40>
 800d7de:	bf00      	nop
 800d7e0:	200042c8 	.word	0x200042c8
 800d7e4:	20003e68 	.word	0x20003e68
 800d7e8:	20003dec 	.word	0x20003dec

0800d7ec <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d03b      	beq.n	800d868 <xTaskPriorityDisinherit+0x7c>
	{
 800d7f0:	b538      	push	{r3, r4, r5, lr}
 800d7f2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800d7f4:	4b1e      	ldr	r3, [pc, #120]	@ (800d870 <xTaskPriorityDisinherit+0x84>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4283      	cmp	r3, r0
 800d7fa:	d008      	beq.n	800d80e <xTaskPriorityDisinherit+0x22>
 800d7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d800:	f383 8811 	msr	BASEPRI, r3
 800d804:	f3bf 8f6f 	isb	sy
 800d808:	f3bf 8f4f 	dsb	sy
 800d80c:	e7fe      	b.n	800d80c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800d80e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d810:	b943      	cbnz	r3, 800d824 <xTaskPriorityDisinherit+0x38>
 800d812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	e7fe      	b.n	800d822 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800d824:	3b01      	subs	r3, #1
 800d826:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d828:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800d82a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d82c:	4291      	cmp	r1, r2
 800d82e:	d01d      	beq.n	800d86c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d830:	b10b      	cbz	r3, 800d836 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800d832:	2000      	movs	r0, #0
	}
 800d834:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d836:	1d05      	adds	r5, r0, #4
 800d838:	4628      	mov	r0, r5
 800d83a:	f7fb fd3f 	bl	80092bc <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d83e:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800d840:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d842:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800d846:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800d848:	4b0a      	ldr	r3, [pc, #40]	@ (800d874 <xTaskPriorityDisinherit+0x88>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4298      	cmp	r0, r3
 800d84e:	d901      	bls.n	800d854 <xTaskPriorityDisinherit+0x68>
 800d850:	4b08      	ldr	r3, [pc, #32]	@ (800d874 <xTaskPriorityDisinherit+0x88>)
 800d852:	6018      	str	r0, [r3, #0]
 800d854:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d858:	4629      	mov	r1, r5
 800d85a:	4b07      	ldr	r3, [pc, #28]	@ (800d878 <xTaskPriorityDisinherit+0x8c>)
 800d85c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d860:	f7fb fd08 	bl	8009274 <vListInsertEnd>
					xReturn = pdTRUE;
 800d864:	2001      	movs	r0, #1
 800d866:	e7e5      	b.n	800d834 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800d868:	2000      	movs	r0, #0
	}
 800d86a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800d86c:	2000      	movs	r0, #0
 800d86e:	e7e1      	b.n	800d834 <xTaskPriorityDisinherit+0x48>
 800d870:	200042c8 	.word	0x200042c8
 800d874:	20003dec 	.word	0x20003dec
 800d878:	20003e68 	.word	0x20003e68

0800d87c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800d87c:	2800      	cmp	r0, #0
 800d87e:	d046      	beq.n	800d90e <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800d884:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800d886:	b943      	cbnz	r3, 800d89a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800d888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	e7fe      	b.n	800d898 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d89a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800d89c:	428a      	cmp	r2, r1
 800d89e:	d200      	bcs.n	800d8a2 <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d8a0:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d8a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d8a4:	4291      	cmp	r1, r2
 800d8a6:	d001      	beq.n	800d8ac <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d000      	beq.n	800d8ae <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800d8ac:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800d8ae:	4b18      	ldr	r3, [pc, #96]	@ (800d910 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	42a3      	cmp	r3, r4
 800d8b4:	d022      	beq.n	800d8fc <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800d8b6:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d8b8:	69a3      	ldr	r3, [r4, #24]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	db02      	blt.n	800d8c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8be:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800d8c2:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8c4:	6962      	ldr	r2, [r4, #20]
 800d8c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800d8ca:	4b12      	ldr	r3, [pc, #72]	@ (800d914 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d8cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d1eb      	bne.n	800d8ac <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8d4:	1d25      	adds	r5, r4, #4
 800d8d6:	4628      	mov	r0, r5
 800d8d8:	f7fb fcf0 	bl	80092bc <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800d8dc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800d8de:	4b0e      	ldr	r3, [pc, #56]	@ (800d918 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4298      	cmp	r0, r3
 800d8e4:	d901      	bls.n	800d8ea <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800d8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800d918 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800d8e8:	6018      	str	r0, [r3, #0]
 800d8ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	4b08      	ldr	r3, [pc, #32]	@ (800d914 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800d8f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8f6:	f7fb fcbd 	bl	8009274 <vListInsertEnd>
	}
 800d8fa:	e7d7      	b.n	800d8ac <vTaskPriorityDisinheritAfterTimeout+0x30>
 800d8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800d90c:	e7fe      	b.n	800d90c <vTaskPriorityDisinheritAfterTimeout+0x90>
 800d90e:	4770      	bx	lr
 800d910:	200042c8 	.word	0x200042c8
 800d914:	20003e68 	.word	0x20003e68
 800d918:	20003dec 	.word	0x20003dec

0800d91c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800d91c:	4b05      	ldr	r3, [pc, #20]	@ (800d934 <pvTaskIncrementMutexHeldCount+0x18>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	b123      	cbz	r3, 800d92c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800d922:	4b04      	ldr	r3, [pc, #16]	@ (800d934 <pvTaskIncrementMutexHeldCount+0x18>)
 800d924:	681a      	ldr	r2, [r3, #0]
 800d926:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800d928:	3301      	adds	r3, #1
 800d92a:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800d92c:	4b01      	ldr	r3, [pc, #4]	@ (800d934 <pvTaskIncrementMutexHeldCount+0x18>)
 800d92e:	6818      	ldr	r0, [r3, #0]
	}
 800d930:	4770      	bx	lr
 800d932:	bf00      	nop
 800d934:	200042c8 	.word	0x200042c8

0800d938 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d938:	4b06      	ldr	r3, [pc, #24]	@ (800d954 <prvGetNextExpireTime+0x1c>)
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	6813      	ldr	r3, [r2, #0]
 800d93e:	b92b      	cbnz	r3, 800d94c <prvGetNextExpireTime+0x14>
 800d940:	2301      	movs	r3, #1
 800d942:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d944:	b923      	cbnz	r3, 800d950 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d946:	68d3      	ldr	r3, [r2, #12]
 800d948:	6818      	ldr	r0, [r3, #0]
 800d94a:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d94c:	2300      	movs	r3, #0
 800d94e:	e7f8      	b.n	800d942 <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d950:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800d952:	4770      	bx	lr
 800d954:	200043cc 	.word	0x200043cc

0800d958 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d958:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d95a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d95c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d95e:	4291      	cmp	r1, r2
 800d960:	d80c      	bhi.n	800d97c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d962:	1ad2      	subs	r2, r2, r3
 800d964:	6983      	ldr	r3, [r0, #24]
 800d966:	429a      	cmp	r2, r3
 800d968:	d301      	bcc.n	800d96e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d96a:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800d96c:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d96e:	1d01      	adds	r1, r0, #4
 800d970:	4b09      	ldr	r3, [pc, #36]	@ (800d998 <prvInsertTimerInActiveList+0x40>)
 800d972:	6818      	ldr	r0, [r3, #0]
 800d974:	f7fb fc89 	bl	800928a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d978:	2000      	movs	r0, #0
 800d97a:	e7f7      	b.n	800d96c <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d201      	bcs.n	800d984 <prvInsertTimerInActiveList+0x2c>
 800d980:	4299      	cmp	r1, r3
 800d982:	d206      	bcs.n	800d992 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d984:	1d01      	adds	r1, r0, #4
 800d986:	4b05      	ldr	r3, [pc, #20]	@ (800d99c <prvInsertTimerInActiveList+0x44>)
 800d988:	6818      	ldr	r0, [r3, #0]
 800d98a:	f7fb fc7e 	bl	800928a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800d98e:	2000      	movs	r0, #0
 800d990:	e7ec      	b.n	800d96c <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800d992:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800d994:	e7ea      	b.n	800d96c <prvInsertTimerInActiveList+0x14>
 800d996:	bf00      	nop
 800d998:	200043c8 	.word	0x200043c8
 800d99c:	200043cc 	.word	0x200043cc

0800d9a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d9a0:	b530      	push	{r4, r5, lr}
 800d9a2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d9a4:	f7fb ff1e 	bl	80097e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d9a8:	4b11      	ldr	r3, [pc, #68]	@ (800d9f0 <prvCheckForValidListAndQueue+0x50>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	b11b      	cbz	r3, 800d9b6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d9ae:	f7fb ff3b 	bl	8009828 <vPortExitCritical>
}
 800d9b2:	b003      	add	sp, #12
 800d9b4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800d9b6:	4d0f      	ldr	r5, [pc, #60]	@ (800d9f4 <prvCheckForValidListAndQueue+0x54>)
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	f7fb fc4d 	bl	8009258 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d9be:	4c0e      	ldr	r4, [pc, #56]	@ (800d9f8 <prvCheckForValidListAndQueue+0x58>)
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f7fb fc49 	bl	8009258 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d9fc <prvCheckForValidListAndQueue+0x5c>)
 800d9c8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800da00 <prvCheckForValidListAndQueue+0x60>)
 800d9cc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800da04 <prvCheckForValidListAndQueue+0x64>)
 800d9d4:	4a0c      	ldr	r2, [pc, #48]	@ (800da08 <prvCheckForValidListAndQueue+0x68>)
 800d9d6:	2110      	movs	r1, #16
 800d9d8:	200a      	movs	r0, #10
 800d9da:	f7fc f952 	bl	8009c82 <xQueueGenericCreateStatic>
 800d9de:	4b04      	ldr	r3, [pc, #16]	@ (800d9f0 <prvCheckForValidListAndQueue+0x50>)
 800d9e0:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	d0e3      	beq.n	800d9ae <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d9e6:	4909      	ldr	r1, [pc, #36]	@ (800da0c <prvCheckForValidListAndQueue+0x6c>)
 800d9e8:	f7fc fd24 	bl	800a434 <vQueueAddToRegistry>
 800d9ec:	e7df      	b.n	800d9ae <prvCheckForValidListAndQueue+0xe>
 800d9ee:	bf00      	nop
 800d9f0:	200043c4 	.word	0x200043c4
 800d9f4:	200043e4 	.word	0x200043e4
 800d9f8:	200043d0 	.word	0x200043d0
 800d9fc:	200043cc 	.word	0x200043cc
 800da00:	200043c8 	.word	0x200043c8
 800da04:	200042cc 	.word	0x200042cc
 800da08:	2000431c 	.word	0x2000431c
 800da0c:	0800e158 	.word	0x0800e158

0800da10 <xTimerCreateTimerTask>:
{
 800da10:	b510      	push	{r4, lr}
 800da12:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800da14:	f7ff ffc4 	bl	800d9a0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800da18:	4b12      	ldr	r3, [pc, #72]	@ (800da64 <xTimerCreateTimerTask+0x54>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	b1cb      	cbz	r3, 800da52 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da1e:	2400      	movs	r4, #0
 800da20:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da22:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da24:	aa07      	add	r2, sp, #28
 800da26:	a906      	add	r1, sp, #24
 800da28:	a805      	add	r0, sp, #20
 800da2a:	f7fb fa1f 	bl	8008e6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da2e:	9b05      	ldr	r3, [sp, #20]
 800da30:	9302      	str	r3, [sp, #8]
 800da32:	9b06      	ldr	r3, [sp, #24]
 800da34:	9301      	str	r3, [sp, #4]
 800da36:	2302      	movs	r3, #2
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	4623      	mov	r3, r4
 800da3c:	9a07      	ldr	r2, [sp, #28]
 800da3e:	490a      	ldr	r1, [pc, #40]	@ (800da68 <xTimerCreateTimerTask+0x58>)
 800da40:	480a      	ldr	r0, [pc, #40]	@ (800da6c <xTimerCreateTimerTask+0x5c>)
 800da42:	f7ff fb57 	bl	800d0f4 <xTaskCreateStatic>
 800da46:	4b0a      	ldr	r3, [pc, #40]	@ (800da70 <xTimerCreateTimerTask+0x60>)
 800da48:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800da4a:	b110      	cbz	r0, 800da52 <xTimerCreateTimerTask+0x42>
}
 800da4c:	2001      	movs	r0, #1
 800da4e:	b008      	add	sp, #32
 800da50:	bd10      	pop	{r4, pc}
 800da52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800da62:	e7fe      	b.n	800da62 <xTimerCreateTimerTask+0x52>
 800da64:	200043c4 	.word	0x200043c4
 800da68:	0800e160 	.word	0x0800e160
 800da6c:	0800dd75 	.word	0x0800dd75
 800da70:	200043c0 	.word	0x200043c0

0800da74 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800da74:	b1b8      	cbz	r0, 800daa6 <xTimerGenericCommand+0x32>
 800da76:	469c      	mov	ip, r3
 800da78:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800da7a:	4818      	ldr	r0, [pc, #96]	@ (800dadc <xTimerGenericCommand+0x68>)
 800da7c:	6800      	ldr	r0, [r0, #0]
 800da7e:	b358      	cbz	r0, 800dad8 <xTimerGenericCommand+0x64>
{
 800da80:	b500      	push	{lr}
 800da82:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800da84:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800da86:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800da88:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800da8a:	2905      	cmp	r1, #5
 800da8c:	dc1c      	bgt.n	800dac8 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800da8e:	f7ff fe51 	bl	800d734 <xTaskGetSchedulerState>
 800da92:	2802      	cmp	r0, #2
 800da94:	d010      	beq.n	800dab8 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800da96:	2300      	movs	r3, #0
 800da98:	461a      	mov	r2, r3
 800da9a:	4669      	mov	r1, sp
 800da9c:	480f      	ldr	r0, [pc, #60]	@ (800dadc <xTimerGenericCommand+0x68>)
 800da9e:	6800      	ldr	r0, [r0, #0]
 800daa0:	f7fc f95d 	bl	8009d5e <xQueueGenericSend>
 800daa4:	e015      	b.n	800dad2 <xTimerGenericCommand+0x5e>
 800daa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800dab6:	e7fe      	b.n	800dab6 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dab8:	2300      	movs	r3, #0
 800daba:	9a06      	ldr	r2, [sp, #24]
 800dabc:	4669      	mov	r1, sp
 800dabe:	4807      	ldr	r0, [pc, #28]	@ (800dadc <xTimerGenericCommand+0x68>)
 800dac0:	6800      	ldr	r0, [r0, #0]
 800dac2:	f7fc f94c 	bl	8009d5e <xQueueGenericSend>
 800dac6:	e004      	b.n	800dad2 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dac8:	2300      	movs	r3, #0
 800daca:	4662      	mov	r2, ip
 800dacc:	4669      	mov	r1, sp
 800dace:	f7fc fa50 	bl	8009f72 <xQueueGenericSendFromISR>
}
 800dad2:	b005      	add	sp, #20
 800dad4:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800dad8:	2000      	movs	r0, #0
}
 800dada:	4770      	bx	lr
 800dadc:	200043c4 	.word	0x200043c4

0800dae0 <prvSwitchTimerLists>:
{
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dae4:	4b1b      	ldr	r3, [pc, #108]	@ (800db54 <prvSwitchTimerLists+0x74>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	b362      	cbz	r2, 800db46 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800daec:	68db      	ldr	r3, [r3, #12]
 800daee:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daf0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800daf2:	1d25      	adds	r5, r4, #4
 800daf4:	4628      	mov	r0, r5
 800daf6:	f7fb fbe1 	bl	80092bc <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dafa:	6a23      	ldr	r3, [r4, #32]
 800dafc:	4620      	mov	r0, r4
 800dafe:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db00:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800db04:	f013 0f04 	tst.w	r3, #4
 800db08:	d0ec      	beq.n	800dae4 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800db0a:	69a3      	ldr	r3, [r4, #24]
 800db0c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800db0e:	429e      	cmp	r6, r3
 800db10:	d207      	bcs.n	800db22 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800db12:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db14:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db16:	4629      	mov	r1, r5
 800db18:	4b0e      	ldr	r3, [pc, #56]	@ (800db54 <prvSwitchTimerLists+0x74>)
 800db1a:	6818      	ldr	r0, [r3, #0]
 800db1c:	f7fb fbb5 	bl	800928a <vListInsert>
 800db20:	e7e0      	b.n	800dae4 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db22:	2100      	movs	r1, #0
 800db24:	9100      	str	r1, [sp, #0]
 800db26:	460b      	mov	r3, r1
 800db28:	4632      	mov	r2, r6
 800db2a:	4620      	mov	r0, r4
 800db2c:	f7ff ffa2 	bl	800da74 <xTimerGenericCommand>
				configASSERT( xResult );
 800db30:	2800      	cmp	r0, #0
 800db32:	d1d7      	bne.n	800dae4 <prvSwitchTimerLists+0x4>
 800db34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	e7fe      	b.n	800db44 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800db46:	4a04      	ldr	r2, [pc, #16]	@ (800db58 <prvSwitchTimerLists+0x78>)
 800db48:	6810      	ldr	r0, [r2, #0]
 800db4a:	4902      	ldr	r1, [pc, #8]	@ (800db54 <prvSwitchTimerLists+0x74>)
 800db4c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800db4e:	6013      	str	r3, [r2, #0]
}
 800db50:	b002      	add	sp, #8
 800db52:	bd70      	pop	{r4, r5, r6, pc}
 800db54:	200043cc 	.word	0x200043cc
 800db58:	200043c8 	.word	0x200043c8

0800db5c <prvSampleTimeNow>:
{
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800db60:	f7ff fb8a 	bl	800d278 <xTaskGetTickCount>
 800db64:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800db66:	4b07      	ldr	r3, [pc, #28]	@ (800db84 <prvSampleTimeNow+0x28>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4283      	cmp	r3, r0
 800db6c:	d805      	bhi.n	800db7a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800db6e:	2300      	movs	r3, #0
 800db70:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800db72:	4b04      	ldr	r3, [pc, #16]	@ (800db84 <prvSampleTimeNow+0x28>)
 800db74:	601c      	str	r4, [r3, #0]
}
 800db76:	4620      	mov	r0, r4
 800db78:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800db7a:	f7ff ffb1 	bl	800dae0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db7e:	2301      	movs	r3, #1
 800db80:	602b      	str	r3, [r5, #0]
 800db82:	e7f6      	b.n	800db72 <prvSampleTimeNow+0x16>
 800db84:	200043bc 	.word	0x200043bc

0800db88 <prvProcessExpiredTimer>:
{
 800db88:	b570      	push	{r4, r5, r6, lr}
 800db8a:	b082      	sub	sp, #8
 800db8c:	4606      	mov	r6, r0
 800db8e:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db90:	4917      	ldr	r1, [pc, #92]	@ (800dbf0 <prvProcessExpiredTimer+0x68>)
 800db92:	6809      	ldr	r1, [r1, #0]
 800db94:	68c9      	ldr	r1, [r1, #12]
 800db96:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db98:	1d20      	adds	r0, r4, #4
 800db9a:	f7fb fb8f 	bl	80092bc <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db9e:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800dba2:	f01c 0f04 	tst.w	ip, #4
 800dba6:	d108      	bne.n	800dbba <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dba8:	f02c 0c01 	bic.w	ip, ip, #1
 800dbac:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbb0:	6a23      	ldr	r3, [r4, #32]
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	4798      	blx	r3
}
 800dbb6:	b002      	add	sp, #8
 800dbb8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dbba:	69a1      	ldr	r1, [r4, #24]
 800dbbc:	4633      	mov	r3, r6
 800dbbe:	462a      	mov	r2, r5
 800dbc0:	4431      	add	r1, r6
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f7ff fec8 	bl	800d958 <prvInsertTimerInActiveList>
 800dbc8:	2800      	cmp	r0, #0
 800dbca:	d0f1      	beq.n	800dbb0 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dbcc:	2100      	movs	r1, #0
 800dbce:	9100      	str	r1, [sp, #0]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	4632      	mov	r2, r6
 800dbd4:	4620      	mov	r0, r4
 800dbd6:	f7ff ff4d 	bl	800da74 <xTimerGenericCommand>
			configASSERT( xResult );
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	d1e8      	bne.n	800dbb0 <prvProcessExpiredTimer+0x28>
 800dbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	e7fe      	b.n	800dbee <prvProcessExpiredTimer+0x66>
 800dbf0:	200043cc 	.word	0x200043cc

0800dbf4 <prvProcessTimerOrBlockTask>:
{
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	4606      	mov	r6, r0
 800dbfa:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800dbfc:	f7ff fb34 	bl	800d268 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc00:	a801      	add	r0, sp, #4
 800dc02:	f7ff ffab 	bl	800db5c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800dc06:	9b01      	ldr	r3, [sp, #4]
 800dc08:	bb33      	cbnz	r3, 800dc58 <prvProcessTimerOrBlockTask+0x64>
 800dc0a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc0c:	b9e4      	cbnz	r4, 800dc48 <prvProcessTimerOrBlockTask+0x54>
 800dc0e:	42b0      	cmp	r0, r6
 800dc10:	d213      	bcs.n	800dc3a <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc12:	4622      	mov	r2, r4
 800dc14:	1b71      	subs	r1, r6, r5
 800dc16:	4b12      	ldr	r3, [pc, #72]	@ (800dc60 <prvProcessTimerOrBlockTask+0x6c>)
 800dc18:	6818      	ldr	r0, [r3, #0]
 800dc1a:	f7fc fc1f 	bl	800a45c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc1e:	f7ff fbc5 	bl	800d3ac <xTaskResumeAll>
 800dc22:	b9d8      	cbnz	r0, 800dc5c <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800dc24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc30:	f3bf 8f4f 	dsb	sy
 800dc34:	f3bf 8f6f 	isb	sy
 800dc38:	e010      	b.n	800dc5c <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800dc3a:	f7ff fbb7 	bl	800d3ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc3e:	4629      	mov	r1, r5
 800dc40:	4630      	mov	r0, r6
 800dc42:	f7ff ffa1 	bl	800db88 <prvProcessExpiredTimer>
 800dc46:	e009      	b.n	800dc5c <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc48:	4a06      	ldr	r2, [pc, #24]	@ (800dc64 <prvProcessTimerOrBlockTask+0x70>)
 800dc4a:	6812      	ldr	r2, [r2, #0]
 800dc4c:	6812      	ldr	r2, [r2, #0]
 800dc4e:	b90a      	cbnz	r2, 800dc54 <prvProcessTimerOrBlockTask+0x60>
 800dc50:	2401      	movs	r4, #1
 800dc52:	e7de      	b.n	800dc12 <prvProcessTimerOrBlockTask+0x1e>
 800dc54:	461c      	mov	r4, r3
 800dc56:	e7dc      	b.n	800dc12 <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 800dc58:	f7ff fba8 	bl	800d3ac <xTaskResumeAll>
}
 800dc5c:	b002      	add	sp, #8
 800dc5e:	bd70      	pop	{r4, r5, r6, pc}
 800dc60:	200043c4 	.word	0x200043c4
 800dc64:	200043c8 	.word	0x200043c8

0800dc68 <prvProcessReceivedCommands>:
{
 800dc68:	b510      	push	{r4, lr}
 800dc6a:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc6c:	e002      	b.n	800dc74 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc6e:	9b04      	ldr	r3, [sp, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	da0f      	bge.n	800dc94 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc74:	2200      	movs	r2, #0
 800dc76:	a904      	add	r1, sp, #16
 800dc78:	4b3d      	ldr	r3, [pc, #244]	@ (800dd70 <prvProcessReceivedCommands+0x108>)
 800dc7a:	6818      	ldr	r0, [r3, #0]
 800dc7c:	f7fc f9e0 	bl	800a040 <xQueueReceive>
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d072      	beq.n	800dd6a <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dc84:	9b04      	ldr	r3, [sp, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	daf1      	bge.n	800dc6e <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc8a:	9907      	ldr	r1, [sp, #28]
 800dc8c:	9806      	ldr	r0, [sp, #24]
 800dc8e:	9b05      	ldr	r3, [sp, #20]
 800dc90:	4798      	blx	r3
 800dc92:	e7ec      	b.n	800dc6e <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc94:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc96:	6963      	ldr	r3, [r4, #20]
 800dc98:	b113      	cbz	r3, 800dca0 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc9a:	1d20      	adds	r0, r4, #4
 800dc9c:	f7fb fb0e 	bl	80092bc <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dca0:	a803      	add	r0, sp, #12
 800dca2:	f7ff ff5b 	bl	800db5c <prvSampleTimeNow>
 800dca6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800dca8:	9b04      	ldr	r3, [sp, #16]
 800dcaa:	2b09      	cmp	r3, #9
 800dcac:	d8e2      	bhi.n	800dc74 <prvProcessReceivedCommands+0xc>
 800dcae:	e8df f003 	tbb	[pc, r3]
 800dcb2:	0505      	.short	0x0505
 800dcb4:	4e362f05 	.word	0x4e362f05
 800dcb8:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dcbc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dcc0:	f043 0301 	orr.w	r3, r3, #1
 800dcc4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dcc8:	9b05      	ldr	r3, [sp, #20]
 800dcca:	69a1      	ldr	r1, [r4, #24]
 800dccc:	4419      	add	r1, r3
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f7ff fe42 	bl	800d958 <prvInsertTimerInActiveList>
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	d0cd      	beq.n	800dc74 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcd8:	6a23      	ldr	r3, [r4, #32]
 800dcda:	4620      	mov	r0, r4
 800dcdc:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcde:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dce2:	f013 0f04 	tst.w	r3, #4
 800dce6:	d0c5      	beq.n	800dc74 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dce8:	69a2      	ldr	r2, [r4, #24]
 800dcea:	2100      	movs	r1, #0
 800dcec:	9100      	str	r1, [sp, #0]
 800dcee:	460b      	mov	r3, r1
 800dcf0:	9805      	ldr	r0, [sp, #20]
 800dcf2:	4402      	add	r2, r0
 800dcf4:	4620      	mov	r0, r4
 800dcf6:	f7ff febd 	bl	800da74 <xTimerGenericCommand>
							configASSERT( xResult );
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d1ba      	bne.n	800dc74 <prvProcessReceivedCommands+0xc>
 800dcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd02:	f383 8811 	msr	BASEPRI, r3
 800dd06:	f3bf 8f6f 	isb	sy
 800dd0a:	f3bf 8f4f 	dsb	sy
 800dd0e:	e7fe      	b.n	800dd0e <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd10:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd14:	f023 0301 	bic.w	r3, r3, #1
 800dd18:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800dd1c:	e7aa      	b.n	800dc74 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd1e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd22:	f043 0301 	orr.w	r3, r3, #1
 800dd26:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd2a:	9905      	ldr	r1, [sp, #20]
 800dd2c:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd2e:	b129      	cbz	r1, 800dd3c <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd30:	4603      	mov	r3, r0
 800dd32:	4401      	add	r1, r0
 800dd34:	4620      	mov	r0, r4
 800dd36:	f7ff fe0f 	bl	800d958 <prvInsertTimerInActiveList>
					break;
 800dd3a:	e79b      	b.n	800dc74 <prvProcessReceivedCommands+0xc>
 800dd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd4c:	e7fe      	b.n	800dd4c <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd4e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800dd52:	f013 0f02 	tst.w	r3, #2
 800dd56:	d004      	beq.n	800dd62 <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd58:	f023 0301 	bic.w	r3, r3, #1
 800dd5c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800dd60:	e788      	b.n	800dc74 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800dd62:	4620      	mov	r0, r4
 800dd64:	f7fb fa3a 	bl	80091dc <vPortFree>
 800dd68:	e784      	b.n	800dc74 <prvProcessReceivedCommands+0xc>
}
 800dd6a:	b008      	add	sp, #32
 800dd6c:	bd10      	pop	{r4, pc}
 800dd6e:	bf00      	nop
 800dd70:	200043c4 	.word	0x200043c4

0800dd74 <prvTimerTask>:
{
 800dd74:	b500      	push	{lr}
 800dd76:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd78:	a801      	add	r0, sp, #4
 800dd7a:	f7ff fddd 	bl	800d938 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd7e:	9901      	ldr	r1, [sp, #4]
 800dd80:	f7ff ff38 	bl	800dbf4 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800dd84:	f7ff ff70 	bl	800dc68 <prvProcessReceivedCommands>
	for( ;; )
 800dd88:	e7f6      	b.n	800dd78 <prvTimerTask+0x4>
	...

0800dd8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800dd8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ddc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800dd90:	f7ff f804 	bl	800cd9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800dd94:	480c      	ldr	r0, [pc, #48]	@ (800ddc8 <LoopForever+0x6>)
  ldr r1, =_edata
 800dd96:	490d      	ldr	r1, [pc, #52]	@ (800ddcc <LoopForever+0xa>)
  ldr r2, =_sidata
 800dd98:	4a0d      	ldr	r2, [pc, #52]	@ (800ddd0 <LoopForever+0xe>)
  movs r3, #0
 800dd9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800dd9c:	e002      	b.n	800dda4 <LoopCopyDataInit>

0800dd9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800dd9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800dda0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800dda2:	3304      	adds	r3, #4

0800dda4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800dda4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800dda6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800dda8:	d3f9      	bcc.n	800dd9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ddaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ddd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ddac:	4c0a      	ldr	r4, [pc, #40]	@ (800ddd8 <LoopForever+0x16>)
  movs r3, #0
 800ddae:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ddb0:	e001      	b.n	800ddb6 <LoopFillZerobss>

0800ddb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ddb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ddb4:	3204      	adds	r2, #4

0800ddb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ddb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ddb8:	d3fb      	bcc.n	800ddb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ddba:	f000 f81f 	bl	800ddfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ddbe:	f7fb fc1d 	bl	80095fc <main>

0800ddc2 <LoopForever>:

LoopForever:
    b LoopForever
 800ddc2:	e7fe      	b.n	800ddc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800ddc4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800ddc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ddcc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800ddd0:	0800e290 	.word	0x0800e290
  ldr r2, =_sbss
 800ddd4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800ddd8:	20004530 	.word	0x20004530

0800dddc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800dddc:	e7fe      	b.n	800dddc <ADC1_IRQHandler>

0800ddde <memset>:
 800ddde:	4402      	add	r2, r0
 800dde0:	4603      	mov	r3, r0
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d100      	bne.n	800dde8 <memset+0xa>
 800dde6:	4770      	bx	lr
 800dde8:	f803 1b01 	strb.w	r1, [r3], #1
 800ddec:	e7f9      	b.n	800dde2 <memset+0x4>
	...

0800ddf0 <__errno>:
 800ddf0:	4b01      	ldr	r3, [pc, #4]	@ (800ddf8 <__errno+0x8>)
 800ddf2:	6818      	ldr	r0, [r3, #0]
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	20000010 	.word	0x20000010

0800ddfc <__libc_init_array>:
 800ddfc:	b570      	push	{r4, r5, r6, lr}
 800ddfe:	4b0d      	ldr	r3, [pc, #52]	@ (800de34 <__libc_init_array+0x38>)
 800de00:	4d0d      	ldr	r5, [pc, #52]	@ (800de38 <__libc_init_array+0x3c>)
 800de02:	1b5b      	subs	r3, r3, r5
 800de04:	109c      	asrs	r4, r3, #2
 800de06:	2600      	movs	r6, #0
 800de08:	42a6      	cmp	r6, r4
 800de0a:	d109      	bne.n	800de20 <__libc_init_array+0x24>
 800de0c:	f000 f958 	bl	800e0c0 <_init>
 800de10:	4d0a      	ldr	r5, [pc, #40]	@ (800de3c <__libc_init_array+0x40>)
 800de12:	4b0b      	ldr	r3, [pc, #44]	@ (800de40 <__libc_init_array+0x44>)
 800de14:	1b5b      	subs	r3, r3, r5
 800de16:	109c      	asrs	r4, r3, #2
 800de18:	2600      	movs	r6, #0
 800de1a:	42a6      	cmp	r6, r4
 800de1c:	d105      	bne.n	800de2a <__libc_init_array+0x2e>
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
 800de20:	f855 3b04 	ldr.w	r3, [r5], #4
 800de24:	4798      	blx	r3
 800de26:	3601      	adds	r6, #1
 800de28:	e7ee      	b.n	800de08 <__libc_init_array+0xc>
 800de2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800de2e:	4798      	blx	r3
 800de30:	3601      	adds	r6, #1
 800de32:	e7f2      	b.n	800de1a <__libc_init_array+0x1e>
 800de34:	0800e280 	.word	0x0800e280
 800de38:	0800e280 	.word	0x0800e280
 800de3c:	0800e280 	.word	0x0800e280
 800de40:	0800e284 	.word	0x0800e284

0800de44 <memcpy>:
 800de44:	440a      	add	r2, r1
 800de46:	4291      	cmp	r1, r2
 800de48:	f100 33ff 	add.w	r3, r0, #4294967295
 800de4c:	d100      	bne.n	800de50 <memcpy+0xc>
 800de4e:	4770      	bx	lr
 800de50:	b510      	push	{r4, lr}
 800de52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de5a:	4291      	cmp	r1, r2
 800de5c:	d1f9      	bne.n	800de52 <memcpy+0xe>
 800de5e:	bd10      	pop	{r4, pc}

0800de60 <logf>:
 800de60:	b508      	push	{r3, lr}
 800de62:	ed2d 8b02 	vpush	{d8}
 800de66:	eeb0 8a40 	vmov.f32	s16, s0
 800de6a:	f000 f82f 	bl	800decc <__ieee754_logf>
 800de6e:	eeb4 8a48 	vcmp.f32	s16, s16
 800de72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de76:	d60f      	bvs.n	800de98 <logf+0x38>
 800de78:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800de7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de80:	dc0a      	bgt.n	800de98 <logf+0x38>
 800de82:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de8a:	d108      	bne.n	800de9e <logf+0x3e>
 800de8c:	f7ff ffb0 	bl	800ddf0 <__errno>
 800de90:	2322      	movs	r3, #34	@ 0x22
 800de92:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800deb8 <logf+0x58>
 800de96:	6003      	str	r3, [r0, #0]
 800de98:	ecbd 8b02 	vpop	{d8}
 800de9c:	bd08      	pop	{r3, pc}
 800de9e:	f7ff ffa7 	bl	800ddf0 <__errno>
 800dea2:	ecbd 8b02 	vpop	{d8}
 800dea6:	4603      	mov	r3, r0
 800dea8:	2221      	movs	r2, #33	@ 0x21
 800deaa:	601a      	str	r2, [r3, #0]
 800deac:	4803      	ldr	r0, [pc, #12]	@ (800debc <logf+0x5c>)
 800deae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800deb2:	f000 b805 	b.w	800dec0 <nanf>
 800deb6:	bf00      	nop
 800deb8:	ff800000 	.word	0xff800000
 800debc:	0800e118 	.word	0x0800e118

0800dec0 <nanf>:
 800dec0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800dec8 <nanf+0x8>
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	7fc00000 	.word	0x7fc00000

0800decc <__ieee754_logf>:
 800decc:	ee10 2a10 	vmov	r2, s0
 800ded0:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 800ded4:	d02f      	beq.n	800df36 <__ieee754_logf+0x6a>
 800ded6:	2a00      	cmp	r2, #0
 800ded8:	4613      	mov	r3, r2
 800deda:	db33      	blt.n	800df44 <__ieee754_logf+0x78>
 800dedc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800dee0:	da40      	bge.n	800df64 <__ieee754_logf+0x98>
 800dee2:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800dee6:	db34      	blt.n	800df52 <__ieee754_logf+0x86>
 800dee8:	f04f 0c00 	mov.w	ip, #0
 800deec:	4864      	ldr	r0, [pc, #400]	@ (800e080 <__ieee754_logf+0x1b4>)
 800deee:	f3c3 0116 	ubfx	r1, r3, #0, #23
 800def2:	4408      	add	r0, r1
 800def4:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 800def8:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 800defc:	430a      	orrs	r2, r1
 800defe:	15db      	asrs	r3, r3, #23
 800df00:	ee00 2a10 	vmov	s0, r2
 800df04:	3b7f      	subs	r3, #127	@ 0x7f
 800df06:	4a5f      	ldr	r2, [pc, #380]	@ (800e084 <__ieee754_logf+0x1b8>)
 800df08:	4463      	add	r3, ip
 800df0a:	f101 0c0f 	add.w	ip, r1, #15
 800df0e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800df12:	ea0c 0202 	and.w	r2, ip, r2
 800df16:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df1a:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800df1e:	bb22      	cbnz	r2, 800df6a <__ieee754_logf+0x9e>
 800df20:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800df24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df28:	d162      	bne.n	800dff0 <__ieee754_logf+0x124>
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	f040 8090 	bne.w	800e050 <__ieee754_logf+0x184>
 800df30:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800e088 <__ieee754_logf+0x1bc>
 800df34:	4770      	bx	lr
 800df36:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800e08c <__ieee754_logf+0x1c0>
 800df3a:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800e088 <__ieee754_logf+0x1bc>
 800df3e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800df42:	4770      	bx	lr
 800df44:	ee70 7a40 	vsub.f32	s15, s0, s0
 800df48:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800e088 <__ieee754_logf+0x1bc>
 800df4c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800df50:	4770      	bx	lr
 800df52:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800e090 <__ieee754_logf+0x1c4>
 800df56:	ee60 7a27 	vmul.f32	s15, s0, s15
 800df5a:	f06f 0c18 	mvn.w	ip, #24
 800df5e:	ee17 3a90 	vmov	r3, s15
 800df62:	e7c3      	b.n	800deec <__ieee754_logf+0x20>
 800df64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df68:	4770      	bx	lr
 800df6a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800df6e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800df72:	ee07 3a10 	vmov	s14, r3
 800df76:	ee80 4a27 	vdiv.f32	s8, s0, s15
 800df7a:	4846      	ldr	r0, [pc, #280]	@ (800e094 <__ieee754_logf+0x1c8>)
 800df7c:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 800df80:	4408      	add	r0, r1
 800df82:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800df86:	4302      	orrs	r2, r0
 800df88:	2a00      	cmp	r2, #0
 800df8a:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 800e098 <__ieee754_logf+0x1cc>
 800df8e:	eddf 4a43 	vldr	s9, [pc, #268]	@ 800e09c <__ieee754_logf+0x1d0>
 800df92:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800e0a0 <__ieee754_logf+0x1d4>
 800df96:	eddf 3a43 	vldr	s7, [pc, #268]	@ 800e0a4 <__ieee754_logf+0x1d8>
 800df9a:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 800e0a8 <__ieee754_logf+0x1dc>
 800df9e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800e0ac <__ieee754_logf+0x1e0>
 800dfa2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800e0b0 <__ieee754_logf+0x1e4>
 800dfa6:	ee24 6a04 	vmul.f32	s12, s8, s8
 800dfaa:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 800dfae:	ee26 7a06 	vmul.f32	s14, s12, s12
 800dfb2:	eee7 4a03 	vfma.f32	s9, s14, s6
 800dfb6:	eea7 5a23 	vfma.f32	s10, s14, s7
 800dfba:	eee4 5a87 	vfma.f32	s11, s9, s14
 800dfbe:	eee5 6a07 	vfma.f32	s13, s10, s14
 800dfc2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800dfc6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dfca:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dfce:	dd2a      	ble.n	800e026 <__ieee754_logf+0x15a>
 800dfd0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dfd4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800dfd8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800dfdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfe0:	ee67 7a84 	vmul.f32	s15, s15, s8
 800dfe4:	bb3b      	cbnz	r3, 800e036 <__ieee754_logf+0x16a>
 800dfe6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dfea:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dfee:	4770      	bx	lr
 800dff0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800e0b4 <__ieee754_logf+0x1e8>
 800dff4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dff8:	eee0 7a47 	vfms.f32	s15, s0, s14
 800dffc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e000:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e004:	2b00      	cmp	r3, #0
 800e006:	d0f0      	beq.n	800dfea <__ieee754_logf+0x11e>
 800e008:	ee07 3a90 	vmov	s15, r3
 800e00c:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 800e0b8 <__ieee754_logf+0x1ec>
 800e010:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800e0bc <__ieee754_logf+0x1f0>
 800e014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e018:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800e01c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e020:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 800e024:	4770      	bx	lr
 800e026:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e02a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800e02e:	b9e3      	cbnz	r3, 800e06a <__ieee754_logf+0x19e>
 800e030:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e034:	4770      	bx	lr
 800e036:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800e0b8 <__ieee754_logf+0x1ec>
 800e03a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800e0bc <__ieee754_logf+0x1f0>
 800e03e:	eee2 7a86 	vfma.f32	s15, s5, s12
 800e042:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e046:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e04a:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 800e04e:	4770      	bx	lr
 800e050:	ee07 3a90 	vmov	s15, r3
 800e054:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800e0b8 <__ieee754_logf+0x1ec>
 800e058:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800e0bc <__ieee754_logf+0x1f0>
 800e05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e060:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e064:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e068:	4770      	bx	lr
 800e06a:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800e0b8 <__ieee754_logf+0x1ec>
 800e06e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800e0bc <__ieee754_logf+0x1f0>
 800e072:	eee2 7ae6 	vfms.f32	s15, s5, s13
 800e076:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e07a:	ee92 0a87 	vfnms.f32	s0, s5, s14
 800e07e:	4770      	bx	lr
 800e080:	004afb20 	.word	0x004afb20
 800e084:	007ffff0 	.word	0x007ffff0
 800e088:	00000000 	.word	0x00000000
 800e08c:	cc000000 	.word	0xcc000000
 800e090:	4c000000 	.word	0x4c000000
 800e094:	ffcf5c30 	.word	0xffcf5c30
 800e098:	3e178897 	.word	0x3e178897
 800e09c:	3e3a3325 	.word	0x3e3a3325
 800e0a0:	3e924925 	.word	0x3e924925
 800e0a4:	3e1cd04f 	.word	0x3e1cd04f
 800e0a8:	3e638e29 	.word	0x3e638e29
 800e0ac:	3f2aaaab 	.word	0x3f2aaaab
 800e0b0:	3ecccccd 	.word	0x3ecccccd
 800e0b4:	3eaaaaab 	.word	0x3eaaaaab
 800e0b8:	3717f7d1 	.word	0x3717f7d1
 800e0bc:	3f317180 	.word	0x3f317180

0800e0c0 <_init>:
 800e0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0c2:	bf00      	nop
 800e0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0c6:	bc08      	pop	{r3}
 800e0c8:	469e      	mov	lr, r3
 800e0ca:	4770      	bx	lr

0800e0cc <_fini>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	bf00      	nop
 800e0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0d2:	bc08      	pop	{r3}
 800e0d4:	469e      	mov	lr, r3
 800e0d6:	4770      	bx	lr
