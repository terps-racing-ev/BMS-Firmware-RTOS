
build/debug/BMS-Firmware-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a48  08008190  08008190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800fbd8  0800fbd8  00008bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe18  0800fe18  00009080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800fe18  0800fe18  00009080  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800fe18  0800fe18  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fe18  0800fe18  00008e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800fe20  0800fe20  00008e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800fe28  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004554  20000080  0800fea8  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045d4  0800fea8  000095d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f47a  00000000  00000000  000090e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c7a  00000000  00000000  00038563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0001826e  00000000  00000000  0003e1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e98  00000000  00000000  00056450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b33  00000000  00000000  000582e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000248d4  00000000  00000000  00059e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000ac24  00000000  00000000  0007e6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056f4  00000000  00000000  00089314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  0008ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	@ (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	@ (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000080 	.word	0x20000080
 80081ac:	00000000 	.word	0x00000000
 80081b0:	0800fbbc 	.word	0x0800fbbc

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	@ (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	20000084 	.word	0x20000084
 80081cc:	0800fbbc 	.word	0x0800fbbc

080081d0 <BQ76952_ReadRegister16>:
  * @note   BQ76952 Direct Commands use single-byte addressing
  *         Data is returned LSB first (little-endian)
  */
static HAL_StatusTypeDef BQ76952_ReadRegister16(I2C_HandleTypeDef *hi2c, uint8_t device_addr, 
                                                 uint16_t reg_addr, uint16_t *value)
{
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	4605      	mov	r5, r0
 80081d6:	461e      	mov	r6, r3
    HAL_StatusTypeDef status;
    uint8_t reg_byte = (uint8_t)(reg_addr & 0xFF);  // Direct commands are 8-bit addresses
 80081d8:	f88d 200f 	strb.w	r2, [sp, #15]
    uint8_t data[2];
    
    // Write register address
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), &reg_byte, 1, I2C_TIMEOUT_MS);
 80081dc:	004c      	lsls	r4, r1, #1
 80081de:	2264      	movs	r2, #100	@ 0x64
 80081e0:	9200      	str	r2, [sp, #0]
 80081e2:	2301      	movs	r3, #1
 80081e4:	f10d 020f 	add.w	r2, sp, #15
 80081e8:	4621      	mov	r1, r4
 80081ea:	f004 feaf 	bl	800cf4c <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) {
 80081ee:	b108      	cbz	r0, 80081f4 <BQ76952_ReadRegister16+0x24>
    
    // Combine bytes (LSB first)
    *value = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
    
    return HAL_OK;
}
 80081f0:	b004      	add	sp, #16
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_I2C_Master_Receive(hi2c, (device_addr << 1), data, 2, I2C_TIMEOUT_MS);
 80081f4:	2364      	movs	r3, #100	@ 0x64
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	2302      	movs	r3, #2
 80081fa:	aa03      	add	r2, sp, #12
 80081fc:	4621      	mov	r1, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	f004 ff76 	bl	800d0f0 <HAL_I2C_Master_Receive>
    if (status != HAL_OK) {
 8008204:	2800      	cmp	r0, #0
 8008206:	d1f3      	bne.n	80081f0 <BQ76952_ReadRegister16+0x20>
    *value = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
 8008208:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800820c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8008210:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008214:	8033      	strh	r3, [r6, #0]
    return HAL_OK;
 8008216:	e7eb      	b.n	80081f0 <BQ76952_ReadRegister16+0x20>

08008218 <BQ_ReadCell>:
    if (hi2c == NULL || voltage_mv == NULL || cell_num < 1 || cell_num > 16) {
 8008218:	2800      	cmp	r0, #0
 800821a:	d03f      	beq.n	800829c <BQ_ReadCell+0x84>
{
 800821c:	b510      	push	{r4, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	461c      	mov	r4, r3
 8008222:	4684      	mov	ip, r0
    if (hi2c == NULL || voltage_mv == NULL || cell_num < 1 || cell_num > 16) {
 8008224:	2b00      	cmp	r3, #0
 8008226:	d03b      	beq.n	80082a0 <BQ_ReadCell+0x88>
 8008228:	2a00      	cmp	r2, #0
 800822a:	d03b      	beq.n	80082a4 <BQ_ReadCell+0x8c>
 800822c:	2a10      	cmp	r2, #16
 800822e:	d83c      	bhi.n	80082aa <BQ_ReadCell+0x92>
    switch (cell_num) {
 8008230:	3a01      	subs	r2, #1
 8008232:	2a0f      	cmp	r2, #15
 8008234:	d83b      	bhi.n	80082ae <BQ_ReadCell+0x96>
 8008236:	e8df f002 	tbb	[pc, r2]
 800823a:	2f08      	.short	0x2f08
 800823c:	19171513 	.word	0x19171513
 8008240:	211f1d1b 	.word	0x211f1d1b
 8008244:	29272523 	.word	0x29272523
 8008248:	2d2b      	.short	0x2d2b
 800824a:	2214      	movs	r2, #20
    status = BQ76952_ReadRegister16(hi2c, device_addr, reg_addr, &raw_value);
 800824c:	f10d 0306 	add.w	r3, sp, #6
 8008250:	4660      	mov	r0, ip
 8008252:	f7ff ffbd 	bl	80081d0 <BQ76952_ReadRegister16>
    if (status == HAL_OK) {
 8008256:	bb30      	cbnz	r0, 80082a6 <BQ_ReadCell+0x8e>
        *voltage_mv = raw_value;
 8008258:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800825c:	8023      	strh	r3, [r4, #0]
 800825e:	e022      	b.n	80082a6 <BQ_ReadCell+0x8e>
        case 3:  reg_addr = Cell3Voltage;  break;
 8008260:	2218      	movs	r2, #24
 8008262:	e7f3      	b.n	800824c <BQ_ReadCell+0x34>
        case 4:  reg_addr = Cell4Voltage;  break;
 8008264:	221a      	movs	r2, #26
 8008266:	e7f1      	b.n	800824c <BQ_ReadCell+0x34>
        case 5:  reg_addr = Cell5Voltage;  break;
 8008268:	221c      	movs	r2, #28
 800826a:	e7ef      	b.n	800824c <BQ_ReadCell+0x34>
        case 6:  reg_addr = Cell6Voltage;  break;
 800826c:	221e      	movs	r2, #30
 800826e:	e7ed      	b.n	800824c <BQ_ReadCell+0x34>
        case 7:  reg_addr = Cell7Voltage;  break;
 8008270:	2220      	movs	r2, #32
 8008272:	e7eb      	b.n	800824c <BQ_ReadCell+0x34>
        case 8:  reg_addr = Cell8Voltage;  break;
 8008274:	2222      	movs	r2, #34	@ 0x22
 8008276:	e7e9      	b.n	800824c <BQ_ReadCell+0x34>
        case 9:  reg_addr = Cell9Voltage;  break;
 8008278:	2224      	movs	r2, #36	@ 0x24
 800827a:	e7e7      	b.n	800824c <BQ_ReadCell+0x34>
        case 10: reg_addr = Cell10Voltage; break;
 800827c:	2226      	movs	r2, #38	@ 0x26
 800827e:	e7e5      	b.n	800824c <BQ_ReadCell+0x34>
        case 11: reg_addr = Cell11Voltage; break;
 8008280:	2228      	movs	r2, #40	@ 0x28
 8008282:	e7e3      	b.n	800824c <BQ_ReadCell+0x34>
        case 12: reg_addr = Cell12Voltage; break;
 8008284:	222a      	movs	r2, #42	@ 0x2a
 8008286:	e7e1      	b.n	800824c <BQ_ReadCell+0x34>
        case 13: reg_addr = Cell13Voltage; break;
 8008288:	222c      	movs	r2, #44	@ 0x2c
 800828a:	e7df      	b.n	800824c <BQ_ReadCell+0x34>
        case 14: reg_addr = Cell14Voltage; break;
 800828c:	222e      	movs	r2, #46	@ 0x2e
 800828e:	e7dd      	b.n	800824c <BQ_ReadCell+0x34>
        case 15: reg_addr = Cell15Voltage; break;
 8008290:	2230      	movs	r2, #48	@ 0x30
 8008292:	e7db      	b.n	800824c <BQ_ReadCell+0x34>
        case 16: reg_addr = Cell16Voltage; break;
 8008294:	2232      	movs	r2, #50	@ 0x32
 8008296:	e7d9      	b.n	800824c <BQ_ReadCell+0x34>
        case 2:  reg_addr = Cell2Voltage;  break;
 8008298:	2216      	movs	r2, #22
 800829a:	e7d7      	b.n	800824c <BQ_ReadCell+0x34>
        return HAL_ERROR;
 800829c:	2001      	movs	r0, #1
}
 800829e:	4770      	bx	lr
        return HAL_ERROR;
 80082a0:	2001      	movs	r0, #1
 80082a2:	e000      	b.n	80082a6 <BQ_ReadCell+0x8e>
 80082a4:	2001      	movs	r0, #1
}
 80082a6:	b002      	add	sp, #8
 80082a8:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 80082aa:	2001      	movs	r0, #1
 80082ac:	e7fb      	b.n	80082a6 <BQ_ReadCell+0x8e>
    switch (cell_num) {
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7f9      	b.n	80082a6 <BQ_ReadCell+0x8e>
	...

080082b4 <BQ_ReadBMS1>:
    if (data == NULL) {
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d042      	beq.n	800833e <BQ_ReadBMS1+0x8a>
{
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	4606      	mov	r6, r0
    if (I2C1Handle != NULL) {
 80082be:	4b23      	ldr	r3, [pc, #140]	@ (800834c <BQ_ReadBMS1+0x98>)
 80082c0:	6818      	ldr	r0, [r3, #0]
 80082c2:	b120      	cbz	r0, 80082ce <BQ_ReadBMS1+0x1a>
        if (osMutexAcquire(I2C1Handle, I2C_TIMEOUT_MS) != osOK) {
 80082c4:	2164      	movs	r1, #100	@ 0x64
 80082c6:	f001 f900 	bl	80094ca <osMutexAcquire>
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d139      	bne.n	8008342 <BQ_ReadBMS1+0x8e>
{
 80082ce:	2500      	movs	r5, #0
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 80082d0:	2d08      	cmp	r5, #8
 80082d2:	d81b      	bhi.n	800830c <BQ_ReadBMS1+0x58>
        uint16_t voltage_mv = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	f8ad 3006 	strh.w	r3, [sp, #6]
        status = BQ_ReadCell(&hi2c1, BQ76952_I2C_ADDR_BMS1, i + 1, &voltage_mv);
 80082da:	1c6c      	adds	r4, r5, #1
 80082dc:	b2e4      	uxtb	r4, r4
 80082de:	f10d 0306 	add.w	r3, sp, #6
 80082e2:	4622      	mov	r2, r4
 80082e4:	2108      	movs	r1, #8
 80082e6:	481a      	ldr	r0, [pc, #104]	@ (8008350 <BQ_ReadBMS1+0x9c>)
 80082e8:	f7ff ff96 	bl	8008218 <BQ_ReadCell>
        if (status == HAL_OK) {
 80082ec:	b928      	cbnz	r0, 80082fa <BQ_ReadBMS1+0x46>
            data->cell_voltage_mv[i] = voltage_mv;
 80082ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80082f2:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 80082f6:	4625      	mov	r5, r4
 80082f8:	e7ea      	b.n	80082d0 <BQ_ReadBMS1+0x1c>
            data->valid = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	7633      	strb	r3, [r6, #24]
            if (I2C1Handle != NULL) {
 80082fe:	4b13      	ldr	r3, [pc, #76]	@ (800834c <BQ_ReadBMS1+0x98>)
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	b108      	cbz	r0, 8008308 <BQ_ReadBMS1+0x54>
                osMutexRelease(I2C1Handle);
 8008304:	f001 f910 	bl	8009528 <osMutexRelease>
            return HAL_ERROR;
 8008308:	2001      	movs	r0, #1
 800830a:	e016      	b.n	800833a <BQ_ReadBMS1+0x86>
    if (I2C1Handle != NULL) {
 800830c:	4b0f      	ldr	r3, [pc, #60]	@ (800834c <BQ_ReadBMS1+0x98>)
 800830e:	6818      	ldr	r0, [r3, #0]
 8008310:	b108      	cbz	r0, 8008316 <BQ_ReadBMS1+0x62>
        osMutexRelease(I2C1Handle);
 8008312:	f001 f909 	bl	8009528 <osMutexRelease>
    if (voltage_mutex != NULL) {
 8008316:	4b0f      	ldr	r3, [pc, #60]	@ (8008354 <BQ_ReadBMS1+0xa0>)
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	b118      	cbz	r0, 8008324 <BQ_ReadBMS1+0x70>
        osMutexAcquire(voltage_mutex, osWaitForever);
 800831c:	f04f 31ff 	mov.w	r1, #4294967295
 8008320:	f001 f8d3 	bl	80094ca <osMutexAcquire>
    data->last_update_tick = osKernelGetTickCount();
 8008324:	f001 f814 	bl	8009350 <osKernelGetTickCount>
 8008328:	6170      	str	r0, [r6, #20]
    data->valid = 1;
 800832a:	2301      	movs	r3, #1
 800832c:	7633      	strb	r3, [r6, #24]
    if (voltage_mutex != NULL) {
 800832e:	4b09      	ldr	r3, [pc, #36]	@ (8008354 <BQ_ReadBMS1+0xa0>)
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	b140      	cbz	r0, 8008346 <BQ_ReadBMS1+0x92>
        osMutexRelease(voltage_mutex);
 8008334:	f001 f8f8 	bl	8009528 <osMutexRelease>
    return HAL_OK;
 8008338:	2000      	movs	r0, #0
}
 800833a:	b002      	add	sp, #8
 800833c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800833e:	2001      	movs	r0, #1
}
 8008340:	4770      	bx	lr
            return HAL_ERROR;
 8008342:	2001      	movs	r0, #1
 8008344:	e7f9      	b.n	800833a <BQ_ReadBMS1+0x86>
    return HAL_OK;
 8008346:	2000      	movs	r0, #0
 8008348:	e7f7      	b.n	800833a <BQ_ReadBMS1+0x86>
 800834a:	bf00      	nop
 800834c:	20003c68 	.word	0x20003c68
 8008350:	20003cd4 	.word	0x20003cd4
 8008354:	200000a0 	.word	0x200000a0

08008358 <BQ_SendCANMessage>:
HAL_StatusTypeDef BQ_SendCANMessage(BQ_Data_t *data)
{
    HAL_StatusTypeDef status = HAL_OK;
    uint8_t can_data[8];
    
    if (data == NULL) {
 8008358:	2800      	cmp	r0, #0
 800835a:	d062      	beq.n	8008422 <BQ_SendCANMessage+0xca>
{
 800835c:	b510      	push	{r4, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	4604      	mov	r4, r0
        return HAL_ERROR;
    }
    
    // Message 0: Cells 1-3 (6 bytes)
    can_data[0] = (uint8_t)(data->cell_voltage_mv[0] & 0xFF);
 8008362:	8803      	ldrh	r3, [r0, #0]
 8008364:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[0] >> 8) & 0xFF);
 8008368:	0a1b      	lsrs	r3, r3, #8
 800836a:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[1] & 0xFF);
 800836e:	8843      	ldrh	r3, [r0, #2]
 8008370:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[1] >> 8) & 0xFF);
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[2] & 0xFF);
 800837a:	8883      	ldrh	r3, [r0, #4]
 800837c:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[2] >> 8) & 0xFF);
 8008380:	0a1b      	lsrs	r3, r3, #8
 8008382:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 8008386:	2300      	movs	r3, #0
 8008388:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 800838c:	f88d 3007 	strb.w	r3, [sp, #7]
    
    status = CAN_SendMessage(CAN_VOLTAGE_0_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 8008390:	2302      	movs	r3, #2
 8008392:	2206      	movs	r2, #6
 8008394:	4669      	mov	r1, sp
 8008396:	4824      	ldr	r0, [pc, #144]	@ (8008428 <BQ_SendCANMessage+0xd0>)
 8008398:	6800      	ldr	r0, [r0, #0]
 800839a:	f000 facb 	bl	8008934 <CAN_SendMessage>
    if (status != HAL_OK) {
 800839e:	b108      	cbz	r0, 80083a4 <BQ_SendCANMessage+0x4c>
    can_data[7] = 0x00;  // Padding
    
    status = CAN_SendMessage(CAN_VOLTAGE_2_ID, can_data, 6, CAN_PRIORITY_NORMAL);
    
    return status;
}
 80083a0:	b002      	add	sp, #8
 80083a2:	bd10      	pop	{r4, pc}
    can_data[0] = (uint8_t)(data->cell_voltage_mv[3] & 0xFF);
 80083a4:	88e3      	ldrh	r3, [r4, #6]
 80083a6:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[3] >> 8) & 0xFF);
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[4] & 0xFF);
 80083b0:	8923      	ldrh	r3, [r4, #8]
 80083b2:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[4] >> 8) & 0xFF);
 80083b6:	0a1b      	lsrs	r3, r3, #8
 80083b8:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[5] & 0xFF);
 80083bc:	8963      	ldrh	r3, [r4, #10]
 80083be:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[5] >> 8) & 0xFF);
 80083c2:	0a1b      	lsrs	r3, r3, #8
 80083c4:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 80083c8:	2300      	movs	r3, #0
 80083ca:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 80083ce:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_1_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 80083d2:	2302      	movs	r3, #2
 80083d4:	2206      	movs	r2, #6
 80083d6:	4669      	mov	r1, sp
 80083d8:	4814      	ldr	r0, [pc, #80]	@ (800842c <BQ_SendCANMessage+0xd4>)
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	f000 faaa 	bl	8008934 <CAN_SendMessage>
    if (status != HAL_OK) {
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1dd      	bne.n	80083a0 <BQ_SendCANMessage+0x48>
    can_data[0] = (uint8_t)(data->cell_voltage_mv[6] & 0xFF);
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[6] >> 8) & 0xFF);
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[7] & 0xFF);
 80083f0:	89e3      	ldrh	r3, [r4, #14]
 80083f2:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[7] >> 8) & 0xFF);
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[8] & 0xFF);
 80083fc:	8a23      	ldrh	r3, [r4, #16]
 80083fe:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[8] >> 8) & 0xFF);
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 8008408:	2300      	movs	r3, #0
 800840a:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 800840e:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_2_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 8008412:	2302      	movs	r3, #2
 8008414:	2206      	movs	r2, #6
 8008416:	4669      	mov	r1, sp
 8008418:	4805      	ldr	r0, [pc, #20]	@ (8008430 <BQ_SendCANMessage+0xd8>)
 800841a:	6800      	ldr	r0, [r0, #0]
 800841c:	f000 fa8a 	bl	8008934 <CAN_SendMessage>
    return status;
 8008420:	e7be      	b.n	80083a0 <BQ_SendCANMessage+0x48>
        return HAL_ERROR;
 8008422:	2001      	movs	r0, #1
}
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	20000d30 	.word	0x20000d30
 800842c:	20000d2c 	.word	0x20000d2c
 8008430:	20000d28 	.word	0x20000d28

08008434 <BQ_CheckLimits>:
  * @note   Sets ERROR_OVER_VOLTAGE or ERROR_UNDER_VOLTAGE if out of range
  *         Sets WARNING_HIGH_VOLTAGE or WARNING_LOW_VOLTAGE if approaching limits
  */
void BQ_CheckLimits(BQ_Data_t *data)
{
    if (data == NULL || !data->valid) {
 8008434:	2800      	cmp	r0, #0
 8008436:	d050      	beq.n	80084da <BQ_CheckLimits+0xa6>
{
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	4601      	mov	r1, r0
    if (data == NULL || !data->valid) {
 800843c:	7e03      	ldrb	r3, [r0, #24]
 800843e:	b3bb      	cbz	r3, 80084b0 <BQ_CheckLimits+0x7c>
    bool under_voltage_detected = false;
    bool high_voltage_warning = false;
    bool low_voltage_warning = false;
    
    // Check all cells in the data structure
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 8008440:	2300      	movs	r3, #0
    bool low_voltage_warning = false;
 8008442:	461e      	mov	r6, r3
    bool high_voltage_warning = false;
 8008444:	461d      	mov	r5, r3
    bool under_voltage_detected = false;
 8008446:	461c      	mov	r4, r3
    bool over_voltage_detected = false;
 8008448:	461f      	mov	r7, r3
 800844a:	e002      	b.n	8008452 <BQ_CheckLimits+0x1e>
            continue;
        }
        
        // Check for over-voltage error (above max limit)
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
            over_voltage_detected = true;
 800844c:	2701      	movs	r7, #1
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 800844e:	3301      	adds	r3, #1
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b08      	cmp	r3, #8
 8008454:	d818      	bhi.n	8008488 <BQ_CheckLimits+0x54>
        uint16_t voltage_mv = data->cell_voltage_mv[i];
 8008456:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
        if (voltage_mv == 0) {
 800845a:	2a00      	cmp	r2, #0
 800845c:	d0f7      	beq.n	800844e <BQ_CheckLimits+0x1a>
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
 800845e:	f241 0068 	movw	r0, #4200	@ 0x1068
 8008462:	4282      	cmp	r2, r0
 8008464:	d8f2      	bhi.n	800844c <BQ_CheckLimits+0x18>
        }
        // Check for under-voltage error (below min limit)
        else if (voltage_mv < CELL_VOLTAGE_MIN_MV) {
 8008466:	f640 10c3 	movw	r0, #2499	@ 0x9c3
 800846a:	4282      	cmp	r2, r0
 800846c:	d908      	bls.n	8008480 <BQ_CheckLimits+0x4c>
            under_voltage_detected = true;
        }
        // Check for high voltage warning (approaching max)
        else if (voltage_mv > CELL_VOLTAGE_WARNING_HIGH_MV) {
 800846e:	f241 0004 	movw	r0, #4100	@ 0x1004
 8008472:	4282      	cmp	r2, r0
 8008474:	d806      	bhi.n	8008484 <BQ_CheckLimits+0x50>
            high_voltage_warning = true;
        }
        // Check for low voltage warning (approaching min)
        else if (voltage_mv < CELL_VOLTAGE_WARNING_LOW_MV) {
 8008476:	f5b2 6f2f 	cmp.w	r2, #2800	@ 0xaf0
 800847a:	d2e8      	bcs.n	800844e <BQ_CheckLimits+0x1a>
            low_voltage_warning = true;
 800847c:	2601      	movs	r6, #1
 800847e:	e7e6      	b.n	800844e <BQ_CheckLimits+0x1a>
            under_voltage_detected = true;
 8008480:	2401      	movs	r4, #1
 8008482:	e7e4      	b.n	800844e <BQ_CheckLimits+0x1a>
            high_voltage_warning = true;
 8008484:	2501      	movs	r5, #1
 8008486:	e7e2      	b.n	800844e <BQ_CheckLimits+0x1a>
        }
    }
    
    // Set or clear error flags
    if (over_voltage_detected) {
 8008488:	b19f      	cbz	r7, 80084b2 <BQ_CheckLimits+0x7e>
        ErrorMgr_SetError(ERROR_OVER_VOLTAGE);
 800848a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800848e:	f001 fae1 	bl	8009a54 <ErrorMgr_SetError>
    } else {
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
    }
    
    if (under_voltage_detected) {
 8008492:	b19c      	cbz	r4, 80084bc <BQ_CheckLimits+0x88>
        ErrorMgr_SetError(ERROR_UNDER_VOLTAGE);
 8008494:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008498:	f001 fadc 	bl	8009a54 <ErrorMgr_SetError>
    } else {
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
    }
    
    // Set or clear warning flags
    if (high_voltage_warning) {
 800849c:	b19d      	cbz	r5, 80084c6 <BQ_CheckLimits+0x92>
        ErrorMgr_SetWarning(WARNING_HIGH_VOLTAGE);
 800849e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084a2:	f001 fb3b 	bl	8009b1c <ErrorMgr_SetWarning>
    } else {
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
    }
    
    if (low_voltage_warning) {
 80084a6:	b19e      	cbz	r6, 80084d0 <BQ_CheckLimits+0x9c>
        ErrorMgr_SetWarning(WARNING_LOW_VOLTAGE);
 80084a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084ac:	f001 fb36 	bl	8009b1c <ErrorMgr_SetWarning>
    } else {
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
    }
}
 80084b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
 80084b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084b6:	f001 faf3 	bl	8009aa0 <ErrorMgr_ClearError>
 80084ba:	e7ea      	b.n	8008492 <BQ_CheckLimits+0x5e>
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
 80084bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084c0:	f001 faee 	bl	8009aa0 <ErrorMgr_ClearError>
 80084c4:	e7ea      	b.n	800849c <BQ_CheckLimits+0x68>
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
 80084c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084ca:	f001 fb3f 	bl	8009b4c <ErrorMgr_ClearWarning>
 80084ce:	e7ea      	b.n	80084a6 <BQ_CheckLimits+0x72>
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
 80084d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084d4:	f001 fb3a 	bl	8009b4c <ErrorMgr_ClearWarning>
 80084d8:	e7ea      	b.n	80084b0 <BQ_CheckLimits+0x7c>
 80084da:	4770      	bx	lr

080084dc <BQ_MonitorTask>:
{
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	b084      	sub	sp, #16
    const osMutexAttr_t mutex_attr = {
 80084e0:	4b2b      	ldr	r3, [pc, #172]	@ (8008590 <BQ_MonitorTask+0xb4>)
 80084e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80084e4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    voltage_mutex = osMutexNew(&mutex_attr);
 80084e8:	4668      	mov	r0, sp
 80084ea:	f000 ffa3 	bl	8009434 <osMutexNew>
 80084ee:	4b29      	ldr	r3, [pc, #164]	@ (8008594 <BQ_MonitorTask+0xb8>)
 80084f0:	6018      	str	r0, [r3, #0]
    osDelay(500);
 80084f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80084f6:	f000 ff8f 	bl	8009418 <osDelay>
    last_read_tick = osKernelGetTickCount();
 80084fa:	f000 ff29 	bl	8009350 <osKernelGetTickCount>
 80084fe:	4606      	mov	r6, r0
    last_can_tick = osKernelGetTickCount();
 8008500:	f000 ff26 	bl	8009350 <osKernelGetTickCount>
 8008504:	4605      	mov	r5, r0
 8008506:	e037      	b.n	8008578 <BQ_MonitorTask+0x9c>
            status = BQ_ReadBMS1(&voltage_data_bms1);
 8008508:	4823      	ldr	r0, [pc, #140]	@ (8008598 <BQ_MonitorTask+0xbc>)
 800850a:	f7ff fed3 	bl	80082b4 <BQ_ReadBMS1>
            if (status != HAL_OK) {
 800850e:	b940      	cbnz	r0, 8008522 <BQ_MonitorTask+0x46>
                ErrorMgr_ClearError(ERROR_I2C_BMS1);
 8008510:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008514:	f001 fac4 	bl	8009aa0 <ErrorMgr_ClearError>
                BQ_CheckLimits(&voltage_data_bms1);
 8008518:	481f      	ldr	r0, [pc, #124]	@ (8008598 <BQ_MonitorTask+0xbc>)
 800851a:	f7ff ff8b 	bl	8008434 <BQ_CheckLimits>
            last_read_tick = current_tick;
 800851e:	4626      	mov	r6, r4
 8008520:	e031      	b.n	8008586 <BQ_MonitorTask+0xaa>
                ErrorMgr_SetError(ERROR_I2C_BMS1);
 8008522:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008526:	f001 fa95 	bl	8009a54 <ErrorMgr_SetError>
                if (voltage_mutex != NULL) {
 800852a:	4b1a      	ldr	r3, [pc, #104]	@ (8008594 <BQ_MonitorTask+0xb8>)
 800852c:	6818      	ldr	r0, [r3, #0]
 800852e:	b118      	cbz	r0, 8008538 <BQ_MonitorTask+0x5c>
                    osMutexAcquire(voltage_mutex, osWaitForever);
 8008530:	f04f 31ff 	mov.w	r1, #4294967295
 8008534:	f000 ffc9 	bl	80094ca <osMutexAcquire>
{
 8008538:	2300      	movs	r3, #0
 800853a:	e005      	b.n	8008548 <BQ_MonitorTask+0x6c>
                    voltage_data_bms1.cell_voltage_mv[i] = 0;
 800853c:	4a16      	ldr	r2, [pc, #88]	@ (8008598 <BQ_MonitorTask+0xbc>)
 800853e:	2100      	movs	r1, #0
 8008540:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 8008544:	3301      	adds	r3, #1
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b08      	cmp	r3, #8
 800854a:	d9f7      	bls.n	800853c <BQ_MonitorTask+0x60>
                voltage_data_bms1.valid = 0;
 800854c:	4e12      	ldr	r6, [pc, #72]	@ (8008598 <BQ_MonitorTask+0xbc>)
 800854e:	2300      	movs	r3, #0
 8008550:	7633      	strb	r3, [r6, #24]
                voltage_data_bms1.last_update_tick = osKernelGetTickCount();
 8008552:	f000 fefd 	bl	8009350 <osKernelGetTickCount>
 8008556:	6170      	str	r0, [r6, #20]
                if (voltage_mutex != NULL) {
 8008558:	4b0e      	ldr	r3, [pc, #56]	@ (8008594 <BQ_MonitorTask+0xb8>)
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	b118      	cbz	r0, 8008566 <BQ_MonitorTask+0x8a>
                    osMutexRelease(voltage_mutex);
 800855e:	f000 ffe3 	bl	8009528 <osMutexRelease>
            last_read_tick = current_tick;
 8008562:	4626      	mov	r6, r4
 8008564:	e00f      	b.n	8008586 <BQ_MonitorTask+0xaa>
 8008566:	4626      	mov	r6, r4
 8008568:	e00d      	b.n	8008586 <BQ_MonitorTask+0xaa>
            BQ_SendCANMessage(&voltage_data_bms1);
 800856a:	480b      	ldr	r0, [pc, #44]	@ (8008598 <BQ_MonitorTask+0xbc>)
 800856c:	f7ff fef4 	bl	8008358 <BQ_SendCANMessage>
            last_can_tick = current_tick;
 8008570:	4625      	mov	r5, r4
        osDelay(10);
 8008572:	200a      	movs	r0, #10
 8008574:	f000 ff50 	bl	8009418 <osDelay>
        current_tick = osKernelGetTickCount();
 8008578:	f000 feea 	bl	8009350 <osKernelGetTickCount>
 800857c:	4604      	mov	r4, r0
        if ((current_tick - last_read_tick) >= VOLTAGE_READ_INTERVAL_MS) {
 800857e:	1b83      	subs	r3, r0, r6
 8008580:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008584:	d2c0      	bcs.n	8008508 <BQ_MonitorTask+0x2c>
        if ((current_tick - last_can_tick) >= VOLTAGE_CAN_INTERVAL_MS) {
 8008586:	1b63      	subs	r3, r4, r5
 8008588:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800858c:	d2ed      	bcs.n	800856a <BQ_MonitorTask+0x8e>
 800858e:	e7f0      	b.n	8008572 <BQ_MonitorTask+0x96>
 8008590:	0800fbd8 	.word	0x0800fbd8
 8008594:	200000a0 	.word	0x200000a0
 8008598:	200000c0 	.word	0x200000c0

0800859c <BQ_ReadBMS2>:
  */
HAL_StatusTypeDef BQ_ReadBMS2(BQ_Data_BMS2_t *data)
{
    HAL_StatusTypeDef status = HAL_OK;
    
    if (data == NULL) {
 800859c:	2800      	cmp	r0, #0
 800859e:	d042      	beq.n	8008626 <BQ_ReadBMS2+0x8a>
{
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	4606      	mov	r6, r0
        return HAL_ERROR;
    }
    
    // Acquire I2C3 mutex
    if (I2C3Handle != NULL) {
 80085a6:	4b23      	ldr	r3, [pc, #140]	@ (8008634 <BQ_ReadBMS2+0x98>)
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	b120      	cbz	r0, 80085b6 <BQ_ReadBMS2+0x1a>
        if (osMutexAcquire(I2C3Handle, I2C_TIMEOUT_MS) != osOK) {
 80085ac:	2164      	movs	r1, #100	@ 0x64
 80085ae:	f000 ff8c 	bl	80094ca <osMutexAcquire>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d139      	bne.n	800862a <BQ_ReadBMS2+0x8e>
{
 80085b6:	2500      	movs	r5, #0
            return HAL_ERROR;
        }
    }
    
    // Read cells 10-18 (map to BQ76952 cells 1-9 on second chip)
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 80085b8:	2d08      	cmp	r5, #8
 80085ba:	d81b      	bhi.n	80085f4 <BQ_ReadBMS2+0x58>
        uint16_t voltage_mv = 0;
 80085bc:	2300      	movs	r3, #0
 80085be:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        // Read from BQ76952 cells 1-9 (physical cells 10-18)
        status = BQ_ReadCell(&hi2c3, BQ76952_I2C_ADDR_BMS2, i + 1, &voltage_mv);
 80085c2:	1c6c      	adds	r4, r5, #1
 80085c4:	b2e4      	uxtb	r4, r4
 80085c6:	f10d 0306 	add.w	r3, sp, #6
 80085ca:	4622      	mov	r2, r4
 80085cc:	2109      	movs	r1, #9
 80085ce:	481a      	ldr	r0, [pc, #104]	@ (8008638 <BQ_ReadBMS2+0x9c>)
 80085d0:	f7ff fe22 	bl	8008218 <BQ_ReadCell>
        
        if (status == HAL_OK) {
 80085d4:	b928      	cbnz	r0, 80085e2 <BQ_ReadBMS2+0x46>
            data->cell_voltage_mv[i] = voltage_mv;
 80085d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80085da:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 80085de:	4625      	mov	r5, r4
 80085e0:	e7ea      	b.n	80085b8 <BQ_ReadBMS2+0x1c>
        } else {
            // Communication error - mark data as invalid
            data->valid = 0;
 80085e2:	2300      	movs	r3, #0
 80085e4:	7633      	strb	r3, [r6, #24]
            
            // Release I2C3 mutex
            if (I2C3Handle != NULL) {
 80085e6:	4b13      	ldr	r3, [pc, #76]	@ (8008634 <BQ_ReadBMS2+0x98>)
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	b108      	cbz	r0, 80085f0 <BQ_ReadBMS2+0x54>
                osMutexRelease(I2C3Handle);
 80085ec:	f000 ff9c 	bl	8009528 <osMutexRelease>
            }
            
            return HAL_ERROR;
 80085f0:	2001      	movs	r0, #1
 80085f2:	e016      	b.n	8008622 <BQ_ReadBMS2+0x86>
        }
    }
    
    // Release I2C3 mutex
    if (I2C3Handle != NULL) {
 80085f4:	4b0f      	ldr	r3, [pc, #60]	@ (8008634 <BQ_ReadBMS2+0x98>)
 80085f6:	6818      	ldr	r0, [r3, #0]
 80085f8:	b108      	cbz	r0, 80085fe <BQ_ReadBMS2+0x62>
        osMutexRelease(I2C3Handle);
 80085fa:	f000 ff95 	bl	8009528 <osMutexRelease>
    }
    
    // Update timestamp and mark data as valid
    if (voltage_mutex_bms2 != NULL) {
 80085fe:	4b0f      	ldr	r3, [pc, #60]	@ (800863c <BQ_ReadBMS2+0xa0>)
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	b118      	cbz	r0, 800860c <BQ_ReadBMS2+0x70>
        osMutexAcquire(voltage_mutex_bms2, osWaitForever);
 8008604:	f04f 31ff 	mov.w	r1, #4294967295
 8008608:	f000 ff5f 	bl	80094ca <osMutexAcquire>
    }
    
    data->last_update_tick = osKernelGetTickCount();
 800860c:	f000 fea0 	bl	8009350 <osKernelGetTickCount>
 8008610:	6170      	str	r0, [r6, #20]
    data->valid = 1;
 8008612:	2301      	movs	r3, #1
 8008614:	7633      	strb	r3, [r6, #24]
    
    if (voltage_mutex_bms2 != NULL) {
 8008616:	4b09      	ldr	r3, [pc, #36]	@ (800863c <BQ_ReadBMS2+0xa0>)
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	b140      	cbz	r0, 800862e <BQ_ReadBMS2+0x92>
        osMutexRelease(voltage_mutex_bms2);
 800861c:	f000 ff84 	bl	8009528 <osMutexRelease>
    }
    
    return HAL_OK;
 8008620:	2000      	movs	r0, #0
}
 8008622:	b002      	add	sp, #8
 8008624:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008626:	2001      	movs	r0, #1
}
 8008628:	4770      	bx	lr
            return HAL_ERROR;
 800862a:	2001      	movs	r0, #1
 800862c:	e7f9      	b.n	8008622 <BQ_ReadBMS2+0x86>
    return HAL_OK;
 800862e:	2000      	movs	r0, #0
 8008630:	e7f7      	b.n	8008622 <BQ_ReadBMS2+0x86>
 8008632:	bf00      	nop
 8008634:	20003c64 	.word	0x20003c64
 8008638:	20003c80 	.word	0x20003c80
 800863c:	2000009c 	.word	0x2000009c

08008640 <BQ_SendCANMessage_BMS2>:
HAL_StatusTypeDef BQ_SendCANMessage_BMS2(BQ_Data_BMS2_t *data)
{
    HAL_StatusTypeDef status = HAL_OK;
    uint8_t can_data[8];
    
    if (data == NULL) {
 8008640:	2800      	cmp	r0, #0
 8008642:	d062      	beq.n	800870a <BQ_SendCANMessage_BMS2+0xca>
{
 8008644:	b510      	push	{r4, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	4604      	mov	r4, r0
        return HAL_ERROR;
    }
    
    // Message 3: Cells 10-12 (6 bytes)
    can_data[0] = (uint8_t)(data->cell_voltage_mv[0] & 0xFF);
 800864a:	8803      	ldrh	r3, [r0, #0]
 800864c:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[0] >> 8) & 0xFF);
 8008650:	0a1b      	lsrs	r3, r3, #8
 8008652:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[1] & 0xFF);
 8008656:	8843      	ldrh	r3, [r0, #2]
 8008658:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[1] >> 8) & 0xFF);
 800865c:	0a1b      	lsrs	r3, r3, #8
 800865e:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[2] & 0xFF);
 8008662:	8883      	ldrh	r3, [r0, #4]
 8008664:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[2] >> 8) & 0xFF);
 8008668:	0a1b      	lsrs	r3, r3, #8
 800866a:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 800866e:	2300      	movs	r3, #0
 8008670:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 8008674:	f88d 3007 	strb.w	r3, [sp, #7]
    
    status = CAN_SendMessage(CAN_VOLTAGE_3_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 8008678:	2302      	movs	r3, #2
 800867a:	2206      	movs	r2, #6
 800867c:	4669      	mov	r1, sp
 800867e:	4824      	ldr	r0, [pc, #144]	@ (8008710 <BQ_SendCANMessage_BMS2+0xd0>)
 8008680:	6800      	ldr	r0, [r0, #0]
 8008682:	f000 f957 	bl	8008934 <CAN_SendMessage>
    if (status != HAL_OK) {
 8008686:	b108      	cbz	r0, 800868c <BQ_SendCANMessage_BMS2+0x4c>
    can_data[7] = 0x00;  // Padding
    
    status = CAN_SendMessage(CAN_VOLTAGE_5_ID, can_data, 6, CAN_PRIORITY_NORMAL);
    
    return status;
}
 8008688:	b002      	add	sp, #8
 800868a:	bd10      	pop	{r4, pc}
    can_data[0] = (uint8_t)(data->cell_voltage_mv[3] & 0xFF);
 800868c:	88e3      	ldrh	r3, [r4, #6]
 800868e:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[3] >> 8) & 0xFF);
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[4] & 0xFF);
 8008698:	8923      	ldrh	r3, [r4, #8]
 800869a:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[4] >> 8) & 0xFF);
 800869e:	0a1b      	lsrs	r3, r3, #8
 80086a0:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[5] & 0xFF);
 80086a4:	8963      	ldrh	r3, [r4, #10]
 80086a6:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[5] >> 8) & 0xFF);
 80086aa:	0a1b      	lsrs	r3, r3, #8
 80086ac:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 80086b0:	2300      	movs	r3, #0
 80086b2:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 80086b6:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_4_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 80086ba:	2302      	movs	r3, #2
 80086bc:	2206      	movs	r2, #6
 80086be:	4669      	mov	r1, sp
 80086c0:	4814      	ldr	r0, [pc, #80]	@ (8008714 <BQ_SendCANMessage_BMS2+0xd4>)
 80086c2:	6800      	ldr	r0, [r0, #0]
 80086c4:	f000 f936 	bl	8008934 <CAN_SendMessage>
    if (status != HAL_OK) {
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d1dd      	bne.n	8008688 <BQ_SendCANMessage_BMS2+0x48>
    can_data[0] = (uint8_t)(data->cell_voltage_mv[6] & 0xFF);
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[6] >> 8) & 0xFF);
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[7] & 0xFF);
 80086d8:	89e3      	ldrh	r3, [r4, #14]
 80086da:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[7] >> 8) & 0xFF);
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[8] & 0xFF);
 80086e4:	8a23      	ldrh	r3, [r4, #16]
 80086e6:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[8] >> 8) & 0xFF);
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 80086f0:	2300      	movs	r3, #0
 80086f2:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 80086f6:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_5_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 80086fa:	2302      	movs	r3, #2
 80086fc:	2206      	movs	r2, #6
 80086fe:	4669      	mov	r1, sp
 8008700:	4805      	ldr	r0, [pc, #20]	@ (8008718 <BQ_SendCANMessage_BMS2+0xd8>)
 8008702:	6800      	ldr	r0, [r0, #0]
 8008704:	f000 f916 	bl	8008934 <CAN_SendMessage>
    return status;
 8008708:	e7be      	b.n	8008688 <BQ_SendCANMessage_BMS2+0x48>
        return HAL_ERROR;
 800870a:	2001      	movs	r0, #1
}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20000d24 	.word	0x20000d24
 8008714:	20000d20 	.word	0x20000d20
 8008718:	20000d1c 	.word	0x20000d1c

0800871c <BQ_CheckLimits_BMS2>:
  * @note   Sets ERROR_OVER_VOLTAGE or ERROR_UNDER_VOLTAGE if out of range
  *         Sets WARNING_HIGH_VOLTAGE or WARNING_LOW_VOLTAGE if approaching limits
  */
void BQ_CheckLimits_BMS2(BQ_Data_BMS2_t *data)
{
    if (data == NULL || !data->valid) {
 800871c:	2800      	cmp	r0, #0
 800871e:	d050      	beq.n	80087c2 <BQ_CheckLimits_BMS2+0xa6>
{
 8008720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008722:	4601      	mov	r1, r0
    if (data == NULL || !data->valid) {
 8008724:	7e03      	ldrb	r3, [r0, #24]
 8008726:	b3bb      	cbz	r3, 8008798 <BQ_CheckLimits_BMS2+0x7c>
    bool under_voltage_detected = false;
    bool high_voltage_warning = false;
    bool low_voltage_warning = false;
    
    // Check all cells in the data structure
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 8008728:	2300      	movs	r3, #0
    bool low_voltage_warning = false;
 800872a:	461e      	mov	r6, r3
    bool high_voltage_warning = false;
 800872c:	461d      	mov	r5, r3
    bool under_voltage_detected = false;
 800872e:	461c      	mov	r4, r3
    bool over_voltage_detected = false;
 8008730:	461f      	mov	r7, r3
 8008732:	e002      	b.n	800873a <BQ_CheckLimits_BMS2+0x1e>
            continue;
        }
        
        // Check for over-voltage error (above max limit)
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
            over_voltage_detected = true;
 8008734:	2701      	movs	r7, #1
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 8008736:	3301      	adds	r3, #1
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b08      	cmp	r3, #8
 800873c:	d818      	bhi.n	8008770 <BQ_CheckLimits_BMS2+0x54>
        uint16_t voltage_mv = data->cell_voltage_mv[i];
 800873e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
        if (voltage_mv == 0) {
 8008742:	2a00      	cmp	r2, #0
 8008744:	d0f7      	beq.n	8008736 <BQ_CheckLimits_BMS2+0x1a>
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
 8008746:	f241 0068 	movw	r0, #4200	@ 0x1068
 800874a:	4282      	cmp	r2, r0
 800874c:	d8f2      	bhi.n	8008734 <BQ_CheckLimits_BMS2+0x18>
        }
        // Check for under-voltage error (below min limit)
        else if (voltage_mv < CELL_VOLTAGE_MIN_MV) {
 800874e:	f640 10c3 	movw	r0, #2499	@ 0x9c3
 8008752:	4282      	cmp	r2, r0
 8008754:	d908      	bls.n	8008768 <BQ_CheckLimits_BMS2+0x4c>
            under_voltage_detected = true;
        }
        // Check for high voltage warning (approaching max)
        else if (voltage_mv > CELL_VOLTAGE_WARNING_HIGH_MV) {
 8008756:	f241 0004 	movw	r0, #4100	@ 0x1004
 800875a:	4282      	cmp	r2, r0
 800875c:	d806      	bhi.n	800876c <BQ_CheckLimits_BMS2+0x50>
            high_voltage_warning = true;
        }
        // Check for low voltage warning (approaching min)
        else if (voltage_mv < CELL_VOLTAGE_WARNING_LOW_MV) {
 800875e:	f5b2 6f2f 	cmp.w	r2, #2800	@ 0xaf0
 8008762:	d2e8      	bcs.n	8008736 <BQ_CheckLimits_BMS2+0x1a>
            low_voltage_warning = true;
 8008764:	2601      	movs	r6, #1
 8008766:	e7e6      	b.n	8008736 <BQ_CheckLimits_BMS2+0x1a>
            under_voltage_detected = true;
 8008768:	2401      	movs	r4, #1
 800876a:	e7e4      	b.n	8008736 <BQ_CheckLimits_BMS2+0x1a>
            high_voltage_warning = true;
 800876c:	2501      	movs	r5, #1
 800876e:	e7e2      	b.n	8008736 <BQ_CheckLimits_BMS2+0x1a>
        }
    }
    
    // Set or clear error flags
    if (over_voltage_detected) {
 8008770:	b19f      	cbz	r7, 800879a <BQ_CheckLimits_BMS2+0x7e>
        ErrorMgr_SetError(ERROR_OVER_VOLTAGE);
 8008772:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008776:	f001 f96d 	bl	8009a54 <ErrorMgr_SetError>
    } else {
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
    }
    
    if (under_voltage_detected) {
 800877a:	b19c      	cbz	r4, 80087a4 <BQ_CheckLimits_BMS2+0x88>
        ErrorMgr_SetError(ERROR_UNDER_VOLTAGE);
 800877c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008780:	f001 f968 	bl	8009a54 <ErrorMgr_SetError>
    } else {
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
    }
    
    // Set or clear warning flags
    if (high_voltage_warning) {
 8008784:	b19d      	cbz	r5, 80087ae <BQ_CheckLimits_BMS2+0x92>
        ErrorMgr_SetWarning(WARNING_HIGH_VOLTAGE);
 8008786:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800878a:	f001 f9c7 	bl	8009b1c <ErrorMgr_SetWarning>
    } else {
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
    }
    
    if (low_voltage_warning) {
 800878e:	b19e      	cbz	r6, 80087b8 <BQ_CheckLimits_BMS2+0x9c>
        ErrorMgr_SetWarning(WARNING_LOW_VOLTAGE);
 8008790:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008794:	f001 f9c2 	bl	8009b1c <ErrorMgr_SetWarning>
    } else {
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
    }
}
 8008798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
 800879a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800879e:	f001 f97f 	bl	8009aa0 <ErrorMgr_ClearError>
 80087a2:	e7ea      	b.n	800877a <BQ_CheckLimits_BMS2+0x5e>
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
 80087a4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80087a8:	f001 f97a 	bl	8009aa0 <ErrorMgr_ClearError>
 80087ac:	e7ea      	b.n	8008784 <BQ_CheckLimits_BMS2+0x68>
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
 80087ae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80087b2:	f001 f9cb 	bl	8009b4c <ErrorMgr_ClearWarning>
 80087b6:	e7ea      	b.n	800878e <BQ_CheckLimits_BMS2+0x72>
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
 80087b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80087bc:	f001 f9c6 	bl	8009b4c <ErrorMgr_ClearWarning>
 80087c0:	e7ea      	b.n	8008798 <BQ_CheckLimits_BMS2+0x7c>
 80087c2:	4770      	bx	lr

080087c4 <BQ_MonitorTask_BMS2>:
{
 80087c4:	b570      	push	{r4, r5, r6, lr}
 80087c6:	b084      	sub	sp, #16
    const osMutexAttr_t mutex_attr = {
 80087c8:	4b2b      	ldr	r3, [pc, #172]	@ (8008878 <BQ_MonitorTask_BMS2+0xb4>)
 80087ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80087cc:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    voltage_mutex_bms2 = osMutexNew(&mutex_attr);
 80087d0:	4668      	mov	r0, sp
 80087d2:	f000 fe2f 	bl	8009434 <osMutexNew>
 80087d6:	4b29      	ldr	r3, [pc, #164]	@ (800887c <BQ_MonitorTask_BMS2+0xb8>)
 80087d8:	6018      	str	r0, [r3, #0]
    osDelay(500);
 80087da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80087de:	f000 fe1b 	bl	8009418 <osDelay>
    last_read_tick = osKernelGetTickCount();
 80087e2:	f000 fdb5 	bl	8009350 <osKernelGetTickCount>
 80087e6:	4606      	mov	r6, r0
    last_can_tick = osKernelGetTickCount();
 80087e8:	f000 fdb2 	bl	8009350 <osKernelGetTickCount>
 80087ec:	4605      	mov	r5, r0
 80087ee:	e037      	b.n	8008860 <BQ_MonitorTask_BMS2+0x9c>
            status = BQ_ReadBMS2(&voltage_data_bms2);
 80087f0:	4823      	ldr	r0, [pc, #140]	@ (8008880 <BQ_MonitorTask_BMS2+0xbc>)
 80087f2:	f7ff fed3 	bl	800859c <BQ_ReadBMS2>
            if (status != HAL_OK) {
 80087f6:	b940      	cbnz	r0, 800880a <BQ_MonitorTask_BMS2+0x46>
                ErrorMgr_ClearError(ERROR_I2C_BMS2);
 80087f8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80087fc:	f001 f950 	bl	8009aa0 <ErrorMgr_ClearError>
                BQ_CheckLimits_BMS2(&voltage_data_bms2);
 8008800:	481f      	ldr	r0, [pc, #124]	@ (8008880 <BQ_MonitorTask_BMS2+0xbc>)
 8008802:	f7ff ff8b 	bl	800871c <BQ_CheckLimits_BMS2>
            last_read_tick = current_tick;
 8008806:	4626      	mov	r6, r4
 8008808:	e031      	b.n	800886e <BQ_MonitorTask_BMS2+0xaa>
                ErrorMgr_SetError(ERROR_I2C_BMS2);
 800880a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800880e:	f001 f921 	bl	8009a54 <ErrorMgr_SetError>
                if (voltage_mutex_bms2 != NULL) {
 8008812:	4b1a      	ldr	r3, [pc, #104]	@ (800887c <BQ_MonitorTask_BMS2+0xb8>)
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	b118      	cbz	r0, 8008820 <BQ_MonitorTask_BMS2+0x5c>
                    osMutexAcquire(voltage_mutex_bms2, osWaitForever);
 8008818:	f04f 31ff 	mov.w	r1, #4294967295
 800881c:	f000 fe55 	bl	80094ca <osMutexAcquire>
{
 8008820:	2300      	movs	r3, #0
 8008822:	e005      	b.n	8008830 <BQ_MonitorTask_BMS2+0x6c>
                    voltage_data_bms2.cell_voltage_mv[i] = 0;
 8008824:	4a16      	ldr	r2, [pc, #88]	@ (8008880 <BQ_MonitorTask_BMS2+0xbc>)
 8008826:	2100      	movs	r1, #0
 8008828:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 800882c:	3301      	adds	r3, #1
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b08      	cmp	r3, #8
 8008832:	d9f7      	bls.n	8008824 <BQ_MonitorTask_BMS2+0x60>
                voltage_data_bms2.valid = 0;
 8008834:	4e12      	ldr	r6, [pc, #72]	@ (8008880 <BQ_MonitorTask_BMS2+0xbc>)
 8008836:	2300      	movs	r3, #0
 8008838:	7633      	strb	r3, [r6, #24]
                voltage_data_bms2.last_update_tick = osKernelGetTickCount();
 800883a:	f000 fd89 	bl	8009350 <osKernelGetTickCount>
 800883e:	6170      	str	r0, [r6, #20]
                if (voltage_mutex_bms2 != NULL) {
 8008840:	4b0e      	ldr	r3, [pc, #56]	@ (800887c <BQ_MonitorTask_BMS2+0xb8>)
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	b118      	cbz	r0, 800884e <BQ_MonitorTask_BMS2+0x8a>
                    osMutexRelease(voltage_mutex_bms2);
 8008846:	f000 fe6f 	bl	8009528 <osMutexRelease>
            last_read_tick = current_tick;
 800884a:	4626      	mov	r6, r4
 800884c:	e00f      	b.n	800886e <BQ_MonitorTask_BMS2+0xaa>
 800884e:	4626      	mov	r6, r4
 8008850:	e00d      	b.n	800886e <BQ_MonitorTask_BMS2+0xaa>
            BQ_SendCANMessage_BMS2(&voltage_data_bms2);
 8008852:	480b      	ldr	r0, [pc, #44]	@ (8008880 <BQ_MonitorTask_BMS2+0xbc>)
 8008854:	f7ff fef4 	bl	8008640 <BQ_SendCANMessage_BMS2>
            last_can_tick = current_tick;
 8008858:	4625      	mov	r5, r4
        osDelay(10);
 800885a:	200a      	movs	r0, #10
 800885c:	f000 fddc 	bl	8009418 <osDelay>
        current_tick = osKernelGetTickCount();
 8008860:	f000 fd76 	bl	8009350 <osKernelGetTickCount>
 8008864:	4604      	mov	r4, r0
        if ((current_tick - last_read_tick) >= VOLTAGE_READ_INTERVAL_MS) {
 8008866:	1b83      	subs	r3, r0, r6
 8008868:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800886c:	d2c0      	bcs.n	80087f0 <BQ_MonitorTask_BMS2+0x2c>
        if ((current_tick - last_can_tick) >= VOLTAGE_CAN_INTERVAL_MS) {
 800886e:	1b63      	subs	r3, r4, r5
 8008870:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008874:	d2ed      	bcs.n	8008852 <BQ_MonitorTask_BMS2+0x8e>
 8008876:	e7f0      	b.n	800885a <BQ_MonitorTask_BMS2+0x96>
 8008878:	0800fbe8 	.word	0x0800fbe8
 800887c:	2000009c 	.word	0x2000009c
 8008880:	200000a4 	.word	0x200000a4

08008884 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008884:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008888:	4905      	ldr	r1, [pc, #20]	@ (80088a0 <__NVIC_SystemReset+0x1c>)
 800888a:	68ca      	ldr	r2, [r1, #12]
 800888c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008890:	4b04      	ldr	r3, [pc, #16]	@ (80088a4 <__NVIC_SystemReset+0x20>)
 8008892:	4313      	orrs	r3, r2
 8008894:	60cb      	str	r3, [r1, #12]
 8008896:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800889a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800889c:	e7fd      	b.n	800889a <__NVIC_SystemReset+0x16>
 800889e:	bf00      	nop
 80088a0:	e000ed00 	.word	0xe000ed00
 80088a4:	05fa0004 	.word	0x05fa0004

080088a8 <CAN_TransmitMessage>:
  * @brief  Transmit single message to CAN hardware
  * @param  msg: Pointer to message structure
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef CAN_TransmitMessage(CAN_Message_t *msg)
{
 80088a8:	b530      	push	{r4, r5, lr}
 80088aa:	b089      	sub	sp, #36	@ 0x24
 80088ac:	4605      	mov	r5, r0
    uint32_t TxMailbox;
    HAL_StatusTypeDef status;
    uint8_t retry_count = 0;
    
    // Configure TX header for extended ID
    TxHeader.ExtId = msg->id;
 80088ae:	6803      	ldr	r3, [r0, #0]
 80088b0:	9303      	str	r3, [sp, #12]
    TxHeader.StdId = 0;
 80088b2:	2400      	movs	r4, #0
 80088b4:	9402      	str	r4, [sp, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80088b6:	9405      	str	r4, [sp, #20]
    TxHeader.IDE = CAN_ID_EXT;
 80088b8:	2304      	movs	r3, #4
 80088ba:	9304      	str	r3, [sp, #16]
    TxHeader.DLC = msg->length;
 80088bc:	7b03      	ldrb	r3, [r0, #12]
 80088be:	9306      	str	r3, [sp, #24]
    TxHeader.TransmitGlobalTime = DISABLE;
 80088c0:	f88d 401c 	strb.w	r4, [sp, #28]
    
    // Attempt transmission with retries
    while (retry_count < CAN_MAX_RETRIES) {
 80088c4:	2c02      	cmp	r4, #2
 80088c6:	d814      	bhi.n	80088f2 <CAN_TransmitMessage+0x4a>
        status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, msg->data, &TxMailbox);
 80088c8:	ab01      	add	r3, sp, #4
 80088ca:	1d2a      	adds	r2, r5, #4
 80088cc:	a902      	add	r1, sp, #8
 80088ce:	480d      	ldr	r0, [pc, #52]	@ (8008904 <CAN_TransmitMessage+0x5c>)
 80088d0:	f003 fb50 	bl	800bf74 <HAL_CAN_AddTxMessage>
        
        if (status == HAL_OK) {
 80088d4:	4603      	mov	r3, r0
 80088d6:	b138      	cbz	r0, 80088e8 <CAN_TransmitMessage+0x40>
            can_stats.tx_success_count++;
            return HAL_OK;
        }
        
        retry_count++;
 80088d8:	3401      	adds	r4, #1
 80088da:	b2e4      	uxtb	r4, r4
        
        // Brief delay before retry (1ms)
        if (retry_count < CAN_MAX_RETRIES) {
 80088dc:	2c02      	cmp	r4, #2
 80088de:	d808      	bhi.n	80088f2 <CAN_TransmitMessage+0x4a>
            osDelay(1);
 80088e0:	2001      	movs	r0, #1
 80088e2:	f000 fd99 	bl	8009418 <osDelay>
 80088e6:	e7ed      	b.n	80088c4 <CAN_TransmitMessage+0x1c>
            can_stats.tx_success_count++;
 80088e8:	4907      	ldr	r1, [pc, #28]	@ (8008908 <CAN_TransmitMessage+0x60>)
 80088ea:	680a      	ldr	r2, [r1, #0]
 80088ec:	3201      	adds	r2, #1
 80088ee:	600a      	str	r2, [r1, #0]
            return HAL_OK;
 80088f0:	e004      	b.n	80088fc <CAN_TransmitMessage+0x54>
        }
    }
    
    // All retries failed
    can_stats.tx_error_count++;
 80088f2:	4a05      	ldr	r2, [pc, #20]	@ (8008908 <CAN_TransmitMessage+0x60>)
 80088f4:	6853      	ldr	r3, [r2, #4]
 80088f6:	3301      	adds	r3, #1
 80088f8:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	b009      	add	sp, #36	@ 0x24
 8008900:	bd30      	pop	{r4, r5, pc}
 8008902:	bf00      	nop
 8008904:	20003d4c 	.word	0x20003d4c
 8008908:	200000dc 	.word	0x200000dc

0800890c <CAN_ProcessTxQueue>:
/**
  * @brief  Process TX queue and transmit messages
  * @retval None
  */
static void CAN_ProcessTxQueue(void)
{
 800890c:	b500      	push	{lr}
 800890e:	b087      	sub	sp, #28
    CAN_Message_t msg;
    
    // Try to send as many messages as possible
    while (osMessageQueueGet(CANTxQueueHandle, &msg, NULL, 0) == osOK) {
 8008910:	2300      	movs	r3, #0
 8008912:	461a      	mov	r2, r3
 8008914:	a901      	add	r1, sp, #4
 8008916:	4806      	ldr	r0, [pc, #24]	@ (8008930 <CAN_ProcessTxQueue+0x24>)
 8008918:	6800      	ldr	r0, [r0, #0]
 800891a:	f000 feb9 	bl	8009690 <osMessageQueueGet>
 800891e:	b920      	cbnz	r0, 800892a <CAN_ProcessTxQueue+0x1e>
        // Transmit the message
        if (CAN_TransmitMessage(&msg) != HAL_OK) {
 8008920:	a801      	add	r0, sp, #4
 8008922:	f7ff ffc1 	bl	80088a8 <CAN_TransmitMessage>
 8008926:	2800      	cmp	r0, #0
 8008928:	d0f2      	beq.n	8008910 <CAN_ProcessTxQueue+0x4>
            // If transmission failed, could re-queue message here if desired
            // For now, we just count it as an error
            break;  // Stop processing queue if hardware is busy
        }
    }
}
 800892a:	b007      	add	sp, #28
 800892c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008930:	200000fc 	.word	0x200000fc

08008934 <CAN_SendMessage>:
    if (length > 8 || id > 0x1FFFFFFF) {
 8008934:	2a08      	cmp	r2, #8
 8008936:	d82a      	bhi.n	800898e <CAN_SendMessage+0x5a>
{
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	460e      	mov	r6, r1
 800893e:	4614      	mov	r4, r2
 8008940:	461d      	mov	r5, r3
    if (length > 8 || id > 0x1FFFFFFF) {
 8008942:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8008946:	d302      	bcc.n	800894e <CAN_SendMessage+0x1a>
        return HAL_ERROR;
 8008948:	2001      	movs	r0, #1
}
 800894a:	b006      	add	sp, #24
 800894c:	bd70      	pop	{r4, r5, r6, pc}
    msg.id = id;
 800894e:	9001      	str	r0, [sp, #4]
    msg.length = length;
 8008950:	f88d 2010 	strb.w	r2, [sp, #16]
    msg.priority = priority;
 8008954:	f88d 3011 	strb.w	r3, [sp, #17]
    msg.timestamp = osKernelGetTickCount();
 8008958:	f000 fcfa 	bl	8009350 <osKernelGetTickCount>
 800895c:	9005      	str	r0, [sp, #20]
    if (data != NULL && length > 0) {
 800895e:	b106      	cbz	r6, 8008962 <CAN_SendMessage+0x2e>
 8008960:	b94c      	cbnz	r4, 8008976 <CAN_SendMessage+0x42>
    if (osMessageQueuePut(CANTxQueueHandle, &msg, priority, CAN_TX_TIMEOUT_MS) != osOK) {
 8008962:	2364      	movs	r3, #100	@ 0x64
 8008964:	462a      	mov	r2, r5
 8008966:	a901      	add	r1, sp, #4
 8008968:	480a      	ldr	r0, [pc, #40]	@ (8008994 <CAN_SendMessage+0x60>)
 800896a:	6800      	ldr	r0, [r0, #0]
 800896c:	f000 fe4e 	bl	800960c <osMessageQueuePut>
 8008970:	b938      	cbnz	r0, 8008982 <CAN_SendMessage+0x4e>
    return HAL_OK;
 8008972:	2000      	movs	r0, #0
 8008974:	e7e9      	b.n	800894a <CAN_SendMessage+0x16>
        memcpy(msg.data, data, length);
 8008976:	4622      	mov	r2, r4
 8008978:	4631      	mov	r1, r6
 800897a:	a802      	add	r0, sp, #8
 800897c:	f006 ffe0 	bl	800f940 <memcpy>
 8008980:	e7ef      	b.n	8008962 <CAN_SendMessage+0x2e>
        can_stats.tx_queue_full_count++;
 8008982:	4a05      	ldr	r2, [pc, #20]	@ (8008998 <CAN_SendMessage+0x64>)
 8008984:	6893      	ldr	r3, [r2, #8]
 8008986:	3301      	adds	r3, #1
 8008988:	6093      	str	r3, [r2, #8]
        return HAL_ERROR;
 800898a:	2001      	movs	r0, #1
 800898c:	e7dd      	b.n	800894a <CAN_SendMessage+0x16>
        return HAL_ERROR;
 800898e:	2001      	movs	r0, #1
}
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	200000fc 	.word	0x200000fc
 8008998:	200000dc 	.word	0x200000dc

0800899c <CAN_ResetStatistics>:
  * @brief  Reset CAN statistics
  * @retval None
  */
void CAN_ResetStatistics(void)
{
    memset(&can_stats, 0, sizeof(CAN_Statistics_t));
 800899c:	4b04      	ldr	r3, [pc, #16]	@ (80089b0 <CAN_ResetStatistics+0x14>)
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	605a      	str	r2, [r3, #4]
 80089a4:	609a      	str	r2, [r3, #8]
 80089a6:	60da      	str	r2, [r3, #12]
 80089a8:	611a      	str	r2, [r3, #16]
 80089aa:	615a      	str	r2, [r3, #20]
}
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	200000dc 	.word	0x200000dc

080089b4 <CAN_Manager_Init>:
{
 80089b4:	b510      	push	{r4, lr}
    CANTxQueueHandle = osMessageQueueNew(CAN_TX_QUEUE_SIZE, sizeof(CAN_Message_t), NULL);
 80089b6:	2200      	movs	r2, #0
 80089b8:	2114      	movs	r1, #20
 80089ba:	2040      	movs	r0, #64	@ 0x40
 80089bc:	f000 fddb 	bl	8009576 <osMessageQueueNew>
 80089c0:	4b0d      	ldr	r3, [pc, #52]	@ (80089f8 <CAN_Manager_Init+0x44>)
 80089c2:	6018      	str	r0, [r3, #0]
    if (CANTxQueueHandle == NULL) {
 80089c4:	b198      	cbz	r0, 80089ee <CAN_Manager_Init+0x3a>
    CANRxQueueHandle = osMessageQueueNew(CAN_RX_QUEUE_SIZE, sizeof(CAN_Message_t), NULL);
 80089c6:	2200      	movs	r2, #0
 80089c8:	2114      	movs	r1, #20
 80089ca:	2020      	movs	r0, #32
 80089cc:	f000 fdd3 	bl	8009576 <osMessageQueueNew>
 80089d0:	4b0a      	ldr	r3, [pc, #40]	@ (80089fc <CAN_Manager_Init+0x48>)
 80089d2:	6018      	str	r0, [r3, #0]
    if (CANRxQueueHandle == NULL) {
 80089d4:	b170      	cbz	r0, 80089f4 <CAN_Manager_Init+0x40>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | 
 80089d6:	f248 4112 	movw	r1, #33810	@ 0x8412
 80089da:	4809      	ldr	r0, [pc, #36]	@ (8008a00 <CAN_Manager_Init+0x4c>)
 80089dc:	f003 fbf4 	bl	800c1c8 <HAL_CAN_ActivateNotification>
 80089e0:	4604      	mov	r4, r0
 80089e2:	b108      	cbz	r0, 80089e8 <CAN_Manager_Init+0x34>
        return HAL_ERROR;
 80089e4:	2401      	movs	r4, #1
 80089e6:	e003      	b.n	80089f0 <CAN_Manager_Init+0x3c>
    CAN_ResetStatistics();
 80089e8:	f7ff ffd8 	bl	800899c <CAN_ResetStatistics>
    return HAL_OK;
 80089ec:	e000      	b.n	80089f0 <CAN_Manager_Init+0x3c>
        return HAL_ERROR;
 80089ee:	2401      	movs	r4, #1
}
 80089f0:	4620      	mov	r0, r4
 80089f2:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 80089f4:	2401      	movs	r4, #1
 80089f6:	e7fb      	b.n	80089f0 <CAN_Manager_Init+0x3c>
 80089f8:	200000fc 	.word	0x200000fc
 80089fc:	200000f8 	.word	0x200000f8
 8008a00:	20003d4c 	.word	0x20003d4c

08008a04 <CAN_IsMessageForThisModule>:
/**
  * @brief  Check if CAN message is meant for this module through ID
  * @param  hcan: pointer to CAN handle
  * @retval None
  */
bool CAN_IsMessageForThisModule(uint32_t can_id) {
 8008a04:	b510      	push	{r4, lr}
 8008a06:	4604      	mov	r4, r0
    // Module ID is encoded in bits 12:15 of rx can id
    // TODO: handle messages that might not have this format?
    uint8_t this_module_id = Config_GetModuleID();
 8008a08:	f000 feae 	bl	8009768 <Config_GetModuleID>
    uint8_t rx_module_id = (can_id >> 12) & 0x0F;
 8008a0c:	f3c4 3303 	ubfx	r3, r4, #12, #4
    
    return (
        rx_module_id == this_module_id ||   // Specifically for this module
 8008a10:	4298      	cmp	r0, r3
 8008a12:	d006      	beq.n	8008a22 <CAN_IsMessageForThisModule+0x1e>
 8008a14:	4b04      	ldr	r3, [pc, #16]	@ (8008a28 <CAN_IsMessageForThisModule+0x24>)
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d001      	beq.n	8008a1e <CAN_IsMessageForThisModule+0x1a>
 8008a1a:	2000      	movs	r0, #0
        can_id == CAN_DEBUG_REQUEST_ID      // Debug ID (all modules)
    );
}
 8008a1c:	bd10      	pop	{r4, pc}
        rx_module_id == this_module_id ||   // Specifically for this module
 8008a1e:	2001      	movs	r0, #1
 8008a20:	e7fc      	b.n	8008a1c <CAN_IsMessageForThisModule+0x18>
 8008a22:	2001      	movs	r0, #1
 8008a24:	e7fa      	b.n	8008a1c <CAN_IsMessageForThisModule+0x18>
 8008a26:	bf00      	nop
 8008a28:	08f00f10 	.word	0x08f00f10

08008a2c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 8008a2c:	b500      	push	{lr}
 8008a2e:	b08d      	sub	sp, #52	@ 0x34
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data) == HAL_OK) {
 8008a30:	ab01      	add	r3, sp, #4
 8008a32:	aa05      	add	r2, sp, #20
 8008a34:	2100      	movs	r1, #0
 8008a36:	f003 fb12 	bl	800c05e <HAL_CAN_GetRxMessage>
 8008a3a:	b110      	cbz	r0, 8008a42 <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
}
 8008a3c:	b00d      	add	sp, #52	@ 0x34
 8008a3e:	f85d fb04 	ldr.w	pc, [sp], #4
        msg.id = RxHeader.ExtId;
 8008a42:	9b06      	ldr	r3, [sp, #24]
 8008a44:	9300      	str	r3, [sp, #0]
        msg.length = RxHeader.DLC;
 8008a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a48:	f88d 300c 	strb.w	r3, [sp, #12]
        msg.priority = 0;  // RX messages don't have priority
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	f88d 300d 	strb.w	r3, [sp, #13]
        msg.timestamp = osKernelGetTickCount();
 8008a52:	f000 fc7d 	bl	8009350 <osKernelGetTickCount>
 8008a56:	9004      	str	r0, [sp, #16]
        if (CAN_IsMessageForThisModule(msg.id)) {
 8008a58:	9800      	ldr	r0, [sp, #0]
 8008a5a:	f7ff ffd3 	bl	8008a04 <CAN_IsMessageForThisModule>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0ec      	beq.n	8008a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
            if (osMessageQueuePut(CANRxQueueHandle, &msg, 0, 0) != osOK) {
 8008a62:	2300      	movs	r3, #0
 8008a64:	461a      	mov	r2, r3
 8008a66:	4669      	mov	r1, sp
 8008a68:	4805      	ldr	r0, [pc, #20]	@ (8008a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8008a6a:	6800      	ldr	r0, [r0, #0]
 8008a6c:	f000 fdce 	bl	800960c <osMessageQueuePut>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d0e3      	beq.n	8008a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
                can_stats.rx_queue_full_count++;
 8008a74:	4a03      	ldr	r2, [pc, #12]	@ (8008a84 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8008a76:	6913      	ldr	r3, [r2, #16]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	6113      	str	r3, [r2, #16]
}
 8008a7c:	e7de      	b.n	8008a3c <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
 8008a7e:	bf00      	nop
 8008a80:	200000f8 	.word	0x200000f8
 8008a84:	200000dc 	.word	0x200000dc

08008a88 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 8008a88:	b500      	push	{lr}
 8008a8a:	b08d      	sub	sp, #52	@ 0x34
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, msg.data) == HAL_OK) {
 8008a8c:	ab01      	add	r3, sp, #4
 8008a8e:	aa05      	add	r2, sp, #20
 8008a90:	2101      	movs	r1, #1
 8008a92:	f003 fae4 	bl	800c05e <HAL_CAN_GetRxMessage>
 8008a96:	b110      	cbz	r0, 8008a9e <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
}
 8008a98:	b00d      	add	sp, #52	@ 0x34
 8008a9a:	f85d fb04 	ldr.w	pc, [sp], #4
        msg.id = RxHeader.ExtId;
 8008a9e:	9b06      	ldr	r3, [sp, #24]
 8008aa0:	9300      	str	r3, [sp, #0]
        msg.length = RxHeader.DLC;
 8008aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa4:	f88d 300c 	strb.w	r3, [sp, #12]
        msg.priority = 0;  // RX messages don't have priority
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f88d 300d 	strb.w	r3, [sp, #13]
        msg.timestamp = osKernelGetTickCount();
 8008aae:	f000 fc4f 	bl	8009350 <osKernelGetTickCount>
 8008ab2:	9004      	str	r0, [sp, #16]
        if (CAN_IsMessageForThisModule(msg.id)) {
 8008ab4:	9800      	ldr	r0, [sp, #0]
 8008ab6:	f7ff ffa5 	bl	8008a04 <CAN_IsMessageForThisModule>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d0ec      	beq.n	8008a98 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
            if (osMessageQueuePut(CANRxQueueHandle, &msg, 0, 0) != osOK) {
 8008abe:	2300      	movs	r3, #0
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	4669      	mov	r1, sp
 8008ac4:	4805      	ldr	r0, [pc, #20]	@ (8008adc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 8008ac6:	6800      	ldr	r0, [r0, #0]
 8008ac8:	f000 fda0 	bl	800960c <osMessageQueuePut>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d0e3      	beq.n	8008a98 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
                can_stats.rx_queue_full_count++;
 8008ad0:	4a03      	ldr	r2, [pc, #12]	@ (8008ae0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 8008ad2:	6913      	ldr	r3, [r2, #16]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	6113      	str	r3, [r2, #16]
}
 8008ad8:	e7de      	b.n	8008a98 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
 8008ada:	bf00      	nop
 8008adc:	200000f8 	.word	0x200000f8
 8008ae0:	200000dc 	.word	0x200000dc

08008ae4 <HAL_CAN_ErrorCallback>:
  * @brief  CAN error callback
  * @param  hcan: pointer to CAN handle
  * @retval None
  */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008ae4:	b508      	push	{r3, lr}
    uint32_t error = HAL_CAN_GetError(hcan);
 8008ae6:	f003 fcb3 	bl	800c450 <HAL_CAN_GetError>
    
    // Check for bus-off condition
    if (error & HAL_CAN_ERROR_BOF) {
 8008aea:	f010 0f04 	tst.w	r0, #4
 8008aee:	d100      	bne.n	8008af2 <HAL_CAN_ErrorCallback+0xe>
        // Attempt to recover from bus-off
        // Note: May need to stop and restart CAN peripheral
    }
    
    // Handle other errors as needed
}
 8008af0:	bd08      	pop	{r3, pc}
        can_stats.bus_off_count++;
 8008af2:	4a04      	ldr	r2, [pc, #16]	@ (8008b04 <HAL_CAN_ErrorCallback+0x20>)
 8008af4:	6953      	ldr	r3, [r2, #20]
 8008af6:	3301      	adds	r3, #1
 8008af8:	6153      	str	r3, [r2, #20]
        ErrorMgr_SetError(ERROR_CAN_BUS_OFF);
 8008afa:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8008afe:	f000 ffa9 	bl	8009a54 <ErrorMgr_SetError>
}
 8008b02:	e7f5      	b.n	8008af0 <HAL_CAN_ErrorCallback+0xc>
 8008b04:	200000dc 	.word	0x200000dc

08008b08 <CAN_SendHeartbeat>:
  *         Byte 5: Warning flags summary (any warnings = 0xFF, none = 0x00)
  *         Byte 6-7: Fault count (16-bit)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendHeartbeat(void)
{
 8008b08:	b500      	push	{lr}
 8008b0a:	b089      	sub	sp, #36	@ 0x24
    Error_Manager_t status;
    uint8_t heartbeat_data[8];
    
    // Get current error manager status
    ErrorMgr_GetStatus(&status);
 8008b0c:	a803      	add	r0, sp, #12
 8008b0e:	f001 f859 	bl	8009bc4 <ErrorMgr_GetStatus>
    
    // Pack heartbeat message
    heartbeat_data[0] = (uint8_t)status.state;                    // BMS state
 8008b12:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8008b16:	f88d 3004 	strb.w	r3, [sp, #4]
    heartbeat_data[1] = (uint8_t)(status.error_flags & 0xFF);     // Error byte 0
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	f88d 3005 	strb.w	r3, [sp, #5]
    heartbeat_data[2] = (uint8_t)((status.error_flags >> 8) & 0xFF);   // Error byte 1
 8008b20:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008b24:	f88d 2006 	strb.w	r2, [sp, #6]
    heartbeat_data[3] = (uint8_t)((status.error_flags >> 16) & 0xFF);  // Error byte 2
 8008b28:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008b2c:	f88d 2007 	strb.w	r2, [sp, #7]
    heartbeat_data[4] = (uint8_t)((status.error_flags >> 24) & 0xFF);  // Error byte 3
 8008b30:	0e1b      	lsrs	r3, r3, #24
 8008b32:	f88d 3008 	strb.w	r3, [sp, #8]
    heartbeat_data[5] = (status.warning_flags != 0) ? 0xFF : 0x00;     // Warning summary
 8008b36:	9b04      	ldr	r3, [sp, #16]
 8008b38:	b193      	cbz	r3, 8008b60 <CAN_SendHeartbeat+0x58>
 8008b3a:	23ff      	movs	r3, #255	@ 0xff
 8008b3c:	f88d 3009 	strb.w	r3, [sp, #9]
    heartbeat_data[6] = (uint8_t)(status.fault_count & 0xFF);          // Fault count low byte
 8008b40:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8008b44:	f88d 300a 	strb.w	r3, [sp, #10]
    heartbeat_data[7] = (uint8_t)((status.fault_count >> 8) & 0xFF);   // Fault count high byte
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f88d 300b 	strb.w	r3, [sp, #11]
    
    // Send heartbeat with high priority
    return CAN_SendMessage(CAN_BMS_HEARTBEAT_ID, heartbeat_data, 8, CAN_PRIORITY_CRITICAL);
 8008b4e:	2208      	movs	r2, #8
 8008b50:	a901      	add	r1, sp, #4
 8008b52:	4804      	ldr	r0, [pc, #16]	@ (8008b64 <CAN_SendHeartbeat+0x5c>)
 8008b54:	6800      	ldr	r0, [r0, #0]
 8008b56:	f7ff feed 	bl	8008934 <CAN_SendMessage>
}
 8008b5a:	b009      	add	sp, #36	@ 0x24
 8008b5c:	f85d fb04 	ldr.w	pc, [sp], #4
    heartbeat_data[5] = (status.warning_flags != 0) ? 0xFF : 0x00;     // Warning summary
 8008b60:	2300      	movs	r3, #0
 8008b62:	e7eb      	b.n	8008b3c <CAN_SendHeartbeat+0x34>
 8008b64:	20000d18 	.word	0x20000d18

08008b68 <CAN_SendStatistics>:
/**
  * @brief  Send CAN statistics message for diagnostics
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendStatistics(void)
{
 8008b68:	b500      	push	{lr}
 8008b6a:	b083      	sub	sp, #12
    uint8_t stats_data[8];
    
    // Pack CAN statistics message
    // Bytes 0-1: RX message count (16-bit)
    stats_data[0] = (uint8_t)(can_stats.rx_message_count & 0xFF);
 8008b6c:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <CAN_SendStatistics+0x50>)
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	f88d 2000 	strb.w	r2, [sp]
    stats_data[1] = (uint8_t)((can_stats.rx_message_count >> 8) & 0xFF);
 8008b74:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008b78:	f88d 2001 	strb.w	r2, [sp, #1]
    
    // Bytes 2-3: TX success count (16-bit)
    stats_data[2] = (uint8_t)(can_stats.tx_success_count & 0xFF);
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	f88d 2002 	strb.w	r2, [sp, #2]
    stats_data[3] = (uint8_t)((can_stats.tx_success_count >> 8) & 0xFF);
 8008b82:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8008b86:	f88d 2003 	strb.w	r2, [sp, #3]
    
    // Byte 4: TX error count
    stats_data[4] = (uint8_t)(can_stats.tx_error_count & 0xFF);
 8008b8a:	791a      	ldrb	r2, [r3, #4]
 8008b8c:	f88d 2004 	strb.w	r2, [sp, #4]
    
    // Byte 5: RX queue full count
    stats_data[5] = (uint8_t)(can_stats.rx_queue_full_count & 0xFF);
 8008b90:	7c1a      	ldrb	r2, [r3, #16]
 8008b92:	f88d 2005 	strb.w	r2, [sp, #5]
    
    // Byte 6: Bus-off count
    stats_data[6] = (uint8_t)(can_stats.bus_off_count & 0xFF);
 8008b96:	7d1a      	ldrb	r2, [r3, #20]
 8008b98:	f88d 2006 	strb.w	r2, [sp, #6]
    
    // Byte 7: TX queue full count
    stats_data[7] = (uint8_t)(can_stats.tx_queue_full_count & 0xFF);
 8008b9c:	7a1b      	ldrb	r3, [r3, #8]
 8008b9e:	f88d 3007 	strb.w	r3, [sp, #7]
    
    // Send statistics with normal priority
    return CAN_SendMessage(CAN_BMS_STATS_ID, stats_data, 8, CAN_PRIORITY_NORMAL);
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	4669      	mov	r1, sp
 8008ba8:	4804      	ldr	r0, [pc, #16]	@ (8008bbc <CAN_SendStatistics+0x54>)
 8008baa:	6800      	ldr	r0, [r0, #0]
 8008bac:	f7ff fec2 	bl	8008934 <CAN_SendMessage>
}
 8008bb0:	b003      	add	sp, #12
 8008bb2:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bb6:	bf00      	nop
 8008bb8:	200000dc 	.word	0x200000dc
 8008bbc:	20000d14 	.word	0x20000d14

08008bc0 <CAN_SendDebugInfo>:
  *         Byte 3: Firmware version patch
  *         Bytes 4-7: Uptime in seconds (32-bit)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendDebugInfo(void)
{
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	b082      	sub	sp, #8
    uint8_t debug_data[8];

    // Get current module ID
    extern uint8_t Config_GetModuleID(void);
    uint8_t module_id = Config_GetModuleID();
 8008bc4:	f000 fdd0 	bl	8009768 <Config_GetModuleID>
 8008bc8:	4606      	mov	r6, r0

    // Get heap memory statistics (in bytes)
    size_t free_heap = xPortGetFreeHeapSize();
 8008bca:	f001 f983 	bl	8009ed4 <xPortGetFreeHeapSize>
 8008bce:	4605      	mov	r5, r0
    size_t min_free_heap = xPortGetMinimumEverFreeHeapSize();
 8008bd0:	f001 f986 	bl	8009ee0 <xPortGetMinimumEverFreeHeapSize>
 8008bd4:	4604      	mov	r4, r0

    // Get uptime in seconds (convert from milliseconds)
    uint32_t uptime_sec = osKernelGetTickCount() / 1000;
 8008bd6:	f000 fbbb 	bl	8009350 <osKernelGetTickCount>
 8008bda:	4a13      	ldr	r2, [pc, #76]	@ (8008c28 <CAN_SendDebugInfo+0x68>)
 8008bdc:	fba2 2300 	umull	r2, r3, r2, r0

    // Pack debug information message
    debug_data[0] = module_id;                              // Byte 0: Module ID
 8008be0:	f88d 6000 	strb.w	r6, [sp]
    debug_data[1] = (uint8_t)((free_heap >> 8) & 0xFF);     // Byte 1: Free heap MSB (in 256-byte units)
 8008be4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8008be8:	f88d 5001 	strb.w	r5, [sp, #1]
    debug_data[2] = (uint8_t)((min_free_heap >> 8) & 0xFF); // Byte 2: Min free heap MSB (in 256-byte units)
 8008bec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008bf0:	f88d 4002 	strb.w	r4, [sp, #2]
    debug_data[3] = 0;                                      // Byte 3: Reserved (could be CPU usage if implemented)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f88d 2003 	strb.w	r2, [sp, #3]
    debug_data[4] = (uint8_t)(uptime_sec & 0xFF);           // Byte 4: Uptime LSB
 8008bfa:	f3c3 1287 	ubfx	r2, r3, #6, #8
 8008bfe:	f88d 2004 	strb.w	r2, [sp, #4]
    debug_data[5] = (uint8_t)((uptime_sec >> 8) & 0xFF);    // Byte 5: Uptime
 8008c02:	f3c3 3287 	ubfx	r2, r3, #14, #8
 8008c06:	f88d 2005 	strb.w	r2, [sp, #5]
    debug_data[6] = (uint8_t)((uptime_sec >> 16) & 0xFF);   // Byte 6: Uptime
 8008c0a:	0d9b      	lsrs	r3, r3, #22
 8008c0c:	f88d 3006 	strb.w	r3, [sp, #6]
    debug_data[7] = (uint8_t)((uptime_sec >> 24) & 0xFF);   // Byte 7: Uptime MSB
 8008c10:	2300      	movs	r3, #0
 8008c12:	f88d 3007 	strb.w	r3, [sp, #7]

    // Send debug info with high priority
    return CAN_SendMessage(CAN_DEBUG_RESPONSE_ID, debug_data, 8, CAN_PRIORITY_HIGH);
 8008c16:	2301      	movs	r3, #1
 8008c18:	2208      	movs	r2, #8
 8008c1a:	4669      	mov	r1, sp
 8008c1c:	4803      	ldr	r0, [pc, #12]	@ (8008c2c <CAN_SendDebugInfo+0x6c>)
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	f7ff fe88 	bl	8008934 <CAN_SendMessage>
 8008c24:	b002      	add	sp, #8
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	10624dd3 	.word	0x10624dd3
 8008c2c:	20000d08 	.word	0x20000d08

08008c30 <CAN_ProcessRxMessage>:
{
 8008c30:	b508      	push	{r3, lr}
    can_stats.rx_message_count++;
 8008c32:	4a0f      	ldr	r2, [pc, #60]	@ (8008c70 <CAN_ProcessRxMessage+0x40>)
 8008c34:	68d3      	ldr	r3, [r2, #12]
 8008c36:	3301      	adds	r3, #1
 8008c38:	60d3      	str	r3, [r2, #12]
    if (msg->id == CAN_DEBUG_REQUEST_ID) {
 8008c3a:	6803      	ldr	r3, [r0, #0]
 8008c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8008c74 <CAN_ProcessRxMessage+0x44>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d00c      	beq.n	8008c5c <CAN_ProcessRxMessage+0x2c>
    uint32_t base_id = msg->id & 0xFFFF0FFF;
 8008c42:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
    if (base_id == (CAN_CONFIG_CMD_BASE & 0xFFFF0FFF)) {
 8008c46:	4a0c      	ldr	r2, [pc, #48]	@ (8008c78 <CAN_ProcessRxMessage+0x48>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00a      	beq.n	8008c62 <CAN_ProcessRxMessage+0x32>
    if (base_id == (CAN_RESET_CMD_BASE & 0xFFFF0FFF)) {
 8008c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8008c7c <CAN_ProcessRxMessage+0x4c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d00c      	beq.n	8008c6c <CAN_ProcessRxMessage+0x3c>
    if (rx_callback != NULL) {
 8008c52:	4b0b      	ldr	r3, [pc, #44]	@ (8008c80 <CAN_ProcessRxMessage+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	b103      	cbz	r3, 8008c5a <CAN_ProcessRxMessage+0x2a>
        rx_callback(msg);
 8008c58:	4798      	blx	r3
}
 8008c5a:	bd08      	pop	{r3, pc}
        CAN_SendDebugInfo();
 8008c5c:	f7ff ffb0 	bl	8008bc0 <CAN_SendDebugInfo>
        return;
 8008c60:	e7fb      	b.n	8008c5a <CAN_ProcessRxMessage+0x2a>
        Config_ProcessCANCommand(msg->data, msg->length);
 8008c62:	7b01      	ldrb	r1, [r0, #12]
 8008c64:	3004      	adds	r0, #4
 8008c66:	f000 fe61 	bl	800992c <Config_ProcessCANCommand>
        return;
 8008c6a:	e7f6      	b.n	8008c5a <CAN_ProcessRxMessage+0x2a>
        NVIC_SystemReset();
 8008c6c:	f7ff fe0a 	bl	8008884 <__NVIC_SystemReset>
 8008c70:	200000dc 	.word	0x200000dc
 8008c74:	08f00f10 	.word	0x08f00f10
 8008c78:	08f00f00 	.word	0x08f00f00
 8008c7c:	08f00f02 	.word	0x08f00f02
 8008c80:	200000f4 	.word	0x200000f4

08008c84 <CAN_ManagerTask>:
{
 8008c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c88:	b086      	sub	sp, #24
    osDelay(100);
 8008c8a:	2064      	movs	r0, #100	@ 0x64
 8008c8c:	f000 fbc4 	bl	8009418 <osDelay>
    last_heartbeat_tick = osKernelGetTickCount();
 8008c90:	f000 fb5e 	bl	8009350 <osKernelGetTickCount>
 8008c94:	4680      	mov	r8, r0
    last_stats_tick = osKernelGetTickCount();
 8008c96:	f000 fb5b 	bl	8009350 <osKernelGetTickCount>
 8008c9a:	4607      	mov	r7, r0
    last_uptime_tick = osKernelGetTickCount();
 8008c9c:	f000 fb58 	bl	8009350 <osKernelGetTickCount>
 8008ca0:	4606      	mov	r6, r0
 8008ca2:	e020      	b.n	8008ce6 <CAN_ManagerTask+0x62>
            CAN_ProcessRxMessage(&rx_msg);
 8008ca4:	a801      	add	r0, sp, #4
 8008ca6:	f7ff ffc3 	bl	8008c30 <CAN_ProcessRxMessage>
        while (osMessageQueueGet(CANRxQueueHandle, &rx_msg, NULL, 0) == osOK) {
 8008caa:	2300      	movs	r3, #0
 8008cac:	461a      	mov	r2, r3
 8008cae:	a901      	add	r1, sp, #4
 8008cb0:	4c13      	ldr	r4, [pc, #76]	@ (8008d00 <CAN_ManagerTask+0x7c>)
 8008cb2:	6820      	ldr	r0, [r4, #0]
 8008cb4:	f000 fcec 	bl	8009690 <osMessageQueueGet>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d0f3      	beq.n	8008ca4 <CAN_ManagerTask+0x20>
        CAN_ProcessTxQueue();
 8008cbc:	f7ff fe26 	bl	800890c <CAN_ProcessTxQueue>
        if ((current_tick - last_heartbeat_tick) >= CAN_HEARTBEAT_INTERVAL_MS) {
 8008cc0:	eba5 0308 	sub.w	r3, r5, r8
 8008cc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cc8:	d211      	bcs.n	8008cee <CAN_ManagerTask+0x6a>
        if ((current_tick - last_stats_tick) >= 1000) {
 8008cca:	1beb      	subs	r3, r5, r7
 8008ccc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cd0:	d211      	bcs.n	8008cf6 <CAN_ManagerTask+0x72>
        if ((current_tick - last_uptime_tick) >= 1000) {
 8008cd2:	1bab      	subs	r3, r5, r6
 8008cd4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cd8:	d302      	bcc.n	8008ce0 <CAN_ManagerTask+0x5c>
            ErrorMgr_UpdateUptime();
 8008cda:	f000 ffb5 	bl	8009c48 <ErrorMgr_UpdateUptime>
            last_uptime_tick = current_tick;
 8008cde:	462e      	mov	r6, r5
        osDelay(10);
 8008ce0:	200a      	movs	r0, #10
 8008ce2:	f000 fb99 	bl	8009418 <osDelay>
        current_tick = osKernelGetTickCount();
 8008ce6:	f000 fb33 	bl	8009350 <osKernelGetTickCount>
 8008cea:	4605      	mov	r5, r0
        while (osMessageQueueGet(CANRxQueueHandle, &rx_msg, NULL, 0) == osOK) {
 8008cec:	e7dd      	b.n	8008caa <CAN_ManagerTask+0x26>
            CAN_SendHeartbeat();
 8008cee:	f7ff ff0b 	bl	8008b08 <CAN_SendHeartbeat>
            last_heartbeat_tick = current_tick;
 8008cf2:	46a8      	mov	r8, r5
 8008cf4:	e7e9      	b.n	8008cca <CAN_ManagerTask+0x46>
            CAN_SendStatistics();
 8008cf6:	f7ff ff37 	bl	8008b68 <CAN_SendStatistics>
            last_stats_tick = current_tick;
 8008cfa:	462f      	mov	r7, r5
 8008cfc:	e7e9      	b.n	8008cd2 <CAN_ManagerTask+0x4e>
 8008cfe:	bf00      	nop
 8008d00:	200000f8 	.word	0x200000f8

08008d04 <CellTemp_IsADCEnabled>:
  * @param  adc_index: ADC channel index (0-6)
  * @retval 1 if enabled, 0 if disabled
  */
static uint8_t CellTemp_IsADCEnabled(uint8_t adc_index)
{
    if (adc_index >= NUM_ADC_CHANNELS) {
 8008d04:	2806      	cmp	r0, #6
 8008d06:	d802      	bhi.n	8008d0e <CellTemp_IsADCEnabled+0xa>
        return 0;
    }
    return adc_channel_enabled[adc_index];
 8008d08:	4b02      	ldr	r3, [pc, #8]	@ (8008d14 <CellTemp_IsADCEnabled+0x10>)
 8008d0a:	5c18      	ldrb	r0, [r3, r0]
 8008d0c:	4770      	bx	lr
        return 0;
 8008d0e:	2000      	movs	r0, #0
}
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	0800fcb8 	.word	0x0800fcb8

08008d18 <CellTemp_ConfigureADCChannel>:
{
 8008d18:	b500      	push	{lr}
 8008d1a:	b087      	sub	sp, #28
    ADC_ChannelConfTypeDef sConfig = {0};
 8008d1c:	4669      	mov	r1, sp
 8008d1e:	2300      	movs	r3, #0
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	9301      	str	r3, [sp, #4]
 8008d24:	9302      	str	r3, [sp, #8]
 8008d26:	9303      	str	r3, [sp, #12]
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	9305      	str	r3, [sp, #20]
    sConfig.Channel = channel;
 8008d2c:	9000      	str	r0, [sp, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8008d2e:	2306      	movs	r3, #6
 8008d30:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; // Long sampling for high impedance
 8008d32:	2307      	movs	r3, #7
 8008d34:	9302      	str	r3, [sp, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008d36:	237f      	movs	r3, #127	@ 0x7f
 8008d38:	9303      	str	r3, [sp, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008d3a:	2304      	movs	r3, #4
 8008d3c:	9304      	str	r3, [sp, #16]
    return HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8008d3e:	4803      	ldr	r0, [pc, #12]	@ (8008d4c <CellTemp_ConfigureADCChannel+0x34>)
 8008d40:	f002 fbbe 	bl	800b4c0 <HAL_ADC_ConfigChannel>
}
 8008d44:	b007      	add	sp, #28
 8008d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d4a:	bf00      	nop
 8008d4c:	20003d74 	.word	0x20003d74

08008d50 <CellTemp_SendTemperatureMessage>:
  * @param  msg_index: Message index (0-13, for 14 messages total)
  * @param  start_therm_idx: Starting thermistor index
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef CellTemp_SendTemperatureMessage(uint8_t msg_index, uint8_t start_therm_idx)
{
 8008d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d52:	b083      	sub	sp, #12
 8008d54:	4606      	mov	r6, r0
 8008d56:	460d      	mov	r5, r1
    uint8_t TxData[8];
    
    // Check if this message corresponds to a disabled ADC channel
    // Each message covers 4 thermistors, determine which ADC channel(s) it uses
    uint8_t first_adc = start_therm_idx / MUX_CHANNELS;
 8008d58:	08cc      	lsrs	r4, r1, #3
    uint8_t last_adc = (start_therm_idx + 3) / MUX_CHANNELS;
 8008d5a:	1ccf      	adds	r7, r1, #3
 8008d5c:	08ff      	lsrs	r7, r7, #3
    
    // Skip message if all ADC channels for this message are disabled
    uint8_t any_enabled = 0;
    for (uint8_t adc = first_adc; adc <= last_adc && adc < NUM_ADC_CHANNELS; adc++) {
 8008d5e:	e001      	b.n	8008d64 <CellTemp_SendTemperatureMessage+0x14>
 8008d60:	3401      	adds	r4, #1
 8008d62:	b2e4      	uxtb	r4, r4
 8008d64:	42bc      	cmp	r4, r7
 8008d66:	d80a      	bhi.n	8008d7e <CellTemp_SendTemperatureMessage+0x2e>
 8008d68:	2c06      	cmp	r4, #6
 8008d6a:	d806      	bhi.n	8008d7a <CellTemp_SendTemperatureMessage+0x2a>
        if (CellTemp_IsADCEnabled(adc)) {
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f7ff ffc9 	bl	8008d04 <CellTemp_IsADCEnabled>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d0f4      	beq.n	8008d60 <CellTemp_SendTemperatureMessage+0x10>
            any_enabled = 1;
 8008d76:	2001      	movs	r0, #1
 8008d78:	e002      	b.n	8008d80 <CellTemp_SendTemperatureMessage+0x30>
    uint8_t any_enabled = 0;
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	e000      	b.n	8008d80 <CellTemp_SendTemperatureMessage+0x30>
 8008d7e:	2000      	movs	r0, #0
            break;
        }
    }
    
    if (!any_enabled) {
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d03d      	beq.n	8008e00 <CellTemp_SendTemperatureMessage+0xb0>
    }
    
    // Prepare CAN message with 4 thermistor readings per message
    // Temperature format: temp_celsius * 10 (0.1°C resolution), little endian
    
    for (uint8_t i = 0; i < 4; i++) {
 8008d84:	2400      	movs	r4, #0
 8008d86:	e00d      	b.n	8008da4 <CellTemp_SendTemperatureMessage+0x54>
        uint8_t therm_idx = start_therm_idx + i;
        int16_t temp_data = 0x8000; // Default invalid temperature marker
 8008d88:	4b1e      	ldr	r3, [pc, #120]	@ (8008e04 <CellTemp_SendTemperatureMessage+0xb4>)
                temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
            }
        }
        
        // Pack temperature data (little endian)
        TxData[i * 2] = temp_data & 0xFF;         // LSB
 8008d8a:	0062      	lsls	r2, r4, #1
 8008d8c:	a902      	add	r1, sp, #8
 8008d8e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 8008d92:	f801 3c08 	strb.w	r3, [r1, #-8]
        TxData[i * 2 + 1] = (temp_data >> 8) & 0xFF; // MSB
 8008d96:	3209      	adds	r2, #9
 8008d98:	446a      	add	r2, sp
 8008d9a:	121b      	asrs	r3, r3, #8
 8008d9c:	f802 3c08 	strb.w	r3, [r2, #-8]
    for (uint8_t i = 0; i < 4; i++) {
 8008da0:	3401      	adds	r4, #1
 8008da2:	b2e4      	uxtb	r4, r4
 8008da4:	2c03      	cmp	r4, #3
 8008da6:	d823      	bhi.n	8008df0 <CellTemp_SendTemperatureMessage+0xa0>
        uint8_t therm_idx = start_therm_idx + i;
 8008da8:	1967      	adds	r7, r4, r5
 8008daa:	b2ff      	uxtb	r7, r7
        if (therm_idx < TOTAL_THERMISTORS) {
 8008dac:	2f37      	cmp	r7, #55	@ 0x37
 8008dae:	d8eb      	bhi.n	8008d88 <CellTemp_SendTemperatureMessage+0x38>
            if (CellTemp_IsADCEnabled(therm_adc) && 
 8008db0:	08f8      	lsrs	r0, r7, #3
 8008db2:	f7ff ffa7 	bl	8008d04 <CellTemp_IsADCEnabled>
 8008db6:	b1b8      	cbz	r0, 8008de8 <CellTemp_SendTemperatureMessage+0x98>
                temp_state.thermistors[therm_idx].temperature > -126.0f) {
 8008db8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8008dbc:	4b12      	ldr	r3, [pc, #72]	@ (8008e08 <CellTemp_SendTemperatureMessage+0xb8>)
 8008dbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008dc2:	edd3 7a01 	vldr	s15, [r3, #4]
            if (CellTemp_IsADCEnabled(therm_adc) && 
 8008dc6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8008e0c <CellTemp_SendTemperatureMessage+0xbc>
 8008dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd2:	dd0b      	ble.n	8008dec <CellTemp_SendTemperatureMessage+0x9c>
                temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
 8008dd4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008de0:	ee17 3a90 	vmov	r3, s15
 8008de4:	b21b      	sxth	r3, r3
 8008de6:	e7d0      	b.n	8008d8a <CellTemp_SendTemperatureMessage+0x3a>
        int16_t temp_data = 0x8000; // Default invalid temperature marker
 8008de8:	4b06      	ldr	r3, [pc, #24]	@ (8008e04 <CellTemp_SendTemperatureMessage+0xb4>)
 8008dea:	e7ce      	b.n	8008d8a <CellTemp_SendTemperatureMessage+0x3a>
 8008dec:	4b05      	ldr	r3, [pc, #20]	@ (8008e04 <CellTemp_SendTemperatureMessage+0xb4>)
 8008dee:	e7cc      	b.n	8008d8a <CellTemp_SendTemperatureMessage+0x3a>
    }
    
    // Send via CAN Manager (non-blocking, queued)
    // CAN_TEMP_ID already has module offset applied from Config_Init()
    uint32_t can_id = CAN_TEMP_ID + msg_index;
 8008df0:	4b07      	ldr	r3, [pc, #28]	@ (8008e10 <CellTemp_SendTemperatureMessage+0xc0>)
 8008df2:	6818      	ldr	r0, [r3, #0]
    return CAN_SendMessage(can_id, TxData, 8, CAN_PRIORITY_NORMAL);
 8008df4:	2302      	movs	r3, #2
 8008df6:	2208      	movs	r2, #8
 8008df8:	4669      	mov	r1, sp
 8008dfa:	4430      	add	r0, r6
 8008dfc:	f7ff fd9a 	bl	8008934 <CAN_SendMessage>
}
 8008e00:	b003      	add	sp, #12
 8008e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e04:	ffff8000 	.word	0xffff8000
 8008e08:	20000100 	.word	0x20000100
 8008e0c:	c2fc0000 	.word	0xc2fc0000
 8008e10:	20000d38 	.word	0x20000d38

08008e14 <CellTemp_Init>:
{
 8008e14:	b510      	push	{r4, lr}
    memset(&temp_state, 0, sizeof(temp_monitor_state_t));
 8008e16:	f240 524c 	movw	r2, #1356	@ 0x54c
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	481a      	ldr	r0, [pc, #104]	@ (8008e88 <CellTemp_Init+0x74>)
 8008e1e:	f006 fd5c 	bl	800f8da <memset>
    for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8008e22:	2300      	movs	r3, #0
 8008e24:	e019      	b.n	8008e5a <CellTemp_Init+0x46>
        temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 8008e26:	4a18      	ldr	r2, [pc, #96]	@ (8008e88 <CellTemp_Init+0x74>)
 8008e28:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8008e2c:	00c8      	lsls	r0, r1, #3
 8008e2e:	1811      	adds	r1, r2, r0
 8008e30:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8008e34:	f802 c000 	strb.w	ip, [r2, r0]
        temp_state.thermistors[i].mux_channel = i % MUX_CHANNELS;
 8008e38:	f003 0007 	and.w	r0, r3, #7
 8008e3c:	7048      	strb	r0, [r1, #1]
        temp_state.thermistors[i].temperature = -127.0f; // Invalid temperature marker
 8008e3e:	4813      	ldr	r0, [pc, #76]	@ (8008e8c <CellTemp_Init+0x78>)
 8008e40:	6048      	str	r0, [r1, #4]
        temp_state.thermistors[i].raw_adc = 0;
 8008e42:	2000      	movs	r0, #0
 8008e44:	8108      	strh	r0, [r1, #8]
        temp_state.thermistors[i].last_read_time = 0;
 8008e46:	60c8      	str	r0, [r1, #12]
        temp_state.thermistors[i].adc_accumulator = 0;
 8008e48:	6108      	str	r0, [r1, #16]
        temp_state.thermistors[i].sample_count = 0;
 8008e4a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8008e4e:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 8008e52:	440a      	add	r2, r1
 8008e54:	8290      	strh	r0, [r2, #20]
    for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8008e56:	3301      	adds	r3, #1
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b37      	cmp	r3, #55	@ 0x37
 8008e5c:	d9e3      	bls.n	8008e26 <CellTemp_Init+0x12>
    HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 8008e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008e90 <CellTemp_Init+0x7c>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	2102      	movs	r1, #2
 8008e64:	4620      	mov	r0, r4
 8008e66:	f003 fe53 	bl	800cb10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008e74:	f003 fe4c 	bl	800cb10 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2120      	movs	r1, #32
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f003 fe47 	bl	800cb10 <HAL_GPIO_WritePin>
}
 8008e82:	2000      	movs	r0, #0
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	bf00      	nop
 8008e88:	20000100 	.word	0x20000100
 8008e8c:	c2fe0000 	.word	0xc2fe0000
 8008e90:	48000400 	.word	0x48000400

08008e94 <CellTemp_ReadADC>:
{
 8008e94:	b510      	push	{r4, lr}
    if (CellTemp_ConfigureADCChannel(adc_channel) != HAL_OK) {
 8008e96:	f7ff ff3f 	bl	8008d18 <CellTemp_ConfigureADCChannel>
 8008e9a:	b110      	cbz	r0, 8008ea2 <CellTemp_ReadADC+0xe>
        return 0;
 8008e9c:	2400      	movs	r4, #0
}
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	bd10      	pop	{r4, pc}
    if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 8008ea2:	480b      	ldr	r0, [pc, #44]	@ (8008ed0 <CellTemp_ReadADC+0x3c>)
 8008ea4:	f002 fe12 	bl	800bacc <HAL_ADC_Start>
 8008ea8:	b108      	cbz	r0, 8008eae <CellTemp_ReadADC+0x1a>
    uint16_t adc_value = 0;
 8008eaa:	2400      	movs	r4, #0
 8008eac:	e7f7      	b.n	8008e9e <CellTemp_ReadADC+0xa>
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8008eae:	f04f 31ff 	mov.w	r1, #4294967295
 8008eb2:	4807      	ldr	r0, [pc, #28]	@ (8008ed0 <CellTemp_ReadADC+0x3c>)
 8008eb4:	f002 faa6 	bl	800b404 <HAL_ADC_PollForConversion>
 8008eb8:	b120      	cbz	r0, 8008ec4 <CellTemp_ReadADC+0x30>
    uint16_t adc_value = 0;
 8008eba:	2400      	movs	r4, #0
        HAL_ADC_Stop(&hadc1);
 8008ebc:	4804      	ldr	r0, [pc, #16]	@ (8008ed0 <CellTemp_ReadADC+0x3c>)
 8008ebe:	f002 fe95 	bl	800bbec <HAL_ADC_Stop>
 8008ec2:	e7ec      	b.n	8008e9e <CellTemp_ReadADC+0xa>
            adc_value = HAL_ADC_GetValue(&hadc1);
 8008ec4:	4802      	ldr	r0, [pc, #8]	@ (8008ed0 <CellTemp_ReadADC+0x3c>)
 8008ec6:	f002 faf7 	bl	800b4b8 <HAL_ADC_GetValue>
 8008eca:	b284      	uxth	r4, r0
 8008ecc:	e7f6      	b.n	8008ebc <CellTemp_ReadADC+0x28>
 8008ece:	bf00      	nop
 8008ed0:	20003d74 	.word	0x20003d74

08008ed4 <CellTemp_SetMuxChannel>:
    if (channel > 7) {
 8008ed4:	2807      	cmp	r0, #7
 8008ed6:	d833      	bhi.n	8008f40 <CellTemp_SetMuxChannel+0x6c>
{
 8008ed8:	b510      	push	{r4, lr}
 8008eda:	4604      	mov	r4, r0
    if (channel & 0x01) {
 8008edc:	f010 0f01 	tst.w	r0, #1
 8008ee0:	d01a      	beq.n	8008f18 <CellTemp_SetMuxChannel+0x44>
        HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_SET);
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	2102      	movs	r1, #2
 8008ee6:	4817      	ldr	r0, [pc, #92]	@ (8008f44 <CellTemp_SetMuxChannel+0x70>)
 8008ee8:	f003 fe12 	bl	800cb10 <HAL_GPIO_WritePin>
    if (channel & 0x02) {
 8008eec:	f014 0f02 	tst.w	r4, #2
 8008ef0:	d018      	beq.n	8008f24 <CellTemp_SetMuxChannel+0x50>
        HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_SET);
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008ef8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008efc:	f003 fe08 	bl	800cb10 <HAL_GPIO_WritePin>
    if (channel & 0x04) {
 8008f00:	f014 0f04 	tst.w	r4, #4
 8008f04:	d016      	beq.n	8008f34 <CellTemp_SetMuxChannel+0x60>
        HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_SET);
 8008f06:	2201      	movs	r2, #1
 8008f08:	2120      	movs	r1, #32
 8008f0a:	480e      	ldr	r0, [pc, #56]	@ (8008f44 <CellTemp_SetMuxChannel+0x70>)
 8008f0c:	f003 fe00 	bl	800cb10 <HAL_GPIO_WritePin>
    osDelay(2);
 8008f10:	2002      	movs	r0, #2
 8008f12:	f000 fa81 	bl	8009418 <osDelay>
}
 8008f16:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2102      	movs	r1, #2
 8008f1c:	4809      	ldr	r0, [pc, #36]	@ (8008f44 <CellTemp_SetMuxChannel+0x70>)
 8008f1e:	f003 fdf7 	bl	800cb10 <HAL_GPIO_WritePin>
 8008f22:	e7e3      	b.n	8008eec <CellTemp_SetMuxChannel+0x18>
        HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 8008f24:	2200      	movs	r2, #0
 8008f26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008f2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008f2e:	f003 fdef 	bl	800cb10 <HAL_GPIO_WritePin>
 8008f32:	e7e5      	b.n	8008f00 <CellTemp_SetMuxChannel+0x2c>
        HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 8008f34:	2200      	movs	r2, #0
 8008f36:	2120      	movs	r1, #32
 8008f38:	4802      	ldr	r0, [pc, #8]	@ (8008f44 <CellTemp_SetMuxChannel+0x70>)
 8008f3a:	f003 fde9 	bl	800cb10 <HAL_GPIO_WritePin>
 8008f3e:	e7e7      	b.n	8008f10 <CellTemp_SetMuxChannel+0x3c>
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	48000400 	.word	0x48000400

08008f48 <CellTemp_CalculateTemperature>:
    float voltage = ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 8008f48:	ee07 0a90 	vmov	s15, r0
 8008f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f50:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8008ff8 <CellTemp_CalculateTemperature+0xb0>
 8008f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f58:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008ffc <CellTemp_CalculateTemperature+0xb4>
 8008f5c:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (adc_value < 10) {  // Less than ~8mV indicates disconnected sensor
 8008f60:	2809      	cmp	r0, #9
 8008f62:	d940      	bls.n	8008fe6 <CellTemp_CalculateTemperature+0x9e>
    if (voltage >= 3.29f) {  // Close to 3.3V limit, very high resistance (cold)
 8008f64:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009000 <CellTemp_CalculateTemperature+0xb8>
 8008f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f70:	da36      	bge.n	8008fe0 <CellTemp_CalculateTemperature+0x98>
        r_thermistor = (voltage * PULLUP_RESISTOR) / (ADC_VREF - voltage);
 8008f72:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8009004 <CellTemp_CalculateTemperature+0xbc>
 8008f76:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008f7a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8008ffc <CellTemp_CalculateTemperature+0xb4>
 8008f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    if (r_thermistor <= 0) {
 8008f86:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	d92d      	bls.n	8008fec <CellTemp_CalculateTemperature+0xa4>
{
 8008f90:	b508      	push	{r3, lr}
    float ln_ratio = logf(r_thermistor / THERMISTOR_R25);
 8008f92:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8009004 <CellTemp_CalculateTemperature+0xbc>
 8008f96:	ee87 0a00 	vdiv.f32	s0, s14, s0
 8008f9a:	f006 fcdf 	bl	800f95c <logf>
    float temp_kelvin = 1.0f / ((1.0f / REFERENCE_TEMP_K) + (ln_ratio / THERMISTOR_B_VALUE));
 8008f9e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8009008 <CellTemp_CalculateTemperature+0xc0>
 8008fa2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8008fa6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800900c <CellTemp_CalculateTemperature+0xc4>
 8008faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fb2:	ee87 0a27 	vdiv.f32	s0, s14, s15
    float temp_celsius = temp_kelvin - 273.15f;
 8008fb6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8009010 <CellTemp_CalculateTemperature+0xc8>
 8008fba:	ee30 0a67 	vsub.f32	s0, s0, s15
    if (temp_celsius < -40.0f) {
 8008fbe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009014 <CellTemp_CalculateTemperature+0xcc>
 8008fc2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fca:	d412      	bmi.n	8008ff2 <CellTemp_CalculateTemperature+0xaa>
    } else if (temp_celsius > 125.0f) {
 8008fcc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009018 <CellTemp_CalculateTemperature+0xd0>
 8008fd0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd8:	dd0d      	ble.n	8008ff6 <CellTemp_CalculateTemperature+0xae>
        temp_celsius = 125.0f;
 8008fda:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8009018 <CellTemp_CalculateTemperature+0xd0>
 8008fde:	e00a      	b.n	8008ff6 <CellTemp_CalculateTemperature+0xae>
        r_thermistor = PULLUP_RESISTOR * 100.0f;  // Assume very high resistance
 8008fe0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800901c <CellTemp_CalculateTemperature+0xd4>
 8008fe4:	e7d4      	b.n	8008f90 <CellTemp_CalculateTemperature+0x48>
        return -127.0f;  // Return obvious error value
 8008fe6:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8009020 <CellTemp_CalculateTemperature+0xd8>
 8008fea:	4770      	bx	lr
        return 125.0f; // Return maximum temperature for very low resistance
 8008fec:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8009018 <CellTemp_CalculateTemperature+0xd0>
}
 8008ff0:	4770      	bx	lr
        temp_celsius = -40.0f;
 8008ff2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009014 <CellTemp_CalculateTemperature+0xcc>
}
 8008ff6:	bd08      	pop	{r3, pc}
 8008ff8:	457ff000 	.word	0x457ff000
 8008ffc:	40533333 	.word	0x40533333
 8009000:	40528f5c 	.word	0x40528f5c
 8009004:	461c4000 	.word	0x461c4000
 8009008:	4556b000 	.word	0x4556b000
 800900c:	3b5bcf0f 	.word	0x3b5bcf0f
 8009010:	43889333 	.word	0x43889333
 8009014:	c2200000 	.word	0xc2200000
 8009018:	42fa0000 	.word	0x42fa0000
 800901c:	49742400 	.word	0x49742400
 8009020:	c2fe0000 	.word	0xc2fe0000

08009024 <CellTemp_MonitorTask>:
{
 8009024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (CellTemp_Init() != HAL_OK) {
 8009028:	f7ff fef4 	bl	8008e14 <CellTemp_Init>
 800902c:	4607      	mov	r7, r0
 800902e:	2800      	cmp	r0, #0
 8009030:	f000 80ca 	beq.w	80091c8 <CellTemp_MonitorTask+0x1a4>
            osDelay(1000);  // Wait 1 second (1000 ticks at 1ms tick rate)
 8009034:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009038:	f000 f9ee 	bl	8009418 <osDelay>
        while(1) {
 800903c:	e7fa      	b.n	8009034 <CellTemp_MonitorTask+0x10>
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 800903e:	3401      	adds	r4, #1
 8009040:	b2e4      	uxtb	r4, r4
 8009042:	2c06      	cmp	r4, #6
 8009044:	d813      	bhi.n	800906e <CellTemp_MonitorTask+0x4a>
            if (CellTemp_IsADCEnabled(adc)) {
 8009046:	4620      	mov	r0, r4
 8009048:	f7ff fe5c 	bl	8008d04 <CellTemp_IsADCEnabled>
 800904c:	2800      	cmp	r0, #0
 800904e:	d0f6      	beq.n	800903e <CellTemp_MonitorTask+0x1a>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009050:	00e3      	lsls	r3, r4, #3
 8009052:	b2db      	uxtb	r3, r3
 8009054:	4a9c      	ldr	r2, [pc, #624]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 8009056:	f892 1541 	ldrb.w	r1, [r2, #1345]	@ 0x541
 800905a:	440b      	add	r3, r1
 800905c:	b2db      	uxtb	r3, r3
                temp_state.thermistors[therm_idx].adc_accumulator = 0;
 800905e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009062:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009066:	2000      	movs	r0, #0
 8009068:	6108      	str	r0, [r1, #16]
                temp_state.thermistors[therm_idx].sample_count = 0;
 800906a:	8288      	strh	r0, [r1, #20]
 800906c:	e7e7      	b.n	800903e <CellTemp_MonitorTask+0x1a>
        for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 800906e:	2600      	movs	r6, #0
 8009070:	e02b      	b.n	80090ca <CellTemp_MonitorTask+0xa6>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009072:	3401      	adds	r4, #1
 8009074:	b2e4      	uxtb	r4, r4
 8009076:	2c06      	cmp	r4, #6
 8009078:	d822      	bhi.n	80090c0 <CellTemp_MonitorTask+0x9c>
                if (CellTemp_IsADCEnabled(adc)) {
 800907a:	4620      	mov	r0, r4
 800907c:	f7ff fe42 	bl	8008d04 <CellTemp_IsADCEnabled>
 8009080:	2800      	cmp	r0, #0
 8009082:	d0f6      	beq.n	8009072 <CellTemp_MonitorTask+0x4e>
                    uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009084:	00e5      	lsls	r5, r4, #3
 8009086:	b2ed      	uxtb	r5, r5
 8009088:	4b8f      	ldr	r3, [pc, #572]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 800908a:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 800908e:	441d      	add	r5, r3
 8009090:	b2ed      	uxtb	r5, r5
                    uint16_t adc_value = CellTemp_ReadADC(adc_channels[adc]);
 8009092:	4b8e      	ldr	r3, [pc, #568]	@ (80092cc <CellTemp_MonitorTask+0x2a8>)
 8009094:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009098:	f7ff fefc 	bl	8008e94 <CellTemp_ReadADC>
                    if (adc_value >= 10) {  // Valid reading threshold
 800909c:	2809      	cmp	r0, #9
 800909e:	d9e8      	bls.n	8009072 <CellTemp_MonitorTask+0x4e>
                        therm->adc_accumulator += adc_value;
 80090a0:	4a89      	ldr	r2, [pc, #548]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 80090a2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80090a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090aa:	6919      	ldr	r1, [r3, #16]
 80090ac:	4408      	add	r0, r1
 80090ae:	6118      	str	r0, [r3, #16]
                        therm->sample_count++;
 80090b0:	8a9b      	ldrh	r3, [r3, #20]
 80090b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090b6:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80090ba:	3301      	adds	r3, #1
 80090bc:	8293      	strh	r3, [r2, #20]
 80090be:	e7d8      	b.n	8009072 <CellTemp_MonitorTask+0x4e>
            osDelay(TEMP_SAMPLE_INTERVAL_MS);
 80090c0:	200a      	movs	r0, #10
 80090c2:	f000 f9a9 	bl	8009418 <osDelay>
        for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 80090c6:	3601      	adds	r6, #1
 80090c8:	b2b6      	uxth	r6, r6
 80090ca:	2e0b      	cmp	r6, #11
 80090cc:	d801      	bhi.n	80090d2 <CellTemp_MonitorTask+0xae>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80090ce:	463c      	mov	r4, r7
 80090d0:	e7d1      	b.n	8009076 <CellTemp_MonitorTask+0x52>
        uint32_t current_time = osKernelGetTickCount();
 80090d2:	f000 f93d 	bl	8009350 <osKernelGetTickCount>
 80090d6:	4606      	mov	r6, r0
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80090d8:	463c      	mov	r4, r7
 80090da:	e026      	b.n	800912a <CellTemp_MonitorTask+0x106>
                            ErrorMgr_SetError(ERROR_OVER_TEMP);
 80090dc:	2001      	movs	r0, #1
 80090de:	f000 fcb9 	bl	8009a54 <ErrorMgr_SetError>
 80090e2:	e020      	b.n	8009126 <CellTemp_MonitorTask+0x102>
                        ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 80090e4:	2004      	movs	r0, #4
 80090e6:	f000 fcb5 	bl	8009a54 <ErrorMgr_SetError>
 80090ea:	e01c      	b.n	8009126 <CellTemp_MonitorTask+0x102>
                    therm->raw_adc = 0;
 80090ec:	4b76      	ldr	r3, [pc, #472]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 80090ee:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80090f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80090f6:	2100      	movs	r1, #0
 80090f8:	8111      	strh	r1, [r2, #8]
                    therm->temperature = -127.0f;
 80090fa:	4613      	mov	r3, r2
 80090fc:	4a74      	ldr	r2, [pc, #464]	@ (80092d0 <CellTemp_MonitorTask+0x2ac>)
 80090fe:	605a      	str	r2, [r3, #4]
                    ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 8009100:	2004      	movs	r0, #4
 8009102:	f000 fca7 	bl	8009a54 <ErrorMgr_SetError>
 8009106:	e00e      	b.n	8009126 <CellTemp_MonitorTask+0x102>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009108:	00e3      	lsls	r3, r4, #3
 800910a:	b2db      	uxtb	r3, r3
 800910c:	4a6e      	ldr	r2, [pc, #440]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 800910e:	f892 1541 	ldrb.w	r1, [r2, #1345]	@ 0x541
 8009112:	440b      	add	r3, r1
 8009114:	b2db      	uxtb	r3, r3
                temp_state.thermistors[therm_idx].temperature = -127.0f;
 8009116:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800911a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800911e:	486c      	ldr	r0, [pc, #432]	@ (80092d0 <CellTemp_MonitorTask+0x2ac>)
 8009120:	6048      	str	r0, [r1, #4]
                temp_state.thermistors[therm_idx].raw_adc = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	810b      	strh	r3, [r1, #8]
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009126:	3401      	adds	r4, #1
 8009128:	b2e4      	uxtb	r4, r4
 800912a:	2c06      	cmp	r4, #6
 800912c:	d83c      	bhi.n	80091a8 <CellTemp_MonitorTask+0x184>
            if (CellTemp_IsADCEnabled(adc)) {
 800912e:	4620      	mov	r0, r4
 8009130:	f7ff fde8 	bl	8008d04 <CellTemp_IsADCEnabled>
 8009134:	2800      	cmp	r0, #0
 8009136:	d0e7      	beq.n	8009108 <CellTemp_MonitorTask+0xe4>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009138:	00e5      	lsls	r5, r4, #3
 800913a:	b2ed      	uxtb	r5, r5
 800913c:	4b62      	ldr	r3, [pc, #392]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 800913e:	f893 2541 	ldrb.w	r2, [r3, #1345]	@ 0x541
 8009142:	4415      	add	r5, r2
 8009144:	b2ed      	uxtb	r5, r5
                if (therm->sample_count > 0) {
 8009146:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800914a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800914e:	8a9b      	ldrh	r3, [r3, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d0cb      	beq.n	80090ec <CellTemp_MonitorTask+0xc8>
                    therm->raw_adc = (uint16_t)(therm->adc_accumulator / therm->sample_count);
 8009154:	f8df 9170 	ldr.w	r9, [pc, #368]	@ 80092c8 <CellTemp_MonitorTask+0x2a4>
 8009158:	eb09 08c2 	add.w	r8, r9, r2, lsl #3
 800915c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8009160:	fbb0 f0f3 	udiv	r0, r0, r3
 8009164:	b280      	uxth	r0, r0
 8009166:	f8a8 0008 	strh.w	r0, [r8, #8]
                    therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 800916a:	f7ff feed 	bl	8008f48 <CellTemp_CalculateTemperature>
 800916e:	ed88 0a01 	vstr	s0, [r8, #4]
                    therm->last_read_time = current_time;
 8009172:	f8c8 600c 	str.w	r6, [r8, #12]
                    if (therm->temperature > -126.0f) {  // Valid temperature reading
 8009176:	eddf 7a57 	vldr	s15, [pc, #348]	@ 80092d4 <CellTemp_MonitorTask+0x2b0>
 800917a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800917e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009182:	ddaf      	ble.n	80090e4 <CellTemp_MonitorTask+0xc0>
                        if (therm->temperature > TEMP_MAX_CELSIUS) {
 8009184:	eddf 7a54 	vldr	s15, [pc, #336]	@ 80092d8 <CellTemp_MonitorTask+0x2b4>
 8009188:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800918c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009190:	dca4      	bgt.n	80090dc <CellTemp_MonitorTask+0xb8>
                        } else if (therm->temperature < TEMP_MIN_CELSIUS) {
 8009192:	eefb 7a04 	vmov.f32	s15, #180	@ 0xc1a00000 -20.0
 8009196:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800919a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919e:	d5c2      	bpl.n	8009126 <CellTemp_MonitorTask+0x102>
                            ErrorMgr_SetError(ERROR_UNDER_TEMP);
 80091a0:	2002      	movs	r0, #2
 80091a2:	f000 fc57 	bl	8009a54 <ErrorMgr_SetError>
 80091a6:	e7be      	b.n	8009126 <CellTemp_MonitorTask+0x102>
        if (temp_state.current_mux == 3 || temp_state.current_mux == 7) {
 80091a8:	4b47      	ldr	r3, [pc, #284]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 80091aa:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d039      	beq.n	8009226 <CellTemp_MonitorTask+0x202>
 80091b2:	2b07      	cmp	r3, #7
 80091b4:	d039      	beq.n	800922a <CellTemp_MonitorTask+0x206>
        temp_state.current_mux++;
 80091b6:	4a44      	ldr	r2, [pc, #272]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 80091b8:	f892 3541 	ldrb.w	r3, [r2, #1345]	@ 0x541
 80091bc:	3301      	adds	r3, #1
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	f882 3541 	strb.w	r3, [r2, #1345]	@ 0x541
        if (temp_state.current_mux >= MUX_CHANNELS) {
 80091c4:	2b07      	cmp	r3, #7
 80091c6:	d832      	bhi.n	800922e <CellTemp_MonitorTask+0x20a>
        CellTemp_SetMuxChannel(temp_state.current_mux);
 80091c8:	4b3f      	ldr	r3, [pc, #252]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 80091ca:	f893 0541 	ldrb.w	r0, [r3, #1345]	@ 0x541
 80091ce:	f7ff fe81 	bl	8008ed4 <CellTemp_SetMuxChannel>
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80091d2:	463c      	mov	r4, r7
 80091d4:	e735      	b.n	8009042 <CellTemp_MonitorTask+0x1e>
                        uint8_t msg_idx = adc * 2;
 80091d6:	0060      	lsls	r0, r4, #1
                        uint8_t start_therm_idx = adc * MUX_CHANNELS;
 80091d8:	00e1      	lsls	r1, r4, #3
                        CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 80091da:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80091de:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 80091e2:	f7ff fdb5 	bl	8008d50 <CellTemp_SendTemperatureMessage>
                        osDelay(2); // Small delay between messages
 80091e6:	2002      	movs	r0, #2
 80091e8:	f000 f916 	bl	8009418 <osDelay>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 80091ec:	3401      	adds	r4, #1
 80091ee:	b2e4      	uxtb	r4, r4
 80091f0:	2c06      	cmp	r4, #6
 80091f2:	d8e0      	bhi.n	80091b6 <CellTemp_MonitorTask+0x192>
                if (CellTemp_IsADCEnabled(adc)) {
 80091f4:	4620      	mov	r0, r4
 80091f6:	f7ff fd85 	bl	8008d04 <CellTemp_IsADCEnabled>
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d0f6      	beq.n	80091ec <CellTemp_MonitorTask+0x1c8>
                    if (temp_state.current_mux == 3) {
 80091fe:	4b32      	ldr	r3, [pc, #200]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 8009200:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8009204:	2b03      	cmp	r3, #3
 8009206:	d0e6      	beq.n	80091d6 <CellTemp_MonitorTask+0x1b2>
                        uint8_t msg_idx = adc * 2 + 1;
 8009208:	0060      	lsls	r0, r4, #1
 800920a:	b2c0      	uxtb	r0, r0
 800920c:	3001      	adds	r0, #1
                        uint8_t start_therm_idx = adc * MUX_CHANNELS + 4;
 800920e:	00e1      	lsls	r1, r4, #3
 8009210:	b2c9      	uxtb	r1, r1
 8009212:	3104      	adds	r1, #4
                        CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 8009214:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8009218:	b2c0      	uxtb	r0, r0
 800921a:	f7ff fd99 	bl	8008d50 <CellTemp_SendTemperatureMessage>
                        osDelay(2); // Small delay between messages
 800921e:	2002      	movs	r0, #2
 8009220:	f000 f8fa 	bl	8009418 <osDelay>
 8009224:	e7e2      	b.n	80091ec <CellTemp_MonitorTask+0x1c8>
 8009226:	463c      	mov	r4, r7
 8009228:	e7e2      	b.n	80091f0 <CellTemp_MonitorTask+0x1cc>
 800922a:	463c      	mov	r4, r7
 800922c:	e7e0      	b.n	80091f0 <CellTemp_MonitorTask+0x1cc>
            temp_state.current_mux = 0;
 800922e:	4613      	mov	r3, r2
 8009230:	2200      	movs	r2, #0
 8009232:	f883 2541 	strb.w	r2, [r3, #1345]	@ 0x541
            temp_state.cycle_count++;
 8009236:	f8d3 2544 	ldr.w	r2, [r3, #1348]	@ 0x544
 800923a:	3201      	adds	r2, #1
 800923c:	f8c3 2544 	str.w	r2, [r3, #1348]	@ 0x544
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8009240:	463c      	mov	r4, r7
            uint8_t any_sensor_fault = 0;
 8009242:	463d      	mov	r5, r7
            uint8_t any_under_temp = 0;
 8009244:	46b8      	mov	r8, r7
            uint8_t any_over_temp = 0;
 8009246:	463e      	mov	r6, r7
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8009248:	e002      	b.n	8009250 <CellTemp_MonitorTask+0x22c>
                        any_sensor_fault = 1;
 800924a:	2501      	movs	r5, #1
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 800924c:	3401      	adds	r4, #1
 800924e:	b2e4      	uxtb	r4, r4
 8009250:	2c37      	cmp	r4, #55	@ 0x37
 8009252:	d826      	bhi.n	80092a2 <CellTemp_MonitorTask+0x27e>
                if (CellTemp_IsADCEnabled(therm_adc)) {
 8009254:	f3c4 00c7 	ubfx	r0, r4, #3, #8
 8009258:	f7ff fd54 	bl	8008d04 <CellTemp_IsADCEnabled>
 800925c:	2800      	cmp	r0, #0
 800925e:	d0f5      	beq.n	800924c <CellTemp_MonitorTask+0x228>
                    float temp = temp_state.thermistors[i].temperature;
 8009260:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8009264:	4b18      	ldr	r3, [pc, #96]	@ (80092c8 <CellTemp_MonitorTask+0x2a4>)
 8009266:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800926a:	edd3 7a01 	vldr	s15, [r3, #4]
                    if (temp <= -126.0f) {
 800926e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80092d4 <CellTemp_MonitorTask+0x2b0>
 8009272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927a:	d9e6      	bls.n	800924a <CellTemp_MonitorTask+0x226>
                    } else if (temp > TEMP_MAX_CELSIUS) {
 800927c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80092d8 <CellTemp_MonitorTask+0x2b4>
 8009280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009288:	dc09      	bgt.n	800929e <CellTemp_MonitorTask+0x27a>
                    } else if (temp < TEMP_MIN_CELSIUS) {
 800928a:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 800928e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009296:	d5d9      	bpl.n	800924c <CellTemp_MonitorTask+0x228>
                        any_under_temp = 1;
 8009298:	f04f 0801 	mov.w	r8, #1
 800929c:	e7d6      	b.n	800924c <CellTemp_MonitorTask+0x228>
                        any_over_temp = 1;
 800929e:	2601      	movs	r6, #1
 80092a0:	e7d4      	b.n	800924c <CellTemp_MonitorTask+0x228>
            if (!any_over_temp) {
 80092a2:	b146      	cbz	r6, 80092b6 <CellTemp_MonitorTask+0x292>
            if (!any_under_temp) {
 80092a4:	f1b8 0f00 	cmp.w	r8, #0
 80092a8:	d009      	beq.n	80092be <CellTemp_MonitorTask+0x29a>
            if (!any_sensor_fault) {
 80092aa:	2d00      	cmp	r5, #0
 80092ac:	d18c      	bne.n	80091c8 <CellTemp_MonitorTask+0x1a4>
                ErrorMgr_ClearError(ERROR_TEMP_SENSOR_FAULT);
 80092ae:	2004      	movs	r0, #4
 80092b0:	f000 fbf6 	bl	8009aa0 <ErrorMgr_ClearError>
 80092b4:	e788      	b.n	80091c8 <CellTemp_MonitorTask+0x1a4>
                ErrorMgr_ClearError(ERROR_OVER_TEMP);
 80092b6:	2001      	movs	r0, #1
 80092b8:	f000 fbf2 	bl	8009aa0 <ErrorMgr_ClearError>
 80092bc:	e7f2      	b.n	80092a4 <CellTemp_MonitorTask+0x280>
                ErrorMgr_ClearError(ERROR_UNDER_TEMP);
 80092be:	2002      	movs	r0, #2
 80092c0:	f000 fbee 	bl	8009aa0 <ErrorMgr_ClearError>
 80092c4:	e7f1      	b.n	80092aa <CellTemp_MonitorTask+0x286>
 80092c6:	bf00      	nop
 80092c8:	20000100 	.word	0x20000100
 80092cc:	0800fcc0 	.word	0x0800fcc0
 80092d0:	c2fe0000 	.word	0xc2fe0000
 80092d4:	c2fc0000 	.word	0xc2fc0000
 80092d8:	42700000 	.word	0x42700000

080092dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80092dc:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80092de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80092e2:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80092e4:	f005 ffa4 	bl	800f230 <xTaskGetSchedulerState>
 80092e8:	2801      	cmp	r0, #1
 80092ea:	d100      	bne.n	80092ee <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 80092ec:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80092ee:	f001 f961 	bl	800a5b4 <xPortSysTickHandler>
}
 80092f2:	e7fb      	b.n	80092ec <SysTick_Handler+0x10>

080092f4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092f4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80092f8:	b92b      	cbnz	r3, 8009306 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80092fa:	4b06      	ldr	r3, [pc, #24]	@ (8009314 <osKernelInitialize+0x20>)
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	b928      	cbnz	r0, 800930c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009300:	2201      	movs	r2, #1
 8009302:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009304:	4770      	bx	lr
    stat = osErrorISR;
 8009306:	f06f 0005 	mvn.w	r0, #5
 800930a:	4770      	bx	lr
    } else {
      stat = osError;
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009310:	4770      	bx	lr
 8009312:	bf00      	nop
 8009314:	20000d04 	.word	0x20000d04

08009318 <osKernelStart>:
 8009318:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800931c:	b973      	cbnz	r3, 800933c <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800931e:	4b0a      	ldr	r3, [pc, #40]	@ (8009348 <osKernelStart+0x30>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d10d      	bne.n	8009342 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8009326:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009328:	2400      	movs	r4, #0
 800932a:	4b08      	ldr	r3, [pc, #32]	@ (800934c <osKernelStart+0x34>)
 800932c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800932e:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <osKernelStart+0x30>)
 8009330:	2202      	movs	r2, #2
 8009332:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009334:	f005 fcca 	bl	800eccc <vTaskStartScheduler>
      stat = osOK;
 8009338:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800933a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800933c:	f06f 0005 	mvn.w	r0, #5
 8009340:	4770      	bx	lr
      stat = osError;
 8009342:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009346:	4770      	bx	lr
 8009348:	20000d04 	.word	0x20000d04
 800934c:	e000ed00 	.word	0xe000ed00

08009350 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009350:	b508      	push	{r3, lr}
 8009352:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 8009356:	b113      	cbz	r3, 800935e <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 8009358:	f005 fd12 	bl	800ed80 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 800935c:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 800935e:	f005 fd09 	bl	800ed74 <xTaskGetTickCount>
  return (ticks);
 8009362:	e7fb      	b.n	800935c <osKernelGetTickCount+0xc>

08009364 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009366:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009368:	2400      	movs	r4, #0
 800936a:	9405      	str	r4, [sp, #20]
 800936c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009370:	bb04      	cbnz	r4, 80093b4 <osThreadNew+0x50>
 8009372:	b1f8      	cbz	r0, 80093b4 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009374:	2a00      	cmp	r2, #0
 8009376:	d034      	beq.n	80093e2 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8009378:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800937a:	6993      	ldr	r3, [r2, #24]
 800937c:	b12b      	cbz	r3, 800938a <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 800937e:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009380:	3b01      	subs	r3, #1
 8009382:	2b37      	cmp	r3, #55	@ 0x37
 8009384:	d902      	bls.n	800938c <osThreadNew+0x28>
        return (NULL);
 8009386:	2000      	movs	r0, #0
 8009388:	e015      	b.n	80093b6 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 800938a:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800938c:	6853      	ldr	r3, [r2, #4]
 800938e:	f013 0f01 	tst.w	r3, #1
 8009392:	d13f      	bne.n	8009414 <osThreadNew+0xb0>
      }

      if (attr->stack_size > 0U) {
 8009394:	6954      	ldr	r4, [r2, #20]
 8009396:	b184      	cbz	r4, 80093ba <osThreadNew+0x56>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009398:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800939c:	6893      	ldr	r3, [r2, #8]
 800939e:	b12b      	cbz	r3, 80093ac <osThreadNew+0x48>
 80093a0:	68d7      	ldr	r7, [r2, #12]
 80093a2:	2f5b      	cmp	r7, #91	@ 0x5b
 80093a4:	d902      	bls.n	80093ac <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093a6:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093a8:	b107      	cbz	r7, 80093ac <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093aa:	b984      	cbnz	r4, 80093ce <osThreadNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80093ac:	b143      	cbz	r3, 80093c0 <osThreadNew+0x5c>
    mem  = -1;
 80093ae:	f04f 33ff 	mov.w	r3, #4294967295
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80093b2:	b30b      	cbz	r3, 80093f8 <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093b4:	9805      	ldr	r0, [sp, #20]
}
 80093b6:	b007      	add	sp, #28
 80093b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80093ba:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80093be:	e7ed      	b.n	800939c <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80093c0:	68d3      	ldr	r3, [r2, #12]
 80093c2:	b9a3      	cbnz	r3, 80093ee <osThreadNew+0x8a>
 80093c4:	6913      	ldr	r3, [r2, #16]
 80093c6:	b1ab      	cbz	r3, 80093f4 <osThreadNew+0x90>
    mem  = -1;
 80093c8:	f04f 33ff 	mov.w	r3, #4294967295
 80093cc:	e7f1      	b.n	80093b2 <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093ce:	9302      	str	r3, [sp, #8]
 80093d0:	9701      	str	r7, [sp, #4]
 80093d2:	9600      	str	r6, [sp, #0]
 80093d4:	460b      	mov	r3, r1
 80093d6:	4662      	mov	r2, ip
 80093d8:	4629      	mov	r1, r5
 80093da:	f005 fc09 	bl	800ebf0 <xTaskCreateStatic>
 80093de:	9005      	str	r0, [sp, #20]
 80093e0:	e7e8      	b.n	80093b4 <osThreadNew+0x50>
    name = NULL;
 80093e2:	4615      	mov	r5, r2
      mem = 0;
 80093e4:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80093e6:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 80093e8:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 80093ec:	e7e1      	b.n	80093b2 <osThreadNew+0x4e>
    mem  = -1;
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	e7de      	b.n	80093b2 <osThreadNew+0x4e>
          mem = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	e7dc      	b.n	80093b2 <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80093f8:	ab05      	add	r3, sp, #20
 80093fa:	9301      	str	r3, [sp, #4]
 80093fc:	9600      	str	r6, [sp, #0]
 80093fe:	460b      	mov	r3, r1
 8009400:	fa1f f28c 	uxth.w	r2, ip
 8009404:	4629      	mov	r1, r5
 8009406:	f005 fc2e 	bl	800ec66 <xTaskCreate>
 800940a:	2801      	cmp	r0, #1
 800940c:	d0d2      	beq.n	80093b4 <osThreadNew+0x50>
            hTask = NULL;
 800940e:	2300      	movs	r3, #0
 8009410:	9305      	str	r3, [sp, #20]
 8009412:	e7cf      	b.n	80093b4 <osThreadNew+0x50>
        return (NULL);
 8009414:	2000      	movs	r0, #0
 8009416:	e7ce      	b.n	80093b6 <osThreadNew+0x52>

08009418 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009418:	b508      	push	{r3, lr}
 800941a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800941e:	b933      	cbnz	r3, 800942e <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009420:	b908      	cbnz	r0, 8009426 <osDelay+0xe>
    stat = osOK;
 8009422:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8009424:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8009426:	f005 fdbb 	bl	800efa0 <vTaskDelay>
    stat = osOK;
 800942a:	2000      	movs	r0, #0
 800942c:	e7fa      	b.n	8009424 <osDelay+0xc>
    stat = osErrorISR;
 800942e:	f06f 0005 	mvn.w	r0, #5
 8009432:	e7f7      	b.n	8009424 <osDelay+0xc>

08009434 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800943a:	2e00      	cmp	r6, #0
 800943c:	d13e      	bne.n	80094bc <osMutexNew+0x88>
 800943e:	4604      	mov	r4, r0
    if (attr != NULL) {
 8009440:	b308      	cbz	r0, 8009486 <osMutexNew+0x52>
      type = attr->attr_bits;
 8009442:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009444:	f013 0601 	ands.w	r6, r3, #1
 8009448:	d000      	beq.n	800944c <osMutexNew+0x18>
      rmtx = 1U;
 800944a:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800944c:	f013 0f08 	tst.w	r3, #8
 8009450:	d137      	bne.n	80094c2 <osMutexNew+0x8e>
      mem = -1;

      if (attr != NULL) {
 8009452:	b354      	cbz	r4, 80094aa <osMutexNew+0x76>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009454:	68a1      	ldr	r1, [r4, #8]
 8009456:	b111      	cbz	r1, 800945e <osMutexNew+0x2a>
 8009458:	68e3      	ldr	r3, [r4, #12]
 800945a:	2b4f      	cmp	r3, #79	@ 0x4f
 800945c:	d81a      	bhi.n	8009494 <osMutexNew+0x60>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800945e:	b1a1      	cbz	r1, 800948a <osMutexNew+0x56>
      mem = -1;
 8009460:	f04f 33ff 	mov.w	r3, #4294967295
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009464:	bb7b      	cbnz	r3, 80094c6 <osMutexNew+0x92>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009466:	b326      	cbz	r6, 80094b2 <osMutexNew+0x7e>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009468:	2004      	movs	r0, #4
 800946a:	f001 fbc0 	bl	800abee <xQueueCreateMutex>
 800946e:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009470:	b32d      	cbz	r5, 80094be <osMutexNew+0x8a>
        if (attr != NULL) {
 8009472:	b104      	cbz	r4, 8009476 <osMutexNew+0x42>
          name = attr->name;
 8009474:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8009476:	4621      	mov	r1, r4
 8009478:	4628      	mov	r0, r5
 800947a:	f001 fe53 	bl	800b124 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800947e:	b1f6      	cbz	r6, 80094be <osMutexNew+0x8a>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009480:	f045 0501 	orr.w	r5, r5, #1
 8009484:	e01b      	b.n	80094be <osMutexNew+0x8a>
      type = 0U;
 8009486:	4633      	mov	r3, r6
 8009488:	e7e0      	b.n	800944c <osMutexNew+0x18>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800948a:	68e3      	ldr	r3, [r4, #12]
 800948c:	b17b      	cbz	r3, 80094ae <osMutexNew+0x7a>
      mem = -1;
 800948e:	f04f 33ff 	mov.w	r3, #4294967295
 8009492:	e7e7      	b.n	8009464 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8009494:	b126      	cbz	r6, 80094a0 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009496:	2004      	movs	r0, #4
 8009498:	f001 fbb4 	bl	800ac04 <xQueueCreateMutexStatic>
 800949c:	4605      	mov	r5, r0
 800949e:	e7e7      	b.n	8009470 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80094a0:	2001      	movs	r0, #1
 80094a2:	f001 fbaf 	bl	800ac04 <xQueueCreateMutexStatic>
 80094a6:	4605      	mov	r5, r0
 80094a8:	e7e2      	b.n	8009470 <osMutexNew+0x3c>
        mem = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	e7da      	b.n	8009464 <osMutexNew+0x30>
            mem = 0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	e7d8      	b.n	8009464 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 80094b2:	2001      	movs	r0, #1
 80094b4:	f001 fb9b 	bl	800abee <xQueueCreateMutex>
 80094b8:	4605      	mov	r5, r0
 80094ba:	e7d9      	b.n	8009470 <osMutexNew+0x3c>
  hMutex = NULL;
 80094bc:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80094be:	4628      	mov	r0, r5
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 80094c2:	2500      	movs	r5, #0
 80094c4:	e7fb      	b.n	80094be <osMutexNew+0x8a>
 80094c6:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 80094c8:	e7f9      	b.n	80094be <osMutexNew+0x8a>

080094ca <osMutexAcquire>:
 80094ca:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80094ce:	b9da      	cbnz	r2, 8009508 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80094d0:	b510      	push	{r4, lr}
 80094d2:	4603      	mov	r3, r0
 80094d4:	460c      	mov	r4, r1
 80094d6:	f020 0001 	bic.w	r0, r0, #1
 80094da:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d915      	bls.n	800950e <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80094e2:	b141      	cbz	r1, 80094f6 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80094e4:	4621      	mov	r1, r4
 80094e6:	f001 fda5 	bl	800b034 <xQueueTakeMutexRecursive>
 80094ea:	2801      	cmp	r0, #1
 80094ec:	d012      	beq.n	8009514 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 80094ee:	b19c      	cbz	r4, 8009518 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 80094f0:	f06f 0001 	mvn.w	r0, #1
 80094f4:	e00f      	b.n	8009516 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80094f6:	4621      	mov	r1, r4
 80094f8:	f001 fcc9 	bl	800ae8e <xQueueSemaphoreTake>
 80094fc:	2801      	cmp	r0, #1
 80094fe:	d00e      	beq.n	800951e <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8009500:	b17c      	cbz	r4, 8009522 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8009502:	f06f 0001 	mvn.w	r0, #1
 8009506:	e006      	b.n	8009516 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8009508:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 800950c:	4770      	bx	lr
    stat = osErrorParameter;
 800950e:	f06f 0003 	mvn.w	r0, #3
 8009512:	e000      	b.n	8009516 <osMutexAcquire+0x4c>
  stat = osOK;
 8009514:	2000      	movs	r0, #0
}
 8009516:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8009518:	f06f 0002 	mvn.w	r0, #2
 800951c:	e7fb      	b.n	8009516 <osMutexAcquire+0x4c>
  stat = osOK;
 800951e:	2000      	movs	r0, #0
 8009520:	e7f9      	b.n	8009516 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8009522:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009526:	e7f6      	b.n	8009516 <osMutexAcquire+0x4c>

08009528 <osMutexRelease>:
 8009528:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 800952c:	b9ba      	cbnz	r2, 800955e <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800952e:	b508      	push	{r3, lr}
 8009530:	4603      	mov	r3, r0
 8009532:	f020 0001 	bic.w	r0, r0, #1
 8009536:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800953a:	2b01      	cmp	r3, #1
 800953c:	d912      	bls.n	8009564 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800953e:	b129      	cbz	r1, 800954c <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009540:	f001 fb6f 	bl	800ac22 <xQueueGiveMutexRecursive>
 8009544:	2801      	cmp	r0, #1
 8009546:	d110      	bne.n	800956a <osMutexRelease+0x42>
  stat = osOK;
 8009548:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800954a:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800954c:	2300      	movs	r3, #0
 800954e:	461a      	mov	r2, r3
 8009550:	4619      	mov	r1, r3
 8009552:	f001 fa7c 	bl	800aa4e <xQueueGenericSend>
 8009556:	2801      	cmp	r0, #1
 8009558:	d10a      	bne.n	8009570 <osMutexRelease+0x48>
  stat = osOK;
 800955a:	2000      	movs	r0, #0
 800955c:	e7f5      	b.n	800954a <osMutexRelease+0x22>
    stat = osErrorISR;
 800955e:	f06f 0005 	mvn.w	r0, #5
}
 8009562:	4770      	bx	lr
    stat = osErrorParameter;
 8009564:	f06f 0003 	mvn.w	r0, #3
 8009568:	e7ef      	b.n	800954a <osMutexRelease+0x22>
        stat = osErrorResource;
 800956a:	f06f 0002 	mvn.w	r0, #2
 800956e:	e7ec      	b.n	800954a <osMutexRelease+0x22>
        stat = osErrorResource;
 8009570:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009574:	e7e9      	b.n	800954a <osMutexRelease+0x22>

08009576 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009576:	b570      	push	{r4, r5, r6, lr}
 8009578:	b082      	sub	sp, #8
 800957a:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800957e:	2b00      	cmp	r3, #0
 8009580:	d13a      	bne.n	80095f8 <osMessageQueueNew+0x82>
 8009582:	4614      	mov	r4, r2
 8009584:	2800      	cmp	r0, #0
 8009586:	d03b      	beq.n	8009600 <osMessageQueueNew+0x8a>
 8009588:	2900      	cmp	r1, #0
 800958a:	d03b      	beq.n	8009604 <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 800958c:	b36a      	cbz	r2, 80095ea <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800958e:	6893      	ldr	r3, [r2, #8]
 8009590:	b14b      	cbz	r3, 80095a6 <osMessageQueueNew+0x30>
 8009592:	68d2      	ldr	r2, [r2, #12]
 8009594:	2a4f      	cmp	r2, #79	@ 0x4f
 8009596:	d906      	bls.n	80095a6 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009598:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800959a:	b122      	cbz	r2, 80095a6 <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800959c:	fb01 f500 	mul.w	r5, r1, r0
 80095a0:	6966      	ldr	r6, [r4, #20]
 80095a2:	42ae      	cmp	r6, r5
 80095a4:	d21b      	bcs.n	80095de <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095a6:	b173      	cbz	r3, 80095c6 <osMessageQueueNew+0x50>
    mem = -1;
 80095a8:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 80095ac:	bb63      	cbnz	r3, 8009608 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80095ae:	2200      	movs	r2, #0
 80095b0:	f001 fa29 	bl	800aa06 <xQueueGenericCreate>
 80095b4:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80095b6:	b305      	cbz	r5, 80095fa <osMessageQueueNew+0x84>
      if (attr != NULL) {
 80095b8:	b104      	cbz	r4, 80095bc <osMessageQueueNew+0x46>
        name = attr->name;
 80095ba:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 80095bc:	4621      	mov	r1, r4
 80095be:	4628      	mov	r0, r5
 80095c0:	f001 fdb0 	bl	800b124 <vQueueAddToRegistry>
 80095c4:	e019      	b.n	80095fa <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095c6:	68e3      	ldr	r3, [r4, #12]
 80095c8:	b98b      	cbnz	r3, 80095ee <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095ca:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095cc:	b113      	cbz	r3, 80095d4 <osMessageQueueNew+0x5e>
    mem = -1;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295
 80095d2:	e7eb      	b.n	80095ac <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095d4:	6963      	ldr	r3, [r4, #20]
 80095d6:	b16b      	cbz	r3, 80095f4 <osMessageQueueNew+0x7e>
    mem = -1;
 80095d8:	f04f 33ff 	mov.w	r3, #4294967295
 80095dc:	e7e6      	b.n	80095ac <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80095de:	2500      	movs	r5, #0
 80095e0:	9500      	str	r5, [sp, #0]
 80095e2:	f001 f9c6 	bl	800a972 <xQueueGenericCreateStatic>
 80095e6:	4605      	mov	r5, r0
 80095e8:	e7e5      	b.n	80095b6 <osMessageQueueNew+0x40>
      mem = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	e7de      	b.n	80095ac <osMessageQueueNew+0x36>
    mem = -1;
 80095ee:	f04f 33ff 	mov.w	r3, #4294967295
 80095f2:	e7db      	b.n	80095ac <osMessageQueueNew+0x36>
          mem = 0;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e7d9      	b.n	80095ac <osMessageQueueNew+0x36>
  hQueue = NULL;
 80095f8:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80095fa:	4628      	mov	r0, r5
 80095fc:	b002      	add	sp, #8
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8009600:	2500      	movs	r5, #0
 8009602:	e7fa      	b.n	80095fa <osMessageQueueNew+0x84>
 8009604:	2500      	movs	r5, #0
 8009606:	e7f8      	b.n	80095fa <osMessageQueueNew+0x84>
 8009608:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800960a:	e7f6      	b.n	80095fa <osMessageQueueNew+0x84>

0800960c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800960c:	b510      	push	{r4, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	461c      	mov	r4, r3
 8009612:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009616:	b1c3      	cbz	r3, 800964a <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009618:	b318      	cbz	r0, 8009662 <osMessageQueuePut+0x56>
 800961a:	b329      	cbz	r1, 8009668 <osMessageQueuePut+0x5c>
 800961c:	bb3c      	cbnz	r4, 800966e <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800961e:	2300      	movs	r3, #0
 8009620:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009622:	aa01      	add	r2, sp, #4
 8009624:	f001 fb1d 	bl	800ac62 <xQueueGenericSendFromISR>
 8009628:	2801      	cmp	r0, #1
 800962a:	d123      	bne.n	8009674 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800962c:	9801      	ldr	r0, [sp, #4]
 800962e:	b150      	cbz	r0, 8009646 <osMessageQueuePut+0x3a>
 8009630:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009638:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009644:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009646:	b002      	add	sp, #8
 8009648:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800964a:	b1b0      	cbz	r0, 800967a <osMessageQueuePut+0x6e>
 800964c:	b1c1      	cbz	r1, 8009680 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800964e:	2300      	movs	r3, #0
 8009650:	4622      	mov	r2, r4
 8009652:	f001 f9fc 	bl	800aa4e <xQueueGenericSend>
 8009656:	2801      	cmp	r0, #1
 8009658:	d015      	beq.n	8009686 <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 800965a:	b1b4      	cbz	r4, 800968a <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 800965c:	f06f 0001 	mvn.w	r0, #1
 8009660:	e7f1      	b.n	8009646 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 8009662:	f06f 0003 	mvn.w	r0, #3
 8009666:	e7ee      	b.n	8009646 <osMessageQueuePut+0x3a>
 8009668:	f06f 0003 	mvn.w	r0, #3
 800966c:	e7eb      	b.n	8009646 <osMessageQueuePut+0x3a>
 800966e:	f06f 0003 	mvn.w	r0, #3
 8009672:	e7e8      	b.n	8009646 <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 8009674:	f06f 0002 	mvn.w	r0, #2
 8009678:	e7e5      	b.n	8009646 <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 800967a:	f06f 0003 	mvn.w	r0, #3
 800967e:	e7e2      	b.n	8009646 <osMessageQueuePut+0x3a>
 8009680:	f06f 0003 	mvn.w	r0, #3
 8009684:	e7df      	b.n	8009646 <osMessageQueuePut+0x3a>
  stat = osOK;
 8009686:	2000      	movs	r0, #0
 8009688:	e7dd      	b.n	8009646 <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 800968a:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800968e:	e7da      	b.n	8009646 <osMessageQueuePut+0x3a>

08009690 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009690:	b510      	push	{r4, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	461c      	mov	r4, r3
 8009696:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800969a:	b1c3      	cbz	r3, 80096ce <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800969c:	b310      	cbz	r0, 80096e4 <osMessageQueueGet+0x54>
 800969e:	b321      	cbz	r1, 80096ea <osMessageQueueGet+0x5a>
 80096a0:	bb34      	cbnz	r4, 80096f0 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 80096a2:	2300      	movs	r3, #0
 80096a4:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80096a6:	aa01      	add	r2, sp, #4
 80096a8:	f001 fce4 	bl	800b074 <xQueueReceiveFromISR>
 80096ac:	2801      	cmp	r0, #1
 80096ae:	d122      	bne.n	80096f6 <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80096b0:	9801      	ldr	r0, [sp, #4]
 80096b2:	b150      	cbz	r0, 80096ca <osMessageQueueGet+0x3a>
 80096b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80096b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80096c8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80096ca:	b002      	add	sp, #8
 80096cc:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80096ce:	b1a8      	cbz	r0, 80096fc <osMessageQueueGet+0x6c>
 80096d0:	b1b9      	cbz	r1, 8009702 <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80096d2:	4622      	mov	r2, r4
 80096d4:	f001 fb2c 	bl	800ad30 <xQueueReceive>
 80096d8:	2801      	cmp	r0, #1
 80096da:	d015      	beq.n	8009708 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 80096dc:	b1b4      	cbz	r4, 800970c <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 80096de:	f06f 0001 	mvn.w	r0, #1
 80096e2:	e7f2      	b.n	80096ca <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80096e4:	f06f 0003 	mvn.w	r0, #3
 80096e8:	e7ef      	b.n	80096ca <osMessageQueueGet+0x3a>
 80096ea:	f06f 0003 	mvn.w	r0, #3
 80096ee:	e7ec      	b.n	80096ca <osMessageQueueGet+0x3a>
 80096f0:	f06f 0003 	mvn.w	r0, #3
 80096f4:	e7e9      	b.n	80096ca <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 80096f6:	f06f 0002 	mvn.w	r0, #2
 80096fa:	e7e6      	b.n	80096ca <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 80096fc:	f06f 0003 	mvn.w	r0, #3
 8009700:	e7e3      	b.n	80096ca <osMessageQueueGet+0x3a>
 8009702:	f06f 0003 	mvn.w	r0, #3
 8009706:	e7e0      	b.n	80096ca <osMessageQueueGet+0x3a>
  stat = osOK;
 8009708:	2000      	movs	r0, #0
 800970a:	e7de      	b.n	80096ca <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 800970c:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009710:	e7db      	b.n	80096ca <osMessageQueueGet+0x3a>
	...

08009714 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009714:	4b03      	ldr	r3, [pc, #12]	@ (8009724 <vApplicationGetIdleTaskMemory+0x10>)
 8009716:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009718:	4b03      	ldr	r3, [pc, #12]	@ (8009728 <vApplicationGetIdleTaskMemory+0x14>)
 800971a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800971c:	2380      	movs	r3, #128	@ 0x80
 800971e:	6013      	str	r3, [r2, #0]
}
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000ca8 	.word	0x20000ca8
 8009728:	20000aa8 	.word	0x20000aa8

0800972c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800972c:	4b03      	ldr	r3, [pc, #12]	@ (800973c <vApplicationGetTimerTaskMemory+0x10>)
 800972e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009730:	4b03      	ldr	r3, [pc, #12]	@ (8009740 <vApplicationGetTimerTaskMemory+0x14>)
 8009732:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009738:	6013      	str	r3, [r2, #0]
}
 800973a:	4770      	bx	lr
 800973c:	20000a4c 	.word	0x20000a4c
 8009740:	2000064c 	.word	0x2000064c

08009744 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8009744:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009748:	4905      	ldr	r1, [pc, #20]	@ (8009760 <__NVIC_SystemReset+0x1c>)
 800974a:	68ca      	ldr	r2, [r1, #12]
 800974c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009750:	4b04      	ldr	r3, [pc, #16]	@ (8009764 <__NVIC_SystemReset+0x20>)
 8009752:	4313      	orrs	r3, r2
 8009754:	60cb      	str	r3, [r1, #12]
 8009756:	f3bf 8f4f 	dsb	sy
    __NOP();
 800975a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800975c:	e7fd      	b.n	800975a <__NVIC_SystemReset+0x16>
 800975e:	bf00      	nop
 8009760:	e000ed00 	.word	0xe000ed00
 8009764:	05fa0004 	.word	0x05fa0004

08009768 <Config_GetModuleID>:
/**
  * @brief  Get current module ID
  * @retval Current module ID (0-15)
  */
uint8_t Config_GetModuleID(void)
{
 8009768:	b510      	push	{r4, lr}
    uint8_t id;
    
    // Thread-safe read
    if (config_mutex != NULL) {
 800976a:	4b08      	ldr	r3, [pc, #32]	@ (800978c <Config_GetModuleID+0x24>)
 800976c:	6818      	ldr	r0, [r3, #0]
 800976e:	b118      	cbz	r0, 8009778 <Config_GetModuleID+0x10>
        osMutexAcquire(config_mutex, osWaitForever);
 8009770:	f04f 31ff 	mov.w	r1, #4294967295
 8009774:	f7ff fea9 	bl	80094ca <osMutexAcquire>
    }
    
    id = module_id;
 8009778:	4b05      	ldr	r3, [pc, #20]	@ (8009790 <Config_GetModuleID+0x28>)
 800977a:	781c      	ldrb	r4, [r3, #0]
    
    if (config_mutex != NULL) {
 800977c:	4b03      	ldr	r3, [pc, #12]	@ (800978c <Config_GetModuleID+0x24>)
 800977e:	6818      	ldr	r0, [r3, #0]
 8009780:	b108      	cbz	r0, 8009786 <Config_GetModuleID+0x1e>
        osMutexRelease(config_mutex);
 8009782:	f7ff fed1 	bl	8009528 <osMutexRelease>
    }
    
    return id;
}
 8009786:	4620      	mov	r0, r4
 8009788:	bd10      	pop	{r4, pc}
 800978a:	bf00      	nop
 800978c:	20000d3c 	.word	0x20000d3c
 8009790:	20000d40 	.word	0x20000d40

08009794 <Config_ReadModuleIDFromFlash>:
  * @retval Module ID from flash, or CONFIG_MODULE_ID_DEFAULT if uninitialized
  */
uint8_t Config_ReadModuleIDFromFlash(void)
{
    // Read 32-bit word from flash
    uint32_t flash_value = *(__IO uint32_t*)CONFIG_FLASH_MODULE_ADDR;
 8009794:	4b05      	ldr	r3, [pc, #20]	@ (80097ac <Config_ReadModuleIDFromFlash+0x18>)
 8009796:	6818      	ldr	r0, [r3, #0]
    
    // Check if magic value is present (upper 16 bits)
    if ((flash_value & CONFIG_FLASH_MAGIC_MASK) == CONFIG_FLASH_MAGIC) {
 8009798:	0c02      	lsrs	r2, r0, #16
 800979a:	0412      	lsls	r2, r2, #16
 800979c:	4b04      	ldr	r3, [pc, #16]	@ (80097b0 <Config_ReadModuleIDFromFlash+0x1c>)
 800979e:	429a      	cmp	r2, r3
 80097a0:	d001      	beq.n	80097a6 <Config_ReadModuleIDFromFlash+0x12>
            return stored_module_id;
        }
    }
    
    // Flash uninitialized or invalid, return default
    return CONFIG_MODULE_ID_DEFAULT;
 80097a2:	2000      	movs	r0, #0
}
 80097a4:	4770      	bx	lr
        uint8_t stored_module_id = (uint8_t)(flash_value & CONFIG_FLASH_MODULE_MASK);
 80097a6:	f000 000f 	and.w	r0, r0, #15
            return stored_module_id;
 80097aa:	4770      	bx	lr
 80097ac:	0803c000 	.word	0x0803c000
 80097b0:	beef0000 	.word	0xbeef0000

080097b4 <Config_WriteModuleIDToFlash>:
int8_t Config_WriteModuleIDToFlash(uint8_t module_id)
{
    HAL_StatusTypeDef status;
    
    // Validate module ID range
    if (module_id > CONFIG_MODULE_ID_MAX) {
 80097b4:	280f      	cmp	r0, #15
 80097b6:	d826      	bhi.n	8009806 <Config_WriteModuleIDToFlash+0x52>
{
 80097b8:	b510      	push	{r4, lr}
 80097ba:	b086      	sub	sp, #24
        return -1;
    }
    
    // Prepare flash value: magic + module ID
    uint32_t flash_value = CONFIG_FLASH_MAGIC | (uint32_t)module_id;
 80097bc:	f040 443e 	orr.w	r4, r0, #3187671040	@ 0xbe000000
 80097c0:	f444 046f 	orr.w	r4, r4, #15663104	@ 0xef0000
    
    // Unlock flash
    status = HAL_FLASH_Unlock();
 80097c4:	f002 ff50 	bl	800c668 <HAL_FLASH_Unlock>
    if (status != HAL_OK) {
 80097c8:	bb00      	cbnz	r0, 800980c <Config_WriteModuleIDToFlash+0x58>
    }
    
    // Erase the page containing our address
    // STM32L432 has 2KB pages, need to erase page before writing
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error = 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	9301      	str	r3, [sp, #4]
    
    // Calculate page number (page size = 2048 bytes = 0x800)
    uint32_t page_address = CONFIG_FLASH_MODULE_ADDR;
    uint32_t page_number = (page_address - FLASH_BASE) / FLASH_PAGE_SIZE;
    
    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80097ce:	9302      	str	r3, [sp, #8]
    erase_init.Page = page_number;
 80097d0:	2378      	movs	r3, #120	@ 0x78
 80097d2:	9304      	str	r3, [sp, #16]
    erase_init.NbPages = 1;
 80097d4:	2301      	movs	r3, #1
 80097d6:	9305      	str	r3, [sp, #20]
    
    status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80097d8:	a901      	add	r1, sp, #4
 80097da:	a802      	add	r0, sp, #8
 80097dc:	f003 f848 	bl	800c870 <HAL_FLASHEx_Erase>
    if (status != HAL_OK) {
 80097e0:	b960      	cbnz	r0, 80097fc <Config_WriteModuleIDToFlash+0x48>
    
    // Program the double-word (64-bit) - STM32L4 requires double-word programming
    // We'll write our 32-bit value twice to make 64 bits
    uint64_t data = ((uint64_t)flash_value << 32) | (uint64_t)flash_value;
    
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, CONFIG_FLASH_MODULE_ADDR, data);
 80097e2:	4622      	mov	r2, r4
 80097e4:	4623      	mov	r3, r4
 80097e6:	490c      	ldr	r1, [pc, #48]	@ (8009818 <Config_WriteModuleIDToFlash+0x64>)
 80097e8:	2000      	movs	r0, #0
 80097ea:	f002 ff93 	bl	800c714 <HAL_FLASH_Program>
 80097ee:	4604      	mov	r4, r0
    
    // Lock flash
    HAL_FLASH_Lock();
 80097f0:	f002 ff52 	bl	800c698 <HAL_FLASH_Lock>
    
    return (status == HAL_OK) ? 0 : -1;
 80097f4:	b96c      	cbnz	r4, 8009812 <Config_WriteModuleIDToFlash+0x5e>
 80097f6:	2000      	movs	r0, #0
}
 80097f8:	b006      	add	sp, #24
 80097fa:	bd10      	pop	{r4, pc}
        HAL_FLASH_Lock();
 80097fc:	f002 ff4c 	bl	800c698 <HAL_FLASH_Lock>
        return -1;
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
 8009804:	e7f8      	b.n	80097f8 <Config_WriteModuleIDToFlash+0x44>
        return -1;
 8009806:	f04f 30ff 	mov.w	r0, #4294967295
}
 800980a:	4770      	bx	lr
        return -1;
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e7f2      	b.n	80097f8 <Config_WriteModuleIDToFlash+0x44>
    return (status == HAL_OK) ? 0 : -1;
 8009812:	f04f 30ff 	mov.w	r0, #4294967295
 8009816:	e7ef      	b.n	80097f8 <Config_WriteModuleIDToFlash+0x44>
 8009818:	0803c000 	.word	0x0803c000

0800981c <Config_SetModuleID>:
    if (module_id_new > CONFIG_MODULE_ID_MAX) {
 800981c:	280f      	cmp	r0, #15
 800981e:	d803      	bhi.n	8009828 <Config_SetModuleID+0xc>
{
 8009820:	b508      	push	{r3, lr}
    int8_t result = Config_WriteModuleIDToFlash(module_id_new);
 8009822:	f7ff ffc7 	bl	80097b4 <Config_WriteModuleIDToFlash>
}
 8009826:	bd08      	pop	{r3, pc}
        return -1;
 8009828:	f04f 30ff 	mov.w	r0, #4294967295
}
 800982c:	4770      	bx	lr
	...

08009830 <Config_InitCANIDs>:
  * @brief  Initialize all CAN IDs with module offset
  * @note   Called during Config_Init() after module ID is read
  * @retval None
  */
void Config_InitCANIDs(void)
{
 8009830:	b508      	push	{r3, lr}
    uint8_t mod_id = Config_GetModuleID();
 8009832:	f7ff ff99 	bl	8009768 <Config_GetModuleID>
    
    // Initialize all CAN IDs with module offset
    CAN_TEMP_ID = CAN_ID(CAN_TEMP_BASE, mod_id);
 8009836:	0300      	lsls	r0, r0, #12
 8009838:	f040 630f 	orr.w	r3, r0, #149946368	@ 0x8f00000
 800983c:	4a19      	ldr	r2, [pc, #100]	@ (80098a4 <Config_InitCANIDs+0x74>)
 800983e:	6013      	str	r3, [r2, #0]
    CAN_TEMP_RAW_ID = CAN_ID(CAN_TEMP_RAW_BASE, mod_id);
 8009840:	f443 7180 	orr.w	r1, r3, #256	@ 0x100
 8009844:	4a18      	ldr	r2, [pc, #96]	@ (80098a8 <Config_InitCANIDs+0x78>)
 8009846:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_0_ID = CAN_ID(CAN_VOLTAGE_0_BASE, mod_id);
 8009848:	f443 7100 	orr.w	r1, r3, #512	@ 0x200
 800984c:	4a17      	ldr	r2, [pc, #92]	@ (80098ac <Config_InitCANIDs+0x7c>)
 800984e:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_1_ID = CAN_ID(CAN_VOLTAGE_1_BASE, mod_id);
 8009850:	4a17      	ldr	r2, [pc, #92]	@ (80098b0 <Config_InitCANIDs+0x80>)
 8009852:	4302      	orrs	r2, r0
 8009854:	4917      	ldr	r1, [pc, #92]	@ (80098b4 <Config_InitCANIDs+0x84>)
 8009856:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_2_ID = CAN_ID(CAN_VOLTAGE_2_BASE, mod_id);
 8009858:	4a17      	ldr	r2, [pc, #92]	@ (80098b8 <Config_InitCANIDs+0x88>)
 800985a:	4302      	orrs	r2, r0
 800985c:	4917      	ldr	r1, [pc, #92]	@ (80098bc <Config_InitCANIDs+0x8c>)
 800985e:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_3_ID = CAN_ID(CAN_VOLTAGE_3_BASE, mod_id);
 8009860:	4a17      	ldr	r2, [pc, #92]	@ (80098c0 <Config_InitCANIDs+0x90>)
 8009862:	4302      	orrs	r2, r0
 8009864:	4917      	ldr	r1, [pc, #92]	@ (80098c4 <Config_InitCANIDs+0x94>)
 8009866:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_4_ID = CAN_ID(CAN_VOLTAGE_4_BASE, mod_id);
 8009868:	f443 7101 	orr.w	r1, r3, #516	@ 0x204
 800986c:	4a16      	ldr	r2, [pc, #88]	@ (80098c8 <Config_InitCANIDs+0x98>)
 800986e:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_5_ID = CAN_ID(CAN_VOLTAGE_5_BASE, mod_id);
 8009870:	4a16      	ldr	r2, [pc, #88]	@ (80098cc <Config_InitCANIDs+0x9c>)
 8009872:	4302      	orrs	r2, r0
 8009874:	4916      	ldr	r1, [pc, #88]	@ (80098d0 <Config_InitCANIDs+0xa0>)
 8009876:	600a      	str	r2, [r1, #0]
    CAN_BMS_HEARTBEAT_ID = CAN_ID(CAN_BMS_HEARTBEAT_BASE, mod_id);
 8009878:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800987c:	4a15      	ldr	r2, [pc, #84]	@ (80098d4 <Config_InitCANIDs+0xa4>)
 800987e:	6013      	str	r3, [r2, #0]
    CAN_BMS_STATS_ID = CAN_ID(CAN_BMS_STATS_BASE, mod_id);
 8009880:	4b15      	ldr	r3, [pc, #84]	@ (80098d8 <Config_InitCANIDs+0xa8>)
 8009882:	4303      	orrs	r3, r0
 8009884:	4a15      	ldr	r2, [pc, #84]	@ (80098dc <Config_InitCANIDs+0xac>)
 8009886:	6013      	str	r3, [r2, #0]
    CAN_CONFIG_ACK_ID = CAN_ID(CAN_CONFIG_ACK_BASE, mod_id);
 8009888:	4b15      	ldr	r3, [pc, #84]	@ (80098e0 <Config_InitCANIDs+0xb0>)
 800988a:	4303      	orrs	r3, r0
 800988c:	4a15      	ldr	r2, [pc, #84]	@ (80098e4 <Config_InitCANIDs+0xb4>)
 800988e:	6013      	str	r3, [r2, #0]
    CAN_RESET_CMD_ID = CAN_ID(CAN_RESET_CMD_BASE, mod_id);
 8009890:	4b15      	ldr	r3, [pc, #84]	@ (80098e8 <Config_InitCANIDs+0xb8>)
 8009892:	4303      	orrs	r3, r0
 8009894:	4a15      	ldr	r2, [pc, #84]	@ (80098ec <Config_InitCANIDs+0xbc>)
 8009896:	6013      	str	r3, [r2, #0]
    CAN_DEBUG_RESPONSE_ID = CAN_ID(CAN_DEBUG_RESPONSE_BASE, mod_id);
 8009898:	4b15      	ldr	r3, [pc, #84]	@ (80098f0 <Config_InitCANIDs+0xc0>)
 800989a:	4303      	orrs	r3, r0
 800989c:	4a15      	ldr	r2, [pc, #84]	@ (80098f4 <Config_InitCANIDs+0xc4>)
 800989e:	6013      	str	r3, [r2, #0]
}
 80098a0:	bd08      	pop	{r3, pc}
 80098a2:	bf00      	nop
 80098a4:	20000d38 	.word	0x20000d38
 80098a8:	20000d34 	.word	0x20000d34
 80098ac:	20000d30 	.word	0x20000d30
 80098b0:	08f00201 	.word	0x08f00201
 80098b4:	20000d2c 	.word	0x20000d2c
 80098b8:	08f00202 	.word	0x08f00202
 80098bc:	20000d28 	.word	0x20000d28
 80098c0:	08f00203 	.word	0x08f00203
 80098c4:	20000d24 	.word	0x20000d24
 80098c8:	20000d20 	.word	0x20000d20
 80098cc:	08f00205 	.word	0x08f00205
 80098d0:	20000d1c 	.word	0x20000d1c
 80098d4:	20000d18 	.word	0x20000d18
 80098d8:	08f00301 	.word	0x08f00301
 80098dc:	20000d14 	.word	0x20000d14
 80098e0:	08f00f01 	.word	0x08f00f01
 80098e4:	20000d10 	.word	0x20000d10
 80098e8:	08f00f02 	.word	0x08f00f02
 80098ec:	20000d0c 	.word	0x20000d0c
 80098f0:	08f00f11 	.word	0x08f00f11
 80098f4:	20000d08 	.word	0x20000d08

080098f8 <Config_Init>:
{
 80098f8:	b500      	push	{lr}
 80098fa:	b085      	sub	sp, #20
    const osMutexAttr_t mutex_attr = {
 80098fc:	4b08      	ldr	r3, [pc, #32]	@ (8009920 <Config_Init+0x28>)
 80098fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009900:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    config_mutex = osMutexNew(&mutex_attr);
 8009904:	4668      	mov	r0, sp
 8009906:	f7ff fd95 	bl	8009434 <osMutexNew>
 800990a:	4b06      	ldr	r3, [pc, #24]	@ (8009924 <Config_Init+0x2c>)
 800990c:	6018      	str	r0, [r3, #0]
    module_id = Config_ReadModuleIDFromFlash();
 800990e:	f7ff ff41 	bl	8009794 <Config_ReadModuleIDFromFlash>
 8009912:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <Config_Init+0x30>)
 8009914:	7018      	strb	r0, [r3, #0]
    Config_InitCANIDs();
 8009916:	f7ff ff8b 	bl	8009830 <Config_InitCANIDs>
}
 800991a:	b005      	add	sp, #20
 800991c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009920:	0800fbf8 	.word	0x0800fbf8
 8009924:	20000d3c 	.word	0x20000d3c
 8009928:	20000d40 	.word	0x20000d40

0800992c <Config_ProcessCANCommand>:
  * @retval None
  * @note   Sends acknowledgement message, then resets device if successful
  */
void Config_ProcessCANCommand(uint8_t *data, uint8_t length)
{
    if (data == NULL || length < 2) {
 800992c:	2800      	cmp	r0, #0
 800992e:	d036      	beq.n	800999e <Config_ProcessCANCommand+0x72>
 8009930:	2901      	cmp	r1, #1
 8009932:	d934      	bls.n	800999e <Config_ProcessCANCommand+0x72>
{
 8009934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009936:	b083      	sub	sp, #12
        return;
    }
    
    uint8_t command = data[0];
 8009938:	7804      	ldrb	r4, [r0, #0]
    uint8_t value = data[1];
 800993a:	7845      	ldrb	r5, [r0, #1]
    uint8_t ack_data[8] = {0};
 800993c:	2300      	movs	r3, #0
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	9301      	str	r3, [sp, #4]
    uint8_t status = CONFIG_STATUS_FAIL;
    
    switch (command) {
 8009942:	2c01      	cmp	r4, #1
 8009944:	d001      	beq.n	800994a <Config_ProcessCANCommand+0x1e>
            
        default:
            // Unknown command, ignore (no ACK sent)
            break;
    }
}
 8009946:	b003      	add	sp, #12
 8009948:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint8_t old_module_id = Config_GetModuleID();
 800994a:	f7ff ff0d 	bl	8009768 <Config_GetModuleID>
 800994e:	4606      	mov	r6, r0
            int8_t result = Config_SetModuleID(value);
 8009950:	4628      	mov	r0, r5
 8009952:	f7ff ff63 	bl	800981c <Config_SetModuleID>
            if (result == 0) {
 8009956:	4607      	mov	r7, r0
 8009958:	b9f8      	cbnz	r0, 800999a <Config_ProcessCANCommand+0x6e>
                status = CONFIG_STATUS_RESET_REQUIRED; // Success - reset needed
 800995a:	2302      	movs	r3, #2
            ack_data[0] = command;
 800995c:	f88d 4000 	strb.w	r4, [sp]
            ack_data[1] = status;
 8009960:	f88d 3001 	strb.w	r3, [sp, #1]
            ack_data[2] = old_module_id;
 8009964:	f88d 6002 	strb.w	r6, [sp, #2]
            ack_data[3] = value;
 8009968:	f88d 5003 	strb.w	r5, [sp, #3]
            ack_data[4] = 0x00;
 800996c:	2300      	movs	r3, #0
 800996e:	f88d 3004 	strb.w	r3, [sp, #4]
            ack_data[5] = 0x00;
 8009972:	f88d 3005 	strb.w	r3, [sp, #5]
            ack_data[6] = 0x00;
 8009976:	f88d 3006 	strb.w	r3, [sp, #6]
            ack_data[7] = 0x00;
 800997a:	f88d 3007 	strb.w	r3, [sp, #7]
            CAN_SendMessage(CAN_CONFIG_ACK_ID, ack_data, 8, 1);
 800997e:	2301      	movs	r3, #1
 8009980:	2208      	movs	r2, #8
 8009982:	4669      	mov	r1, sp
 8009984:	4806      	ldr	r0, [pc, #24]	@ (80099a0 <Config_ProcessCANCommand+0x74>)
 8009986:	6800      	ldr	r0, [r0, #0]
 8009988:	f7fe ffd4 	bl	8008934 <CAN_SendMessage>
            if (result == 0) {
 800998c:	2f00      	cmp	r7, #0
 800998e:	d1da      	bne.n	8009946 <Config_ProcessCANCommand+0x1a>
                osDelay(100); // Give time for CAN message to transmit
 8009990:	2064      	movs	r0, #100	@ 0x64
 8009992:	f7ff fd41 	bl	8009418 <osDelay>
                NVIC_SystemReset(); // Reset the microcontroller
 8009996:	f7ff fed5 	bl	8009744 <__NVIC_SystemReset>
                status = CONFIG_STATUS_FAIL;
 800999a:	4623      	mov	r3, r4
 800999c:	e7de      	b.n	800995c <Config_ProcessCANCommand+0x30>
 800999e:	4770      	bx	lr
 80099a0:	20000d10 	.word	0x20000d10

080099a4 <RotateByteBits>:
  * @param  rotation_index: Pointer to rotation index for this byte
  * @retval Rotated byte with only one bit set
  */
static uint8_t RotateByteBits(uint8_t byte_value, uint8_t *rotation_index)
{
    if (byte_value == 0) {
 80099a4:	4684      	mov	ip, r0
 80099a6:	b110      	cbz	r0, 80099ae <RotateByteBits+0xa>
        return 0;
    }
    
    // Count active bits in this byte
    uint8_t active_bit_count = 0;
    for (uint8_t bit = 0; bit < 8; bit++) {
 80099a8:	2300      	movs	r3, #0
    uint8_t active_bit_count = 0;
 80099aa:	4618      	mov	r0, r3
 80099ac:	e004      	b.n	80099b8 <RotateByteBits+0x14>
        *rotation_index = 0;
 80099ae:	2300      	movs	r3, #0
 80099b0:	700b      	strb	r3, [r1, #0]
        return 0;
 80099b2:	4770      	bx	lr
    for (uint8_t bit = 0; bit < 8; bit++) {
 80099b4:	3301      	adds	r3, #1
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b07      	cmp	r3, #7
 80099ba:	d807      	bhi.n	80099cc <RotateByteBits+0x28>
        if (byte_value & (1 << bit)) {
 80099bc:	fa4c f203 	asr.w	r2, ip, r3
 80099c0:	f012 0f01 	tst.w	r2, #1
 80099c4:	d0f6      	beq.n	80099b4 <RotateByteBits+0x10>
            active_bit_count++;
 80099c6:	3001      	adds	r0, #1
 80099c8:	b2c0      	uxtb	r0, r0
 80099ca:	e7f3      	b.n	80099b4 <RotateByteBits+0x10>
        }
    }
    
    // Find the Nth active bit
    if (active_bit_count > 0) {
 80099cc:	b9f0      	cbnz	r0, 8009a0c <RotateByteBits+0x68>
 80099ce:	4770      	bx	lr
                if (current_index == *rotation_index) {
                    // Update rotation for next call
                    *rotation_index = (*rotation_index + 1) % active_bit_count;
                    return (1 << bit);
                }
                current_index++;
 80099d0:	3201      	adds	r2, #1
 80099d2:	b2d2      	uxtb	r2, r2
        for (uint8_t bit = 0; bit < 8; bit++) {
 80099d4:	3301      	adds	r3, #1
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b07      	cmp	r3, #7
 80099da:	d815      	bhi.n	8009a08 <RotateByteBits+0x64>
            if (byte_value & (1 << bit)) {
 80099dc:	461c      	mov	r4, r3
 80099de:	fa4c fe03 	asr.w	lr, ip, r3
 80099e2:	f01e 0f01 	tst.w	lr, #1
 80099e6:	d0f5      	beq.n	80099d4 <RotateByteBits+0x30>
                if (current_index == *rotation_index) {
 80099e8:	f891 e000 	ldrb.w	lr, [r1]
 80099ec:	4596      	cmp	lr, r2
 80099ee:	d1ef      	bne.n	80099d0 <RotateByteBits+0x2c>
                    *rotation_index = (*rotation_index + 1) % active_bit_count;
 80099f0:	f10e 0e01 	add.w	lr, lr, #1
 80099f4:	fb9e f3f0 	sdiv	r3, lr, r0
 80099f8:	fb00 ee13 	mls	lr, r0, r3, lr
 80099fc:	f881 e000 	strb.w	lr, [r1]
                    return (1 << bit);
 8009a00:	2001      	movs	r0, #1
 8009a02:	40a0      	lsls	r0, r4
 8009a04:	b2c0      	uxtb	r0, r0
 8009a06:	e000      	b.n	8009a0a <RotateByteBits+0x66>
            }
        }
    }
    
    return 0;
 8009a08:	2000      	movs	r0, #0
}
 8009a0a:	bd10      	pop	{r4, pc}
        for (uint8_t bit = 0; bit < 8; bit++) {
 8009a0c:	2300      	movs	r3, #0
        uint8_t current_index = 0;
 8009a0e:	461a      	mov	r2, r3
        for (uint8_t bit = 0; bit < 8; bit++) {
 8009a10:	2b07      	cmp	r3, #7
 8009a12:	d801      	bhi.n	8009a18 <RotateByteBits+0x74>
{
 8009a14:	b510      	push	{r4, lr}
 8009a16:	e7e1      	b.n	80099dc <RotateByteBits+0x38>
    return 0;
 8009a18:	2000      	movs	r0, #0
}
 8009a1a:	4770      	bx	lr

08009a1c <ErrorMgr_Init>:
{
 8009a1c:	b510      	push	{r4, lr}
    memset(&error_mgr, 0, sizeof(Error_Manager_t));
 8009a1e:	4c0a      	ldr	r4, [pc, #40]	@ (8009a48 <ErrorMgr_Init+0x2c>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	6063      	str	r3, [r4, #4]
 8009a26:	60a3      	str	r3, [r4, #8]
 8009a28:	60e3      	str	r3, [r4, #12]
 8009a2a:	6123      	str	r3, [r4, #16]
    error_mgr.last_heartbeat = osKernelGetTickCount();
 8009a2c:	f7ff fc90 	bl	8009350 <osKernelGetTickCount>
 8009a30:	6120      	str	r0, [r4, #16]
    error_mutex = osMutexNew(&error_mutex_attributes);
 8009a32:	4806      	ldr	r0, [pc, #24]	@ (8009a4c <ErrorMgr_Init+0x30>)
 8009a34:	f7ff fcfe 	bl	8009434 <osMutexNew>
 8009a38:	4b05      	ldr	r3, [pc, #20]	@ (8009a50 <ErrorMgr_Init+0x34>)
 8009a3a:	6018      	str	r0, [r3, #0]
    if (error_mutex == NULL) {
 8009a3c:	b108      	cbz	r0, 8009a42 <ErrorMgr_Init+0x26>
    return HAL_OK;
 8009a3e:	2000      	movs	r0, #0
}
 8009a40:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 8009a42:	2001      	movs	r0, #1
 8009a44:	e7fc      	b.n	8009a40 <ErrorMgr_Init+0x24>
 8009a46:	bf00      	nop
 8009a48:	20000d4c 	.word	0x20000d4c
 8009a4c:	0800fcdc 	.word	0x0800fcdc
 8009a50:	20000d48 	.word	0x20000d48

08009a54 <ErrorMgr_SetError>:
{
 8009a54:	b510      	push	{r4, lr}
 8009a56:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009a58:	f04f 31ff 	mov.w	r1, #4294967295
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009a94 <ErrorMgr_SetError+0x40>)
 8009a5e:	6818      	ldr	r0, [r3, #0]
 8009a60:	f7ff fd33 	bl	80094ca <osMutexAcquire>
 8009a64:	b9a0      	cbnz	r0, 8009a90 <ErrorMgr_SetError+0x3c>
        if (!(error_mgr.error_flags & error_flag)) {
 8009a66:	4b0c      	ldr	r3, [pc, #48]	@ (8009a98 <ErrorMgr_SetError+0x44>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4223      	tst	r3, r4
 8009a6c:	d109      	bne.n	8009a82 <ErrorMgr_SetError+0x2e>
            error_mgr.fault_count++;
 8009a6e:	490a      	ldr	r1, [pc, #40]	@ (8009a98 <ErrorMgr_SetError+0x44>)
 8009a70:	7a4a      	ldrb	r2, [r1, #9]
 8009a72:	3201      	adds	r2, #1
 8009a74:	724a      	strb	r2, [r1, #9]
            if (error_flag & (ERROR_OVER_TEMP | ERROR_UNDER_VOLTAGE | 
 8009a76:	4a09      	ldr	r2, [pc, #36]	@ (8009a9c <ErrorMgr_SetError+0x48>)
 8009a78:	4214      	tst	r4, r2
 8009a7a:	d002      	beq.n	8009a82 <ErrorMgr_SetError+0x2e>
                error_mgr.state = BMS_STATE_ERROR;
 8009a7c:	460a      	mov	r2, r1
 8009a7e:	2105      	movs	r1, #5
 8009a80:	7211      	strb	r1, [r2, #8]
        error_mgr.error_flags |= error_flag;
 8009a82:	4323      	orrs	r3, r4
 8009a84:	4a04      	ldr	r2, [pc, #16]	@ (8009a98 <ErrorMgr_SetError+0x44>)
 8009a86:	6013      	str	r3, [r2, #0]
        osMutexRelease(error_mutex);
 8009a88:	4b02      	ldr	r3, [pc, #8]	@ (8009a94 <ErrorMgr_SetError+0x40>)
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	f7ff fd4c 	bl	8009528 <osMutexRelease>
}
 8009a90:	bd10      	pop	{r4, pc}
 8009a92:	bf00      	nop
 8009a94:	20000d48 	.word	0x20000d48
 8009a98:	20000d4c 	.word	0x20000d4c
 8009a9c:	00080301 	.word	0x00080301

08009aa0 <ErrorMgr_ClearError>:
{
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8009aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8009b14 <ErrorMgr_ClearError+0x74>)
 8009aaa:	6818      	ldr	r0, [r3, #0]
 8009aac:	f7ff fd0d 	bl	80094ca <osMutexAcquire>
 8009ab0:	b980      	cbnz	r0, 8009ad4 <ErrorMgr_ClearError+0x34>
        if (error_mgr.error_flags & error_flag) {
 8009ab2:	4b19      	ldr	r3, [pc, #100]	@ (8009b18 <ErrorMgr_ClearError+0x78>)
 8009ab4:	6818      	ldr	r0, [r3, #0]
 8009ab6:	ea10 0c04 	ands.w	ip, r0, r4
 8009aba:	d118      	bne.n	8009aee <ErrorMgr_ClearError+0x4e>
        error_mgr.error_flags &= ~error_flag;
 8009abc:	ea20 0004 	bic.w	r0, r0, r4
 8009ac0:	4b15      	ldr	r3, [pc, #84]	@ (8009b18 <ErrorMgr_ClearError+0x78>)
 8009ac2:	6018      	str	r0, [r3, #0]
        if (error_mgr.error_flags == 0 && error_mgr.state == BMS_STATE_ERROR) {
 8009ac4:	b910      	cbnz	r0, 8009acc <ErrorMgr_ClearError+0x2c>
 8009ac6:	7a1b      	ldrb	r3, [r3, #8]
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	d01f      	beq.n	8009b0c <ErrorMgr_ClearError+0x6c>
        osMutexRelease(error_mutex);
 8009acc:	4b11      	ldr	r3, [pc, #68]	@ (8009b14 <ErrorMgr_ClearError+0x74>)
 8009ace:	6818      	ldr	r0, [r3, #0]
 8009ad0:	f7ff fd2a 	bl	8009528 <osMutexRelease>
}
 8009ad4:	bd10      	pop	{r4, pc}
            for (uint8_t bit = 0; bit < 32; bit++) {
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	2b1f      	cmp	r3, #31
 8009adc:	d80a      	bhi.n	8009af4 <ErrorMgr_ClearError+0x54>
                if (cleared_bits & (1 << bit)) {
 8009ade:	2201      	movs	r2, #1
 8009ae0:	409a      	lsls	r2, r3
 8009ae2:	ea1c 0f02 	tst.w	ip, r2
 8009ae6:	d0f6      	beq.n	8009ad6 <ErrorMgr_ClearError+0x36>
                    cleared_count++;
 8009ae8:	3101      	adds	r1, #1
 8009aea:	b2c9      	uxtb	r1, r1
 8009aec:	e7f3      	b.n	8009ad6 <ErrorMgr_ClearError+0x36>
            for (uint8_t bit = 0; bit < 32; bit++) {
 8009aee:	2300      	movs	r3, #0
            uint8_t cleared_count = 0;
 8009af0:	4619      	mov	r1, r3
 8009af2:	e7f2      	b.n	8009ada <ErrorMgr_ClearError+0x3a>
            if (error_mgr.fault_count >= cleared_count) {
 8009af4:	4b08      	ldr	r3, [pc, #32]	@ (8009b18 <ErrorMgr_ClearError+0x78>)
 8009af6:	7a5b      	ldrb	r3, [r3, #9]
 8009af8:	428b      	cmp	r3, r1
 8009afa:	d303      	bcc.n	8009b04 <ErrorMgr_ClearError+0x64>
                error_mgr.fault_count -= cleared_count;
 8009afc:	1a5b      	subs	r3, r3, r1
 8009afe:	4a06      	ldr	r2, [pc, #24]	@ (8009b18 <ErrorMgr_ClearError+0x78>)
 8009b00:	7253      	strb	r3, [r2, #9]
 8009b02:	e7db      	b.n	8009abc <ErrorMgr_ClearError+0x1c>
                error_mgr.fault_count = 0;  // Safety check
 8009b04:	4b04      	ldr	r3, [pc, #16]	@ (8009b18 <ErrorMgr_ClearError+0x78>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	725a      	strb	r2, [r3, #9]
 8009b0a:	e7d7      	b.n	8009abc <ErrorMgr_ClearError+0x1c>
            error_mgr.state = BMS_STATE_IDLE;
 8009b0c:	4b02      	ldr	r3, [pc, #8]	@ (8009b18 <ErrorMgr_ClearError+0x78>)
 8009b0e:	2201      	movs	r2, #1
 8009b10:	721a      	strb	r2, [r3, #8]
 8009b12:	e7db      	b.n	8009acc <ErrorMgr_ClearError+0x2c>
 8009b14:	20000d48 	.word	0x20000d48
 8009b18:	20000d4c 	.word	0x20000d4c

08009b1c <ErrorMgr_SetWarning>:
{
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009b20:	f04f 31ff 	mov.w	r1, #4294967295
 8009b24:	4b07      	ldr	r3, [pc, #28]	@ (8009b44 <ErrorMgr_SetWarning+0x28>)
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	f7ff fccf 	bl	80094ca <osMutexAcquire>
 8009b2c:	b100      	cbz	r0, 8009b30 <ErrorMgr_SetWarning+0x14>
}
 8009b2e:	bd10      	pop	{r4, pc}
        error_mgr.warning_flags |= warning_flag;
 8009b30:	4a05      	ldr	r2, [pc, #20]	@ (8009b48 <ErrorMgr_SetWarning+0x2c>)
 8009b32:	6853      	ldr	r3, [r2, #4]
 8009b34:	4323      	orrs	r3, r4
 8009b36:	6053      	str	r3, [r2, #4]
        osMutexRelease(error_mutex);
 8009b38:	4b02      	ldr	r3, [pc, #8]	@ (8009b44 <ErrorMgr_SetWarning+0x28>)
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	f7ff fcf4 	bl	8009528 <osMutexRelease>
}
 8009b40:	e7f5      	b.n	8009b2e <ErrorMgr_SetWarning+0x12>
 8009b42:	bf00      	nop
 8009b44:	20000d48 	.word	0x20000d48
 8009b48:	20000d4c 	.word	0x20000d4c

08009b4c <ErrorMgr_ClearWarning>:
{
 8009b4c:	b510      	push	{r4, lr}
 8009b4e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009b50:	f04f 31ff 	mov.w	r1, #4294967295
 8009b54:	4b07      	ldr	r3, [pc, #28]	@ (8009b74 <ErrorMgr_ClearWarning+0x28>)
 8009b56:	6818      	ldr	r0, [r3, #0]
 8009b58:	f7ff fcb7 	bl	80094ca <osMutexAcquire>
 8009b5c:	b100      	cbz	r0, 8009b60 <ErrorMgr_ClearWarning+0x14>
}
 8009b5e:	bd10      	pop	{r4, pc}
        error_mgr.warning_flags &= ~warning_flag;
 8009b60:	4a05      	ldr	r2, [pc, #20]	@ (8009b78 <ErrorMgr_ClearWarning+0x2c>)
 8009b62:	6853      	ldr	r3, [r2, #4]
 8009b64:	ea23 0304 	bic.w	r3, r3, r4
 8009b68:	6053      	str	r3, [r2, #4]
        osMutexRelease(error_mutex);
 8009b6a:	4b02      	ldr	r3, [pc, #8]	@ (8009b74 <ErrorMgr_ClearWarning+0x28>)
 8009b6c:	6818      	ldr	r0, [r3, #0]
 8009b6e:	f7ff fcdb 	bl	8009528 <osMutexRelease>
}
 8009b72:	e7f4      	b.n	8009b5e <ErrorMgr_ClearWarning+0x12>
 8009b74:	20000d48 	.word	0x20000d48
 8009b78:	20000d4c 	.word	0x20000d4c

08009b7c <ErrorMgr_SetState>:
{
 8009b7c:	b510      	push	{r4, lr}
 8009b7e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009b80:	f04f 31ff 	mov.w	r1, #4294967295
 8009b84:	4b0d      	ldr	r3, [pc, #52]	@ (8009bbc <ErrorMgr_SetState+0x40>)
 8009b86:	6818      	ldr	r0, [r3, #0]
 8009b88:	f7ff fc9f 	bl	80094ca <osMutexAcquire>
 8009b8c:	b980      	cbnz	r0, 8009bb0 <ErrorMgr_SetState+0x34>
        if (error_mgr.state == BMS_STATE_ERROR && error_mgr.error_flags != 0) {
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc0 <ErrorMgr_SetState+0x44>)
 8009b90:	7a1b      	ldrb	r3, [r3, #8]
 8009b92:	2b05      	cmp	r3, #5
 8009b94:	d106      	bne.n	8009ba4 <ErrorMgr_SetState+0x28>
 8009b96:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc0 <ErrorMgr_SetState+0x44>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	b11b      	cbz	r3, 8009ba4 <ErrorMgr_SetState+0x28>
            if (state != BMS_STATE_ERROR && state != BMS_STATE_SHUTDOWN) {
 8009b9c:	1f63      	subs	r3, r4, #5
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d806      	bhi.n	8009bb2 <ErrorMgr_SetState+0x36>
        error_mgr.state = state;
 8009ba4:	4b06      	ldr	r3, [pc, #24]	@ (8009bc0 <ErrorMgr_SetState+0x44>)
 8009ba6:	721c      	strb	r4, [r3, #8]
        osMutexRelease(error_mutex);
 8009ba8:	4b04      	ldr	r3, [pc, #16]	@ (8009bbc <ErrorMgr_SetState+0x40>)
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	f7ff fcbc 	bl	8009528 <osMutexRelease>
}
 8009bb0:	bd10      	pop	{r4, pc}
                osMutexRelease(error_mutex);
 8009bb2:	4b02      	ldr	r3, [pc, #8]	@ (8009bbc <ErrorMgr_SetState+0x40>)
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	f7ff fcb7 	bl	8009528 <osMutexRelease>
                return;
 8009bba:	e7f9      	b.n	8009bb0 <ErrorMgr_SetState+0x34>
 8009bbc:	20000d48 	.word	0x20000d48
 8009bc0:	20000d4c 	.word	0x20000d4c

08009bc4 <ErrorMgr_GetStatus>:
    static uint8_t byte0_rotation = 0;
    static uint8_t byte1_rotation = 0;
    static uint8_t byte2_rotation = 0;
    static uint8_t byte3_rotation = 0;
    
    if (mgr == NULL) {
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d032      	beq.n	8009c2e <ErrorMgr_GetStatus+0x6a>
{
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4604      	mov	r4, r0
        return;
    }

    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8009bd0:	4b17      	ldr	r3, [pc, #92]	@ (8009c30 <ErrorMgr_GetStatus+0x6c>)
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	f7ff fc79 	bl	80094ca <osMutexAcquire>
 8009bd8:	b100      	cbz	r0, 8009bdc <ErrorMgr_GetStatus+0x18>
        error_bytes[2] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 16) & 0xFF), &byte2_rotation);
        error_bytes[3] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 24) & 0xFF), &byte3_rotation);
        
        osMutexRelease(error_mutex);
    }
}/**
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(mgr, &error_mgr, sizeof(Error_Manager_t));
 8009bdc:	4d15      	ldr	r5, [pc, #84]	@ (8009c34 <ErrorMgr_GetStatus+0x70>)
 8009bde:	46ac      	mov	ip, r5
 8009be0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009be4:	6020      	str	r0, [r4, #0]
 8009be6:	6061      	str	r1, [r4, #4]
 8009be8:	60a2      	str	r2, [r4, #8]
 8009bea:	60e3      	str	r3, [r4, #12]
 8009bec:	f8dc 0000 	ldr.w	r0, [ip]
 8009bf0:	6120      	str	r0, [r4, #16]
        if (error_mgr.fault_count > 0) {
 8009bf2:	7a6b      	ldrb	r3, [r5, #9]
 8009bf4:	b10b      	cbz	r3, 8009bfa <ErrorMgr_GetStatus+0x36>
            mgr->state = BMS_STATE_ERROR;
 8009bf6:	2305      	movs	r3, #5
 8009bf8:	7223      	strb	r3, [r4, #8]
        error_bytes[0] = RotateByteBits((uint8_t)(error_mgr.error_flags & 0xFF), &byte0_rotation);
 8009bfa:	4d0e      	ldr	r5, [pc, #56]	@ (8009c34 <ErrorMgr_GetStatus+0x70>)
 8009bfc:	490e      	ldr	r1, [pc, #56]	@ (8009c38 <ErrorMgr_GetStatus+0x74>)
 8009bfe:	7828      	ldrb	r0, [r5, #0]
 8009c00:	f7ff fed0 	bl	80099a4 <RotateByteBits>
 8009c04:	7020      	strb	r0, [r4, #0]
        error_bytes[1] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 8) & 0xFF), &byte1_rotation);
 8009c06:	490d      	ldr	r1, [pc, #52]	@ (8009c3c <ErrorMgr_GetStatus+0x78>)
 8009c08:	7868      	ldrb	r0, [r5, #1]
 8009c0a:	f7ff fecb 	bl	80099a4 <RotateByteBits>
 8009c0e:	7060      	strb	r0, [r4, #1]
        error_bytes[2] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 16) & 0xFF), &byte2_rotation);
 8009c10:	490b      	ldr	r1, [pc, #44]	@ (8009c40 <ErrorMgr_GetStatus+0x7c>)
 8009c12:	78a8      	ldrb	r0, [r5, #2]
 8009c14:	f7ff fec6 	bl	80099a4 <RotateByteBits>
 8009c18:	70a0      	strb	r0, [r4, #2]
        error_bytes[3] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 24) & 0xFF), &byte3_rotation);
 8009c1a:	490a      	ldr	r1, [pc, #40]	@ (8009c44 <ErrorMgr_GetStatus+0x80>)
 8009c1c:	78e8      	ldrb	r0, [r5, #3]
 8009c1e:	f7ff fec1 	bl	80099a4 <RotateByteBits>
 8009c22:	70e0      	strb	r0, [r4, #3]
        osMutexRelease(error_mutex);
 8009c24:	4b02      	ldr	r3, [pc, #8]	@ (8009c30 <ErrorMgr_GetStatus+0x6c>)
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	f7ff fc7e 	bl	8009528 <osMutexRelease>
 8009c2c:	e7d5      	b.n	8009bda <ErrorMgr_GetStatus+0x16>
 8009c2e:	4770      	bx	lr
 8009c30:	20000d48 	.word	0x20000d48
 8009c34:	20000d4c 	.word	0x20000d4c
 8009c38:	20000d44 	.word	0x20000d44
 8009c3c:	20000d43 	.word	0x20000d43
 8009c40:	20000d42 	.word	0x20000d42
 8009c44:	20000d41 	.word	0x20000d41

08009c48 <ErrorMgr_UpdateUptime>:
  * @brief  Update system uptime (call every second)
  * @retval None
  */
void ErrorMgr_UpdateUptime(void)
{
 8009c48:	b508      	push	{r3, lr}
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 8009c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8009c4e:	4b07      	ldr	r3, [pc, #28]	@ (8009c6c <ErrorMgr_UpdateUptime+0x24>)
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	f7ff fc3a 	bl	80094ca <osMutexAcquire>
 8009c56:	b100      	cbz	r0, 8009c5a <ErrorMgr_UpdateUptime+0x12>
        error_mgr.uptime_seconds++;
        osMutexRelease(error_mutex);
    }
}
 8009c58:	bd08      	pop	{r3, pc}
        error_mgr.uptime_seconds++;
 8009c5a:	4a05      	ldr	r2, [pc, #20]	@ (8009c70 <ErrorMgr_UpdateUptime+0x28>)
 8009c5c:	68d3      	ldr	r3, [r2, #12]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	60d3      	str	r3, [r2, #12]
        osMutexRelease(error_mutex);
 8009c62:	4b02      	ldr	r3, [pc, #8]	@ (8009c6c <ErrorMgr_UpdateUptime+0x24>)
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f7ff fc5f 	bl	8009528 <osMutexRelease>
}
 8009c6a:	e7f5      	b.n	8009c58 <ErrorMgr_UpdateUptime+0x10>
 8009c6c:	20000d48 	.word	0x20000d48
 8009c70:	20000d4c 	.word	0x20000d4c

08009c74 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c74:	4a13      	ldr	r2, [pc, #76]	@ (8009cc4 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009c76:	f012 0f07 	tst.w	r2, #7
 8009c7a:	d01f      	beq.n	8009cbc <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009c7c:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c7e:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c82:	f5c1 533b 	rsb	r3, r1, #11968	@ 0x2ec0
 8009c86:	3320      	adds	r3, #32
 8009c88:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c8a:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c8c:	480e      	ldr	r0, [pc, #56]	@ (8009cc8 <prvHeapInit+0x54>)
 8009c8e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c90:	2100      	movs	r1, #0
 8009c92:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c94:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009c96:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c98:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8009c9c:	480b      	ldr	r0, [pc, #44]	@ (8009ccc <prvHeapInit+0x58>)
 8009c9e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009ca0:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ca2:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ca4:	1a99      	subs	r1, r3, r2
 8009ca6:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ca8:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009caa:	4b09      	ldr	r3, [pc, #36]	@ (8009cd0 <prvHeapInit+0x5c>)
 8009cac:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009cae:	4b09      	ldr	r3, [pc, #36]	@ (8009cd4 <prvHeapInit+0x60>)
 8009cb0:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009cb2:	4b09      	ldr	r3, [pc, #36]	@ (8009cd8 <prvHeapInit+0x64>)
 8009cb4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009cb8:	601a      	str	r2, [r3, #0]
}
 8009cba:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cbc:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8009cc0:	e7e4      	b.n	8009c8c <prvHeapInit+0x18>
 8009cc2:	bf00      	nop
 8009cc4:	20000d80 	.word	0x20000d80
 8009cc8:	20000d78 	.word	0x20000d78
 8009ccc:	20000d74 	.word	0x20000d74
 8009cd0:	20000d6c 	.word	0x20000d6c
 8009cd4:	20000d70 	.word	0x20000d70
 8009cd8:	20000d60 	.word	0x20000d60

08009cdc <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009cdc:	4b16      	ldr	r3, [pc, #88]	@ (8009d38 <prvInsertBlockIntoFreeList+0x5c>)
 8009cde:	461a      	mov	r2, r3
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4283      	cmp	r3, r0
 8009ce4:	d3fb      	bcc.n	8009cde <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ce6:	6851      	ldr	r1, [r2, #4]
 8009ce8:	eb02 0c01 	add.w	ip, r2, r1
 8009cec:	4584      	cmp	ip, r0
 8009cee:	d009      	beq.n	8009d04 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cf0:	6841      	ldr	r1, [r0, #4]
 8009cf2:	eb00 0c01 	add.w	ip, r0, r1
 8009cf6:	4563      	cmp	r3, ip
 8009cf8:	d009      	beq.n	8009d0e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cfa:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cfc:	4290      	cmp	r0, r2
 8009cfe:	d019      	beq.n	8009d34 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d00:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8009d02:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d04:	6840      	ldr	r0, [r0, #4]
 8009d06:	4401      	add	r1, r0
 8009d08:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	e7f0      	b.n	8009cf0 <prvInsertBlockIntoFreeList+0x14>
{
 8009d0e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009d10:	4c0a      	ldr	r4, [pc, #40]	@ (8009d3c <prvInsertBlockIntoFreeList+0x60>)
 8009d12:	6824      	ldr	r4, [r4, #0]
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	d00b      	beq.n	8009d30 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	4419      	add	r1, r3
 8009d1c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d1e:	6813      	ldr	r3, [r2, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8009d24:	4290      	cmp	r0, r2
 8009d26:	d000      	beq.n	8009d2a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d28:	6010      	str	r0, [r2, #0]
	}
}
 8009d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d2e:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d30:	6004      	str	r4, [r0, #0]
 8009d32:	e7f7      	b.n	8009d24 <prvInsertBlockIntoFreeList+0x48>
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	20000d78 	.word	0x20000d78
 8009d3c:	20000d74 	.word	0x20000d74

08009d40 <pvPortMalloc>:
{
 8009d40:	b538      	push	{r3, r4, r5, lr}
 8009d42:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009d44:	f005 f80e 	bl	800ed64 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009d48:	4b3d      	ldr	r3, [pc, #244]	@ (8009e40 <pvPortMalloc+0x100>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	b1ab      	cbz	r3, 8009d7a <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8009e44 <pvPortMalloc+0x104>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	421c      	tst	r4, r3
 8009d54:	d114      	bne.n	8009d80 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 8009d56:	2c00      	cmp	r4, #0
 8009d58:	d06a      	beq.n	8009e30 <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
 8009d5a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d5e:	f014 0f07 	tst.w	r4, #7
 8009d62:	d002      	beq.n	8009d6a <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d64:	f022 0207 	bic.w	r2, r2, #7
 8009d68:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d6a:	b1d2      	cbz	r2, 8009da2 <pvPortMalloc+0x62>
 8009d6c:	4b36      	ldr	r3, [pc, #216]	@ (8009e48 <pvPortMalloc+0x108>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d31a      	bcc.n	8009daa <pvPortMalloc+0x6a>
				pxBlock = xStart.pxNextFreeBlock;
 8009d74:	4935      	ldr	r1, [pc, #212]	@ (8009e4c <pvPortMalloc+0x10c>)
 8009d76:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d78:	e01d      	b.n	8009db6 <pvPortMalloc+0x76>
			prvHeapInit();
 8009d7a:	f7ff ff7b 	bl	8009c74 <prvHeapInit>
 8009d7e:	e7e6      	b.n	8009d4e <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 8009d80:	f005 f892 	bl	800eea8 <xTaskResumeAll>
void *pvReturn = NULL;
 8009d84:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
 8009d86:	f000 f957 	bl	800a038 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d8a:	f015 0f07 	tst.w	r5, #7
 8009d8e:	d055      	beq.n	8009e3c <pvPortMalloc+0xfc>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	e7fe      	b.n	8009da0 <pvPortMalloc+0x60>
	( void ) xTaskResumeAll();
 8009da2:	f005 f881 	bl	800eea8 <xTaskResumeAll>
void *pvReturn = NULL;
 8009da6:	2500      	movs	r5, #0
 8009da8:	e7ed      	b.n	8009d86 <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 8009daa:	f005 f87d 	bl	800eea8 <xTaskResumeAll>
void *pvReturn = NULL;
 8009dae:	2500      	movs	r5, #0
 8009db0:	e7e9      	b.n	8009d86 <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 8009db2:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8009db4:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009db6:	6863      	ldr	r3, [r4, #4]
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d202      	bcs.n	8009dc2 <pvPortMalloc+0x82>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1f7      	bne.n	8009db2 <pvPortMalloc+0x72>
				if( pxBlock != pxEnd )
 8009dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8009e40 <pvPortMalloc+0x100>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	42a3      	cmp	r3, r4
 8009dc8:	d014      	beq.n	8009df4 <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dca:	680d      	ldr	r5, [r1, #0]
 8009dcc:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dd2:	6863      	ldr	r3, [r4, #4]
 8009dd4:	1a9b      	subs	r3, r3, r2
 8009dd6:	2b10      	cmp	r3, #16
 8009dd8:	d914      	bls.n	8009e04 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dda:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ddc:	f010 0f07 	tst.w	r0, #7
 8009de0:	d00c      	beq.n	8009dfc <pvPortMalloc+0xbc>
 8009de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	e7fe      	b.n	8009df2 <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 8009df4:	f005 f858 	bl	800eea8 <xTaskResumeAll>
void *pvReturn = NULL;
 8009df8:	2500      	movs	r5, #0
 8009dfa:	e7c4      	b.n	8009d86 <pvPortMalloc+0x46>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009dfc:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009dfe:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e00:	f7ff ff6c 	bl	8009cdc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e04:	6862      	ldr	r2, [r4, #4]
 8009e06:	4910      	ldr	r1, [pc, #64]	@ (8009e48 <pvPortMalloc+0x108>)
 8009e08:	680b      	ldr	r3, [r1, #0]
 8009e0a:	1a9b      	subs	r3, r3, r2
 8009e0c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e0e:	4910      	ldr	r1, [pc, #64]	@ (8009e50 <pvPortMalloc+0x110>)
 8009e10:	6809      	ldr	r1, [r1, #0]
 8009e12:	428b      	cmp	r3, r1
 8009e14:	d201      	bcs.n	8009e1a <pvPortMalloc+0xda>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e16:	490e      	ldr	r1, [pc, #56]	@ (8009e50 <pvPortMalloc+0x110>)
 8009e18:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <pvPortMalloc+0x104>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8009e26:	4a0b      	ldr	r2, [pc, #44]	@ (8009e54 <pvPortMalloc+0x114>)
 8009e28:	6813      	ldr	r3, [r2, #0]
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	e000      	b.n	8009e32 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 8009e30:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8009e32:	f005 f839 	bl	800eea8 <xTaskResumeAll>
		if( pvReturn == NULL )
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	d1a7      	bne.n	8009d8a <pvPortMalloc+0x4a>
 8009e3a:	e7a4      	b.n	8009d86 <pvPortMalloc+0x46>
}
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	bd38      	pop	{r3, r4, r5, pc}
 8009e40:	20000d74 	.word	0x20000d74
 8009e44:	20000d60 	.word	0x20000d60
 8009e48:	20000d70 	.word	0x20000d70
 8009e4c:	20000d78 	.word	0x20000d78
 8009e50:	20000d6c 	.word	0x20000d6c
 8009e54:	20000d68 	.word	0x20000d68

08009e58 <vPortFree>:
	if( pv != NULL )
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d034      	beq.n	8009ec6 <vPortFree+0x6e>
{
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009e60:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e64:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009e68:	4a17      	ldr	r2, [pc, #92]	@ (8009ec8 <vPortFree+0x70>)
 8009e6a:	6812      	ldr	r2, [r2, #0]
 8009e6c:	4213      	tst	r3, r2
 8009e6e:	d108      	bne.n	8009e82 <vPortFree+0x2a>
 8009e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e74:	f383 8811 	msr	BASEPRI, r3
 8009e78:	f3bf 8f6f 	isb	sy
 8009e7c:	f3bf 8f4f 	dsb	sy
 8009e80:	e7fe      	b.n	8009e80 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e82:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009e86:	b141      	cbz	r1, 8009e9a <vPortFree+0x42>
 8009e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e8c:	f383 8811 	msr	BASEPRI, r3
 8009e90:	f3bf 8f6f 	isb	sy
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	e7fe      	b.n	8009e98 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e9a:	ea23 0302 	bic.w	r3, r3, r2
 8009e9e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009ea2:	f004 ff5f 	bl	800ed64 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ea6:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009eaa:	4a08      	ldr	r2, [pc, #32]	@ (8009ecc <vPortFree+0x74>)
 8009eac:	6813      	ldr	r3, [r2, #0]
 8009eae:	440b      	add	r3, r1
 8009eb0:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f7ff ff12 	bl	8009cdc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009eb8:	4a05      	ldr	r2, [pc, #20]	@ (8009ed0 <vPortFree+0x78>)
 8009eba:	6813      	ldr	r3, [r2, #0]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8009ec0:	f004 fff2 	bl	800eea8 <xTaskResumeAll>
}
 8009ec4:	bd38      	pop	{r3, r4, r5, pc}
 8009ec6:	4770      	bx	lr
 8009ec8:	20000d60 	.word	0x20000d60
 8009ecc:	20000d70 	.word	0x20000d70
 8009ed0:	20000d64 	.word	0x20000d64

08009ed4 <xPortGetFreeHeapSize>:
}
 8009ed4:	4b01      	ldr	r3, [pc, #4]	@ (8009edc <xPortGetFreeHeapSize+0x8>)
 8009ed6:	6818      	ldr	r0, [r3, #0]
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	20000d70 	.word	0x20000d70

08009ee0 <xPortGetMinimumEverFreeHeapSize>:
}
 8009ee0:	4b01      	ldr	r3, [pc, #4]	@ (8009ee8 <xPortGetMinimumEverFreeHeapSize+0x8>)
 8009ee2:	6818      	ldr	r0, [r3, #0]
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	20000d6c 	.word	0x20000d6c

08009eec <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eec:	f100 0308 	add.w	r3, r0, #8
 8009ef0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ef8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009efa:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f00:	4770      	bx	lr

08009f02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f06:	4770      	bx	lr

08009f08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f08:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f0a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f10:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f12:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f14:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009f16:	6803      	ldr	r3, [r0, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	6003      	str	r3, [r0, #0]
}
 8009f1c:	4770      	bx	lr

08009f1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f1e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f20:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f22:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009f26:	d011      	beq.n	8009f4c <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f28:	f100 0308 	add.w	r3, r0, #8
 8009f2c:	461c      	mov	r4, r3
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	42aa      	cmp	r2, r5
 8009f34:	d9fa      	bls.n	8009f2c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f36:	6863      	ldr	r3, [r4, #4]
 8009f38:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f3a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f3c:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f3e:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f40:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009f42:	6803      	ldr	r3, [r0, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	6003      	str	r3, [r0, #0]
}
 8009f48:	bc30      	pop	{r4, r5}
 8009f4a:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f4c:	6904      	ldr	r4, [r0, #16]
 8009f4e:	e7f2      	b.n	8009f36 <vListInsert+0x18>

08009f50 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f50:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f52:	6841      	ldr	r1, [r0, #4]
 8009f54:	6882      	ldr	r2, [r0, #8]
 8009f56:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f58:	6841      	ldr	r1, [r0, #4]
 8009f5a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	4282      	cmp	r2, r0
 8009f60:	d006      	beq.n	8009f70 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f62:	2200      	movs	r2, #0
 8009f64:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	3a01      	subs	r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f6c:	6818      	ldr	r0, [r3, #0]
}
 8009f6e:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f70:	6882      	ldr	r2, [r0, #8]
 8009f72:	605a      	str	r2, [r3, #4]
 8009f74:	e7f5      	b.n	8009f62 <uxListRemove+0x12>
	...

08009f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f7a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f7c:	ad03      	add	r5, sp, #12
 8009f7e:	2400      	movs	r4, #0
 8009f80:	9403      	str	r4, [sp, #12]
 8009f82:	9404      	str	r4, [sp, #16]
 8009f84:	9405      	str	r4, [sp, #20]
 8009f86:	9406      	str	r4, [sp, #24]
 8009f88:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f8a:	4b20      	ldr	r3, [pc, #128]	@ (800a00c <MX_GPIO_Init+0x94>)
 8009f8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f8e:	f042 0201 	orr.w	r2, r2, #1
 8009f92:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009f94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f96:	f002 0201 	and.w	r2, r2, #1
 8009f9a:	9201      	str	r2, [sp, #4]
 8009f9c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fa0:	f042 0202 	orr.w	r2, r2, #2
 8009fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8009fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fa8:	f003 0302 	and.w	r3, r3, #2
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SIG1_Pin|MUX_SIG3_Pin|BMS_RESET_Pin, GPIO_PIN_RESET);
 8009fb0:	4e17      	ldr	r6, [pc, #92]	@ (800a010 <MX_GPIO_Init+0x98>)
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	2162      	movs	r1, #98	@ 0x62
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f002 fdaa 	bl	800cb10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SIG2_GPIO_Port, MUX_SIG2_Pin, GPIO_PIN_RESET);
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009fc6:	f002 fda3 	bl	800cb10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_SIG1_Pin MUX_SIG3_Pin BMS_RESET_Pin */
  GPIO_InitStruct.Pin = MUX_SIG1_Pin|MUX_SIG3_Pin|BMS_RESET_Pin;
 8009fca:	2362      	movs	r3, #98	@ 0x62
 8009fcc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fce:	2701      	movs	r7, #1
 8009fd0:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fd4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	4630      	mov	r0, r6
 8009fda:	f002 fcc1 	bl	800c960 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_SIG2_Pin */
  GPIO_InitStruct.Pin = MUX_SIG2_Pin;
 8009fde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fe2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fe4:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fe8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(MUX_SIG2_GPIO_Port, &GPIO_InitStruct);
 8009fea:	4629      	mov	r1, r5
 8009fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009ff0:	f002 fcb6 	bl	800c960 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALERT_IN_Pin */
  GPIO_InitStruct.Pin = ALERT_IN_Pin;
 8009ff4:	2380      	movs	r3, #128	@ 0x80
 8009ff6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8009ff8:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8009ffc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ffe:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ALERT_IN_GPIO_Port, &GPIO_InitStruct);
 800a000:	4629      	mov	r1, r5
 800a002:	4630      	mov	r0, r6
 800a004:	f002 fcac 	bl	800c960 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800a008:	b009      	add	sp, #36	@ 0x24
 800a00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a00c:	40021000 	.word	0x40021000
 800a010:	48000400 	.word	0x48000400

0800a014 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800a014:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a016:	2001      	movs	r0, #1
 800a018:	f7ff f9fe 	bl	8009418 <osDelay>
  for(;;)
 800a01c:	e7fb      	b.n	800a016 <StartDefaultTask+0x2>

0800a01e <ReadBQBMS1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellVoltageBMS1 */
void ReadBQBMS1(void *argument)
{
 800a01e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellVoltageBMS1 */
  /* Call the BMS1 cell voltage monitoring task */
  BQ_MonitorTask(argument);
 800a020:	f7fe fa5c 	bl	80084dc <BQ_MonitorTask>
  /* USER CODE END ReadCellVoltageBMS1 */
}
 800a024:	bd08      	pop	{r3, pc}

0800a026 <ReadBQBMS2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellVoltageBMS2 */
void ReadBQBMS2(void *argument)
{
 800a026:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellVoltageBMS2 */
  /* Call the BMS2 cell voltage monitoring task */
  BQ_MonitorTask_BMS2(argument);
 800a028:	f7fe fbcc 	bl	80087c4 <BQ_MonitorTask_BMS2>
  /* USER CODE END ReadCellVoltageBMS2 */
}
 800a02c:	bd08      	pop	{r3, pc}

0800a02e <ReadCellTemps>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellTemps */
void ReadCellTemps(void *argument)
{
 800a02e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellTemps */
  /* Call the cell temperature monitoring task */
  CellTemp_MonitorTask(argument);
 800a030:	f7fe fff8 	bl	8009024 <CellTemp_MonitorTask>
  /* USER CODE END ReadCellTemps */
}
 800a034:	bd08      	pop	{r3, pc}
	...

0800a038 <vApplicationMallocFailedHook>:
{
 800a038:	b500      	push	{lr}
 800a03a:	b083      	sub	sp, #12
 800a03c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
    HAL_GPIO_TogglePin(GPIOB, MUX_SIG1_Pin);
 800a04c:	2102      	movs	r1, #2
 800a04e:	4806      	ldr	r0, [pc, #24]	@ (800a068 <vApplicationMallocFailedHook+0x30>)
 800a050:	f002 fd63 	bl	800cb1a <HAL_GPIO_TogglePin>
    for(volatile uint32_t i = 0; i < 100000; i++);  // Busy wait
 800a054:	2300      	movs	r3, #0
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	9a01      	ldr	r2, [sp, #4]
 800a05a:	4b04      	ldr	r3, [pc, #16]	@ (800a06c <vApplicationMallocFailedHook+0x34>)
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d8f5      	bhi.n	800a04c <vApplicationMallocFailedHook+0x14>
 800a060:	9b01      	ldr	r3, [sp, #4]
 800a062:	3301      	adds	r3, #1
 800a064:	9301      	str	r3, [sp, #4]
 800a066:	e7f7      	b.n	800a058 <vApplicationMallocFailedHook+0x20>
 800a068:	48000400 	.word	0x48000400
 800a06c:	0001869f 	.word	0x0001869f

0800a070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a070:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800a072:	6802      	ldr	r2, [r0, #0]
 800a074:	4b03      	ldr	r3, [pc, #12]	@ (800a084 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800a076:	429a      	cmp	r2, r3
 800a078:	d000      	beq.n	800a07c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a07a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800a07c:	f001 f89e 	bl	800b1bc <HAL_IncTick>
}
 800a080:	e7fb      	b.n	800a07a <HAL_TIM_PeriodElapsedCallback+0xa>
 800a082:	bf00      	nop
 800a084:	40001000 	.word	0x40001000

0800a088 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a088:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a08a:	e7fe      	b.n	800a08a <Error_Handler+0x2>

0800a08c <MX_ADC1_Init>:
{
 800a08c:	b500      	push	{lr}
 800a08e:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 800a090:	2300      	movs	r3, #0
 800a092:	9300      	str	r3, [sp, #0]
 800a094:	9301      	str	r3, [sp, #4]
 800a096:	9302      	str	r3, [sp, #8]
 800a098:	9303      	str	r3, [sp, #12]
 800a09a:	9304      	str	r3, [sp, #16]
 800a09c:	9305      	str	r3, [sp, #20]
  hadc1.Instance = ADC1;
 800a09e:	4818      	ldr	r0, [pc, #96]	@ (800a100 <MX_ADC1_Init+0x74>)
 800a0a0:	4a18      	ldr	r2, [pc, #96]	@ (800a104 <MX_ADC1_Init+0x78>)
 800a0a2:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800a0a4:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a0a6:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a0a8:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800a0aa:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a0ac:	2204      	movs	r2, #4
 800a0ae:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a0b0:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a0b2:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a0b8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a0bc:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a0be:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800a0c0:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800a0c4:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800a0c6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a0ca:	f001 f8b7 	bl	800b23c <HAL_ADC_Init>
 800a0ce:	b998      	cbnz	r0, 800a0f8 <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_5;  // ADC1 (PA0) - first thermistor channel
 800a0d0:	4b0d      	ldr	r3, [pc, #52]	@ (800a108 <MX_ADC1_Init+0x7c>)
 800a0d2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a0d4:	2306      	movs	r3, #6
 800a0d6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;  // Longer sampling for high impedance thermistors
 800a0d8:	2307      	movs	r3, #7
 800a0da:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a0dc:	237f      	movs	r3, #127	@ 0x7f
 800a0de:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a0e8:	4669      	mov	r1, sp
 800a0ea:	4805      	ldr	r0, [pc, #20]	@ (800a100 <MX_ADC1_Init+0x74>)
 800a0ec:	f001 f9e8 	bl	800b4c0 <HAL_ADC_ConfigChannel>
 800a0f0:	b920      	cbnz	r0, 800a0fc <MX_ADC1_Init+0x70>
}
 800a0f2:	b007      	add	sp, #28
 800a0f4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a0f8:	f7ff ffc6 	bl	800a088 <Error_Handler>
    Error_Handler();
 800a0fc:	f7ff ffc4 	bl	800a088 <Error_Handler>
 800a100:	20003d74 	.word	0x20003d74
 800a104:	50040000 	.word	0x50040000
 800a108:	14f00020 	.word	0x14f00020

0800a10c <MX_CAN1_Init>:
{
 800a10c:	b500      	push	{lr}
 800a10e:	b08b      	sub	sp, #44	@ 0x2c
  hcan1.Instance = CAN1;
 800a110:	4818      	ldr	r0, [pc, #96]	@ (800a174 <MX_CAN1_Init+0x68>)
 800a112:	4b19      	ldr	r3, [pc, #100]	@ (800a178 <MX_CAN1_Init+0x6c>)
 800a114:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 10;
 800a116:	230a      	movs	r3, #10
 800a118:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a11e:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800a120:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800a124:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800a126:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a12a:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800a12c:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800a12e:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800a130:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800a132:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800a134:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800a136:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800a138:	f001 fdc5 	bl	800bcc6 <HAL_CAN_Init>
 800a13c:	b9a8      	cbnz	r0, 800a16a <MX_CAN1_Init+0x5e>
  filterConfig.FilterBank = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	9305      	str	r3, [sp, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800a142:	9306      	str	r3, [sp, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800a144:	2201      	movs	r2, #1
 800a146:	9207      	str	r2, [sp, #28]
  filterConfig.FilterIdHigh = 0x0000;
 800a148:	9300      	str	r3, [sp, #0]
  filterConfig.FilterIdLow = 0x0004;   // Only IDE bit set (extended ID)
 800a14a:	2104      	movs	r1, #4
 800a14c:	9101      	str	r1, [sp, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;  // Don't care about any ID bits
 800a14e:	9302      	str	r3, [sp, #8]
  filterConfig.FilterMaskIdLow = 0x0004;   // But we DO care about IDE bit (only extended)
 800a150:	9103      	str	r1, [sp, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800a152:	9304      	str	r3, [sp, #16]
  filterConfig.FilterActivation = ENABLE;
 800a154:	9208      	str	r2, [sp, #32]
  filterConfig.SlaveStartFilterBank = 14;
 800a156:	230e      	movs	r3, #14
 800a158:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &filterConfig) != HAL_OK)
 800a15a:	4669      	mov	r1, sp
 800a15c:	4805      	ldr	r0, [pc, #20]	@ (800a174 <MX_CAN1_Init+0x68>)
 800a15e:	f001 fe58 	bl	800be12 <HAL_CAN_ConfigFilter>
 800a162:	b920      	cbnz	r0, 800a16e <MX_CAN1_Init+0x62>
}
 800a164:	b00b      	add	sp, #44	@ 0x2c
 800a166:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a16a:	f7ff ff8d 	bl	800a088 <Error_Handler>
    Error_Handler();
 800a16e:	f7ff ff8b 	bl	800a088 <Error_Handler>
 800a172:	bf00      	nop
 800a174:	20003d4c 	.word	0x20003d4c
 800a178:	40006400 	.word	0x40006400

0800a17c <MX_CRC_Init>:
{
 800a17c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800a17e:	4808      	ldr	r0, [pc, #32]	@ (800a1a0 <MX_CRC_Init+0x24>)
 800a180:	4b08      	ldr	r3, [pc, #32]	@ (800a1a4 <MX_CRC_Init+0x28>)
 800a182:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800a184:	2300      	movs	r3, #0
 800a186:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800a188:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800a18a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800a18c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800a18e:	2301      	movs	r3, #1
 800a190:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800a192:	f002 f9c7 	bl	800c524 <HAL_CRC_Init>
 800a196:	b900      	cbnz	r0, 800a19a <MX_CRC_Init+0x1e>
}
 800a198:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a19a:	f7ff ff75 	bl	800a088 <Error_Handler>
 800a19e:	bf00      	nop
 800a1a0:	20003d28 	.word	0x20003d28
 800a1a4:	40023000 	.word	0x40023000

0800a1a8 <MX_I2C1_Init>:
{
 800a1a8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800a1aa:	4811      	ldr	r0, [pc, #68]	@ (800a1f0 <MX_I2C1_Init+0x48>)
 800a1ac:	4b11      	ldr	r3, [pc, #68]	@ (800a1f4 <MX_I2C1_Init+0x4c>)
 800a1ae:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800a1b0:	4b11      	ldr	r3, [pc, #68]	@ (800a1f8 <MX_I2C1_Init+0x50>)
 800a1b2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a1bc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a1be:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a1c0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a1c2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a1c4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a1c6:	f002 fe5c 	bl	800ce82 <HAL_I2C_Init>
 800a1ca:	b950      	cbnz	r0, 800a1e2 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	4808      	ldr	r0, [pc, #32]	@ (800a1f0 <MX_I2C1_Init+0x48>)
 800a1d0:	f003 f84c 	bl	800d26c <HAL_I2CEx_ConfigAnalogFilter>
 800a1d4:	b938      	cbnz	r0, 800a1e6 <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4805      	ldr	r0, [pc, #20]	@ (800a1f0 <MX_I2C1_Init+0x48>)
 800a1da:	f003 f874 	bl	800d2c6 <HAL_I2CEx_ConfigDigitalFilter>
 800a1de:	b920      	cbnz	r0, 800a1ea <MX_I2C1_Init+0x42>
}
 800a1e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a1e2:	f7ff ff51 	bl	800a088 <Error_Handler>
    Error_Handler();
 800a1e6:	f7ff ff4f 	bl	800a088 <Error_Handler>
    Error_Handler();
 800a1ea:	f7ff ff4d 	bl	800a088 <Error_Handler>
 800a1ee:	bf00      	nop
 800a1f0:	20003cd4 	.word	0x20003cd4
 800a1f4:	40005400 	.word	0x40005400
 800a1f8:	00503d58 	.word	0x00503d58

0800a1fc <MX_I2C3_Init>:
{
 800a1fc:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 800a1fe:	4811      	ldr	r0, [pc, #68]	@ (800a244 <MX_I2C3_Init+0x48>)
 800a200:	4b11      	ldr	r3, [pc, #68]	@ (800a248 <MX_I2C3_Init+0x4c>)
 800a202:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00503D58;
 800a204:	4b11      	ldr	r3, [pc, #68]	@ (800a24c <MX_I2C3_Init+0x50>)
 800a206:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a20c:	2201      	movs	r2, #1
 800a20e:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a210:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800a212:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a214:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a216:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a218:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800a21a:	f002 fe32 	bl	800ce82 <HAL_I2C_Init>
 800a21e:	b950      	cbnz	r0, 800a236 <MX_I2C3_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a220:	2100      	movs	r1, #0
 800a222:	4808      	ldr	r0, [pc, #32]	@ (800a244 <MX_I2C3_Init+0x48>)
 800a224:	f003 f822 	bl	800d26c <HAL_I2CEx_ConfigAnalogFilter>
 800a228:	b938      	cbnz	r0, 800a23a <MX_I2C3_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800a22a:	2100      	movs	r1, #0
 800a22c:	4805      	ldr	r0, [pc, #20]	@ (800a244 <MX_I2C3_Init+0x48>)
 800a22e:	f003 f84a 	bl	800d2c6 <HAL_I2CEx_ConfigDigitalFilter>
 800a232:	b920      	cbnz	r0, 800a23e <MX_I2C3_Init+0x42>
}
 800a234:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a236:	f7ff ff27 	bl	800a088 <Error_Handler>
    Error_Handler();
 800a23a:	f7ff ff25 	bl	800a088 <Error_Handler>
    Error_Handler();
 800a23e:	f7ff ff23 	bl	800a088 <Error_Handler>
 800a242:	bf00      	nop
 800a244:	20003c80 	.word	0x20003c80
 800a248:	40005c00 	.word	0x40005c00
 800a24c:	00503d58 	.word	0x00503d58

0800a250 <SystemClock_Config>:
{
 800a250:	b500      	push	{lr}
 800a252:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a254:	2244      	movs	r2, #68	@ 0x44
 800a256:	2100      	movs	r1, #0
 800a258:	a805      	add	r0, sp, #20
 800a25a:	f005 fb3e 	bl	800f8da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a25e:	2300      	movs	r3, #0
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	9301      	str	r3, [sp, #4]
 800a264:	9302      	str	r3, [sp, #8]
 800a266:	9303      	str	r3, [sp, #12]
 800a268:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800a26a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a26e:	f003 f9e7 	bl	800d640 <HAL_PWREx_ControlVoltageScaling>
 800a272:	bb18      	cbnz	r0, 800a2bc <SystemClock_Config+0x6c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a274:	2302      	movs	r3, #2
 800a276:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a278:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a27c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a27e:	2210      	movs	r2, #16
 800a280:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a282:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a284:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800a286:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800a288:	2214      	movs	r2, #20
 800a28a:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800a28c:	2207      	movs	r2, #7
 800a28e:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a290:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a292:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a294:	a805      	add	r0, sp, #20
 800a296:	f003 fab7 	bl	800d808 <HAL_RCC_OscConfig>
 800a29a:	b988      	cbnz	r0, 800a2c0 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a29c:	230f      	movs	r3, #15
 800a29e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a2a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a2aa:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a2ac:	2104      	movs	r1, #4
 800a2ae:	4668      	mov	r0, sp
 800a2b0:	f003 fde0 	bl	800de74 <HAL_RCC_ClockConfig>
 800a2b4:	b930      	cbnz	r0, 800a2c4 <SystemClock_Config+0x74>
}
 800a2b6:	b017      	add	sp, #92	@ 0x5c
 800a2b8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800a2bc:	f7ff fee4 	bl	800a088 <Error_Handler>
    Error_Handler();
 800a2c0:	f7ff fee2 	bl	800a088 <Error_Handler>
    Error_Handler();  
 800a2c4:	f7ff fee0 	bl	800a088 <Error_Handler>

0800a2c8 <main>:
{
 800a2c8:	b508      	push	{r3, lr}
 800a2ca:	b672      	cpsid	i
  SysTick->CTRL = 0;
 800a2cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	611a      	str	r2, [r3, #16]
  SysTick->LOAD = 0;
 800a2d4:	615a      	str	r2, [r3, #20]
  SysTick->VAL = 0;
 800a2d6:	619a      	str	r2, [r3, #24]
  HAL_Init();
 800a2d8:	f000 ff61 	bl	800b19e <HAL_Init>
  SystemClock_Config();
 800a2dc:	f7ff ffb8 	bl	800a250 <SystemClock_Config>
  MX_GPIO_Init();
 800a2e0:	f7ff fe4a 	bl	8009f78 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a2e4:	f7ff fed2 	bl	800a08c <MX_ADC1_Init>
  MX_CAN1_Init();
 800a2e8:	f7ff ff10 	bl	800a10c <MX_CAN1_Init>
  MX_CRC_Init();
 800a2ec:	f7ff ff46 	bl	800a17c <MX_CRC_Init>
  MX_I2C1_Init();
 800a2f0:	f7ff ff5a 	bl	800a1a8 <MX_I2C1_Init>
  MX_I2C3_Init();
 800a2f4:	f7ff ff82 	bl	800a1fc <MX_I2C3_Init>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800a2f8:	217f      	movs	r1, #127	@ 0x7f
 800a2fa:	4829      	ldr	r0, [pc, #164]	@ (800a3a0 <main+0xd8>)
 800a2fc:	f001 fc97 	bl	800bc2e <HAL_ADCEx_Calibration_Start>
 800a300:	b108      	cbz	r0, 800a306 <main+0x3e>
    Error_Handler();
 800a302:	f7ff fec1 	bl	800a088 <Error_Handler>
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800a306:	4827      	ldr	r0, [pc, #156]	@ (800a3a4 <main+0xdc>)
 800a308:	f001 fe06 	bl	800bf18 <HAL_CAN_Start>
 800a30c:	b108      	cbz	r0, 800a312 <main+0x4a>
    Error_Handler();
 800a30e:	f7ff febb 	bl	800a088 <Error_Handler>
  osKernelInitialize();
 800a312:	f7fe ffef 	bl	80092f4 <osKernelInitialize>
  I2C1Handle = osMutexNew(&I2C1_attributes);
 800a316:	4824      	ldr	r0, [pc, #144]	@ (800a3a8 <main+0xe0>)
 800a318:	f7ff f88c 	bl	8009434 <osMutexNew>
 800a31c:	4b23      	ldr	r3, [pc, #140]	@ (800a3ac <main+0xe4>)
 800a31e:	6018      	str	r0, [r3, #0]
  I2C3Handle = osMutexNew(&I2C3_attributes);
 800a320:	4823      	ldr	r0, [pc, #140]	@ (800a3b0 <main+0xe8>)
 800a322:	f7ff f887 	bl	8009434 <osMutexNew>
 800a326:	4b23      	ldr	r3, [pc, #140]	@ (800a3b4 <main+0xec>)
 800a328:	6018      	str	r0, [r3, #0]
  CANHandle = osMutexNew(&CAN_attributes);
 800a32a:	4823      	ldr	r0, [pc, #140]	@ (800a3b8 <main+0xf0>)
 800a32c:	f7ff f882 	bl	8009434 <osMutexNew>
 800a330:	4b22      	ldr	r3, [pc, #136]	@ (800a3bc <main+0xf4>)
 800a332:	6018      	str	r0, [r3, #0]
  Config_Init();
 800a334:	f7ff fae0 	bl	80098f8 <Config_Init>
  if (ErrorMgr_Init() != HAL_OK)
 800a338:	f7ff fb70 	bl	8009a1c <ErrorMgr_Init>
 800a33c:	b108      	cbz	r0, 800a342 <main+0x7a>
    Error_Handler();
 800a33e:	f7ff fea3 	bl	800a088 <Error_Handler>
  if (CAN_Manager_Init() != HAL_OK)
 800a342:	f7fe fb37 	bl	80089b4 <CAN_Manager_Init>
 800a346:	b108      	cbz	r0, 800a34c <main+0x84>
    Error_Handler();
 800a348:	f7ff fe9e 	bl	800a088 <Error_Handler>
  ErrorMgr_SetState(BMS_STATE_IDLE);
 800a34c:	2001      	movs	r0, #1
 800a34e:	f7ff fc15 	bl	8009b7c <ErrorMgr_SetState>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800a352:	4a1b      	ldr	r2, [pc, #108]	@ (800a3c0 <main+0xf8>)
 800a354:	2100      	movs	r1, #0
 800a356:	481b      	ldr	r0, [pc, #108]	@ (800a3c4 <main+0xfc>)
 800a358:	f7ff f804 	bl	8009364 <osThreadNew>
 800a35c:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c8 <main+0x100>)
 800a35e:	6018      	str	r0, [r3, #0]
  CellVoltageBMS1Handle = osThreadNew(ReadBQBMS1, NULL, &CellVoltageBMS1_attributes);
 800a360:	4a1a      	ldr	r2, [pc, #104]	@ (800a3cc <main+0x104>)
 800a362:	2100      	movs	r1, #0
 800a364:	481a      	ldr	r0, [pc, #104]	@ (800a3d0 <main+0x108>)
 800a366:	f7fe fffd 	bl	8009364 <osThreadNew>
 800a36a:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d4 <main+0x10c>)
 800a36c:	6018      	str	r0, [r3, #0]
  CellVoltageBMS2Handle = osThreadNew(ReadBQBMS2, NULL, &CellVoltageBMS2_attributes);
 800a36e:	4a1a      	ldr	r2, [pc, #104]	@ (800a3d8 <main+0x110>)
 800a370:	2100      	movs	r1, #0
 800a372:	481a      	ldr	r0, [pc, #104]	@ (800a3dc <main+0x114>)
 800a374:	f7fe fff6 	bl	8009364 <osThreadNew>
 800a378:	4b19      	ldr	r3, [pc, #100]	@ (800a3e0 <main+0x118>)
 800a37a:	6018      	str	r0, [r3, #0]
  CellTemperatureHandle = osThreadNew(ReadCellTemps, NULL, &CellTemperature_attributes);
 800a37c:	4a19      	ldr	r2, [pc, #100]	@ (800a3e4 <main+0x11c>)
 800a37e:	2100      	movs	r1, #0
 800a380:	4819      	ldr	r0, [pc, #100]	@ (800a3e8 <main+0x120>)
 800a382:	f7fe ffef 	bl	8009364 <osThreadNew>
 800a386:	4b19      	ldr	r3, [pc, #100]	@ (800a3ec <main+0x124>)
 800a388:	6018      	str	r0, [r3, #0]
  CANManagerHandle = osThreadNew(CAN_ManagerTask, NULL, &CANManager_attributes);
 800a38a:	4a19      	ldr	r2, [pc, #100]	@ (800a3f0 <main+0x128>)
 800a38c:	2100      	movs	r1, #0
 800a38e:	4819      	ldr	r0, [pc, #100]	@ (800a3f4 <main+0x12c>)
 800a390:	f7fe ffe8 	bl	8009364 <osThreadNew>
 800a394:	4b18      	ldr	r3, [pc, #96]	@ (800a3f8 <main+0x130>)
 800a396:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800a398:	f7fe ffbe 	bl	8009318 <osKernelStart>
  while (1)
 800a39c:	e7fe      	b.n	800a39c <main+0xd4>
 800a39e:	bf00      	nop
 800a3a0:	20003d74 	.word	0x20003d74
 800a3a4:	20003d4c 	.word	0x20003d4c
 800a3a8:	0800fd0c 	.word	0x0800fd0c
 800a3ac:	20003c68 	.word	0x20003c68
 800a3b0:	0800fcfc 	.word	0x0800fcfc
 800a3b4:	20003c64 	.word	0x20003c64
 800a3b8:	0800fcec 	.word	0x0800fcec
 800a3bc:	20003c60 	.word	0x20003c60
 800a3c0:	0800fdac 	.word	0x0800fdac
 800a3c4:	0800a015 	.word	0x0800a015
 800a3c8:	20003c7c 	.word	0x20003c7c
 800a3cc:	0800fd88 	.word	0x0800fd88
 800a3d0:	0800a01f 	.word	0x0800a01f
 800a3d4:	20003c78 	.word	0x20003c78
 800a3d8:	0800fd64 	.word	0x0800fd64
 800a3dc:	0800a027 	.word	0x0800a027
 800a3e0:	20003c74 	.word	0x20003c74
 800a3e4:	0800fd40 	.word	0x0800fd40
 800a3e8:	0800a02f 	.word	0x0800a02f
 800a3ec:	20003c70 	.word	0x20003c70
 800a3f0:	0800fd1c 	.word	0x0800fd1c
 800a3f4:	08008c85 	.word	0x08008c85
 800a3f8:	20003c6c 	.word	0x20003c6c

0800a3fc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3fc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a402:	4b0d      	ldr	r3, [pc, #52]	@ (800a438 <prvTaskExitError+0x3c>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40a:	d008      	beq.n	800a41e <prvTaskExitError+0x22>
 800a40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	e7fe      	b.n	800a41c <prvTaskExitError+0x20>
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a42e:	9b01      	ldr	r3, [sp, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0fc      	beq.n	800a42e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a434:	b002      	add	sp, #8
 800a436:	4770      	bx	lr
 800a438:	20000000 	.word	0x20000000

0800a43c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a43c:	4808      	ldr	r0, [pc, #32]	@ (800a460 <prvPortStartFirstTask+0x24>)
 800a43e:	6800      	ldr	r0, [r0, #0]
 800a440:	6800      	ldr	r0, [r0, #0]
 800a442:	f380 8808 	msr	MSP, r0
 800a446:	f04f 0000 	mov.w	r0, #0
 800a44a:	f380 8814 	msr	CONTROL, r0
 800a44e:	b662      	cpsie	i
 800a450:	b661      	cpsie	f
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	df00      	svc	0
 800a45c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a45e:	0000      	.short	0x0000
 800a460:	e000ed08 	.word	0xe000ed08

0800a464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a474 <vPortEnableVFP+0x10>
 800a468:	6801      	ldr	r1, [r0, #0]
 800a46a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a46e:	6001      	str	r1, [r0, #0]
 800a470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a472:	0000      	.short	0x0000
 800a474:	e000ed88 	.word	0xe000ed88

0800a478 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a47c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a480:	f021 0101 	bic.w	r1, r1, #1
 800a484:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a488:	4b05      	ldr	r3, [pc, #20]	@ (800a4a0 <pxPortInitialiseStack+0x28>)
 800a48a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a48e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a492:	f06f 0302 	mvn.w	r3, #2
 800a496:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800a49a:	3844      	subs	r0, #68	@ 0x44
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	0800a3fd 	.word	0x0800a3fd
	...

0800a4b0 <SVC_Handler>:
	__asm volatile (
 800a4b0:	4b07      	ldr	r3, [pc, #28]	@ (800a4d0 <pxCurrentTCBConst2>)
 800a4b2:	6819      	ldr	r1, [r3, #0]
 800a4b4:	6808      	ldr	r0, [r1, #0]
 800a4b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ba:	f380 8809 	msr	PSP, r0
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f04f 0000 	mov.w	r0, #0
 800a4c6:	f380 8811 	msr	BASEPRI, r0
 800a4ca:	4770      	bx	lr
 800a4cc:	f3af 8000 	nop.w

0800a4d0 <pxCurrentTCBConst2>:
 800a4d0:	2000436c 	.word	0x2000436c

0800a4d4 <vPortEnterCritical>:
 800a4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800a4e4:	4a0b      	ldr	r2, [pc, #44]	@ (800a514 <vPortEnterCritical+0x40>)
 800a4e6:	6813      	ldr	r3, [r2, #0]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d000      	beq.n	800a4f2 <vPortEnterCritical+0x1e>
}
 800a4f0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4f2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a4f6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800a4fa:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800a4fe:	d0f7      	beq.n	800a4f0 <vPortEnterCritical+0x1c>
 800a500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	e7fe      	b.n	800a510 <vPortEnterCritical+0x3c>
 800a512:	bf00      	nop
 800a514:	20000000 	.word	0x20000000

0800a518 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800a518:	4b09      	ldr	r3, [pc, #36]	@ (800a540 <vPortExitCritical+0x28>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	b943      	cbnz	r3, 800a530 <vPortExitCritical+0x18>
 800a51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	e7fe      	b.n	800a52e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a530:	3b01      	subs	r3, #1
 800a532:	4a03      	ldr	r2, [pc, #12]	@ (800a540 <vPortExitCritical+0x28>)
 800a534:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a536:	b90b      	cbnz	r3, 800a53c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a538:	f383 8811 	msr	BASEPRI, r3
}
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20000000 	.word	0x20000000
	...

0800a550 <PendSV_Handler>:
	__asm volatile
 800a550:	f3ef 8009 	mrs	r0, PSP
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	4b15      	ldr	r3, [pc, #84]	@ (800a5b0 <pxCurrentTCBConst>)
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	f01e 0f10 	tst.w	lr, #16
 800a560:	bf08      	it	eq
 800a562:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a566:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56a:	6010      	str	r0, [r2, #0]
 800a56c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a570:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a574:	f380 8811 	msr	BASEPRI, r0
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f004 fd34 	bl	800efec <vTaskSwitchContext>
 800a584:	f04f 0000 	mov.w	r0, #0
 800a588:	f380 8811 	msr	BASEPRI, r0
 800a58c:	bc09      	pop	{r0, r3}
 800a58e:	6819      	ldr	r1, [r3, #0]
 800a590:	6808      	ldr	r0, [r1, #0]
 800a592:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a596:	f01e 0f10 	tst.w	lr, #16
 800a59a:	bf08      	it	eq
 800a59c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a5a0:	f380 8809 	msr	PSP, r0
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	f3af 8000 	nop.w

0800a5b0 <pxCurrentTCBConst>:
 800a5b0:	2000436c 	.word	0x2000436c

0800a5b4 <xPortSysTickHandler>:
{
 800a5b4:	b508      	push	{r3, lr}
	__asm volatile
 800a5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ba:	f383 8811 	msr	BASEPRI, r3
 800a5be:	f3bf 8f6f 	isb	sy
 800a5c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a5c6:	f004 fbe3 	bl	800ed90 <xTaskIncrementTick>
 800a5ca:	b128      	cbz	r0, 800a5d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a5d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800a5d8:	2300      	movs	r3, #0
 800a5da:	f383 8811 	msr	BASEPRI, r3
}
 800a5de:	bd08      	pop	{r3, pc}

0800a5e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5e8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5ea:	4b05      	ldr	r3, [pc, #20]	@ (800a600 <vPortSetupTimerInterrupt+0x20>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4905      	ldr	r1, [pc, #20]	@ (800a604 <vPortSetupTimerInterrupt+0x24>)
 800a5f0:	fba1 1303 	umull	r1, r3, r1, r3
 800a5f4:	099b      	lsrs	r3, r3, #6
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5fa:	2307      	movs	r3, #7
 800a5fc:	6113      	str	r3, [r2, #16]
}
 800a5fe:	4770      	bx	lr
 800a600:	2000002c 	.word	0x2000002c
 800a604:	10624dd3 	.word	0x10624dd3

0800a608 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a608:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a60c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800a610:	4b3d      	ldr	r3, [pc, #244]	@ (800a708 <xPortStartScheduler+0x100>)
 800a612:	429a      	cmp	r2, r3
 800a614:	d01c      	beq.n	800a650 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a616:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a61a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800a61e:	4b3b      	ldr	r3, [pc, #236]	@ (800a70c <xPortStartScheduler+0x104>)
 800a620:	429a      	cmp	r2, r3
 800a622:	d01e      	beq.n	800a662 <xPortStartScheduler+0x5a>
{
 800a624:	b530      	push	{r4, r5, lr}
 800a626:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a628:	4b39      	ldr	r3, [pc, #228]	@ (800a710 <xPortStartScheduler+0x108>)
 800a62a:	781a      	ldrb	r2, [r3, #0]
 800a62c:	b2d2      	uxtb	r2, r2
 800a62e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a630:	22ff      	movs	r2, #255	@ 0xff
 800a632:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a63c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a640:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a644:	4a33      	ldr	r2, [pc, #204]	@ (800a714 <xPortStartScheduler+0x10c>)
 800a646:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a648:	4b33      	ldr	r3, [pc, #204]	@ (800a718 <xPortStartScheduler+0x110>)
 800a64a:	2207      	movs	r2, #7
 800a64c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a64e:	e01b      	b.n	800a688 <xPortStartScheduler+0x80>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a660:	e7fe      	b.n	800a660 <xPortStartScheduler+0x58>
 800a662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a672:	e7fe      	b.n	800a672 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800a674:	4a28      	ldr	r2, [pc, #160]	@ (800a718 <xPortStartScheduler+0x110>)
 800a676:	6813      	ldr	r3, [r2, #0]
 800a678:	3b01      	subs	r3, #1
 800a67a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a67c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a688:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a68c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a690:	d1f0      	bne.n	800a674 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a692:	4b21      	ldr	r3, [pc, #132]	@ (800a718 <xPortStartScheduler+0x110>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b03      	cmp	r3, #3
 800a698:	d008      	beq.n	800a6ac <xPortStartScheduler+0xa4>
 800a69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	e7fe      	b.n	800a6aa <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	4a1a      	ldr	r2, [pc, #104]	@ (800a718 <xPortStartScheduler+0x110>)
 800a6b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6b2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a6b6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6b8:	9b01      	ldr	r3, [sp, #4]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	4a14      	ldr	r2, [pc, #80]	@ (800a710 <xPortStartScheduler+0x108>)
 800a6be:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6c0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800a6c4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800a6c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a6cc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6d0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800a6d4:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a6d8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800a6dc:	f7ff ff80 	bl	800a5e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a6e0:	2500      	movs	r5, #0
 800a6e2:	4b0e      	ldr	r3, [pc, #56]	@ (800a71c <xPortStartScheduler+0x114>)
 800a6e4:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800a6e6:	f7ff febd 	bl	800a464 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6ea:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800a6ee:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a6f2:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800a6f6:	f7ff fea1 	bl	800a43c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a6fa:	f004 fc77 	bl	800efec <vTaskSwitchContext>
	prvTaskExitError();
 800a6fe:	f7ff fe7d 	bl	800a3fc <prvTaskExitError>
}
 800a702:	4628      	mov	r0, r5
 800a704:	b003      	add	sp, #12
 800a706:	bd30      	pop	{r4, r5, pc}
 800a708:	410fc271 	.word	0x410fc271
 800a70c:	410fc270 	.word	0x410fc270
 800a710:	e000e400 	.word	0xe000e400
 800a714:	20003ddc 	.word	0x20003ddc
 800a718:	20003dd8 	.word	0x20003dd8
 800a71c:	20000000 	.word	0x20000000

0800a720 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a720:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a724:	2b0f      	cmp	r3, #15
 800a726:	d90e      	bls.n	800a746 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a728:	4a11      	ldr	r2, [pc, #68]	@ (800a770 <vPortValidateInterruptPriority+0x50>)
 800a72a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a72c:	4b11      	ldr	r3, [pc, #68]	@ (800a774 <vPortValidateInterruptPriority+0x54>)
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	429a      	cmp	r2, r3
 800a732:	d208      	bcs.n	800a746 <vPortValidateInterruptPriority+0x26>
 800a734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	e7fe      	b.n	800a744 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a746:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a74a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800a74e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a752:	4a09      	ldr	r2, [pc, #36]	@ (800a778 <vPortValidateInterruptPriority+0x58>)
 800a754:	6812      	ldr	r2, [r2, #0]
 800a756:	4293      	cmp	r3, r2
 800a758:	d908      	bls.n	800a76c <vPortValidateInterruptPriority+0x4c>
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	e7fe      	b.n	800a76a <vPortValidateInterruptPriority+0x4a>
	}
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	e000e3f0 	.word	0xe000e3f0
 800a774:	20003ddc 	.word	0x20003ddc
 800a778:	20003dd8 	.word	0x20003dd8

0800a77c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a77c:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a77e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800a780:	b118      	cbz	r0, 800a78a <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800a78a:	4770      	bx	lr

0800a78c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a78c:	b510      	push	{r4, lr}
 800a78e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a790:	f7ff fea0 	bl	800a4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a794:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a796:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a798:	429a      	cmp	r2, r3
 800a79a:	d004      	beq.n	800a7a6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800a79c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800a79e:	f7ff febb 	bl	800a518 <vPortExitCritical>

	return xReturn;
}
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800a7a6:	2401      	movs	r4, #1
 800a7a8:	e7f9      	b.n	800a79e <prvIsQueueFull+0x12>

0800a7aa <prvIsQueueEmpty>:
{
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a7ae:	f7ff fe91 	bl	800a4d4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800a7b4:	b923      	cbnz	r3, 800a7c0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800a7b6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800a7b8:	f7ff feae 	bl	800a518 <vPortExitCritical>
}
 800a7bc:	4620      	mov	r0, r4
 800a7be:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800a7c0:	2400      	movs	r4, #0
 800a7c2:	e7f9      	b.n	800a7b8 <prvIsQueueEmpty+0xe>

0800a7c4 <prvCopyDataToQueue>:
{
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7ca:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a7cc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800a7ce:	b95a      	cbnz	r2, 800a7e8 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7d0:	6803      	ldr	r3, [r0, #0]
 800a7d2:	b11b      	cbz	r3, 800a7dc <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800a7d4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7d6:	3601      	adds	r6, #1
 800a7d8:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800a7da:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7dc:	6880      	ldr	r0, [r0, #8]
 800a7de:	f004 fd83 	bl	800f2e8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60a3      	str	r3, [r4, #8]
 800a7e6:	e7f6      	b.n	800a7d6 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800a7e8:	b96d      	cbnz	r5, 800a806 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7ea:	6840      	ldr	r0, [r0, #4]
 800a7ec:	f005 f8a8 	bl	800f940 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7f0:	6863      	ldr	r3, [r4, #4]
 800a7f2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a7f4:	4413      	add	r3, r2
 800a7f6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7f8:	68a2      	ldr	r2, [r4, #8]
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d319      	bcc.n	800a832 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800a802:	4628      	mov	r0, r5
 800a804:	e7e7      	b.n	800a7d6 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a806:	68c0      	ldr	r0, [r0, #12]
 800a808:	f005 f89a 	bl	800f940 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a80c:	68e3      	ldr	r3, [r4, #12]
 800a80e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a810:	4251      	negs	r1, r2
 800a812:	1a9b      	subs	r3, r3, r2
 800a814:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a816:	6822      	ldr	r2, [r4, #0]
 800a818:	4293      	cmp	r3, r2
 800a81a:	d202      	bcs.n	800a822 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a81c:	68a3      	ldr	r3, [r4, #8]
 800a81e:	440b      	add	r3, r1
 800a820:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800a822:	2d02      	cmp	r5, #2
 800a824:	d001      	beq.n	800a82a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800a826:	2000      	movs	r0, #0
 800a828:	e7d5      	b.n	800a7d6 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a82a:	b126      	cbz	r6, 800a836 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800a82c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800a82e:	2000      	movs	r0, #0
 800a830:	e7d1      	b.n	800a7d6 <prvCopyDataToQueue+0x12>
 800a832:	4628      	mov	r0, r5
 800a834:	e7cf      	b.n	800a7d6 <prvCopyDataToQueue+0x12>
 800a836:	2000      	movs	r0, #0
 800a838:	e7cd      	b.n	800a7d6 <prvCopyDataToQueue+0x12>

0800a83a <prvCopyDataFromQueue>:
{
 800a83a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a83c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800a83e:	b16a      	cbz	r2, 800a85c <prvCopyDataFromQueue+0x22>
{
 800a840:	b510      	push	{r4, lr}
 800a842:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a844:	68d9      	ldr	r1, [r3, #12]
 800a846:	4411      	add	r1, r2
 800a848:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a84a:	689c      	ldr	r4, [r3, #8]
 800a84c:	42a1      	cmp	r1, r4
 800a84e:	d301      	bcc.n	800a854 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a850:	6819      	ldr	r1, [r3, #0]
 800a852:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a854:	68d9      	ldr	r1, [r3, #12]
 800a856:	f005 f873 	bl	800f940 <memcpy>
}
 800a85a:	bd10      	pop	{r4, pc}
 800a85c:	4770      	bx	lr

0800a85e <prvUnlockQueue>:
{
 800a85e:	b538      	push	{r3, r4, r5, lr}
 800a860:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800a862:	f7ff fe37 	bl	800a4d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a866:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800a86a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a86c:	e001      	b.n	800a872 <prvUnlockQueue+0x14>
			--cTxLock;
 800a86e:	3c01      	subs	r4, #1
 800a870:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a872:	2c00      	cmp	r4, #0
 800a874:	dd0a      	ble.n	800a88c <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a876:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a878:	b143      	cbz	r3, 800a88c <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a87a:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800a87e:	f004 fc35 	bl	800f0ec <xTaskRemoveFromEventList>
 800a882:	2800      	cmp	r0, #0
 800a884:	d0f3      	beq.n	800a86e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800a886:	f004 fcc7 	bl	800f218 <vTaskMissedYield>
 800a88a:	e7f0      	b.n	800a86e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800a88c:	23ff      	movs	r3, #255	@ 0xff
 800a88e:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800a892:	f7ff fe41 	bl	800a518 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a896:	f7ff fe1d 	bl	800a4d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a89a:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800a89e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8a0:	e001      	b.n	800a8a6 <prvUnlockQueue+0x48>
				--cRxLock;
 800a8a2:	3c01      	subs	r4, #1
 800a8a4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	dd0a      	ble.n	800a8c0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8aa:	692b      	ldr	r3, [r5, #16]
 800a8ac:	b143      	cbz	r3, 800a8c0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8ae:	f105 0010 	add.w	r0, r5, #16
 800a8b2:	f004 fc1b 	bl	800f0ec <xTaskRemoveFromEventList>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d0f3      	beq.n	800a8a2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800a8ba:	f004 fcad 	bl	800f218 <vTaskMissedYield>
 800a8be:	e7f0      	b.n	800a8a2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800a8c0:	23ff      	movs	r3, #255	@ 0xff
 800a8c2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800a8c6:	f7ff fe27 	bl	800a518 <vPortExitCritical>
}
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}

0800a8cc <xQueueGenericReset>:
{
 800a8cc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800a8ce:	b1e0      	cbz	r0, 800a90a <xQueueGenericReset+0x3e>
 800a8d0:	460d      	mov	r5, r1
 800a8d2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a8d4:	f7ff fdfe 	bl	800a4d4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a8dc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800a8de:	fb01 3002 	mla	r0, r1, r2, r3
 800a8e2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8e8:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a8ea:	3a01      	subs	r2, #1
 800a8ec:	fb02 3301 	mla	r3, r2, r1, r3
 800a8f0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a8f2:	23ff      	movs	r3, #255	@ 0xff
 800a8f4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a8f8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800a8fc:	b9fd      	cbnz	r5, 800a93e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8fe:	6923      	ldr	r3, [r4, #16]
 800a900:	b963      	cbnz	r3, 800a91c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800a902:	f7ff fe09 	bl	800a518 <vPortExitCritical>
}
 800a906:	2001      	movs	r0, #1
 800a908:	bd38      	pop	{r3, r4, r5, pc}
 800a90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800a91a:	e7fe      	b.n	800a91a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a91c:	f104 0010 	add.w	r0, r4, #16
 800a920:	f004 fbe4 	bl	800f0ec <xTaskRemoveFromEventList>
 800a924:	2800      	cmp	r0, #0
 800a926:	d0ec      	beq.n	800a902 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800a928:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a92c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a930:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	e7e1      	b.n	800a902 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a93e:	f104 0010 	add.w	r0, r4, #16
 800a942:	f7ff fad3 	bl	8009eec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a946:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800a94a:	f7ff facf 	bl	8009eec <vListInitialise>
 800a94e:	e7d8      	b.n	800a902 <xQueueGenericReset+0x36>

0800a950 <prvInitialiseNewQueue>:
{
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	461d      	mov	r5, r3
 800a954:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a956:	460b      	mov	r3, r1
 800a958:	b949      	cbnz	r1, 800a96e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a95a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a95c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a95e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a960:	2101      	movs	r1, #1
 800a962:	4620      	mov	r0, r4
 800a964:	f7ff ffb2 	bl	800a8cc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a968:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800a96c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a96e:	6022      	str	r2, [r4, #0]
 800a970:	e7f4      	b.n	800a95c <prvInitialiseNewQueue+0xc>

0800a972 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a972:	b940      	cbnz	r0, 800a986 <xQueueGenericCreateStatic+0x14>
 800a974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	e7fe      	b.n	800a984 <xQueueGenericCreateStatic+0x12>
	{
 800a986:	b510      	push	{r4, lr}
 800a988:	b084      	sub	sp, #16
 800a98a:	461c      	mov	r4, r3
 800a98c:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800a98e:	b153      	cbz	r3, 800a9a6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a990:	b192      	cbz	r2, 800a9b8 <xQueueGenericCreateStatic+0x46>
 800a992:	b989      	cbnz	r1, 800a9b8 <xQueueGenericCreateStatic+0x46>
 800a994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	e7fe      	b.n	800a9a4 <xQueueGenericCreateStatic+0x32>
 800a9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800a9b6:	e7fe      	b.n	800a9b6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a9b8:	b16a      	cbz	r2, 800a9d6 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a9ba:	2350      	movs	r3, #80	@ 0x50
 800a9bc:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	2b50      	cmp	r3, #80	@ 0x50
 800a9c2:	d013      	beq.n	800a9ec <xQueueGenericCreateStatic+0x7a>
 800a9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	e7fe      	b.n	800a9d4 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a9d6:	2900      	cmp	r1, #0
 800a9d8:	d0ef      	beq.n	800a9ba <xQueueGenericCreateStatic+0x48>
 800a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	e7fe      	b.n	800a9ea <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9ec:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9f4:	9400      	str	r4, [sp, #0]
 800a9f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a9fa:	4660      	mov	r0, ip
 800a9fc:	f7ff ffa8 	bl	800a950 <prvInitialiseNewQueue>
	}
 800aa00:	4620      	mov	r0, r4
 800aa02:	b004      	add	sp, #16
 800aa04:	bd10      	pop	{r4, pc}

0800aa06 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aa06:	b940      	cbnz	r0, 800aa1a <xQueueGenericCreate+0x14>
 800aa08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	e7fe      	b.n	800aa18 <xQueueGenericCreate+0x12>
	{
 800aa1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa1c:	b083      	sub	sp, #12
 800aa1e:	460d      	mov	r5, r1
 800aa20:	4614      	mov	r4, r2
 800aa22:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa24:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa28:	3050      	adds	r0, #80	@ 0x50
 800aa2a:	f7ff f989 	bl	8009d40 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800aa2e:	4607      	mov	r7, r0
 800aa30:	b150      	cbz	r0, 800aa48 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa32:	2300      	movs	r3, #0
 800aa34:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa38:	9000      	str	r0, [sp, #0]
 800aa3a:	4623      	mov	r3, r4
 800aa3c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800aa40:	4629      	mov	r1, r5
 800aa42:	4630      	mov	r0, r6
 800aa44:	f7ff ff84 	bl	800a950 <prvInitialiseNewQueue>
	}
 800aa48:	4638      	mov	r0, r7
 800aa4a:	b003      	add	sp, #12
 800aa4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa4e <xQueueGenericSend>:
{
 800aa4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa50:	b085      	sub	sp, #20
 800aa52:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800aa54:	b188      	cbz	r0, 800aa7a <xQueueGenericSend+0x2c>
 800aa56:	460f      	mov	r7, r1
 800aa58:	461d      	mov	r5, r3
 800aa5a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa5c:	b1b1      	cbz	r1, 800aa8c <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa5e:	2d02      	cmp	r5, #2
 800aa60:	d120      	bne.n	800aaa4 <xQueueGenericSend+0x56>
 800aa62:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d01d      	beq.n	800aaa4 <xQueueGenericSend+0x56>
 800aa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	e7fe      	b.n	800aa78 <xQueueGenericSend+0x2a>
 800aa7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7e:	f383 8811 	msr	BASEPRI, r3
 800aa82:	f3bf 8f6f 	isb	sy
 800aa86:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800aa8a:	e7fe      	b.n	800aa8a <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa8c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0e5      	beq.n	800aa5e <xQueueGenericSend+0x10>
 800aa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	e7fe      	b.n	800aaa2 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaa4:	f004 fbc4 	bl	800f230 <xTaskGetSchedulerState>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	b958      	cbnz	r0, 800aac4 <xQueueGenericSend+0x76>
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d048      	beq.n	800ab44 <xQueueGenericSend+0xf6>
 800aab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	e7fe      	b.n	800aac2 <xQueueGenericSend+0x74>
 800aac4:	2600      	movs	r6, #0
 800aac6:	e03d      	b.n	800ab44 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aac8:	462a      	mov	r2, r5
 800aaca:	4639      	mov	r1, r7
 800aacc:	4620      	mov	r0, r4
 800aace:	f7ff fe79 	bl	800a7c4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aad2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800aad4:	b97b      	cbnz	r3, 800aaf6 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800aad6:	b148      	cbz	r0, 800aaec <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800aad8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800aadc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aae0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800aae4:	f3bf 8f4f 	dsb	sy
 800aae8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800aaec:	f7ff fd14 	bl	800a518 <vPortExitCritical>
				return pdPASS;
 800aaf0:	2001      	movs	r0, #1
}
 800aaf2:	b005      	add	sp, #20
 800aaf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aaf6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800aafa:	f004 faf7 	bl	800f0ec <xTaskRemoveFromEventList>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d0f4      	beq.n	800aaec <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800ab02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ab06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ab0e:	f3bf 8f4f 	dsb	sy
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	e7e9      	b.n	800aaec <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800ab18:	f7ff fcfe 	bl	800a518 <vPortExitCritical>
					return errQUEUE_FULL;
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	e7e8      	b.n	800aaf2 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab20:	a802      	add	r0, sp, #8
 800ab22:	f004 fb29 	bl	800f178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab26:	2601      	movs	r6, #1
 800ab28:	e019      	b.n	800ab5e <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ab30:	e021      	b.n	800ab76 <xQueueGenericSend+0x128>
 800ab32:	2300      	movs	r3, #0
 800ab34:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ab38:	e023      	b.n	800ab82 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800ab3a:	4620      	mov	r0, r4
 800ab3c:	f7ff fe8f 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab40:	f004 f9b2 	bl	800eea8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800ab44:	f7ff fcc6 	bl	800a4d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab48:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ab4a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d3bb      	bcc.n	800aac8 <xQueueGenericSend+0x7a>
 800ab50:	2d02      	cmp	r5, #2
 800ab52:	d0b9      	beq.n	800aac8 <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d0de      	beq.n	800ab18 <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800ab5a:	2e00      	cmp	r6, #0
 800ab5c:	d0e0      	beq.n	800ab20 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800ab5e:	f7ff fcdb 	bl	800a518 <vPortExitCritical>
		vTaskSuspendAll();
 800ab62:	f004 f8ff 	bl	800ed64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab66:	f7ff fcb5 	bl	800a4d4 <vPortEnterCritical>
 800ab6a:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800ab6e:	b252      	sxtb	r2, r2
 800ab70:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab74:	d0d9      	beq.n	800ab2a <xQueueGenericSend+0xdc>
 800ab76:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800ab7a:	b252      	sxtb	r2, r2
 800ab7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab80:	d0d7      	beq.n	800ab32 <xQueueGenericSend+0xe4>
 800ab82:	f7ff fcc9 	bl	800a518 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab86:	a901      	add	r1, sp, #4
 800ab88:	a802      	add	r0, sp, #8
 800ab8a:	f004 fb01 	bl	800f190 <xTaskCheckForTimeOut>
 800ab8e:	b9d8      	cbnz	r0, 800abc8 <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab90:	4620      	mov	r0, r4
 800ab92:	f7ff fdfb 	bl	800a78c <prvIsQueueFull>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	d0cf      	beq.n	800ab3a <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab9a:	9901      	ldr	r1, [sp, #4]
 800ab9c:	f104 0010 	add.w	r0, r4, #16
 800aba0:	f004 fa70 	bl	800f084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aba4:	4620      	mov	r0, r4
 800aba6:	f7ff fe5a 	bl	800a85e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abaa:	f004 f97d 	bl	800eea8 <xTaskResumeAll>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d1c8      	bne.n	800ab44 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800abb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800abb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	e7bd      	b.n	800ab44 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800abc8:	4620      	mov	r0, r4
 800abca:	f7ff fe48 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abce:	f004 f96b 	bl	800eea8 <xTaskResumeAll>
			return errQUEUE_FULL;
 800abd2:	2000      	movs	r0, #0
 800abd4:	e78d      	b.n	800aaf2 <xQueueGenericSend+0xa4>

0800abd6 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800abd6:	b148      	cbz	r0, 800abec <prvInitialiseMutex+0x16>
	{
 800abd8:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800abda:	2100      	movs	r1, #0
 800abdc:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800abde:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800abe0:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800abe2:	460b      	mov	r3, r1
 800abe4:	460a      	mov	r2, r1
 800abe6:	f7ff ff32 	bl	800aa4e <xQueueGenericSend>
	}
 800abea:	bd08      	pop	{r3, pc}
 800abec:	4770      	bx	lr

0800abee <xQueueCreateMutex>:
	{
 800abee:	b510      	push	{r4, lr}
 800abf0:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800abf2:	2100      	movs	r1, #0
 800abf4:	2001      	movs	r0, #1
 800abf6:	f7ff ff06 	bl	800aa06 <xQueueGenericCreate>
 800abfa:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800abfc:	f7ff ffeb 	bl	800abd6 <prvInitialiseMutex>
	}
 800ac00:	4620      	mov	r0, r4
 800ac02:	bd10      	pop	{r4, pc}

0800ac04 <xQueueCreateMutexStatic>:
	{
 800ac04:	b510      	push	{r4, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ac0a:	9000      	str	r0, [sp, #0]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	4611      	mov	r1, r2
 800ac10:	2001      	movs	r0, #1
 800ac12:	f7ff feae 	bl	800a972 <xQueueGenericCreateStatic>
 800ac16:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ac18:	f7ff ffdd 	bl	800abd6 <prvInitialiseMutex>
	}
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	b002      	add	sp, #8
 800ac20:	bd10      	pop	{r4, pc}

0800ac22 <xQueueGiveMutexRecursive>:
	{
 800ac22:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800ac24:	b138      	cbz	r0, 800ac36 <xQueueGiveMutexRecursive+0x14>
 800ac26:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ac28:	6885      	ldr	r5, [r0, #8]
 800ac2a:	f004 fafb 	bl	800f224 <xTaskGetCurrentTaskHandle>
 800ac2e:	4285      	cmp	r5, r0
 800ac30:	d00a      	beq.n	800ac48 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800ac32:	2000      	movs	r0, #0
	}
 800ac34:	bd38      	pop	{r3, r4, r5, pc}
 800ac36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3a:	f383 8811 	msr	BASEPRI, r3
 800ac3e:	f3bf 8f6f 	isb	sy
 800ac42:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800ac46:	e7fe      	b.n	800ac46 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ac48:	68e3      	ldr	r3, [r4, #12]
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ac4e:	b10b      	cbz	r3, 800ac54 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800ac50:	2001      	movs	r0, #1
		return xReturn;
 800ac52:	e7ef      	b.n	800ac34 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ac54:	461a      	mov	r2, r3
 800ac56:	4619      	mov	r1, r3
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f7ff fef8 	bl	800aa4e <xQueueGenericSend>
			xReturn = pdPASS;
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e7e8      	b.n	800ac34 <xQueueGiveMutexRecursive+0x12>

0800ac62 <xQueueGenericSendFromISR>:
{
 800ac62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ac66:	b190      	cbz	r0, 800ac8e <xQueueGenericSendFromISR+0x2c>
 800ac68:	460f      	mov	r7, r1
 800ac6a:	4616      	mov	r6, r2
 800ac6c:	461c      	mov	r4, r3
 800ac6e:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac70:	b1b1      	cbz	r1, 800aca0 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac72:	2c02      	cmp	r4, #2
 800ac74:	d120      	bne.n	800acb8 <xQueueGenericSendFromISR+0x56>
 800ac76:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d01d      	beq.n	800acb8 <xQueueGenericSendFromISR+0x56>
 800ac7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac80:	f383 8811 	msr	BASEPRI, r3
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	e7fe      	b.n	800ac8c <xQueueGenericSendFromISR+0x2a>
 800ac8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ac9e:	e7fe      	b.n	800ac9e <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aca0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0e5      	beq.n	800ac72 <xQueueGenericSendFromISR+0x10>
 800aca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	e7fe      	b.n	800acb6 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acb8:	f7ff fd32 	bl	800a720 <vPortValidateInterruptPriority>
	__asm volatile
 800acbc:	f3ef 8811 	mrs	r8, BASEPRI
 800acc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acd0:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800acd2:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d306      	bcc.n	800ace6 <xQueueGenericSendFromISR+0x84>
 800acd8:	2c02      	cmp	r4, #2
 800acda:	d004      	beq.n	800ace6 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800acdc:	2000      	movs	r0, #0
	__asm volatile
 800acde:	f388 8811 	msr	BASEPRI, r8
}
 800ace2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800ace6:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800acea:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acee:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800acf0:	4622      	mov	r2, r4
 800acf2:	4639      	mov	r1, r7
 800acf4:	4628      	mov	r0, r5
 800acf6:	f7ff fd65 	bl	800a7c4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800acfa:	f1b9 3fff 	cmp.w	r9, #4294967295
 800acfe:	d006      	beq.n	800ad0e <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad00:	f109 0301 	add.w	r3, r9, #1
 800ad04:	b25b      	sxtb	r3, r3
 800ad06:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800ad0a:	2001      	movs	r0, #1
 800ad0c:	e7e7      	b.n	800acde <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad0e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ad10:	b90b      	cbnz	r3, 800ad16 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800ad12:	2001      	movs	r0, #1
 800ad14:	e7e3      	b.n	800acde <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad16:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800ad1a:	f004 f9e7 	bl	800f0ec <xTaskRemoveFromEventList>
 800ad1e:	b118      	cbz	r0, 800ad28 <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800ad20:	b126      	cbz	r6, 800ad2c <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad22:	2001      	movs	r0, #1
 800ad24:	6030      	str	r0, [r6, #0]
 800ad26:	e7da      	b.n	800acde <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800ad28:	2001      	movs	r0, #1
 800ad2a:	e7d8      	b.n	800acde <xQueueGenericSendFromISR+0x7c>
 800ad2c:	2001      	movs	r0, #1
 800ad2e:	e7d6      	b.n	800acde <xQueueGenericSendFromISR+0x7c>

0800ad30 <xQueueReceive>:
{
 800ad30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad32:	b085      	sub	sp, #20
 800ad34:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ad36:	b190      	cbz	r0, 800ad5e <xQueueReceive+0x2e>
 800ad38:	460f      	mov	r7, r1
 800ad3a:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad3c:	b1c1      	cbz	r1, 800ad70 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad3e:	f004 fa77 	bl	800f230 <xTaskGetSchedulerState>
 800ad42:	4606      	mov	r6, r0
 800ad44:	bb00      	cbnz	r0, 800ad88 <xQueueReceive+0x58>
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d05e      	beq.n	800ae0a <xQueueReceive+0xda>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	e7fe      	b.n	800ad5c <xQueueReceive+0x2c>
 800ad5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800ad6e:	e7fe      	b.n	800ad6e <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad70:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0e3      	beq.n	800ad3e <xQueueReceive+0xe>
 800ad76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	e7fe      	b.n	800ad86 <xQueueReceive+0x56>
 800ad88:	2600      	movs	r6, #0
 800ad8a:	e03e      	b.n	800ae0a <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f7ff fd53 	bl	800a83a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad94:	3d01      	subs	r5, #1
 800ad96:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad98:	6923      	ldr	r3, [r4, #16]
 800ad9a:	b923      	cbnz	r3, 800ada6 <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800ad9c:	f7ff fbbc 	bl	800a518 <vPortExitCritical>
				return pdPASS;
 800ada0:	2001      	movs	r0, #1
}
 800ada2:	b005      	add	sp, #20
 800ada4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ada6:	f104 0010 	add.w	r0, r4, #16
 800adaa:	f004 f99f 	bl	800f0ec <xTaskRemoveFromEventList>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d0f4      	beq.n	800ad9c <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800adb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800adb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	e7e9      	b.n	800ad9c <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800adc8:	f7ff fba6 	bl	800a518 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800adcc:	2000      	movs	r0, #0
 800adce:	e7e8      	b.n	800ada2 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800add0:	a802      	add	r0, sp, #8
 800add2:	f004 f9d1 	bl	800f178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800add6:	2601      	movs	r6, #1
 800add8:	e021      	b.n	800ae1e <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800adda:	2300      	movs	r3, #0
 800addc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ade0:	e029      	b.n	800ae36 <xQueueReceive+0x106>
 800ade2:	2300      	movs	r3, #0
 800ade4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ade8:	e02b      	b.n	800ae42 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800adea:	4620      	mov	r0, r4
 800adec:	f7ff fd37 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800adf0:	f004 f85a 	bl	800eea8 <xTaskResumeAll>
 800adf4:	e009      	b.n	800ae0a <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800adf6:	4620      	mov	r0, r4
 800adf8:	f7ff fd31 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800adfc:	f004 f854 	bl	800eea8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae00:	4620      	mov	r0, r4
 800ae02:	f7ff fcd2 	bl	800a7aa <prvIsQueueEmpty>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d13f      	bne.n	800ae8a <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800ae0a:	f7ff fb63 	bl	800a4d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae0e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae10:	2d00      	cmp	r5, #0
 800ae12:	d1bb      	bne.n	800ad8c <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d0d6      	beq.n	800adc8 <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800ae1a:	2e00      	cmp	r6, #0
 800ae1c:	d0d8      	beq.n	800add0 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800ae1e:	f7ff fb7b 	bl	800a518 <vPortExitCritical>
		vTaskSuspendAll();
 800ae22:	f003 ff9f 	bl	800ed64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae26:	f7ff fb55 	bl	800a4d4 <vPortEnterCritical>
 800ae2a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ae2e:	b25b      	sxtb	r3, r3
 800ae30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae34:	d0d1      	beq.n	800adda <xQueueReceive+0xaa>
 800ae36:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ae3a:	b25b      	sxtb	r3, r3
 800ae3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae40:	d0cf      	beq.n	800ade2 <xQueueReceive+0xb2>
 800ae42:	f7ff fb69 	bl	800a518 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae46:	a901      	add	r1, sp, #4
 800ae48:	a802      	add	r0, sp, #8
 800ae4a:	f004 f9a1 	bl	800f190 <xTaskCheckForTimeOut>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d1d1      	bne.n	800adf6 <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae52:	4620      	mov	r0, r4
 800ae54:	f7ff fca9 	bl	800a7aa <prvIsQueueEmpty>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d0c6      	beq.n	800adea <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae5c:	9901      	ldr	r1, [sp, #4]
 800ae5e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ae62:	f004 f90f 	bl	800f084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae66:	4620      	mov	r0, r4
 800ae68:	f7ff fcf9 	bl	800a85e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae6c:	f004 f81c 	bl	800eea8 <xTaskResumeAll>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d1ca      	bne.n	800ae0a <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800ae74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ae78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	e7bf      	b.n	800ae0a <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	e789      	b.n	800ada2 <xQueueReceive+0x72>

0800ae8e <xQueueSemaphoreTake>:
{
 800ae8e:	b570      	push	{r4, r5, r6, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ae94:	b158      	cbz	r0, 800aeae <xQueueSemaphoreTake+0x20>
 800ae96:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae98:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ae9a:	b18b      	cbz	r3, 800aec0 <xQueueSemaphoreTake+0x32>
 800ae9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	e7fe      	b.n	800aeac <xQueueSemaphoreTake+0x1e>
 800aeae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800aebe:	e7fe      	b.n	800aebe <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aec0:	f004 f9b6 	bl	800f230 <xTaskGetSchedulerState>
 800aec4:	4605      	mov	r5, r0
 800aec6:	b950      	cbnz	r0, 800aede <xQueueSemaphoreTake+0x50>
 800aec8:	9b01      	ldr	r3, [sp, #4]
 800aeca:	b15b      	cbz	r3, 800aee4 <xQueueSemaphoreTake+0x56>
 800aecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	e7fe      	b.n	800aedc <xQueueSemaphoreTake+0x4e>
 800aede:	2600      	movs	r6, #0
 800aee0:	4635      	mov	r5, r6
 800aee2:	e055      	b.n	800af90 <xQueueSemaphoreTake+0x102>
 800aee4:	4606      	mov	r6, r0
 800aee6:	e053      	b.n	800af90 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aee8:	3b01      	subs	r3, #1
 800aeea:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aeec:	6823      	ldr	r3, [r4, #0]
 800aeee:	b13b      	cbz	r3, 800af00 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aef0:	6923      	ldr	r3, [r4, #16]
 800aef2:	b94b      	cbnz	r3, 800af08 <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800aef4:	f7ff fb10 	bl	800a518 <vPortExitCritical>
				return pdPASS;
 800aef8:	2601      	movs	r6, #1
}
 800aefa:	4630      	mov	r0, r6
 800aefc:	b004      	add	sp, #16
 800aefe:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800af00:	f004 fa8a 	bl	800f418 <pvTaskIncrementMutexHeldCount>
 800af04:	60a0      	str	r0, [r4, #8]
 800af06:	e7f3      	b.n	800aef0 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af08:	f104 0010 	add.w	r0, r4, #16
 800af0c:	f004 f8ee 	bl	800f0ec <xTaskRemoveFromEventList>
 800af10:	2800      	cmp	r0, #0
 800af12:	d0ef      	beq.n	800aef4 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800af14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800af18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	e7e4      	b.n	800aef4 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800af2a:	b146      	cbz	r6, 800af3e <xQueueSemaphoreTake+0xb0>
 800af2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	e7fe      	b.n	800af3c <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800af3e:	f7ff faeb 	bl	800a518 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800af42:	e7da      	b.n	800aefa <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af44:	a802      	add	r0, sp, #8
 800af46:	f004 f917 	bl	800f178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af4a:	2501      	movs	r5, #1
 800af4c:	e02a      	b.n	800afa4 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800af4e:	2300      	movs	r3, #0
 800af50:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800af54:	e032      	b.n	800afbc <xQueueSemaphoreTake+0x12e>
 800af56:	2300      	movs	r3, #0
 800af58:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800af5c:	e034      	b.n	800afc8 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800af5e:	f7ff fab9 	bl	800a4d4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af62:	68a0      	ldr	r0, [r4, #8]
 800af64:	f004 f974 	bl	800f250 <xTaskPriorityInherit>
 800af68:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800af6a:	f7ff fad5 	bl	800a518 <vPortExitCritical>
 800af6e:	e03b      	b.n	800afe8 <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800af70:	4620      	mov	r0, r4
 800af72:	f7ff fc74 	bl	800a85e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af76:	f003 ff97 	bl	800eea8 <xTaskResumeAll>
 800af7a:	e009      	b.n	800af90 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7ff fc6e 	bl	800a85e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af82:	f003 ff91 	bl	800eea8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af86:	4620      	mov	r0, r4
 800af88:	f7ff fc0f 	bl	800a7aa <prvIsQueueEmpty>
 800af8c:	2800      	cmp	r0, #0
 800af8e:	d142      	bne.n	800b016 <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800af90:	f7ff faa0 	bl	800a4d4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800af94:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1a6      	bne.n	800aee8 <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800af9a:	9b01      	ldr	r3, [sp, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d0c4      	beq.n	800af2a <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800afa0:	2d00      	cmp	r5, #0
 800afa2:	d0cf      	beq.n	800af44 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800afa4:	f7ff fab8 	bl	800a518 <vPortExitCritical>
		vTaskSuspendAll();
 800afa8:	f003 fedc 	bl	800ed64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afac:	f7ff fa92 	bl	800a4d4 <vPortEnterCritical>
 800afb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800afb4:	b25b      	sxtb	r3, r3
 800afb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afba:	d0c8      	beq.n	800af4e <xQueueSemaphoreTake+0xc0>
 800afbc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800afc0:	b25b      	sxtb	r3, r3
 800afc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc6:	d0c6      	beq.n	800af56 <xQueueSemaphoreTake+0xc8>
 800afc8:	f7ff faa6 	bl	800a518 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afcc:	a901      	add	r1, sp, #4
 800afce:	a802      	add	r0, sp, #8
 800afd0:	f004 f8de 	bl	800f190 <xTaskCheckForTimeOut>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d1d1      	bne.n	800af7c <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afd8:	4620      	mov	r0, r4
 800afda:	f7ff fbe6 	bl	800a7aa <prvIsQueueEmpty>
 800afde:	2800      	cmp	r0, #0
 800afe0:	d0c6      	beq.n	800af70 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d0ba      	beq.n	800af5e <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afe8:	9901      	ldr	r1, [sp, #4]
 800afea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800afee:	f004 f849 	bl	800f084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aff2:	4620      	mov	r0, r4
 800aff4:	f7ff fc33 	bl	800a85e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aff8:	f003 ff56 	bl	800eea8 <xTaskResumeAll>
 800affc:	2800      	cmp	r0, #0
 800affe:	d1c7      	bne.n	800af90 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800b000:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b008:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	f3bf 8f6f 	isb	sy
 800b014:	e7bc      	b.n	800af90 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800b016:	b90e      	cbnz	r6, 800b01c <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800b018:	2600      	movs	r6, #0
 800b01a:	e76e      	b.n	800aefa <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800b01c:	f7ff fa5a 	bl	800a4d4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b020:	4620      	mov	r0, r4
 800b022:	f7ff fbab 	bl	800a77c <prvGetDisinheritPriorityAfterTimeout>
 800b026:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b028:	68a0      	ldr	r0, [r4, #8]
 800b02a:	f004 f9a5 	bl	800f378 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800b02e:	f7ff fa73 	bl	800a518 <vPortExitCritical>
 800b032:	e7f1      	b.n	800b018 <xQueueSemaphoreTake+0x18a>

0800b034 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800b034:	b180      	cbz	r0, 800b058 <xQueueTakeMutexRecursive+0x24>
	{
 800b036:	b570      	push	{r4, r5, r6, lr}
 800b038:	460c      	mov	r4, r1
 800b03a:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b03c:	6886      	ldr	r6, [r0, #8]
 800b03e:	f004 f8f1 	bl	800f224 <xTaskGetCurrentTaskHandle>
 800b042:	4286      	cmp	r6, r0
 800b044:	d011      	beq.n	800b06a <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b046:	4621      	mov	r1, r4
 800b048:	4628      	mov	r0, r5
 800b04a:	f7ff ff20 	bl	800ae8e <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800b04e:	b180      	cbz	r0, 800b072 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b050:	68eb      	ldr	r3, [r5, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60eb      	str	r3, [r5, #12]
		return xReturn;
 800b056:	e00c      	b.n	800b072 <xQueueTakeMutexRecursive+0x3e>
 800b058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800b068:	e7fe      	b.n	800b068 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b06a:	68eb      	ldr	r3, [r5, #12]
 800b06c:	3301      	adds	r3, #1
 800b06e:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 800b070:	2001      	movs	r0, #1
	}
 800b072:	bd70      	pop	{r4, r5, r6, pc}

0800b074 <xQueueReceiveFromISR>:
{
 800b074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800b078:	b1b0      	cbz	r0, 800b0a8 <xQueueReceiveFromISR+0x34>
 800b07a:	460d      	mov	r5, r1
 800b07c:	4690      	mov	r8, r2
 800b07e:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b080:	b1d9      	cbz	r1, 800b0ba <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b082:	f7ff fb4d 	bl	800a720 <vPortValidateInterruptPriority>
	__asm volatile
 800b086:	f3ef 8711 	mrs	r7, BASEPRI
 800b08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b09a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b09c:	b9ce      	cbnz	r6, 800b0d2 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800b09e:	2000      	movs	r0, #0
	__asm volatile
 800b0a0:	f387 8811 	msr	BASEPRI, r7
}
 800b0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800b0a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800b0b8:	e7fe      	b.n	800b0b8 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0ba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d0e0      	beq.n	800b082 <xQueueReceiveFromISR+0xe>
 800b0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	e7fe      	b.n	800b0d0 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0d2:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800b0d6:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0da:	4629      	mov	r1, r5
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f7ff fbac 	bl	800a83a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0e2:	1e73      	subs	r3, r6, #1
 800b0e4:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800b0e6:	f1b9 3fff 	cmp.w	r9, #4294967295
 800b0ea:	d006      	beq.n	800b0fa <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b0ec:	f109 0301 	add.w	r3, r9, #1
 800b0f0:	b25b      	sxtb	r3, r3
 800b0f2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	e7d2      	b.n	800b0a0 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	b90b      	cbnz	r3, 800b102 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800b0fe:	2001      	movs	r0, #1
 800b100:	e7ce      	b.n	800b0a0 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b102:	f104 0010 	add.w	r0, r4, #16
 800b106:	f003 fff1 	bl	800f0ec <xTaskRemoveFromEventList>
 800b10a:	b130      	cbz	r0, 800b11a <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800b10c:	f1b8 0f00 	cmp.w	r8, #0
 800b110:	d005      	beq.n	800b11e <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b112:	2001      	movs	r0, #1
 800b114:	f8c8 0000 	str.w	r0, [r8]
 800b118:	e7c2      	b.n	800b0a0 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800b11a:	2001      	movs	r0, #1
 800b11c:	e7c0      	b.n	800b0a0 <xQueueReceiveFromISR+0x2c>
 800b11e:	2001      	movs	r0, #1
 800b120:	e7be      	b.n	800b0a0 <xQueueReceiveFromISR+0x2c>
	...

0800b124 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b124:	2300      	movs	r3, #0
 800b126:	2b07      	cmp	r3, #7
 800b128:	d80c      	bhi.n	800b144 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b12a:	4a07      	ldr	r2, [pc, #28]	@ (800b148 <vQueueAddToRegistry+0x24>)
 800b12c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b130:	b10a      	cbz	r2, 800b136 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b132:	3301      	adds	r3, #1
 800b134:	e7f7      	b.n	800b126 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b136:	4a04      	ldr	r2, [pc, #16]	@ (800b148 <vQueueAddToRegistry+0x24>)
 800b138:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b13c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b140:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b142:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20003de0 	.word	0x20003de0

0800b14c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b14c:	b570      	push	{r4, r5, r6, lr}
 800b14e:	4604      	mov	r4, r0
 800b150:	460d      	mov	r5, r1
 800b152:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b154:	f7ff f9be 	bl	800a4d4 <vPortEnterCritical>
 800b158:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b15c:	b25b      	sxtb	r3, r3
 800b15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b162:	d00d      	beq.n	800b180 <vQueueWaitForMessageRestricted+0x34>
 800b164:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b168:	b25b      	sxtb	r3, r3
 800b16a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16e:	d00b      	beq.n	800b188 <vQueueWaitForMessageRestricted+0x3c>
 800b170:	f7ff f9d2 	bl	800a518 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b174:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b176:	b15b      	cbz	r3, 800b190 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b178:	4620      	mov	r0, r4
 800b17a:	f7ff fb70 	bl	800a85e <prvUnlockQueue>
	}
 800b17e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800b180:	2300      	movs	r3, #0
 800b182:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b186:	e7ed      	b.n	800b164 <vQueueWaitForMessageRestricted+0x18>
 800b188:	2300      	movs	r3, #0
 800b18a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b18e:	e7ef      	b.n	800b170 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b190:	4632      	mov	r2, r6
 800b192:	4629      	mov	r1, r5
 800b194:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800b198:	f003 ff8c 	bl	800f0b4 <vTaskPlaceOnEventListRestricted>
 800b19c:	e7ec      	b.n	800b178 <vQueueWaitForMessageRestricted+0x2c>

0800b19e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b19e:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b1a0:	2003      	movs	r0, #3
 800b1a2:	f001 f999 	bl	800c4d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800b1a6:	200f      	movs	r0, #15
 800b1a8:	f003 faf8 	bl	800e79c <HAL_InitTick>
 800b1ac:	b110      	cbz	r0, 800b1b4 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800b1ae:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	bd10      	pop	{r4, pc}
 800b1b4:	4604      	mov	r4, r0
    HAL_MspInit();
 800b1b6:	f002 f8b1 	bl	800d31c <HAL_MspInit>
 800b1ba:	e7f9      	b.n	800b1b0 <HAL_Init+0x12>

0800b1bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800b1bc:	4b03      	ldr	r3, [pc, #12]	@ (800b1cc <HAL_IncTick+0x10>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	4a03      	ldr	r2, [pc, #12]	@ (800b1d0 <HAL_IncTick+0x14>)
 800b1c2:	6811      	ldr	r1, [r2, #0]
 800b1c4:	440b      	add	r3, r1
 800b1c6:	6013      	str	r3, [r2, #0]
}
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	20000004 	.word	0x20000004
 800b1d0:	20003e20 	.word	0x20003e20

0800b1d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800b1d4:	4b01      	ldr	r3, [pc, #4]	@ (800b1dc <HAL_GetTick+0x8>)
 800b1d6:	6818      	ldr	r0, [r3, #0]
}
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	20003e20 	.word	0x20003e20

0800b1e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b1e0:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b1e2:	3030      	adds	r0, #48	@ 0x30
 800b1e4:	0a0b      	lsrs	r3, r1, #8
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b1ec:	58c4      	ldr	r4, [r0, r3]
 800b1ee:	f001 011f 	and.w	r1, r1, #31
 800b1f2:	f04f 0c1f 	mov.w	ip, #31
 800b1f6:	fa0c fc01 	lsl.w	ip, ip, r1
 800b1fa:	ea24 0c0c 	bic.w	ip, r4, ip
 800b1fe:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800b202:	408a      	lsls	r2, r1
 800b204:	ea4c 0202 	orr.w	r2, ip, r2
 800b208:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b210:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b212:	3014      	adds	r0, #20
 800b214:	0e4b      	lsrs	r3, r1, #25
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b21c:	58c4      	ldr	r4, [r0, r3]
 800b21e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800b222:	f04f 0c07 	mov.w	ip, #7
 800b226:	fa0c fc01 	lsl.w	ip, ip, r1
 800b22a:	ea24 0c0c 	bic.w	ip, r4, ip
 800b22e:	408a      	lsls	r2, r1
 800b230:	ea4c 0202 	orr.w	r2, ip, r2
 800b234:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b23c:	b530      	push	{r4, r5, lr}
 800b23e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b240:	2300      	movs	r3, #0
 800b242:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800b244:	2800      	cmp	r0, #0
 800b246:	f000 80d0 	beq.w	800b3ea <HAL_ADC_Init+0x1ae>
 800b24a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b24c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b24e:	b313      	cbz	r3, 800b296 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b250:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b252:	689a      	ldr	r2, [r3, #8]
 800b254:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 800b258:	d005      	beq.n	800b266 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 800b260:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800b264:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b266:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b268:	6893      	ldr	r3, [r2, #8]
 800b26a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800b26e:	d11f      	bne.n	800b2b0 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 800b270:	6893      	ldr	r3, [r2, #8]
 800b272:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b276:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b27a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b27e:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b280:	4b5b      	ldr	r3, [pc, #364]	@ (800b3f0 <HAL_ADC_Init+0x1b4>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	099b      	lsrs	r3, r3, #6
 800b286:	4a5b      	ldr	r2, [pc, #364]	@ (800b3f4 <HAL_ADC_Init+0x1b8>)
 800b288:	fba2 2303 	umull	r2, r3, r2, r3
 800b28c:	099b      	lsrs	r3, r3, #6
 800b28e:	3301      	adds	r3, #1
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800b294:	e009      	b.n	800b2aa <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800b296:	f002 f861 	bl	800d35c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800b29a:	2300      	movs	r3, #0
 800b29c:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800b29e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800b2a2:	e7d5      	b.n	800b250 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	3b01      	subs	r3, #1
 800b2a8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800b2aa:	9b01      	ldr	r3, [sp, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d1f9      	bne.n	800b2a4 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b2b0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b2b2:	6893      	ldr	r3, [r2, #8]
 800b2b4:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800b2b8:	d170      	bne.n	800b39c <HAL_ADC_Init+0x160>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b2bc:	f043 0310 	orr.w	r3, r3, #16
 800b2c0:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2c4:	f043 0301 	orr.w	r3, r3, #1
 800b2c8:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800b2ca:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b2cc:	6893      	ldr	r3, [r2, #8]
 800b2ce:	f013 0304 	ands.w	r3, r3, #4
 800b2d2:	d000      	beq.n	800b2d6 <HAL_ADC_Init+0x9a>
 800b2d4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b2d6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800b2d8:	f011 0f10 	tst.w	r1, #16
 800b2dc:	d17e      	bne.n	800b3dc <HAL_ADC_Init+0x1a0>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d17c      	bne.n	800b3dc <HAL_ADC_Init+0x1a0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b2e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b2e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b2e8:	f043 0302 	orr.w	r3, r3, #2
 800b2ec:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b2ee:	6893      	ldr	r3, [r2, #8]
 800b2f0:	f013 0f01 	tst.w	r3, #1
 800b2f4:	d10b      	bne.n	800b30e <HAL_ADC_Init+0xd2>
 800b2f6:	4b40      	ldr	r3, [pc, #256]	@ (800b3f8 <HAL_ADC_Init+0x1bc>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f013 0f01 	tst.w	r3, #1
 800b2fe:	d106      	bne.n	800b30e <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b300:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800b302:	493e      	ldr	r1, [pc, #248]	@ (800b3fc <HAL_ADC_Init+0x1c0>)
 800b304:	688a      	ldr	r2, [r1, #8]
 800b306:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 800b30a:	4313      	orrs	r3, r2
 800b30c:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b30e:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 800b310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b312:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 800b316:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 800b318:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 800b31a:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 800b31c:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b31e:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b326:	2a01      	cmp	r2, #1
 800b328:	d03a      	beq.n	800b3a0 <HAL_ADC_Init+0x164>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b32a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b32c:	b122      	cbz	r2, 800b338 <HAL_ADC_Init+0xfc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b32e:	f402 7270 	and.w	r2, r2, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800b332:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b334:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b336:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b338:	6821      	ldr	r1, [r4, #0]
 800b33a:	68cd      	ldr	r5, [r1, #12]
 800b33c:	4a30      	ldr	r2, [pc, #192]	@ (800b400 <HAL_ADC_Init+0x1c4>)
 800b33e:	402a      	ands	r2, r5
 800b340:	431a      	orrs	r2, r3
 800b342:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b344:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b346:	6893      	ldr	r3, [r2, #8]
 800b348:	f013 0308 	ands.w	r3, r3, #8
 800b34c:	d000      	beq.n	800b350 <HAL_ADC_Init+0x114>
 800b34e:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b350:	b9ab      	cbnz	r3, 800b37e <HAL_ADC_Init+0x142>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b352:	7e23      	ldrb	r3, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b354:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800b358:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b35a:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b35e:	68d3      	ldr	r3, [r2, #12]
 800b360:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b364:	f023 0302 	bic.w	r3, r3, #2
 800b368:	430b      	orrs	r3, r1
 800b36a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b36c:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800b370:	2b01      	cmp	r3, #1
 800b372:	d01a      	beq.n	800b3aa <HAL_ADC_Init+0x16e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b374:	6822      	ldr	r2, [r4, #0]
 800b376:	6913      	ldr	r3, [r2, #16]
 800b378:	f023 0301 	bic.w	r3, r3, #1
 800b37c:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b37e:	6923      	ldr	r3, [r4, #16]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d022      	beq.n	800b3ca <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b384:	6822      	ldr	r2, [r4, #0]
 800b386:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800b388:	f023 030f 	bic.w	r3, r3, #15
 800b38c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b38e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b390:	f023 0303 	bic.w	r3, r3, #3
 800b394:	f043 0301 	orr.w	r3, r3, #1
 800b398:	6563      	str	r3, [r4, #84]	@ 0x54
 800b39a:	e024      	b.n	800b3e6 <HAL_ADC_Init+0x1aa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b39c:	2000      	movs	r0, #0
 800b39e:	e795      	b.n	800b2cc <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b3a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800b3a2:	3a01      	subs	r2, #1
 800b3a4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800b3a8:	e7bf      	b.n	800b32a <HAL_ADC_Init+0xee>
        MODIFY_REG(hadc->Instance->CFGR2,
 800b3aa:	6821      	ldr	r1, [r4, #0]
 800b3ac:	690b      	ldr	r3, [r1, #16]
 800b3ae:	f36f 038a 	bfc	r3, #2, #9
 800b3b2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b3b4:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800b3b6:	432a      	orrs	r2, r5
 800b3b8:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 800b3ba:	432a      	orrs	r2, r5
 800b3bc:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800b3be:	432a      	orrs	r2, r5
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	f043 0301 	orr.w	r3, r3, #1
 800b3c6:	610b      	str	r3, [r1, #16]
 800b3c8:	e7d9      	b.n	800b37e <HAL_ADC_Init+0x142>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b3ca:	6821      	ldr	r1, [r4, #0]
 800b3cc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800b3ce:	f023 030f 	bic.w	r3, r3, #15
 800b3d2:	69e2      	ldr	r2, [r4, #28]
 800b3d4:	3a01      	subs	r2, #1
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	630b      	str	r3, [r1, #48]	@ 0x30
 800b3da:	e7d8      	b.n	800b38e <HAL_ADC_Init+0x152>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b3dc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b3de:	f043 0310 	orr.w	r3, r3, #16
 800b3e2:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b3e4:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 800b3e6:	b003      	add	sp, #12
 800b3e8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800b3ea:	2001      	movs	r0, #1
 800b3ec:	e7fb      	b.n	800b3e6 <HAL_ADC_Init+0x1aa>
 800b3ee:	bf00      	nop
 800b3f0:	2000002c 	.word	0x2000002c
 800b3f4:	053e2d63 	.word	0x053e2d63
 800b3f8:	50040000 	.word	0x50040000
 800b3fc:	50040300 	.word	0x50040300
 800b400:	fff0c007 	.word	0xfff0c007

0800b404 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	4604      	mov	r4, r0
 800b408:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b40a:	6945      	ldr	r5, [r0, #20]
 800b40c:	2d08      	cmp	r5, #8
 800b40e:	d005      	beq.n	800b41c <HAL_ADC_PollForConversion+0x18>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b410:	6803      	ldr	r3, [r0, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f013 0f01 	tst.w	r3, #1
 800b418:	d11e      	bne.n	800b458 <HAL_ADC_PollForConversion+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800b41a:	2504      	movs	r5, #4
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800b41c:	f7ff feda 	bl	800b1d4 <HAL_GetTick>
 800b420:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	422a      	tst	r2, r5
 800b428:	d11c      	bne.n	800b464 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800b42a:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b42e:	d0f8      	beq.n	800b422 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800b430:	f7ff fed0 	bl	800b1d4 <HAL_GetTick>
 800b434:	1bc3      	subs	r3, r0, r7
 800b436:	42b3      	cmp	r3, r6
 800b438:	d801      	bhi.n	800b43e <HAL_ADC_PollForConversion+0x3a>
 800b43a:	2e00      	cmp	r6, #0
 800b43c:	d1f1      	bne.n	800b422 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	422b      	tst	r3, r5
 800b444:	d1ed      	bne.n	800b422 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b446:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b448:	f043 0304 	orr.w	r3, r3, #4
 800b44c:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b44e:	2300      	movs	r3, #0
 800b450:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

          return HAL_TIMEOUT;
 800b454:	2003      	movs	r0, #3
 800b456:	e004      	b.n	800b462 <HAL_ADC_PollForConversion+0x5e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b458:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800b45a:	f043 0320 	orr.w	r3, r3, #32
 800b45e:	6543      	str	r3, [r0, #84]	@ 0x54
      return HAL_ERROR;
 800b460:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800b462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b46a:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b46c:	68da      	ldr	r2, [r3, #12]
 800b46e:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800b472:	d111      	bne.n	800b498 <HAL_ADC_PollForConversion+0x94>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800b474:	7e62      	ldrb	r2, [r4, #25]
 800b476:	b97a      	cbnz	r2, 800b498 <HAL_ADC_PollForConversion+0x94>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	f012 0f08 	tst.w	r2, #8
 800b47e:	d00b      	beq.n	800b498 <HAL_ADC_PollForConversion+0x94>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b480:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b482:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b486:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b488:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b48a:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800b48e:	d103      	bne.n	800b498 <HAL_ADC_PollForConversion+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b490:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b492:	f042 0201 	orr.w	r2, r2, #1
 800b496:	6562      	str	r2, [r4, #84]	@ 0x54
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800b498:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800b49a:	2d08      	cmp	r5, #8
 800b49c:	d006      	beq.n	800b4ac <HAL_ADC_PollForConversion+0xa8>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800b49e:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800b4a2:	d107      	bne.n	800b4b4 <HAL_ADC_PollForConversion+0xb0>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b4a4:	220c      	movs	r2, #12
 800b4a6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	e7da      	b.n	800b462 <HAL_ADC_PollForConversion+0x5e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800b4ac:	2208      	movs	r2, #8
 800b4ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	e7d6      	b.n	800b462 <HAL_ADC_PollForConversion+0x5e>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	e7d4      	b.n	800b462 <HAL_ADC_PollForConversion+0x5e>

0800b4b8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800b4b8:	6803      	ldr	r3, [r0, #0]
 800b4ba:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800b4bc:	4770      	bx	lr
	...

0800b4c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4c2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b4c8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	f000 8203 	beq.w	800b8d8 <HAL_ADC_ConfigChannel+0x418>
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	460d      	mov	r5, r1
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b4dc:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b4de:	6883      	ldr	r3, [r0, #8]
 800b4e0:	f013 0f04 	tst.w	r3, #4
 800b4e4:	d009      	beq.n	800b4fa <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b4e6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b4e8:	f043 0320 	orr.w	r3, r3, #32
 800b4ec:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800b4ee:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800b4f6:	b003      	add	sp, #12
 800b4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t config_rank = pConfig->Rank;
 800b4fa:	6849      	ldr	r1, [r1, #4]
    if (pConfig->Rank <= 5U)
 800b4fc:	2905      	cmp	r1, #5
 800b4fe:	d807      	bhi.n	800b510 <HAL_ADC_ConfigChannel+0x50>
      switch (pConfig->Rank)
 800b500:	3902      	subs	r1, #2
 800b502:	2903      	cmp	r1, #3
 800b504:	d84e      	bhi.n	800b5a4 <HAL_ADC_ConfigChannel+0xe4>
 800b506:	e8df f001 	tbb	[pc, r1]
 800b50a:	4f02      	.short	0x4f02
 800b50c:	4a48      	.short	0x4a48
 800b50e:	210c      	movs	r1, #12
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800b510:	682a      	ldr	r2, [r5, #0]
 800b512:	f7ff fe65 	bl	800b1e0 <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b516:	6820      	ldr	r0, [r4, #0]
 800b518:	6883      	ldr	r3, [r0, #8]
 800b51a:	f013 0304 	ands.w	r3, r3, #4
 800b51e:	d000      	beq.n	800b522 <HAL_ADC_ConfigChannel+0x62>
 800b520:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b522:	6882      	ldr	r2, [r0, #8]
 800b524:	f012 0208 	ands.w	r2, r2, #8
 800b528:	d000      	beq.n	800b52c <HAL_ADC_ConfigChannel+0x6c>
 800b52a:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b52c:	b90b      	cbnz	r3, 800b532 <HAL_ADC_ConfigChannel+0x72>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b52e:	2a00      	cmp	r2, #0
 800b530:	d03c      	beq.n	800b5ac <HAL_ADC_ConfigChannel+0xec>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b532:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b534:	6893      	ldr	r3, [r2, #8]
 800b536:	f013 0f01 	tst.w	r3, #1
 800b53a:	d117      	bne.n	800b56c <HAL_ADC_ConfigChannel+0xac>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800b540:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 800b544:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800b548:	ea21 0106 	bic.w	r1, r1, r6
 800b54c:	f000 0c18 	and.w	ip, r0, #24
 800b550:	48a8      	ldr	r0, [pc, #672]	@ (800b7f4 <HAL_ADC_ConfigChannel+0x334>)
 800b552:	fa20 f00c 	lsr.w	r0, r0, ip
 800b556:	4003      	ands	r3, r0
 800b558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b55c:	430b      	orrs	r3, r1
 800b55e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b562:	68ea      	ldr	r2, [r5, #12]
 800b564:	4ba4      	ldr	r3, [pc, #656]	@ (800b7f8 <HAL_ADC_ConfigChannel+0x338>)
 800b566:	429a      	cmp	r2, r3
 800b568:	f000 80a5 	beq.w	800b6b6 <HAL_ADC_ConfigChannel+0x1f6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	4aa3      	ldr	r2, [pc, #652]	@ (800b7fc <HAL_ADC_ConfigChannel+0x33c>)
 800b570:	4213      	tst	r3, r2
 800b572:	f000 81ad 	beq.w	800b8d0 <HAL_ADC_ConfigChannel+0x410>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800b576:	4aa2      	ldr	r2, [pc, #648]	@ (800b800 <HAL_ADC_ConfigChannel+0x340>)
 800b578:	6892      	ldr	r2, [r2, #8]
 800b57a:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b57e:	49a1      	ldr	r1, [pc, #644]	@ (800b804 <HAL_ADC_ConfigChannel+0x344>)
 800b580:	428b      	cmp	r3, r1
 800b582:	f000 8158 	beq.w	800b836 <HAL_ADC_ConfigChannel+0x376>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b586:	49a0      	ldr	r1, [pc, #640]	@ (800b808 <HAL_ADC_ConfigChannel+0x348>)
 800b588:	428b      	cmp	r3, r1
 800b58a:	f000 817a 	beq.w	800b882 <HAL_ADC_ConfigChannel+0x3c2>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b58e:	499f      	ldr	r1, [pc, #636]	@ (800b80c <HAL_ADC_ConfigChannel+0x34c>)
 800b590:	428b      	cmp	r3, r1
 800b592:	f000 818a 	beq.w	800b8aa <HAL_ADC_ConfigChannel+0x3ea>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b596:	2000      	movs	r0, #0
 800b598:	e7aa      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
          config_rank = ADC_REGULAR_RANK_4;
 800b59a:	2118      	movs	r1, #24
          break;
 800b59c:	e7b8      	b.n	800b510 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_5;
 800b59e:	f44f 7180 	mov.w	r1, #256	@ 0x100
          break;
 800b5a2:	e7b5      	b.n	800b510 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_1;
 800b5a4:	2106      	movs	r1, #6
          break;
 800b5a6:	e7b3      	b.n	800b510 <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_3;
 800b5a8:	2112      	movs	r1, #18
 800b5aa:	e7b1      	b.n	800b510 <HAL_ADC_ConfigChannel+0x50>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b5ac:	68aa      	ldr	r2, [r5, #8]
 800b5ae:	6829      	ldr	r1, [r5, #0]
 800b5b0:	f7ff fe2e 	bl	800b210 <LL_ADC_SetChannelSamplingTime>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b5b4:	6969      	ldr	r1, [r5, #20]
 800b5b6:	6822      	ldr	r2, [r4, #0]
 800b5b8:	68d3      	ldr	r3, [r2, #12]
 800b5ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b5c2:	6928      	ldr	r0, [r5, #16]
 800b5c4:	2804      	cmp	r0, #4
 800b5c6:	d00e      	beq.n	800b5e6 <HAL_ADC_ConfigChannel+0x126>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b5c8:	682e      	ldr	r6, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b5ca:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 800b5cc:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 800b5d0:	4b8f      	ldr	r3, [pc, #572]	@ (800b810 <HAL_ADC_ConfigChannel+0x350>)
 800b5d2:	403b      	ands	r3, r7
 800b5d4:	f006 46f8 	and.w	r6, r6, #2080374784	@ 0x7c000000
 800b5d8:	4331      	orrs	r1, r6
 800b5da:	430b      	orrs	r3, r1
 800b5dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b5e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800b5e4:	e7a5      	b.n	800b532 <HAL_ADC_ConfigChannel+0x72>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b5e6:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800b5e8:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b5ea:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b5ee:	682b      	ldr	r3, [r5, #0]
 800b5f0:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800b5f4:	bb80      	cbnz	r0, 800b658 <HAL_ADC_ConfigChannel+0x198>
 800b5f6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b5fa:	4299      	cmp	r1, r3
 800b5fc:	d034      	beq.n	800b668 <HAL_ADC_ConfigChannel+0x1a8>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b5fe:	6821      	ldr	r1, [r4, #0]
 800b600:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800b602:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 800b604:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b608:	682b      	ldr	r3, [r5, #0]
 800b60a:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800b60e:	bb80      	cbnz	r0, 800b672 <HAL_ADC_ConfigChannel+0x1b2>
 800b610:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b614:	429a      	cmp	r2, r3
 800b616:	d034      	beq.n	800b682 <HAL_ADC_ConfigChannel+0x1c2>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b618:	6821      	ldr	r1, [r4, #0]
 800b61a:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 800b61c:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 800b61e:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b622:	682b      	ldr	r3, [r5, #0]
 800b624:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800b628:	bb80      	cbnz	r0, 800b68c <HAL_ADC_ConfigChannel+0x1cc>
 800b62a:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b62e:	429a      	cmp	r2, r3
 800b630:	d034      	beq.n	800b69c <HAL_ADC_ConfigChannel+0x1dc>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b632:	6821      	ldr	r1, [r4, #0]
 800b634:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800b636:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 800b638:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800b642:	bb80      	cbnz	r0, 800b6a6 <HAL_ADC_ConfigChannel+0x1e6>
 800b644:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b648:	429a      	cmp	r2, r3
 800b64a:	f47f af72 	bne.w	800b532 <HAL_ADC_ConfigChannel+0x72>
  MODIFY_REG(*preg,
 800b64e:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800b650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b654:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 800b656:	e76c      	b.n	800b532 <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b658:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b65c:	b113      	cbz	r3, 800b664 <HAL_ADC_ConfigChannel+0x1a4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800b65e:	fab3 f383 	clz	r3, r3
 800b662:	e7ca      	b.n	800b5fa <HAL_ADC_ConfigChannel+0x13a>
    return 32U;
 800b664:	2320      	movs	r3, #32
 800b666:	e7c8      	b.n	800b5fa <HAL_ADC_ConfigChannel+0x13a>
  MODIFY_REG(*preg,
 800b668:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800b66a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b66e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800b670:	e7c5      	b.n	800b5fe <HAL_ADC_ConfigChannel+0x13e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b672:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800b676:	b113      	cbz	r3, 800b67e <HAL_ADC_ConfigChannel+0x1be>
  return __builtin_clz(value);
 800b678:	fab3 f383 	clz	r3, r3
 800b67c:	e7ca      	b.n	800b614 <HAL_ADC_ConfigChannel+0x154>
    return 32U;
 800b67e:	2320      	movs	r3, #32
 800b680:	e7c8      	b.n	800b614 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(*preg,
 800b682:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800b684:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b688:	664b      	str	r3, [r1, #100]	@ 0x64
}
 800b68a:	e7c5      	b.n	800b618 <HAL_ADC_ConfigChannel+0x158>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b68c:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800b690:	b113      	cbz	r3, 800b698 <HAL_ADC_ConfigChannel+0x1d8>
  return __builtin_clz(value);
 800b692:	fab3 f383 	clz	r3, r3
 800b696:	e7ca      	b.n	800b62e <HAL_ADC_ConfigChannel+0x16e>
    return 32U;
 800b698:	2320      	movs	r3, #32
 800b69a:	e7c8      	b.n	800b62e <HAL_ADC_ConfigChannel+0x16e>
  MODIFY_REG(*preg,
 800b69c:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 800b69e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6a2:	668b      	str	r3, [r1, #104]	@ 0x68
}
 800b6a4:	e7c5      	b.n	800b632 <HAL_ADC_ConfigChannel+0x172>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6a6:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800b6aa:	b113      	cbz	r3, 800b6b2 <HAL_ADC_ConfigChannel+0x1f2>
  return __builtin_clz(value);
 800b6ac:	fab3 f383 	clz	r3, r3
 800b6b0:	e7ca      	b.n	800b648 <HAL_ADC_ConfigChannel+0x188>
    return 32U;
 800b6b2:	2320      	movs	r3, #32
 800b6b4:	e7c8      	b.n	800b648 <HAL_ADC_ConfigChannel+0x188>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b6b6:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800b6be:	bb3e      	cbnz	r6, 800b710 <HAL_ADC_ConfigChannel+0x250>
 800b6c0:	0e9a      	lsrs	r2, r3, #26
 800b6c2:	3201      	adds	r2, #1
 800b6c4:	f002 021f 	and.w	r2, r2, #31
 800b6c8:	2a09      	cmp	r2, #9
 800b6ca:	bf8c      	ite	hi
 800b6cc:	2200      	movhi	r2, #0
 800b6ce:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b6d0:	2a00      	cmp	r2, #0
 800b6d2:	d055      	beq.n	800b780 <HAL_ADC_ConfigChannel+0x2c0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b6d4:	bb5e      	cbnz	r6, 800b72e <HAL_ADC_ConfigChannel+0x26e>
 800b6d6:	0e99      	lsrs	r1, r3, #26
 800b6d8:	3101      	adds	r1, #1
 800b6da:	0689      	lsls	r1, r1, #26
 800b6dc:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800b6e0:	bb8e      	cbnz	r6, 800b746 <HAL_ADC_ConfigChannel+0x286>
 800b6e2:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800b6e6:	f10c 0c01 	add.w	ip, ip, #1
 800b6ea:	f00c 0c1f 	and.w	ip, ip, #31
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	fa02 f20c 	lsl.w	r2, r2, ip
 800b6f4:	4311      	orrs	r1, r2
 800b6f6:	bbae      	cbnz	r6, 800b764 <HAL_ADC_ConfigChannel+0x2a4>
 800b6f8:	0e9b      	lsrs	r3, r3, #26
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	f003 031f 	and.w	r3, r3, #31
 800b700:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b704:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b706:	4319      	orrs	r1, r3
 800b708:	68aa      	ldr	r2, [r5, #8]
 800b70a:	f7ff fd81 	bl	800b210 <LL_ADC_SetChannelSamplingTime>
 800b70e:	e72d      	b.n	800b56c <HAL_ADC_ConfigChannel+0xac>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b710:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800b714:	b14a      	cbz	r2, 800b72a <HAL_ADC_ConfigChannel+0x26a>
  return __builtin_clz(value);
 800b716:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b71a:	3201      	adds	r2, #1
 800b71c:	f002 021f 	and.w	r2, r2, #31
 800b720:	2a09      	cmp	r2, #9
 800b722:	bf8c      	ite	hi
 800b724:	2200      	movhi	r2, #0
 800b726:	2201      	movls	r2, #1
 800b728:	e7d2      	b.n	800b6d0 <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 800b72a:	2220      	movs	r2, #32
 800b72c:	e7f5      	b.n	800b71a <HAL_ADC_ConfigChannel+0x25a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b72e:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800b732:	b131      	cbz	r1, 800b742 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 800b734:	fab1 f181 	clz	r1, r1
 800b738:	3101      	adds	r1, #1
 800b73a:	0689      	lsls	r1, r1, #26
 800b73c:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800b740:	e7ce      	b.n	800b6e0 <HAL_ADC_ConfigChannel+0x220>
    return 32U;
 800b742:	2120      	movs	r1, #32
 800b744:	e7f8      	b.n	800b738 <HAL_ADC_ConfigChannel+0x278>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b746:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800b74a:	b14a      	cbz	r2, 800b760 <HAL_ADC_ConfigChannel+0x2a0>
  return __builtin_clz(value);
 800b74c:	fab2 f282 	clz	r2, r2
 800b750:	3201      	adds	r2, #1
 800b752:	f002 021f 	and.w	r2, r2, #31
 800b756:	f04f 0c01 	mov.w	ip, #1
 800b75a:	fa0c f202 	lsl.w	r2, ip, r2
 800b75e:	e7c9      	b.n	800b6f4 <HAL_ADC_ConfigChannel+0x234>
    return 32U;
 800b760:	2220      	movs	r2, #32
 800b762:	e7f5      	b.n	800b750 <HAL_ADC_ConfigChannel+0x290>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b764:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800b768:	b143      	cbz	r3, 800b77c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800b76a:	fab3 f383 	clz	r3, r3
 800b76e:	3301      	adds	r3, #1
 800b770:	f003 031f 	and.w	r3, r3, #31
 800b774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b778:	051b      	lsls	r3, r3, #20
 800b77a:	e7c4      	b.n	800b706 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800b77c:	2320      	movs	r3, #32
 800b77e:	e7f6      	b.n	800b76e <HAL_ADC_ConfigChannel+0x2ae>
 800b780:	b9e6      	cbnz	r6, 800b7bc <HAL_ADC_ConfigChannel+0x2fc>
 800b782:	0e99      	lsrs	r1, r3, #26
 800b784:	3101      	adds	r1, #1
 800b786:	0689      	lsls	r1, r1, #26
 800b788:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800b78c:	bb16      	cbnz	r6, 800b7d4 <HAL_ADC_ConfigChannel+0x314>
 800b78e:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800b792:	f10c 0c01 	add.w	ip, ip, #1
 800b796:	f00c 0c1f 	and.w	ip, ip, #31
 800b79a:	2201      	movs	r2, #1
 800b79c:	fa02 f20c 	lsl.w	r2, r2, ip
 800b7a0:	4311      	orrs	r1, r2
 800b7a2:	bbbe      	cbnz	r6, 800b814 <HAL_ADC_ConfigChannel+0x354>
 800b7a4:	0e9b      	lsrs	r3, r3, #26
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	f003 031f 	and.w	r3, r3, #31
 800b7ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b7b0:	3b1e      	subs	r3, #30
 800b7b2:	051b      	lsls	r3, r3, #20
 800b7b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b7b8:	4319      	orrs	r1, r3
 800b7ba:	e7a5      	b.n	800b708 <HAL_ADC_ConfigChannel+0x248>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7bc:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800b7c0:	b131      	cbz	r1, 800b7d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800b7c2:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b7c6:	3101      	adds	r1, #1
 800b7c8:	0689      	lsls	r1, r1, #26
 800b7ca:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800b7ce:	e7dd      	b.n	800b78c <HAL_ADC_ConfigChannel+0x2cc>
    return 32U;
 800b7d0:	2120      	movs	r1, #32
 800b7d2:	e7f8      	b.n	800b7c6 <HAL_ADC_ConfigChannel+0x306>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7d4:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800b7d8:	b14a      	cbz	r2, 800b7ee <HAL_ADC_ConfigChannel+0x32e>
  return __builtin_clz(value);
 800b7da:	fab2 f282 	clz	r2, r2
 800b7de:	3201      	adds	r2, #1
 800b7e0:	f002 021f 	and.w	r2, r2, #31
 800b7e4:	f04f 0c01 	mov.w	ip, #1
 800b7e8:	fa0c f202 	lsl.w	r2, ip, r2
 800b7ec:	e7d8      	b.n	800b7a0 <HAL_ADC_ConfigChannel+0x2e0>
    return 32U;
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	e7f5      	b.n	800b7de <HAL_ADC_ConfigChannel+0x31e>
 800b7f2:	bf00      	nop
 800b7f4:	0007ffff 	.word	0x0007ffff
 800b7f8:	407f0000 	.word	0x407f0000
 800b7fc:	80080000 	.word	0x80080000
 800b800:	50040300 	.word	0x50040300
 800b804:	c7520000 	.word	0xc7520000
 800b808:	cb840000 	.word	0xcb840000
 800b80c:	80000001 	.word	0x80000001
 800b810:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b814:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800b818:	b15b      	cbz	r3, 800b832 <HAL_ADC_ConfigChannel+0x372>
  return __builtin_clz(value);
 800b81a:	fab3 f383 	clz	r3, r3
 800b81e:	3301      	adds	r3, #1
 800b820:	f003 031f 	and.w	r3, r3, #31
 800b824:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b828:	3b1e      	subs	r3, #30
 800b82a:	051b      	lsls	r3, r3, #20
 800b82c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b830:	e7c2      	b.n	800b7b8 <HAL_ADC_ConfigChannel+0x2f8>
    return 32U;
 800b832:	2320      	movs	r3, #32
 800b834:	e7f3      	b.n	800b81e <HAL_ADC_ConfigChannel+0x35e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b836:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 800b83a:	f47f aea4 	bne.w	800b586 <HAL_ADC_ConfigChannel+0xc6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b83e:	6822      	ldr	r2, [r4, #0]
 800b840:	4b26      	ldr	r3, [pc, #152]	@ (800b8dc <HAL_ADC_ConfigChannel+0x41c>)
 800b842:	429a      	cmp	r2, r3
 800b844:	d001      	beq.n	800b84a <HAL_ADC_ConfigChannel+0x38a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b846:	2000      	movs	r0, #0
 800b848:	e652      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b84a:	f440 0300 	orr.w	r3, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b84e:	4924      	ldr	r1, [pc, #144]	@ (800b8e0 <HAL_ADC_ConfigChannel+0x420>)
 800b850:	688a      	ldr	r2, [r1, #8]
 800b852:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800b856:	4313      	orrs	r3, r2
 800b858:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b85a:	4b22      	ldr	r3, [pc, #136]	@ (800b8e4 <HAL_ADC_ConfigChannel+0x424>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	099b      	lsrs	r3, r3, #6
 800b860:	4a21      	ldr	r2, [pc, #132]	@ (800b8e8 <HAL_ADC_ConfigChannel+0x428>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	099b      	lsrs	r3, r3, #6
 800b868:	3301      	adds	r3, #1
 800b86a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800b872:	9b01      	ldr	r3, [sp, #4]
 800b874:	b11b      	cbz	r3, 800b87e <HAL_ADC_ConfigChannel+0x3be>
            wait_loop_index--;
 800b876:	9b01      	ldr	r3, [sp, #4]
 800b878:	3b01      	subs	r3, #1
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	e7f9      	b.n	800b872 <HAL_ADC_ConfigChannel+0x3b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b87e:	2000      	movs	r0, #0
 800b880:	e636      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b882:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 800b886:	f47f ae82 	bne.w	800b58e <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b88a:	6822      	ldr	r2, [r4, #0]
 800b88c:	4b13      	ldr	r3, [pc, #76]	@ (800b8dc <HAL_ADC_ConfigChannel+0x41c>)
 800b88e:	429a      	cmp	r2, r3
 800b890:	d001      	beq.n	800b896 <HAL_ADC_ConfigChannel+0x3d6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b892:	2000      	movs	r0, #0
 800b894:	e62c      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b896:	f040 7380 	orr.w	r3, r0, #16777216	@ 0x1000000
 800b89a:	4911      	ldr	r1, [pc, #68]	@ (800b8e0 <HAL_ADC_ConfigChannel+0x420>)
 800b89c:	688a      	ldr	r2, [r1, #8]
 800b89e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b8a6:	2000      	movs	r0, #0
}
 800b8a8:	e622      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b8aa:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800b8ae:	d111      	bne.n	800b8d4 <HAL_ADC_ConfigChannel+0x414>
        if (ADC_VREFINT_INSTANCE(hadc))
 800b8b0:	6822      	ldr	r2, [r4, #0]
 800b8b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b8dc <HAL_ADC_ConfigChannel+0x41c>)
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d001      	beq.n	800b8bc <HAL_ADC_ConfigChannel+0x3fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	e619      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b8bc:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800b8c0:	4907      	ldr	r1, [pc, #28]	@ (800b8e0 <HAL_ADC_ConfigChannel+0x420>)
 800b8c2:	688a      	ldr	r2, [r1, #8]
 800b8c4:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b8cc:	2000      	movs	r0, #0
}
 800b8ce:	e60f      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
 800b8d0:	2000      	movs	r0, #0
 800b8d2:	e60d      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	e60b      	b.n	800b4f0 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800b8d8:	2002      	movs	r0, #2
 800b8da:	e60c      	b.n	800b4f6 <HAL_ADC_ConfigChannel+0x36>
 800b8dc:	50040000 	.word	0x50040000
 800b8e0:	50040300 	.word	0x50040300
 800b8e4:	2000002c 	.word	0x2000002c
 800b8e8:	053e2d63 	.word	0x053e2d63

0800b8ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b8f0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b8f2:	689a      	ldr	r2, [r3, #8]
 800b8f4:	f012 0204 	ands.w	r2, r2, #4
 800b8f8:	d000      	beq.n	800b8fc <ADC_ConversionStop+0x10>
 800b8fa:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b8fc:	6898      	ldr	r0, [r3, #8]
 800b8fe:	f010 0008 	ands.w	r0, r0, #8
 800b902:	d000      	beq.n	800b906 <ADC_ConversionStop+0x1a>
 800b904:	2001      	movs	r0, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800b906:	b90a      	cbnz	r2, 800b90c <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800b908:	2800      	cmp	r0, #0
 800b90a:	d06d      	beq.n	800b9e8 <ADC_ConversionStop+0xfc>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800b90c:	68da      	ldr	r2, [r3, #12]
 800b90e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800b912:	d004      	beq.n	800b91e <ADC_ConversionStop+0x32>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800b914:	8b20      	ldrh	r0, [r4, #24]
 800b916:	f240 1201 	movw	r2, #257	@ 0x101
 800b91a:	4290      	cmp	r0, r2
 800b91c:	d04e      	beq.n	800b9bc <ADC_ConversionStop+0xd0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800b91e:	2902      	cmp	r1, #2
 800b920:	d012      	beq.n	800b948 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b922:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b924:	689a      	ldr	r2, [r3, #8]
 800b926:	f012 0f04 	tst.w	r2, #4
 800b92a:	d00b      	beq.n	800b944 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b92c:	689a      	ldr	r2, [r3, #8]
 800b92e:	f012 0f02 	tst.w	r2, #2
 800b932:	d107      	bne.n	800b944 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 800b934:	689a      	ldr	r2, [r3, #8]
 800b936:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b93a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800b93e:	f042 0210 	orr.w	r2, r2, #16
 800b942:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800b944:	2901      	cmp	r1, #1
 800b946:	d047      	beq.n	800b9d8 <ADC_ConversionStop+0xec>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800b948:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b94a:	689a      	ldr	r2, [r3, #8]
 800b94c:	f012 0f08 	tst.w	r2, #8
 800b950:	d00b      	beq.n	800b96a <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b952:	689a      	ldr	r2, [r3, #8]
 800b954:	f012 0f02 	tst.w	r2, #2
 800b958:	d107      	bne.n	800b96a <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800b95a:	689a      	ldr	r2, [r3, #8]
 800b95c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b960:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800b964:	f042 0220 	orr.w	r2, r2, #32
 800b968:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800b96a:	2902      	cmp	r1, #2
 800b96c:	d036      	beq.n	800b9dc <ADC_ConversionStop+0xf0>
 800b96e:	2903      	cmp	r1, #3
 800b970:	d136      	bne.n	800b9e0 <ADC_ConversionStop+0xf4>
 800b972:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800b974:	f7ff fc2e 	bl	800b1d4 <HAL_GetTick>
 800b978:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	422b      	tst	r3, r5
 800b980:	d030      	beq.n	800b9e4 <ADC_ConversionStop+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b982:	f7ff fc27 	bl	800b1d4 <HAL_GetTick>
 800b986:	1b80      	subs	r0, r0, r6
 800b988:	2805      	cmp	r0, #5
 800b98a:	d9f6      	bls.n	800b97a <ADC_ConversionStop+0x8e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	689b      	ldr	r3, [r3, #8]
 800b990:	422b      	tst	r3, r5
 800b992:	d0f2      	beq.n	800b97a <ADC_ConversionStop+0x8e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b994:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b996:	f043 0310 	orr.w	r3, r3, #16
 800b99a:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b99c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b99e:	f043 0301 	orr.w	r3, r3, #1
 800b9a2:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800b9a4:	2001      	movs	r0, #1
 800b9a6:	e01e      	b.n	800b9e6 <ADC_ConversionStop+0xfa>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b9a8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b9aa:	f043 0310 	orr.w	r3, r3, #16
 800b9ae:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b9b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b9b2:	f043 0301 	orr.w	r3, r3, #1
 800b9b6:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	e014      	b.n	800b9e6 <ADC_ConversionStop+0xfa>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800b9bc:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b9be:	6819      	ldr	r1, [r3, #0]
 800b9c0:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800b9c4:	d104      	bne.n	800b9d0 <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800b9c6:	4909      	ldr	r1, [pc, #36]	@ (800b9ec <ADC_ConversionStop+0x100>)
 800b9c8:	428a      	cmp	r2, r1
 800b9ca:	d8ed      	bhi.n	800b9a8 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 800b9cc:	3201      	adds	r2, #1
 800b9ce:	e7f6      	b.n	800b9be <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800b9d0:	2240      	movs	r2, #64	@ 0x40
 800b9d2:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	e7a4      	b.n	800b922 <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b9d8:	2504      	movs	r5, #4
 800b9da:	e7cb      	b.n	800b974 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800b9dc:	2508      	movs	r5, #8
 800b9de:	e7c9      	b.n	800b974 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b9e0:	2504      	movs	r5, #4
 800b9e2:	e7c7      	b.n	800b974 <ADC_ConversionStop+0x88>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800b9e4:	2000      	movs	r0, #0
}
 800b9e6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	e7fc      	b.n	800b9e6 <ADC_ConversionStop+0xfa>
 800b9ec:	a33fffff 	.word	0xa33fffff

0800b9f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b9f0:	b530      	push	{r4, r5, lr}
 800b9f2:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b9f8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b9fa:	689a      	ldr	r2, [r3, #8]
 800b9fc:	f012 0f01 	tst.w	r2, #1
 800ba00:	d158      	bne.n	800bab4 <ADC_Enable+0xc4>
 800ba02:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ba04:	6899      	ldr	r1, [r3, #8]
 800ba06:	4a2d      	ldr	r2, [pc, #180]	@ (800babc <ADC_Enable+0xcc>)
 800ba08:	4211      	tst	r1, r2
 800ba0a:	d119      	bne.n	800ba40 <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 800ba0c:	689a      	ldr	r2, [r3, #8]
 800ba0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ba12:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800ba16:	f042 0201 	orr.w	r2, r2, #1
 800ba1a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ba1c:	4b28      	ldr	r3, [pc, #160]	@ (800bac0 <ADC_Enable+0xd0>)
 800ba1e:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800ba20:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800ba24:	d01c      	beq.n	800ba60 <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ba26:	4b27      	ldr	r3, [pc, #156]	@ (800bac4 <ADC_Enable+0xd4>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	099b      	lsrs	r3, r3, #6
 800ba2c:	4a26      	ldr	r2, [pc, #152]	@ (800bac8 <ADC_Enable+0xd8>)
 800ba2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ba32:	099b      	lsrs	r3, r3, #6
 800ba34:	3301      	adds	r3, #1
 800ba36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800ba3e:	e00c      	b.n	800ba5a <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba40:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ba42:	f043 0310 	orr.w	r3, r3, #16
 800ba46:	6543      	str	r3, [r0, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ba48:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800ba4a:	f043 0301 	orr.w	r3, r3, #1
 800ba4e:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 800ba50:	2001      	movs	r0, #1
 800ba52:	e030      	b.n	800bab6 <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 800ba54:	9b01      	ldr	r3, [sp, #4]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800ba5a:	9b01      	ldr	r3, [sp, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1f9      	bne.n	800ba54 <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ba60:	f7ff fbb8 	bl	800b1d4 <HAL_GetTick>
 800ba64:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	681a      	ldr	r2, [r3, #0]
 800ba6a:	f012 0f01 	tst.w	r2, #1
 800ba6e:	d11f      	bne.n	800bab0 <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ba70:	689a      	ldr	r2, [r3, #8]
 800ba72:	f012 0f01 	tst.w	r2, #1
 800ba76:	d107      	bne.n	800ba88 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 800ba78:	689a      	ldr	r2, [r3, #8]
 800ba7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ba7e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800ba82:	f042 0201 	orr.w	r2, r2, #1
 800ba86:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800ba88:	f7ff fba4 	bl	800b1d4 <HAL_GetTick>
 800ba8c:	1b43      	subs	r3, r0, r5
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d9e9      	bls.n	800ba66 <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f013 0f01 	tst.w	r3, #1
 800ba9a:	d1e4      	bne.n	800ba66 <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ba9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ba9e:	f043 0310 	orr.w	r3, r3, #16
 800baa2:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800baa4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800baa6:	f043 0301 	orr.w	r3, r3, #1
 800baaa:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800baac:	2001      	movs	r0, #1
 800baae:	e002      	b.n	800bab6 <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bab0:	2000      	movs	r0, #0
 800bab2:	e000      	b.n	800bab6 <ADC_Enable+0xc6>
 800bab4:	2000      	movs	r0, #0
}
 800bab6:	b003      	add	sp, #12
 800bab8:	bd30      	pop	{r4, r5, pc}
 800baba:	bf00      	nop
 800babc:	8000003f 	.word	0x8000003f
 800bac0:	50040300 	.word	0x50040300
 800bac4:	2000002c 	.word	0x2000002c
 800bac8:	053e2d63 	.word	0x053e2d63

0800bacc <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bacc:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f013 0f04 	tst.w	r3, #4
 800bad4:	d13c      	bne.n	800bb50 <HAL_ADC_Start+0x84>
{
 800bad6:	b510      	push	{r4, lr}
 800bad8:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800bada:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d038      	beq.n	800bb54 <HAL_ADC_Start+0x88>
 800bae2:	2301      	movs	r3, #1
 800bae4:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800bae8:	f7ff ff82 	bl	800b9f0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800baec:	bb60      	cbnz	r0, 800bb48 <HAL_ADC_Start+0x7c>
      ADC_STATE_CLR_SET(hadc->State,
 800baee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800baf0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800baf4:	f023 0301 	bic.w	r3, r3, #1
 800baf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bafc:	6563      	str	r3, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bafe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bb00:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800bb04:	d01d      	beq.n	800bb42 <HAL_ADC_Start+0x76>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800bb06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb08:	f023 0306 	bic.w	r3, r3, #6
 800bb0c:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	221c      	movs	r2, #28
 800bb12:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800bb14:	2300      	movs	r3, #0
 800bb16:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800bb1a:	6822      	ldr	r2, [r4, #0]
 800bb1c:	68d3      	ldr	r3, [r2, #12]
 800bb1e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800bb22:	d005      	beq.n	800bb30 <HAL_ADC_Start+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800bb24:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bb26:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800bb2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800bb2e:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 800bb30:	6893      	ldr	r3, [r2, #8]
 800bb32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb36:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bb3a:	f043 0304 	orr.w	r3, r3, #4
 800bb3e:	6093      	str	r3, [r2, #8]
}
 800bb40:	bd10      	pop	{r4, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 800bb42:	2300      	movs	r3, #0
 800bb44:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bb46:	e7e2      	b.n	800bb0e <HAL_ADC_Start+0x42>
      __HAL_UNLOCK(hadc);
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800bb4e:	e7f7      	b.n	800bb40 <HAL_ADC_Start+0x74>
    tmp_hal_status = HAL_BUSY;
 800bb50:	2002      	movs	r0, #2
}
 800bb52:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800bb54:	2002      	movs	r0, #2
 800bb56:	e7f3      	b.n	800bb40 <HAL_ADC_Start+0x74>

0800bb58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800bb5c:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800bb5e:	6893      	ldr	r3, [r2, #8]
 800bb60:	f013 0302 	ands.w	r3, r3, #2
 800bb64:	d000      	beq.n	800bb68 <ADC_Disable+0x10>
 800bb66:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bb68:	6891      	ldr	r1, [r2, #8]
 800bb6a:	f011 0f01 	tst.w	r1, #1
 800bb6e:	d039      	beq.n	800bbe4 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d139      	bne.n	800bbe8 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800bb74:	6893      	ldr	r3, [r2, #8]
 800bb76:	f003 030d 	and.w	r3, r3, #13
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d009      	beq.n	800bb92 <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bb7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bb80:	f043 0310 	orr.w	r3, r3, #16
 800bb84:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bb86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bb88:	f043 0301 	orr.w	r3, r3, #1
 800bb8c:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 800bb8e:	2001      	movs	r0, #1
 800bb90:	e029      	b.n	800bbe6 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800bb92:	6893      	ldr	r3, [r2, #8]
 800bb94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bb9c:	f043 0302 	orr.w	r3, r3, #2
 800bba0:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	2203      	movs	r2, #3
 800bba6:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800bba8:	f7ff fb14 	bl	800b1d4 <HAL_GetTick>
 800bbac:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bbae:	6823      	ldr	r3, [r4, #0]
 800bbb0:	689b      	ldr	r3, [r3, #8]
 800bbb2:	f013 0f01 	tst.w	r3, #1
 800bbb6:	d013      	beq.n	800bbe0 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bbb8:	f7ff fb0c 	bl	800b1d4 <HAL_GetTick>
 800bbbc:	1b40      	subs	r0, r0, r5
 800bbbe:	2802      	cmp	r0, #2
 800bbc0:	d9f5      	bls.n	800bbae <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f013 0f01 	tst.w	r3, #1
 800bbca:	d0f0      	beq.n	800bbae <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bbcc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bbce:	f043 0310 	orr.w	r3, r3, #16
 800bbd2:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bbd4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bbd6:	f043 0301 	orr.w	r3, r3, #1
 800bbda:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800bbdc:	2001      	movs	r0, #1
 800bbde:	e002      	b.n	800bbe6 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	e000      	b.n	800bbe6 <ADC_Disable+0x8e>
 800bbe4:	2000      	movs	r0, #0
}
 800bbe6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800bbe8:	2000      	movs	r0, #0
 800bbea:	e7fc      	b.n	800bbe6 <ADC_Disable+0x8e>

0800bbec <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800bbec:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d01a      	beq.n	800bc2a <HAL_ADC_Stop+0x3e>
{
 800bbf4:	b510      	push	{r4, lr}
 800bbf6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800bbfe:	2103      	movs	r1, #3
 800bc00:	f7ff fe74 	bl	800b8ec <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800bc04:	b118      	cbz	r0, 800bc0e <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800bc06:	2300      	movs	r3, #0
 800bc08:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800bc0c:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7ff ffa2 	bl	800bb58 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800bc14:	2800      	cmp	r0, #0
 800bc16:	d1f6      	bne.n	800bc06 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800bc18:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bc1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bc1e:	f023 0301 	bic.w	r3, r3, #1
 800bc22:	f043 0301 	orr.w	r3, r3, #1
 800bc26:	6563      	str	r3, [r4, #84]	@ 0x54
 800bc28:	e7ed      	b.n	800bc06 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800bc2a:	2002      	movs	r0, #2
}
 800bc2c:	4770      	bx	lr

0800bc2e <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800bc2e:	b530      	push	{r4, r5, lr}
 800bc30:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800bc32:	2300      	movs	r3, #0
 800bc34:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800bc36:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d041      	beq.n	800bcc2 <HAL_ADCEx_Calibration_Start+0x94>
 800bc3e:	4604      	mov	r4, r0
 800bc40:	460d      	mov	r5, r1
 800bc42:	2301      	movs	r3, #1
 800bc44:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800bc48:	f7ff ff86 	bl	800bb58 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800bc4c:	bb80      	cbnz	r0, 800bcb0 <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bc4e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bc50:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800bc54:	f023 0302 	bic.w	r3, r3, #2
 800bc58:	f043 0302 	orr.w	r3, r3, #2
 800bc5c:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800bc5e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800bc60:	6893      	ldr	r3, [r2, #8]
 800bc62:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800bc66:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800bc6a:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 800bc6e:	432b      	orrs	r3, r5
 800bc70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc74:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800bc76:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	db06      	blt.n	800bc8c <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bc7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bc80:	f023 0303 	bic.w	r3, r3, #3
 800bc84:	f043 0301 	orr.w	r3, r3, #1
 800bc88:	6563      	str	r3, [r4, #84]	@ 0x54
 800bc8a:	e015      	b.n	800bcb8 <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 800bc8c:	9b01      	ldr	r3, [sp, #4]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800bc92:	9b01      	ldr	r3, [sp, #4]
 800bc94:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800bc98:	d3ed      	bcc.n	800bc76 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800bc9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bc9c:	f023 0312 	bic.w	r3, r3, #18
 800bca0:	f043 0310 	orr.w	r3, r3, #16
 800bca4:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 800bca6:	2300      	movs	r3, #0
 800bca8:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800bcac:	2001      	movs	r0, #1
 800bcae:	e006      	b.n	800bcbe <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bcb0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800bcb2:	f043 0310 	orr.w	r3, r3, #16
 800bcb6:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800bcbe:	b003      	add	sp, #12
 800bcc0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 800bcc2:	2002      	movs	r0, #2
 800bcc4:	e7fb      	b.n	800bcbe <HAL_ADCEx_Calibration_Start+0x90>

0800bcc6 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f000 80a1 	beq.w	800be0e <HAL_CAN_Init+0x148>
{
 800bccc:	b538      	push	{r3, r4, r5, lr}
 800bcce:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800bcd0:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bcd4:	b1d3      	cbz	r3, 800bd0c <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800bcd6:	6822      	ldr	r2, [r4, #0]
 800bcd8:	6813      	ldr	r3, [r2, #0]
 800bcda:	f043 0301 	orr.w	r3, r3, #1
 800bcde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bce0:	f7ff fa78 	bl	800b1d4 <HAL_GetTick>
 800bce4:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	685a      	ldr	r2, [r3, #4]
 800bcea:	f012 0f01 	tst.w	r2, #1
 800bcee:	d110      	bne.n	800bd12 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800bcf0:	f7ff fa70 	bl	800b1d4 <HAL_GetTick>
 800bcf4:	1b40      	subs	r0, r0, r5
 800bcf6:	280a      	cmp	r0, #10
 800bcf8:	d9f5      	bls.n	800bce6 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800bcfa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bcfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd00:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800bd02:	2305      	movs	r3, #5
 800bd04:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800bd08:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800bd0c:	f001 fb8a 	bl	800d424 <HAL_CAN_MspInit>
 800bd10:	e7e1      	b.n	800bcd6 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	f022 0202 	bic.w	r2, r2, #2
 800bd18:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800bd1a:	f7ff fa5b 	bl	800b1d4 <HAL_GetTick>
 800bd1e:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	685a      	ldr	r2, [r3, #4]
 800bd24:	f012 0f02 	tst.w	r2, #2
 800bd28:	d00d      	beq.n	800bd46 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800bd2a:	f7ff fa53 	bl	800b1d4 <HAL_GetTick>
 800bd2e:	1b40      	subs	r0, r0, r5
 800bd30:	280a      	cmp	r0, #10
 800bd32:	d9f5      	bls.n	800bd20 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800bd34:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bd36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd3a:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800bd3c:	2305      	movs	r3, #5
 800bd3e:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800bd42:	2001      	movs	r0, #1
 800bd44:	e7e1      	b.n	800bd0a <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800bd46:	7e22      	ldrb	r2, [r4, #24]
 800bd48:	2a01      	cmp	r2, #1
 800bd4a:	d03d      	beq.n	800bdc8 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd52:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800bd54:	7e63      	ldrb	r3, [r4, #25]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d03b      	beq.n	800bdd2 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	6813      	ldr	r3, [r2, #0]
 800bd5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd62:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800bd64:	7ea3      	ldrb	r3, [r4, #26]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d039      	beq.n	800bdde <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800bd6a:	6822      	ldr	r2, [r4, #0]
 800bd6c:	6813      	ldr	r3, [r2, #0]
 800bd6e:	f023 0320 	bic.w	r3, r3, #32
 800bd72:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800bd74:	7ee3      	ldrb	r3, [r4, #27]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d037      	beq.n	800bdea <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800bd7a:	6822      	ldr	r2, [r4, #0]
 800bd7c:	6813      	ldr	r3, [r2, #0]
 800bd7e:	f043 0310 	orr.w	r3, r3, #16
 800bd82:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800bd84:	7f23      	ldrb	r3, [r4, #28]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d035      	beq.n	800bdf6 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800bd8a:	6822      	ldr	r2, [r4, #0]
 800bd8c:	6813      	ldr	r3, [r2, #0]
 800bd8e:	f023 0308 	bic.w	r3, r3, #8
 800bd92:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800bd94:	7f63      	ldrb	r3, [r4, #29]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d033      	beq.n	800be02 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800bd9a:	6822      	ldr	r2, [r4, #0]
 800bd9c:	6813      	ldr	r3, [r2, #0]
 800bd9e:	f023 0304 	bic.w	r3, r3, #4
 800bda2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800bda4:	68a3      	ldr	r3, [r4, #8]
 800bda6:	68e2      	ldr	r2, [r4, #12]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	6922      	ldr	r2, [r4, #16]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	6962      	ldr	r2, [r4, #20]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	6862      	ldr	r2, [r4, #4]
 800bdb4:	3a01      	subs	r2, #1
 800bdb6:	6821      	ldr	r1, [r4, #0]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800bdc6:	e7a0      	b.n	800bd0a <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	e7c0      	b.n	800bd54 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800bdd2:	6822      	ldr	r2, [r4, #0]
 800bdd4:	6813      	ldr	r3, [r2, #0]
 800bdd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	e7c2      	b.n	800bd64 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800bdde:	6822      	ldr	r2, [r4, #0]
 800bde0:	6813      	ldr	r3, [r2, #0]
 800bde2:	f043 0320 	orr.w	r3, r3, #32
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	e7c4      	b.n	800bd74 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800bdea:	6822      	ldr	r2, [r4, #0]
 800bdec:	6813      	ldr	r3, [r2, #0]
 800bdee:	f023 0310 	bic.w	r3, r3, #16
 800bdf2:	6013      	str	r3, [r2, #0]
 800bdf4:	e7c6      	b.n	800bd84 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800bdf6:	6822      	ldr	r2, [r4, #0]
 800bdf8:	6813      	ldr	r3, [r2, #0]
 800bdfa:	f043 0308 	orr.w	r3, r3, #8
 800bdfe:	6013      	str	r3, [r2, #0]
 800be00:	e7c8      	b.n	800bd94 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	6813      	ldr	r3, [r2, #0]
 800be06:	f043 0304 	orr.w	r3, r3, #4
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	e7ca      	b.n	800bda4 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800be0e:	2001      	movs	r0, #1
}
 800be10:	4770      	bx	lr

0800be12 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800be12:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800be14:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800be18:	3b01      	subs	r3, #1
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d905      	bls.n	800be2c <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800be20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800be22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be26:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800be28:	2001      	movs	r0, #1
  }
}
 800be2a:	4770      	bx	lr
{
 800be2c:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800be2e:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800be32:	f043 0301 	orr.w	r3, r3, #1
 800be36:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800be3a:	694b      	ldr	r3, [r1, #20]
 800be3c:	f003 031f 	and.w	r3, r3, #31
 800be40:	2001      	movs	r0, #1
 800be42:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800be46:	f8d2 021c 	ldr.w	r0, [r2, #540]	@ 0x21c
 800be4a:	ea6f 0c03 	mvn.w	ip, r3
 800be4e:	ea20 0003 	bic.w	r0, r0, r3
 800be52:	f8c2 021c 	str.w	r0, [r2, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800be56:	69c8      	ldr	r0, [r1, #28]
 800be58:	b9b0      	cbnz	r0, 800be88 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800be5a:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800be5e:	ea0c 0000 	and.w	r0, ip, r0
 800be62:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800be66:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800be68:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800be6a:	68cd      	ldr	r5, [r1, #12]
 800be6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800be70:	3048      	adds	r0, #72	@ 0x48
 800be72:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800be76:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800be78:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800be7a:	688d      	ldr	r5, [r1, #8]
 800be7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800be80:	3048      	adds	r0, #72	@ 0x48
 800be82:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800be86:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800be88:	69c8      	ldr	r0, [r1, #28]
 800be8a:	2801      	cmp	r0, #1
 800be8c:	d01b      	beq.n	800bec6 <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800be8e:	6988      	ldr	r0, [r1, #24]
 800be90:	bb80      	cbnz	r0, 800bef4 <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800be92:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800be96:	ea0c 0000 	and.w	r0, ip, r0
 800be9a:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800be9e:	6908      	ldr	r0, [r1, #16]
 800bea0:	bb70      	cbnz	r0, 800bf00 <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800bea2:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800bea6:	ea0c 0000 	and.w	r0, ip, r0
 800beaa:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800beae:	6a09      	ldr	r1, [r1, #32]
 800beb0:	2901      	cmp	r1, #1
 800beb2:	d02b      	beq.n	800bf0c <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800beb4:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800beb8:	f023 0301 	bic.w	r3, r3, #1
 800bebc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 800bec0:	2000      	movs	r0, #0
}
 800bec2:	bc30      	pop	{r4, r5}
 800bec4:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800bec6:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800beca:	4318      	orrs	r0, r3
 800becc:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800bed0:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800bed2:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800bed4:	680d      	ldr	r5, [r1, #0]
 800bed6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800beda:	3048      	adds	r0, #72	@ 0x48
 800bedc:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800bee0:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800bee2:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800bee4:	688d      	ldr	r5, [r1, #8]
 800bee6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800beea:	3048      	adds	r0, #72	@ 0x48
 800beec:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800bef0:	6044      	str	r4, [r0, #4]
 800bef2:	e7cc      	b.n	800be8e <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800bef4:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bef8:	4318      	orrs	r0, r3
 800befa:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
 800befe:	e7ce      	b.n	800be9e <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800bf00:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800bf04:	4318      	orrs	r0, r3
 800bf06:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
 800bf0a:	e7d0      	b.n	800beae <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800bf0c:	f8d2 121c 	ldr.w	r1, [r2, #540]	@ 0x21c
 800bf10:	430b      	orrs	r3, r1
 800bf12:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
 800bf16:	e7cd      	b.n	800beb4 <HAL_CAN_ConfigFilter+0xa2>

0800bf18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800bf1c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d006      	beq.n	800bf32 <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800bf24:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800bf26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf2a:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800bf2c:	2601      	movs	r6, #1
  }
}
 800bf2e:	4630      	mov	r0, r6
 800bf30:	bd70      	pop	{r4, r5, r6, pc}
 800bf32:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800bf34:	2302      	movs	r3, #2
 800bf36:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800bf3a:	6802      	ldr	r2, [r0, #0]
 800bf3c:	6813      	ldr	r3, [r2, #0]
 800bf3e:	f023 0301 	bic.w	r3, r3, #1
 800bf42:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800bf44:	f7ff f946 	bl	800b1d4 <HAL_GetTick>
 800bf48:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800bf4a:	6823      	ldr	r3, [r4, #0]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	f013 0f01 	tst.w	r3, #1
 800bf52:	d00c      	beq.n	800bf6e <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800bf54:	f7ff f93e 	bl	800b1d4 <HAL_GetTick>
 800bf58:	1b43      	subs	r3, r0, r5
 800bf5a:	2b0a      	cmp	r3, #10
 800bf5c:	d9f5      	bls.n	800bf4a <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800bf5e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bf60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf64:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800bf66:	2305      	movs	r3, #5
 800bf68:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800bf6c:	e7df      	b.n	800bf2e <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800bf6e:	2600      	movs	r6, #0
 800bf70:	6266      	str	r6, [r4, #36]	@ 0x24
    return HAL_OK;
 800bf72:	e7dc      	b.n	800bf2e <HAL_CAN_Start+0x16>

0800bf74 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800bf74:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800bf76:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800bf7a:	6804      	ldr	r4, [r0, #0]
 800bf7c:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800bf7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bf82:	fa5f fc8c 	uxtb.w	ip, ip
 800bf86:	f1bc 0f01 	cmp.w	ip, #1
 800bf8a:	d862      	bhi.n	800c052 <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800bf8c:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 800bf90:	d059      	beq.n	800c046 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800bf92:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800bf96:	2401      	movs	r4, #1
 800bf98:	fa04 f40c 	lsl.w	r4, r4, ip
 800bf9c:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800bf9e:	688b      	ldr	r3, [r1, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d13d      	bne.n	800c020 <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bfa4:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 800bfa6:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800bfa8:	6804      	ldr	r4, [r0, #0]
 800bfaa:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 800bfae:	f10c 0318 	add.w	r3, ip, #24
 800bfb2:	011b      	lsls	r3, r3, #4
 800bfb4:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800bfb6:	6803      	ldr	r3, [r0, #0]
 800bfb8:	690c      	ldr	r4, [r1, #16]
 800bfba:	f10c 0e18 	add.w	lr, ip, #24
 800bfbe:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800bfc2:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800bfc4:	7d0b      	ldrb	r3, [r1, #20]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d035      	beq.n	800c036 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800bfca:	79d1      	ldrb	r1, [r2, #7]
 800bfcc:	7993      	ldrb	r3, [r2, #6]
 800bfce:	041b      	lsls	r3, r3, #16
 800bfd0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bfd4:	7951      	ldrb	r1, [r2, #5]
 800bfd6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bfda:	7914      	ldrb	r4, [r2, #4]
 800bfdc:	6801      	ldr	r1, [r0, #0]
 800bfde:	4323      	orrs	r3, r4
 800bfe0:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 800bfe4:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800bfe8:	78d1      	ldrb	r1, [r2, #3]
 800bfea:	7893      	ldrb	r3, [r2, #2]
 800bfec:	041b      	lsls	r3, r3, #16
 800bfee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bff2:	7851      	ldrb	r1, [r2, #1]
 800bff4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800bff8:	7811      	ldrb	r1, [r2, #0]
 800bffa:	6802      	ldr	r2, [r0, #0]
 800bffc:	430b      	orrs	r3, r1
 800bffe:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800c002:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800c006:	6802      	ldr	r2, [r0, #0]
 800c008:	f10c 0c18 	add.w	ip, ip, #24
 800c00c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800c010:	f852 300c 	ldr.w	r3, [r2, ip]
 800c014:	f043 0301 	orr.w	r3, r3, #1
 800c018:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 800c01c:	2000      	movs	r0, #0
 800c01e:	e01d      	b.n	800c05c <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c020:	684c      	ldr	r4, [r1, #4]
 800c022:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 800c026:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 800c028:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800c02a:	f10c 0418 	add.w	r4, ip, #24
 800c02e:	0124      	lsls	r4, r4, #4
 800c030:	6805      	ldr	r5, [r0, #0]
 800c032:	512b      	str	r3, [r5, r4]
 800c034:	e7bf      	b.n	800bfb6 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800c036:	6803      	ldr	r3, [r0, #0]
 800c038:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800c03c:	6859      	ldr	r1, [r3, #4]
 800c03e:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800c042:	6059      	str	r1, [r3, #4]
 800c044:	e7c1      	b.n	800bfca <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c046:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c048:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c04c:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 800c04e:	2001      	movs	r0, #1
 800c050:	e004      	b.n	800c05c <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c052:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c058:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800c05a:	2001      	movs	r0, #1
  }
}
 800c05c:	bd30      	pop	{r4, r5, pc}

0800c05e <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800c05e:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800c062:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c066:	fa5f fc8c 	uxtb.w	ip, ip
 800c06a:	f1bc 0f01 	cmp.w	ip, #1
 800c06e:	f200 80a5 	bhi.w	800c1bc <HAL_CAN_GetRxMessage+0x15e>
{
 800c072:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c074:	b951      	cbnz	r1, 800c08c <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800c076:	6804      	ldr	r4, [r0, #0]
 800c078:	68e4      	ldr	r4, [r4, #12]
 800c07a:	f014 0f03 	tst.w	r4, #3
 800c07e:	d110      	bne.n	800c0a2 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c080:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c082:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c086:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 800c088:	2001      	movs	r0, #1
 800c08a:	e07e      	b.n	800c18a <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800c08c:	6804      	ldr	r4, [r0, #0]
 800c08e:	6924      	ldr	r4, [r4, #16]
 800c090:	f014 0f03 	tst.w	r4, #3
 800c094:	d105      	bne.n	800c0a2 <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800c096:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c098:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c09c:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 800c09e:	2001      	movs	r0, #1
 800c0a0:	e073      	b.n	800c18a <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800c0a2:	6805      	ldr	r5, [r0, #0]
 800c0a4:	f101 041b 	add.w	r4, r1, #27
 800c0a8:	0124      	lsls	r4, r4, #4
 800c0aa:	592c      	ldr	r4, [r5, r4]
 800c0ac:	f004 0404 	and.w	r4, r4, #4
 800c0b0:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800c0b2:	2c00      	cmp	r4, #0
 800c0b4:	d16b      	bne.n	800c18e <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800c0b6:	6805      	ldr	r5, [r0, #0]
 800c0b8:	f101 041b 	add.w	r4, r1, #27
 800c0bc:	0124      	lsls	r4, r4, #4
 800c0be:	592c      	ldr	r4, [r5, r4]
 800c0c0:	0d64      	lsrs	r4, r4, #21
 800c0c2:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800c0c4:	6804      	ldr	r4, [r0, #0]
 800c0c6:	f101 0c1b 	add.w	ip, r1, #27
 800c0ca:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800c0ce:	f854 400c 	ldr.w	r4, [r4, ip]
 800c0d2:	f004 0402 	and.w	r4, r4, #2
 800c0d6:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800c0d8:	6804      	ldr	r4, [r0, #0]
 800c0da:	44a4      	add	ip, r4
 800c0dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800c0e0:	f015 0f08 	tst.w	r5, #8
 800c0e4:	d05b      	beq.n	800c19e <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800c0e6:	2408      	movs	r4, #8
 800c0e8:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800c0ea:	6804      	ldr	r4, [r0, #0]
 800c0ec:	f101 0c1b 	add.w	ip, r1, #27
 800c0f0:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 800c0f4:	6864      	ldr	r4, [r4, #4]
 800c0f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c0fa:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800c0fc:	6804      	ldr	r4, [r0, #0]
 800c0fe:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 800c102:	6864      	ldr	r4, [r4, #4]
 800c104:	0c24      	lsrs	r4, r4, #16
 800c106:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800c108:	6802      	ldr	r2, [r0, #0]
 800c10a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c10e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800c112:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800c114:	6802      	ldr	r2, [r0, #0]
 800c116:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c11a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800c11e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c122:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800c124:	6802      	ldr	r2, [r0, #0]
 800c126:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c12a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800c12e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c132:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800c134:	6802      	ldr	r2, [r0, #0]
 800c136:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c13a:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800c13e:	0e12      	lsrs	r2, r2, #24
 800c140:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800c142:	6802      	ldr	r2, [r0, #0]
 800c144:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c148:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800c14c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800c14e:	6802      	ldr	r2, [r0, #0]
 800c150:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c154:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800c158:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800c15c:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800c15e:	6802      	ldr	r2, [r0, #0]
 800c160:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c164:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800c168:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800c16c:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800c16e:	6802      	ldr	r2, [r0, #0]
 800c170:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c174:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800c178:	0e12      	lsrs	r2, r2, #24
 800c17a:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800c17c:	b9c1      	cbnz	r1, 800c1b0 <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800c17e:	6802      	ldr	r2, [r0, #0]
 800c180:	68d3      	ldr	r3, [r2, #12]
 800c182:	f043 0320 	orr.w	r3, r3, #32
 800c186:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 800c188:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800c18a:	bc30      	pop	{r4, r5}
 800c18c:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800c18e:	6805      	ldr	r5, [r0, #0]
 800c190:	f101 041b 	add.w	r4, r1, #27
 800c194:	0124      	lsls	r4, r4, #4
 800c196:	592c      	ldr	r4, [r5, r4]
 800c198:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800c19a:	6054      	str	r4, [r2, #4]
 800c19c:	e792      	b.n	800c0c4 <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800c19e:	f101 051b 	add.w	r5, r1, #27
 800c1a2:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800c1a6:	6864      	ldr	r4, [r4, #4]
 800c1a8:	f004 040f 	and.w	r4, r4, #15
 800c1ac:	6114      	str	r4, [r2, #16]
 800c1ae:	e79c      	b.n	800c0ea <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800c1b0:	6802      	ldr	r2, [r0, #0]
 800c1b2:	6913      	ldr	r3, [r2, #16]
 800c1b4:	f043 0320 	orr.w	r3, r3, #32
 800c1b8:	6113      	str	r3, [r2, #16]
 800c1ba:	e7e5      	b.n	800c188 <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c1bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c1be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c1c2:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800c1c4:	2001      	movs	r0, #1
}
 800c1c6:	4770      	bx	lr

0800c1c8 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800c1c8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d905      	bls.n	800c1e0 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800c1d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c1d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c1da:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800c1dc:	2001      	movs	r0, #1
  }
}
 800c1de:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800c1e0:	6802      	ldr	r2, [r0, #0]
 800c1e2:	6953      	ldr	r3, [r2, #20]
 800c1e4:	430b      	orrs	r3, r1
 800c1e6:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800c1ec:	4770      	bx	lr

0800c1ee <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800c1f0:	4770      	bx	lr

0800c1f2 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800c1f4:	4770      	bx	lr

0800c1f6 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800c1f6:	4770      	bx	lr

0800c1f8 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800c1f8:	4770      	bx	lr

0800c1fa <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800c1fa:	4770      	bx	lr

0800c1fc <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800c1fc:	4770      	bx	lr

0800c1fe <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800c1fe:	4770      	bx	lr

0800c200 <HAL_CAN_IRQHandler>:
{
 800c200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800c206:	6803      	ldr	r3, [r0, #0]
 800c208:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800c20a:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800c20e:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800c210:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800c214:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800c218:	f8d3 b018 	ldr.w	fp, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800c21c:	f014 0601 	ands.w	r6, r4, #1
 800c220:	d03b      	beq.n	800c29a <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800c222:	f017 0601 	ands.w	r6, r7, #1
 800c226:	d016      	beq.n	800c256 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800c228:	2201      	movs	r2, #1
 800c22a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800c22c:	f017 0f02 	tst.w	r7, #2
 800c230:	d108      	bne.n	800c244 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800c232:	f017 0f04 	tst.w	r7, #4
 800c236:	d10c      	bne.n	800c252 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800c238:	f017 0608 	ands.w	r6, r7, #8
 800c23c:	d006      	beq.n	800c24c <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800c23e:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800c242:	e008      	b.n	800c256 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800c244:	f7ff ffd2 	bl	800c1ec <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800c248:	2600      	movs	r6, #0
 800c24a:	e004      	b.n	800c256 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800c24c:	f7ff ffd1 	bl	800c1f2 <HAL_CAN_TxMailbox0AbortCallback>
 800c250:	e001      	b.n	800c256 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800c252:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800c256:	f417 7f80 	tst.w	r7, #256	@ 0x100
 800c25a:	d00d      	beq.n	800c278 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c262:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800c264:	f417 7f00 	tst.w	r7, #512	@ 0x200
 800c268:	f040 8096 	bne.w	800c398 <HAL_CAN_IRQHandler+0x198>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800c26c:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 800c270:	f000 8096 	beq.w	800c3a0 <HAL_CAN_IRQHandler+0x1a0>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800c274:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800c278:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 800c27c:	d00d      	beq.n	800c29a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800c27e:	682b      	ldr	r3, [r5, #0]
 800c280:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c284:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800c286:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800c28a:	f040 8093 	bne.w	800c3b4 <HAL_CAN_IRQHandler+0x1b4>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800c28e:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 800c292:	f000 8093 	beq.w	800c3bc <HAL_CAN_IRQHandler+0x1bc>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800c296:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800c29a:	f014 0f08 	tst.w	r4, #8
 800c29e:	d007      	beq.n	800c2b0 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800c2a0:	f01a 0f10 	tst.w	sl, #16
 800c2a4:	d004      	beq.n	800c2b0 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800c2a6:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800c2aa:	682b      	ldr	r3, [r5, #0]
 800c2ac:	2210      	movs	r2, #16
 800c2ae:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800c2b0:	f014 0f04 	tst.w	r4, #4
 800c2b4:	d003      	beq.n	800c2be <HAL_CAN_IRQHandler+0xbe>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800c2b6:	f01a 0f08 	tst.w	sl, #8
 800c2ba:	f040 8089 	bne.w	800c3d0 <HAL_CAN_IRQHandler+0x1d0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800c2be:	f014 0f02 	tst.w	r4, #2
 800c2c2:	d005      	beq.n	800c2d0 <HAL_CAN_IRQHandler+0xd0>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	f013 0f03 	tst.w	r3, #3
 800c2cc:	f040 8087 	bne.w	800c3de <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800c2d0:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800c2d4:	d007      	beq.n	800c2e6 <HAL_CAN_IRQHandler+0xe6>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800c2d6:	f019 0f10 	tst.w	r9, #16
 800c2da:	d004      	beq.n	800c2e6 <HAL_CAN_IRQHandler+0xe6>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800c2dc:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	2210      	movs	r2, #16
 800c2e4:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800c2e6:	f014 0f20 	tst.w	r4, #32
 800c2ea:	d002      	beq.n	800c2f2 <HAL_CAN_IRQHandler+0xf2>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800c2ec:	f019 0f08 	tst.w	r9, #8
 800c2f0:	d179      	bne.n	800c3e6 <HAL_CAN_IRQHandler+0x1e6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800c2f2:	f014 0f10 	tst.w	r4, #16
 800c2f6:	d004      	beq.n	800c302 <HAL_CAN_IRQHandler+0x102>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800c2f8:	682b      	ldr	r3, [r5, #0]
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	f013 0f03 	tst.w	r3, #3
 800c300:	d178      	bne.n	800c3f4 <HAL_CAN_IRQHandler+0x1f4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800c302:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 800c306:	d002      	beq.n	800c30e <HAL_CAN_IRQHandler+0x10e>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800c308:	f018 0f10 	tst.w	r8, #16
 800c30c:	d176      	bne.n	800c3fc <HAL_CAN_IRQHandler+0x1fc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800c30e:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 800c312:	d002      	beq.n	800c31a <HAL_CAN_IRQHandler+0x11a>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800c314:	f018 0f08 	tst.w	r8, #8
 800c318:	d177      	bne.n	800c40a <HAL_CAN_IRQHandler+0x20a>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800c31a:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 800c31e:	d037      	beq.n	800c390 <HAL_CAN_IRQHandler+0x190>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800c320:	f018 0f04 	tst.w	r8, #4
 800c324:	d031      	beq.n	800c38a <HAL_CAN_IRQHandler+0x18a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800c326:	f414 7f80 	tst.w	r4, #256	@ 0x100
 800c32a:	d004      	beq.n	800c336 <HAL_CAN_IRQHandler+0x136>
 800c32c:	f01b 0f01 	tst.w	fp, #1
 800c330:	d001      	beq.n	800c336 <HAL_CAN_IRQHandler+0x136>
        errorcode |= HAL_CAN_ERROR_EWG;
 800c332:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800c336:	f414 7f00 	tst.w	r4, #512	@ 0x200
 800c33a:	d004      	beq.n	800c346 <HAL_CAN_IRQHandler+0x146>
 800c33c:	f01b 0f02 	tst.w	fp, #2
 800c340:	d001      	beq.n	800c346 <HAL_CAN_IRQHandler+0x146>
        errorcode |= HAL_CAN_ERROR_EPV;
 800c342:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800c346:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 800c34a:	d004      	beq.n	800c356 <HAL_CAN_IRQHandler+0x156>
 800c34c:	f01b 0f04 	tst.w	fp, #4
 800c350:	d001      	beq.n	800c356 <HAL_CAN_IRQHandler+0x156>
        errorcode |= HAL_CAN_ERROR_BOF;
 800c352:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800c356:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800c35a:	d016      	beq.n	800c38a <HAL_CAN_IRQHandler+0x18a>
 800c35c:	f01b 0b70 	ands.w	fp, fp, #112	@ 0x70
 800c360:	d013      	beq.n	800c38a <HAL_CAN_IRQHandler+0x18a>
        switch (esrflags & CAN_ESR_LEC)
 800c362:	f1bb 0f40 	cmp.w	fp, #64	@ 0x40
 800c366:	d066      	beq.n	800c436 <HAL_CAN_IRQHandler+0x236>
 800c368:	d856      	bhi.n	800c418 <HAL_CAN_IRQHandler+0x218>
 800c36a:	f1bb 0f20 	cmp.w	fp, #32
 800c36e:	d05c      	beq.n	800c42a <HAL_CAN_IRQHandler+0x22a>
 800c370:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
 800c374:	d05c      	beq.n	800c430 <HAL_CAN_IRQHandler+0x230>
 800c376:	f1bb 0f10 	cmp.w	fp, #16
 800c37a:	d101      	bne.n	800c380 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_STF;
 800c37c:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800c380:	682a      	ldr	r2, [r5, #0]
 800c382:	6993      	ldr	r3, [r2, #24]
 800c384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c388:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800c38a:	682b      	ldr	r3, [r5, #0]
 800c38c:	2204      	movs	r2, #4
 800c38e:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800c390:	2e00      	cmp	r6, #0
 800c392:	d156      	bne.n	800c442 <HAL_CAN_IRQHandler+0x242>
}
 800c394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800c398:	4628      	mov	r0, r5
 800c39a:	f7ff ff28 	bl	800c1ee <HAL_CAN_TxMailbox1CompleteCallback>
 800c39e:	e76b      	b.n	800c278 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800c3a0:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 800c3a4:	d002      	beq.n	800c3ac <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800c3a6:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 800c3aa:	e765      	b.n	800c278 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f7ff ff21 	bl	800c1f4 <HAL_CAN_TxMailbox1AbortCallback>
 800c3b2:	e761      	b.n	800c278 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	f7ff ff1b 	bl	800c1f0 <HAL_CAN_TxMailbox2CompleteCallback>
 800c3ba:	e76e      	b.n	800c29a <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800c3bc:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 800c3c0:	d002      	beq.n	800c3c8 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800c3c2:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 800c3c6:	e768      	b.n	800c29a <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	f7ff ff14 	bl	800c1f6 <HAL_CAN_TxMailbox2AbortCallback>
 800c3ce:	e764      	b.n	800c29a <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	2208      	movs	r2, #8
 800c3d4:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f7ff ff0e 	bl	800c1f8 <HAL_CAN_RxFifo0FullCallback>
 800c3dc:	e76f      	b.n	800c2be <HAL_CAN_IRQHandler+0xbe>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f7fc fb24 	bl	8008a2c <HAL_CAN_RxFifo0MsgPendingCallback>
 800c3e4:	e774      	b.n	800c2d0 <HAL_CAN_IRQHandler+0xd0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800c3e6:	682b      	ldr	r3, [r5, #0]
 800c3e8:	2208      	movs	r2, #8
 800c3ea:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	f7ff ff04 	bl	800c1fa <HAL_CAN_RxFifo1FullCallback>
 800c3f2:	e77e      	b.n	800c2f2 <HAL_CAN_IRQHandler+0xf2>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	f7fc fb47 	bl	8008a88 <HAL_CAN_RxFifo1MsgPendingCallback>
 800c3fa:	e782      	b.n	800c302 <HAL_CAN_IRQHandler+0x102>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	2210      	movs	r2, #16
 800c400:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800c402:	4628      	mov	r0, r5
 800c404:	f7ff fefa 	bl	800c1fc <HAL_CAN_SleepCallback>
 800c408:	e781      	b.n	800c30e <HAL_CAN_IRQHandler+0x10e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800c40a:	682b      	ldr	r3, [r5, #0]
 800c40c:	2208      	movs	r2, #8
 800c40e:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800c410:	4628      	mov	r0, r5
 800c412:	f7ff fef4 	bl	800c1fe <HAL_CAN_WakeUpFromRxMsgCallback>
 800c416:	e780      	b.n	800c31a <HAL_CAN_IRQHandler+0x11a>
        switch (esrflags & CAN_ESR_LEC)
 800c418:	f1bb 0f50 	cmp.w	fp, #80	@ 0x50
 800c41c:	d00e      	beq.n	800c43c <HAL_CAN_IRQHandler+0x23c>
 800c41e:	f1bb 0f60 	cmp.w	fp, #96	@ 0x60
 800c422:	d1ad      	bne.n	800c380 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_CRC;
 800c424:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
            break;
 800c428:	e7aa      	b.n	800c380 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_FOR;
 800c42a:	f046 0610 	orr.w	r6, r6, #16
            break;
 800c42e:	e7a7      	b.n	800c380 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_ACK;
 800c430:	f046 0620 	orr.w	r6, r6, #32
            break;
 800c434:	e7a4      	b.n	800c380 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BR;
 800c436:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 800c43a:	e7a1      	b.n	800c380 <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BD;
 800c43c:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 800c440:	e79e      	b.n	800c380 <HAL_CAN_IRQHandler+0x180>
    hcan->ErrorCode |= errorcode;
 800c442:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800c444:	4333      	orrs	r3, r6
 800c446:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800c448:	4628      	mov	r0, r5
 800c44a:	f7fc fb4b 	bl	8008ae4 <HAL_CAN_ErrorCallback>
}
 800c44e:	e7a1      	b.n	800c394 <HAL_CAN_IRQHandler+0x194>

0800c450 <HAL_CAN_GetError>:
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
  /* Return CAN error code */
  return hcan->ErrorCode;
 800c450:	6a40      	ldr	r0, [r0, #36]	@ 0x24
}
 800c452:	4770      	bx	lr

0800c454 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800c454:	2800      	cmp	r0, #0
 800c456:	db07      	blt.n	800c468 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c458:	f000 021f 	and.w	r2, r0, #31
 800c45c:	0940      	lsrs	r0, r0, #5
 800c45e:	2301      	movs	r3, #1
 800c460:	4093      	lsls	r3, r2
 800c462:	4a02      	ldr	r2, [pc, #8]	@ (800c46c <__NVIC_EnableIRQ+0x18>)
 800c464:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	e000e100 	.word	0xe000e100

0800c470 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 800c470:	2800      	cmp	r0, #0
 800c472:	db08      	blt.n	800c486 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c474:	0109      	lsls	r1, r1, #4
 800c476:	b2c9      	uxtb	r1, r1
 800c478:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800c47c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800c480:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800c484:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c486:	f000 000f 	and.w	r0, r0, #15
 800c48a:	0109      	lsls	r1, r1, #4
 800c48c:	b2c9      	uxtb	r1, r1
 800c48e:	4b01      	ldr	r3, [pc, #4]	@ (800c494 <__NVIC_SetPriority+0x24>)
 800c490:	5419      	strb	r1, [r3, r0]
}
 800c492:	4770      	bx	lr
 800c494:	e000ed14 	.word	0xe000ed14

0800c498 <NVIC_EncodePriority>:
{
 800c498:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c49a:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c49e:	f1c0 0c07 	rsb	ip, r0, #7
 800c4a2:	f1bc 0f04 	cmp.w	ip, #4
 800c4a6:	bf28      	it	cs
 800c4a8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c4ac:	1d03      	adds	r3, r0, #4
 800c4ae:	2b06      	cmp	r3, #6
 800c4b0:	d90f      	bls.n	800c4d2 <NVIC_EncodePriority+0x3a>
 800c4b2:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c4b4:	f04f 3eff 	mov.w	lr, #4294967295
 800c4b8:	fa0e f00c 	lsl.w	r0, lr, ip
 800c4bc:	ea21 0100 	bic.w	r1, r1, r0
 800c4c0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c4c2:	fa0e fe03 	lsl.w	lr, lr, r3
 800c4c6:	ea22 020e 	bic.w	r2, r2, lr
}
 800c4ca:	ea41 0002 	orr.w	r0, r1, r2
 800c4ce:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e7ee      	b.n	800c4b4 <NVIC_EncodePriority+0x1c>
	...

0800c4d8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c4d8:	4a07      	ldr	r2, [pc, #28]	@ (800c4f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800c4da:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c4dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800c4e0:	041b      	lsls	r3, r3, #16
 800c4e2:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c4e4:	0200      	lsls	r0, r0, #8
 800c4e6:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c4ea:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800c4ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c4f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800c4f4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800c4f6:	4770      	bx	lr
 800c4f8:	e000ed00 	.word	0xe000ed00

0800c4fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c4fc:	b510      	push	{r4, lr}
 800c4fe:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c500:	4b05      	ldr	r3, [pc, #20]	@ (800c518 <HAL_NVIC_SetPriority+0x1c>)
 800c502:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c504:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800c508:	f7ff ffc6 	bl	800c498 <NVIC_EncodePriority>
 800c50c:	4601      	mov	r1, r0
 800c50e:	4620      	mov	r0, r4
 800c510:	f7ff ffae 	bl	800c470 <__NVIC_SetPriority>
}
 800c514:	bd10      	pop	{r4, pc}
 800c516:	bf00      	nop
 800c518:	e000ed00 	.word	0xe000ed00

0800c51c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c51c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c51e:	f7ff ff99 	bl	800c454 <__NVIC_EnableIRQ>
}
 800c522:	bd08      	pop	{r3, pc}

0800c524 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800c524:	2800      	cmp	r0, #0
 800c526:	d038      	beq.n	800c59a <HAL_CRC_Init+0x76>
{
 800c528:	b510      	push	{r4, lr}
 800c52a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800c52c:	7f43      	ldrb	r3, [r0, #29]
 800c52e:	b31b      	cbz	r3, 800c578 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800c530:	2302      	movs	r3, #2
 800c532:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800c534:	7923      	ldrb	r3, [r4, #4]
 800c536:	bb1b      	cbnz	r3, 800c580 <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800c538:	6823      	ldr	r3, [r4, #0]
 800c53a:	4a19      	ldr	r2, [pc, #100]	@ (800c5a0 <HAL_CRC_Init+0x7c>)
 800c53c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800c53e:	6822      	ldr	r2, [r4, #0]
 800c540:	6893      	ldr	r3, [r2, #8]
 800c542:	f023 0318 	bic.w	r3, r3, #24
 800c546:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800c548:	7963      	ldrb	r3, [r4, #5]
 800c54a:	bb13      	cbnz	r3, 800c592 <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c54c:	6823      	ldr	r3, [r4, #0]
 800c54e:	f04f 32ff 	mov.w	r2, #4294967295
 800c552:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c554:	6822      	ldr	r2, [r4, #0]
 800c556:	6893      	ldr	r3, [r2, #8]
 800c558:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800c55c:	6961      	ldr	r1, [r4, #20]
 800c55e:	430b      	orrs	r3, r1
 800c560:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c562:	6822      	ldr	r2, [r4, #0]
 800c564:	6893      	ldr	r3, [r2, #8]
 800c566:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c56a:	69a1      	ldr	r1, [r4, #24]
 800c56c:	430b      	orrs	r3, r1
 800c56e:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c570:	2301      	movs	r3, #1
 800c572:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800c574:	2000      	movs	r0, #0
}
 800c576:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800c578:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800c57a:	f000 ffa7 	bl	800d4cc <HAL_CRC_MspInit>
 800c57e:	e7d7      	b.n	800c530 <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800c580:	68e2      	ldr	r2, [r4, #12]
 800c582:	68a1      	ldr	r1, [r4, #8]
 800c584:	4620      	mov	r0, r4
 800c586:	f000 f80d 	bl	800c5a4 <HAL_CRCEx_Polynomial_Set>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d0dc      	beq.n	800c548 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800c58e:	2001      	movs	r0, #1
 800c590:	e7f1      	b.n	800c576 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	6922      	ldr	r2, [r4, #16]
 800c596:	611a      	str	r2, [r3, #16]
 800c598:	e7dc      	b.n	800c554 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800c59a:	2001      	movs	r0, #1
}
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	04c11db7 	.word	0x04c11db7

0800c5a4 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800c5a4:	f011 0f01 	tst.w	r1, #1
 800c5a8:	d030      	beq.n	800c60c <HAL_CRCEx_Polynomial_Set+0x68>
{
 800c5aa:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c5ac:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c5ae:	461c      	mov	r4, r3
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	b134      	cbz	r4, 800c5c2 <HAL_CRCEx_Polynomial_Set+0x1e>
 800c5b4:	f003 0c1f 	and.w	ip, r3, #31
 800c5b8:	fa21 fc0c 	lsr.w	ip, r1, ip
 800c5bc:	f01c 0f01 	tst.w	ip, #1
 800c5c0:	d0f5      	beq.n	800c5ae <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
 800c5c2:	2a18      	cmp	r2, #24
 800c5c4:	d824      	bhi.n	800c610 <HAL_CRCEx_Polynomial_Set+0x6c>
 800c5c6:	e8df f002 	tbb	[pc, r2]
 800c5ca:	230f      	.short	0x230f
 800c5cc:	23232323 	.word	0x23232323
 800c5d0:	231d2323 	.word	0x231d2323
 800c5d4:	23232323 	.word	0x23232323
 800c5d8:	23192323 	.word	0x23192323
 800c5dc:	23232323 	.word	0x23232323
 800c5e0:	2323      	.short	0x2323
 800c5e2:	0d          	.byte	0x0d
 800c5e3:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800c5e4:	2b06      	cmp	r3, #6
 800c5e6:	d817      	bhi.n	800c618 <HAL_CRCEx_Polynomial_Set+0x74>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c5e8:	6803      	ldr	r3, [r0, #0]
 800c5ea:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c5ec:	6801      	ldr	r1, [r0, #0]
 800c5ee:	688b      	ldr	r3, [r1, #8]
 800c5f0:	f023 0318 	bic.w	r3, r3, #24
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	608b      	str	r3, [r1, #8]
 800c5f8:	2000      	movs	r0, #0
 800c5fa:	e00a      	b.n	800c612 <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_8B)
 800c5fc:	2b07      	cmp	r3, #7
 800c5fe:	d9f3      	bls.n	800c5e8 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800c600:	2001      	movs	r0, #1
 800c602:	e006      	b.n	800c612 <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_16B)
 800c604:	2b0f      	cmp	r3, #15
 800c606:	d9ef      	bls.n	800c5e8 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800c608:	2001      	movs	r0, #1
 800c60a:	e002      	b.n	800c612 <HAL_CRCEx_Polynomial_Set+0x6e>
    status =  HAL_ERROR;
 800c60c:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800c60e:	4770      	bx	lr
    switch (PolyLength)
 800c610:	2001      	movs	r0, #1
}
 800c612:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c616:	4770      	bx	lr
          status =   HAL_ERROR;
 800c618:	2001      	movs	r0, #1
 800c61a:	e7fa      	b.n	800c612 <HAL_CRCEx_Polynomial_Set+0x6e>

0800c61c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c61c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c61e:	4c06      	ldr	r4, [pc, #24]	@ (800c638 <FLASH_Program_DoubleWord+0x1c>)
 800c620:	6961      	ldr	r1, [r4, #20]
 800c622:	f041 0101 	orr.w	r1, r1, #1
 800c626:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c628:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c62a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800c62e:	6043      	str	r3, [r0, #4]
}
 800c630:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	40022000 	.word	0x40022000

0800c63c <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800c63c:	4a09      	ldr	r2, [pc, #36]	@ (800c664 <FLASH_Program_Fast+0x28>)
 800c63e:	6953      	ldr	r3, [r2, #20]
 800c640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c644:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c646:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c64a:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800c64c:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800c64e:	f851 2b04 	ldr.w	r2, [r1], #4
 800c652:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 800c656:	3b01      	subs	r3, #1
  } while (row_index != 0U);
 800c658:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800c65c:	d1f7      	bne.n	800c64e <FLASH_Program_Fast+0x12>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c65e:	f38c 8810 	msr	PRIMASK, ip

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800c662:	4770      	bx	lr
 800c664:	40022000 	.word	0x40022000

0800c668 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c668:	4b09      	ldr	r3, [pc, #36]	@ (800c690 <HAL_FLASH_Unlock+0x28>)
 800c66a:	695b      	ldr	r3, [r3, #20]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	db01      	blt.n	800c674 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800c670:	2000      	movs	r0, #0
 800c672:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c674:	4b06      	ldr	r3, [pc, #24]	@ (800c690 <HAL_FLASH_Unlock+0x28>)
 800c676:	4a07      	ldr	r2, [pc, #28]	@ (800c694 <HAL_FLASH_Unlock+0x2c>)
 800c678:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c67a:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800c67e:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	2b00      	cmp	r3, #0
 800c684:	db01      	blt.n	800c68a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800c686:	2000      	movs	r0, #0
 800c688:	4770      	bx	lr
      status = HAL_ERROR;
 800c68a:	2001      	movs	r0, #1
}
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	40022000 	.word	0x40022000
 800c694:	45670123 	.word	0x45670123

0800c698 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800c698:	4a03      	ldr	r2, [pc, #12]	@ (800c6a8 <HAL_FLASH_Lock+0x10>)
 800c69a:	6953      	ldr	r3, [r2, #20]
 800c69c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c6a0:	6153      	str	r3, [r2, #20]
}
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	40022000 	.word	0x40022000

0800c6ac <FLASH_WaitForLastOperation>:
{
 800c6ac:	b538      	push	{r3, r4, r5, lr}
 800c6ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800c6b0:	f7fe fd90 	bl	800b1d4 <HAL_GetTick>
 800c6b4:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c6b6:	4b14      	ldr	r3, [pc, #80]	@ (800c708 <FLASH_WaitForLastOperation+0x5c>)
 800c6b8:	691b      	ldr	r3, [r3, #16]
 800c6ba:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800c6be:	d009      	beq.n	800c6d4 <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 800c6c0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c6c4:	d0f7      	beq.n	800c6b6 <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800c6c6:	f7fe fd85 	bl	800b1d4 <HAL_GetTick>
 800c6ca:	1b40      	subs	r0, r0, r5
 800c6cc:	42a0      	cmp	r0, r4
 800c6ce:	d3f2      	bcc.n	800c6b6 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800c6d0:	2003      	movs	r0, #3
 800c6d2:	e015      	b.n	800c700 <FLASH_WaitForLastOperation+0x54>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800c6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800c708 <FLASH_WaitForLastOperation+0x5c>)
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	4a0c      	ldr	r2, [pc, #48]	@ (800c70c <FLASH_WaitForLastOperation+0x60>)
  if(error != 0u)
 800c6da:	4013      	ands	r3, r2
 800c6dc:	d109      	bne.n	800c6f2 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c6de:	4b0a      	ldr	r3, [pc, #40]	@ (800c708 <FLASH_WaitForLastOperation+0x5c>)
 800c6e0:	691b      	ldr	r3, [r3, #16]
 800c6e2:	f013 0f01 	tst.w	r3, #1
 800c6e6:	d00c      	beq.n	800c702 <FLASH_WaitForLastOperation+0x56>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c6e8:	4b07      	ldr	r3, [pc, #28]	@ (800c708 <FLASH_WaitForLastOperation+0x5c>)
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	e006      	b.n	800c700 <FLASH_WaitForLastOperation+0x54>
    pFlash.ErrorCode |= error;
 800c6f2:	4907      	ldr	r1, [pc, #28]	@ (800c710 <FLASH_WaitForLastOperation+0x64>)
 800c6f4:	684a      	ldr	r2, [r1, #4]
 800c6f6:	431a      	orrs	r2, r3
 800c6f8:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 800c6fa:	4a03      	ldr	r2, [pc, #12]	@ (800c708 <FLASH_WaitForLastOperation+0x5c>)
 800c6fc:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 800c6fe:	2001      	movs	r0, #1
}
 800c700:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800c702:	2000      	movs	r0, #0
 800c704:	e7fc      	b.n	800c700 <FLASH_WaitForLastOperation+0x54>
 800c706:	bf00      	nop
 800c708:	40022000 	.word	0x40022000
 800c70c:	0002c3fa 	.word	0x0002c3fa
 800c710:	2000000c 	.word	0x2000000c

0800c714 <HAL_FLASH_Program>:
{
 800c714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c718:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 800c71a:	4a28      	ldr	r2, [pc, #160]	@ (800c7bc <HAL_FLASH_Program+0xa8>)
 800c71c:	7812      	ldrb	r2, [r2, #0]
 800c71e:	2a01      	cmp	r2, #1
 800c720:	d049      	beq.n	800c7b6 <HAL_FLASH_Program+0xa2>
 800c722:	4604      	mov	r4, r0
 800c724:	460d      	mov	r5, r1
 800c726:	4698      	mov	r8, r3
 800c728:	4b24      	ldr	r3, [pc, #144]	@ (800c7bc <HAL_FLASH_Program+0xa8>)
 800c72a:	2201      	movs	r2, #1
 800c72c:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c72e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c732:	f7ff ffbb 	bl	800c6ac <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800c736:	4607      	mov	r7, r0
 800c738:	bb08      	cbnz	r0, 800c77e <HAL_FLASH_Program+0x6a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c73a:	4b20      	ldr	r3, [pc, #128]	@ (800c7bc <HAL_FLASH_Program+0xa8>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c740:	4b1f      	ldr	r3, [pc, #124]	@ (800c7c0 <HAL_FLASH_Program+0xac>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800c748:	d01f      	beq.n	800c78a <HAL_FLASH_Program+0x76>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c74a:	4a1d      	ldr	r2, [pc, #116]	@ (800c7c0 <HAL_FLASH_Program+0xac>)
 800c74c:	6813      	ldr	r3, [r2, #0]
 800c74e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c752:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c754:	4b19      	ldr	r3, [pc, #100]	@ (800c7bc <HAL_FLASH_Program+0xa8>)
 800c756:	2202      	movs	r2, #2
 800c758:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800c75a:	b1d4      	cbz	r4, 800c792 <HAL_FLASH_Program+0x7e>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800c75c:	1e63      	subs	r3, r4, #1
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d91e      	bls.n	800c7a0 <HAL_FLASH_Program+0x8c>
  uint32_t prog_bit = 0;
 800c762:	2400      	movs	r4, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c764:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c768:	f7ff ffa0 	bl	800c6ac <FLASH_WaitForLastOperation>
 800c76c:	4607      	mov	r7, r0
    if (prog_bit != 0U)
 800c76e:	b124      	cbz	r4, 800c77a <HAL_FLASH_Program+0x66>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800c770:	4a13      	ldr	r2, [pc, #76]	@ (800c7c0 <HAL_FLASH_Program+0xac>)
 800c772:	6953      	ldr	r3, [r2, #20]
 800c774:	ea23 0304 	bic.w	r3, r3, r4
 800c778:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800c77a:	f000 f847 	bl	800c80c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800c77e:	4b0f      	ldr	r3, [pc, #60]	@ (800c7bc <HAL_FLASH_Program+0xa8>)
 800c780:	2200      	movs	r2, #0
 800c782:	701a      	strb	r2, [r3, #0]
}
 800c784:	4638      	mov	r0, r7
 800c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c78a:	4b0c      	ldr	r3, [pc, #48]	@ (800c7bc <HAL_FLASH_Program+0xa8>)
 800c78c:	2200      	movs	r2, #0
 800c78e:	771a      	strb	r2, [r3, #28]
 800c790:	e7e3      	b.n	800c75a <HAL_FLASH_Program+0x46>
      FLASH_Program_DoubleWord(Address, Data);
 800c792:	4632      	mov	r2, r6
 800c794:	4643      	mov	r3, r8
 800c796:	4628      	mov	r0, r5
 800c798:	f7ff ff40 	bl	800c61c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800c79c:	2401      	movs	r4, #1
 800c79e:	e7e1      	b.n	800c764 <HAL_FLASH_Program+0x50>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	f7ff ff4a 	bl	800c63c <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800c7a8:	2c02      	cmp	r4, #2
 800c7aa:	d001      	beq.n	800c7b0 <HAL_FLASH_Program+0x9c>
  uint32_t prog_bit = 0;
 800c7ac:	2400      	movs	r4, #0
 800c7ae:	e7d9      	b.n	800c764 <HAL_FLASH_Program+0x50>
        prog_bit = FLASH_CR_FSTPG;
 800c7b0:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 800c7b4:	e7d6      	b.n	800c764 <HAL_FLASH_Program+0x50>
  __HAL_LOCK(&pFlash);
 800c7b6:	2702      	movs	r7, #2
 800c7b8:	e7e4      	b.n	800c784 <HAL_FLASH_Program+0x70>
 800c7ba:	bf00      	nop
 800c7bc:	2000000c 	.word	0x2000000c
 800c7c0:	40022000 	.word	0x40022000

0800c7c4 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800c7c4:	f010 0f01 	tst.w	r0, #1
 800c7c8:	d004      	beq.n	800c7d4 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800c7ca:	4a05      	ldr	r2, [pc, #20]	@ (800c7e0 <FLASH_MassErase+0x1c>)
 800c7cc:	6953      	ldr	r3, [r2, #20]
 800c7ce:	f043 0304 	orr.w	r3, r3, #4
 800c7d2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c7d4:	4a02      	ldr	r2, [pc, #8]	@ (800c7e0 <FLASH_MassErase+0x1c>)
 800c7d6:	6953      	ldr	r3, [r2, #20]
 800c7d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c7dc:	6153      	str	r3, [r2, #20]
}
 800c7de:	4770      	bx	lr
 800c7e0:	40022000 	.word	0x40022000

0800c7e4 <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800c7e4:	4b08      	ldr	r3, [pc, #32]	@ (800c808 <FLASH_PageErase+0x24>)
 800c7e6:	695a      	ldr	r2, [r3, #20]
 800c7e8:	f422 727e 	bic.w	r2, r2, #1016	@ 0x3f8
 800c7ec:	00c0      	lsls	r0, r0, #3
 800c7ee:	f400 60ff 	and.w	r0, r0, #2040	@ 0x7f8
 800c7f2:	4302      	orrs	r2, r0
 800c7f4:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c7f6:	695a      	ldr	r2, [r3, #20]
 800c7f8:	f042 0202 	orr.w	r2, r2, #2
 800c7fc:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c7fe:	695a      	ldr	r2, [r3, #20]
 800c800:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c804:	615a      	str	r2, [r3, #20]
}
 800c806:	4770      	bx	lr
 800c808:	40022000 	.word	0x40022000

0800c80c <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800c80c:	4b16      	ldr	r3, [pc, #88]	@ (800c868 <FLASH_FlushCaches+0x5c>)
 800c80e:	7f1a      	ldrb	r2, [r3, #28]
 800c810:	b2d3      	uxtb	r3, r2

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800c812:	2a01      	cmp	r2, #1
 800c814:	d001      	beq.n	800c81a <FLASH_FlushCaches+0xe>
 800c816:	2b03      	cmp	r3, #3
 800c818:	d110      	bne.n	800c83c <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c81a:	4a14      	ldr	r2, [pc, #80]	@ (800c86c <FLASH_FlushCaches+0x60>)
 800c81c:	6811      	ldr	r1, [r2, #0]
 800c81e:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 800c822:	6011      	str	r1, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c824:	6811      	ldr	r1, [r2, #0]
 800c826:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 800c82a:	6011      	str	r1, [r2, #0]
 800c82c:	6811      	ldr	r1, [r2, #0]
 800c82e:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 800c832:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c834:	6811      	ldr	r1, [r2, #0]
 800c836:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800c83a:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800c83c:	3b02      	subs	r3, #2
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	2b01      	cmp	r3, #1
 800c842:	d903      	bls.n	800c84c <FLASH_FlushCaches+0x40>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c844:	4b08      	ldr	r3, [pc, #32]	@ (800c868 <FLASH_FlushCaches+0x5c>)
 800c846:	2200      	movs	r2, #0
 800c848:	771a      	strb	r2, [r3, #28]
}
 800c84a:	4770      	bx	lr
    __HAL_FLASH_DATA_CACHE_RESET();
 800c84c:	4b07      	ldr	r3, [pc, #28]	@ (800c86c <FLASH_FlushCaches+0x60>)
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c854:	601a      	str	r2, [r3, #0]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c85c:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	e7ed      	b.n	800c844 <FLASH_FlushCaches+0x38>
 800c868:	2000000c 	.word	0x2000000c
 800c86c:	40022000 	.word	0x40022000

0800c870 <HAL_FLASHEx_Erase>:
{
 800c870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800c872:	4b39      	ldr	r3, [pc, #228]	@ (800c958 <HAL_FLASHEx_Erase+0xe8>)
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d06b      	beq.n	800c952 <HAL_FLASHEx_Erase+0xe2>
 800c87a:	4604      	mov	r4, r0
 800c87c:	460e      	mov	r6, r1
 800c87e:	4b36      	ldr	r3, [pc, #216]	@ (800c958 <HAL_FLASHEx_Erase+0xe8>)
 800c880:	2201      	movs	r2, #1
 800c882:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c884:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c888:	f7ff ff10 	bl	800c6ac <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800c88c:	4607      	mov	r7, r0
 800c88e:	2800      	cmp	r0, #0
 800c890:	d15a      	bne.n	800c948 <HAL_FLASHEx_Erase+0xd8>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c892:	4b31      	ldr	r3, [pc, #196]	@ (800c958 <HAL_FLASHEx_Erase+0xe8>)
 800c894:	2200      	movs	r2, #0
 800c896:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800c898:	4b30      	ldr	r3, [pc, #192]	@ (800c95c <HAL_FLASHEx_Erase+0xec>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800c8a0:	d02f      	beq.n	800c902 <HAL_FLASHEx_Erase+0x92>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c8a2:	4b2e      	ldr	r3, [pc, #184]	@ (800c95c <HAL_FLASHEx_Erase+0xec>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800c8aa:	d026      	beq.n	800c8fa <HAL_FLASHEx_Erase+0x8a>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800c8ac:	4a2b      	ldr	r2, [pc, #172]	@ (800c95c <HAL_FLASHEx_Erase+0xec>)
 800c8ae:	6813      	ldr	r3, [r2, #0]
 800c8b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c8b4:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800c8b6:	4b28      	ldr	r3, [pc, #160]	@ (800c958 <HAL_FLASHEx_Erase+0xe8>)
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d031      	beq.n	800c926 <HAL_FLASHEx_Erase+0xb6>
      *PageError = 0xFFFFFFFFU;
 800c8c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8c6:	6033      	str	r3, [r6, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c8c8:	68a5      	ldr	r5, [r4, #8]
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	68e2      	ldr	r2, [r4, #12]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	42ab      	cmp	r3, r5
 800c8d2:	d937      	bls.n	800c944 <HAL_FLASHEx_Erase+0xd4>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800c8d4:	6861      	ldr	r1, [r4, #4]
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	f7ff ff84 	bl	800c7e4 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c8dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c8e0:	f7ff fee4 	bl	800c6ac <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800c8e4:	4a1d      	ldr	r2, [pc, #116]	@ (800c95c <HAL_FLASHEx_Erase+0xec>)
 800c8e6:	6953      	ldr	r3, [r2, #20]
 800c8e8:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800c8ec:	f023 0302 	bic.w	r3, r3, #2
 800c8f0:	6153      	str	r3, [r2, #20]
        if (status != HAL_OK)
 800c8f2:	4607      	mov	r7, r0
 800c8f4:	bb28      	cbnz	r0, 800c942 <HAL_FLASHEx_Erase+0xd2>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c8f6:	3501      	adds	r5, #1
 800c8f8:	e7e7      	b.n	800c8ca <HAL_FLASHEx_Erase+0x5a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800c8fa:	4b17      	ldr	r3, [pc, #92]	@ (800c958 <HAL_FLASHEx_Erase+0xe8>)
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	771a      	strb	r2, [r3, #28]
 800c900:	e7dc      	b.n	800c8bc <HAL_FLASHEx_Erase+0x4c>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c902:	4b16      	ldr	r3, [pc, #88]	@ (800c95c <HAL_FLASHEx_Erase+0xec>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800c90a:	d008      	beq.n	800c91e <HAL_FLASHEx_Erase+0xae>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c90c:	4a13      	ldr	r2, [pc, #76]	@ (800c95c <HAL_FLASHEx_Erase+0xec>)
 800c90e:	6813      	ldr	r3, [r2, #0]
 800c910:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c914:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c916:	4b10      	ldr	r3, [pc, #64]	@ (800c958 <HAL_FLASHEx_Erase+0xe8>)
 800c918:	2202      	movs	r2, #2
 800c91a:	771a      	strb	r2, [r3, #28]
 800c91c:	e7ce      	b.n	800c8bc <HAL_FLASHEx_Erase+0x4c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c91e:	4b0e      	ldr	r3, [pc, #56]	@ (800c958 <HAL_FLASHEx_Erase+0xe8>)
 800c920:	2200      	movs	r2, #0
 800c922:	771a      	strb	r2, [r3, #28]
 800c924:	e7ca      	b.n	800c8bc <HAL_FLASHEx_Erase+0x4c>
      FLASH_MassErase(pEraseInit->Banks);
 800c926:	6860      	ldr	r0, [r4, #4]
 800c928:	f7ff ff4c 	bl	800c7c4 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c92c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800c930:	f7ff febc 	bl	800c6ac <FLASH_WaitForLastOperation>
 800c934:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800c936:	4a09      	ldr	r2, [pc, #36]	@ (800c95c <HAL_FLASHEx_Erase+0xec>)
 800c938:	6953      	ldr	r3, [r2, #20]
 800c93a:	f023 0304 	bic.w	r3, r3, #4
 800c93e:	6153      	str	r3, [r2, #20]
 800c940:	e000      	b.n	800c944 <HAL_FLASHEx_Erase+0xd4>
          *PageError = page_index;
 800c942:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 800c944:	f7ff ff62 	bl	800c80c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800c948:	4b03      	ldr	r3, [pc, #12]	@ (800c958 <HAL_FLASHEx_Erase+0xe8>)
 800c94a:	2200      	movs	r2, #0
 800c94c:	701a      	strb	r2, [r3, #0]
}
 800c94e:	4638      	mov	r0, r7
 800c950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800c952:	2702      	movs	r7, #2
 800c954:	e7fb      	b.n	800c94e <HAL_FLASHEx_Erase+0xde>
 800c956:	bf00      	nop
 800c958:	2000000c 	.word	0x2000000c
 800c95c:	40022000 	.word	0x40022000

0800c960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c962:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800c964:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c966:	e062      	b.n	800ca2e <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c968:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c96a:	005e      	lsls	r6, r3, #1
 800c96c:	2403      	movs	r4, #3
 800c96e:	40b4      	lsls	r4, r6
 800c970:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c974:	68cc      	ldr	r4, [r1, #12]
 800c976:	40b4      	lsls	r4, r6
 800c978:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800c97a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c97c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c97e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c982:	684c      	ldr	r4, [r1, #4]
 800c984:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800c988:	409c      	lsls	r4, r3
 800c98a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800c98c:	6044      	str	r4, [r0, #4]
 800c98e:	e05f      	b.n	800ca50 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c990:	08dd      	lsrs	r5, r3, #3
 800c992:	3508      	adds	r5, #8
 800c994:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c998:	f003 0c07 	and.w	ip, r3, #7
 800c99c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800c9a0:	f04f 0e0f 	mov.w	lr, #15
 800c9a4:	fa0e fe0c 	lsl.w	lr, lr, ip
 800c9a8:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c9ac:	690c      	ldr	r4, [r1, #16]
 800c9ae:	fa04 f40c 	lsl.w	r4, r4, ip
 800c9b2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800c9b6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800c9ba:	e060      	b.n	800ca7e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c9bc:	2402      	movs	r4, #2
 800c9be:	e000      	b.n	800c9c2 <HAL_GPIO_Init+0x62>
 800c9c0:	2400      	movs	r4, #0
 800c9c2:	fa04 f40e 	lsl.w	r4, r4, lr
 800c9c6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c9c8:	f10c 0c02 	add.w	ip, ip, #2
 800c9cc:	4d4c      	ldr	r5, [pc, #304]	@ (800cb00 <HAL_GPIO_Init+0x1a0>)
 800c9ce:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c9d2:	4c4c      	ldr	r4, [pc, #304]	@ (800cb04 <HAL_GPIO_Init+0x1a4>)
 800c9d4:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800c9d6:	43d4      	mvns	r4, r2
 800c9d8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c9dc:	684f      	ldr	r7, [r1, #4]
 800c9de:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800c9e2:	d001      	beq.n	800c9e8 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800c9e4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800c9e8:	4d46      	ldr	r5, [pc, #280]	@ (800cb04 <HAL_GPIO_Init+0x1a4>)
 800c9ea:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800c9ec:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800c9ee:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c9f2:	684f      	ldr	r7, [r1, #4]
 800c9f4:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 800c9f8:	d001      	beq.n	800c9fe <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800c9fa:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800c9fe:	4d41      	ldr	r5, [pc, #260]	@ (800cb04 <HAL_GPIO_Init+0x1a4>)
 800ca00:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800ca02:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800ca04:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ca08:	684f      	ldr	r7, [r1, #4]
 800ca0a:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800ca0e:	d001      	beq.n	800ca14 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 800ca10:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800ca14:	4d3b      	ldr	r5, [pc, #236]	@ (800cb04 <HAL_GPIO_Init+0x1a4>)
 800ca16:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800ca18:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800ca1a:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ca1c:	684e      	ldr	r6, [r1, #4]
 800ca1e:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800ca22:	d001      	beq.n	800ca28 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800ca24:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800ca28:	4a36      	ldr	r2, [pc, #216]	@ (800cb04 <HAL_GPIO_Init+0x1a4>)
 800ca2a:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800ca2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ca2e:	680a      	ldr	r2, [r1, #0]
 800ca30:	fa32 f403 	lsrs.w	r4, r2, r3
 800ca34:	d062      	beq.n	800cafc <HAL_GPIO_Init+0x19c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ca36:	f04f 0c01 	mov.w	ip, #1
 800ca3a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800ca3e:	ea1c 0202 	ands.w	r2, ip, r2
 800ca42:	d0f3      	beq.n	800ca2c <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ca44:	684c      	ldr	r4, [r1, #4]
 800ca46:	f004 0403 	and.w	r4, r4, #3
 800ca4a:	3c01      	subs	r4, #1
 800ca4c:	2c01      	cmp	r4, #1
 800ca4e:	d98b      	bls.n	800c968 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca50:	684c      	ldr	r4, [r1, #4]
 800ca52:	f004 0403 	and.w	r4, r4, #3
 800ca56:	2c03      	cmp	r4, #3
 800ca58:	d00c      	beq.n	800ca74 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800ca5a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ca5c:	005d      	lsls	r5, r3, #1
 800ca5e:	f04f 0c03 	mov.w	ip, #3
 800ca62:	fa0c fc05 	lsl.w	ip, ip, r5
 800ca66:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ca6a:	688c      	ldr	r4, [r1, #8]
 800ca6c:	40ac      	lsls	r4, r5
 800ca6e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800ca72:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ca74:	684c      	ldr	r4, [r1, #4]
 800ca76:	f004 0403 	and.w	r4, r4, #3
 800ca7a:	2c02      	cmp	r4, #2
 800ca7c:	d088      	beq.n	800c990 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800ca7e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ca80:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800ca84:	f04f 0c03 	mov.w	ip, #3
 800ca88:	fa0c fc0e 	lsl.w	ip, ip, lr
 800ca8c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ca90:	684c      	ldr	r4, [r1, #4]
 800ca92:	f004 0403 	and.w	r4, r4, #3
 800ca96:	fa04 f40e 	lsl.w	r4, r4, lr
 800ca9a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800ca9e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800caa0:	684c      	ldr	r4, [r1, #4]
 800caa2:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800caa6:	d0c1      	beq.n	800ca2c <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800caa8:	4c17      	ldr	r4, [pc, #92]	@ (800cb08 <HAL_GPIO_Init+0x1a8>)
 800caaa:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800caac:	f045 0501 	orr.w	r5, r5, #1
 800cab0:	6625      	str	r5, [r4, #96]	@ 0x60
 800cab2:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 800cab4:	f004 0401 	and.w	r4, r4, #1
 800cab8:	9401      	str	r4, [sp, #4]
 800caba:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800cabc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800cac0:	f10c 0502 	add.w	r5, ip, #2
 800cac4:	4c0e      	ldr	r4, [pc, #56]	@ (800cb00 <HAL_GPIO_Init+0x1a0>)
 800cac6:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800caca:	f003 0e03 	and.w	lr, r3, #3
 800cace:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800cad2:	240f      	movs	r4, #15
 800cad4:	fa04 f40e 	lsl.w	r4, r4, lr
 800cad8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cadc:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800cae0:	f43f af6e 	beq.w	800c9c0 <HAL_GPIO_Init+0x60>
 800cae4:	4c09      	ldr	r4, [pc, #36]	@ (800cb0c <HAL_GPIO_Init+0x1ac>)
 800cae6:	42a0      	cmp	r0, r4
 800cae8:	d006      	beq.n	800caf8 <HAL_GPIO_Init+0x198>
 800caea:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800caee:	42a0      	cmp	r0, r4
 800caf0:	f43f af64 	beq.w	800c9bc <HAL_GPIO_Init+0x5c>
 800caf4:	2407      	movs	r4, #7
 800caf6:	e764      	b.n	800c9c2 <HAL_GPIO_Init+0x62>
 800caf8:	2401      	movs	r4, #1
 800cafa:	e762      	b.n	800c9c2 <HAL_GPIO_Init+0x62>
  }
}
 800cafc:	b003      	add	sp, #12
 800cafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb00:	40010000 	.word	0x40010000
 800cb04:	40010400 	.word	0x40010400
 800cb08:	40021000 	.word	0x40021000
 800cb0c:	48000400 	.word	0x48000400

0800cb10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cb10:	b10a      	cbz	r2, 800cb16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cb12:	6181      	str	r1, [r0, #24]
 800cb14:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800cb16:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800cb18:	4770      	bx	lr

0800cb1a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cb1a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cb1c:	ea01 0203 	and.w	r2, r1, r3
 800cb20:	ea21 0103 	bic.w	r1, r1, r3
 800cb24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb28:	6181      	str	r1, [r0, #24]
}
 800cb2a:	4770      	bx	lr

0800cb2c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cb2c:	6803      	ldr	r3, [r0, #0]
 800cb2e:	699a      	ldr	r2, [r3, #24]
 800cb30:	f012 0f02 	tst.w	r2, #2
 800cb34:	d001      	beq.n	800cb3a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cb36:	2200      	movs	r2, #0
 800cb38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cb3a:	6803      	ldr	r3, [r0, #0]
 800cb3c:	699a      	ldr	r2, [r3, #24]
 800cb3e:	f012 0f01 	tst.w	r2, #1
 800cb42:	d103      	bne.n	800cb4c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cb44:	699a      	ldr	r2, [r3, #24]
 800cb46:	f042 0201 	orr.w	r2, r2, #1
 800cb4a:	619a      	str	r2, [r3, #24]
  }
}
 800cb4c:	4770      	bx	lr

0800cb4e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cb4e:	b410      	push	{r4}
 800cb50:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cb52:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800cb56:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cb5a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cb5c:	4321      	orrs	r1, r4
 800cb5e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800cb62:	6802      	ldr	r2, [r0, #0]
 800cb64:	6853      	ldr	r3, [r2, #4]
 800cb66:	0d64      	lsrs	r4, r4, #21
 800cb68:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800cb6c:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 800cb70:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 800cb74:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 800cb78:	f044 0403 	orr.w	r4, r4, #3
 800cb7c:	ea23 0304 	bic.w	r3, r3, r4
 800cb80:	430b      	orrs	r3, r1
 800cb82:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cb84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <I2C_IsErrorOccurred>:
{
 800cb8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb8e:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800cb90:	6803      	ldr	r3, [r0, #0]
 800cb92:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800cb94:	f016 0610 	ands.w	r6, r6, #16
 800cb98:	d07c      	beq.n	800cc94 <I2C_IsErrorOccurred+0x10a>
 800cb9a:	460d      	mov	r5, r1
 800cb9c:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cb9e:	2210      	movs	r2, #16
 800cba0:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800cba2:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800cba4:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	6998      	ldr	r0, [r3, #24]
 800cbaa:	f010 0f20 	tst.w	r0, #32
 800cbae:	d130      	bne.n	800cc12 <I2C_IsErrorOccurred+0x88>
 800cbb0:	bb7f      	cbnz	r7, 800cc12 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 800cbb2:	f1b5 3fff 	cmp.w	r5, #4294967295
 800cbb6:	d0f6      	beq.n	800cba6 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cbb8:	f7fe fb0c 	bl	800b1d4 <HAL_GetTick>
 800cbbc:	eba0 0008 	sub.w	r0, r0, r8
 800cbc0:	42a8      	cmp	r0, r5
 800cbc2:	d801      	bhi.n	800cbc8 <I2C_IsErrorOccurred+0x3e>
 800cbc4:	2d00      	cmp	r5, #0
 800cbc6:	d1ee      	bne.n	800cba6 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cbc8:	6821      	ldr	r1, [r4, #0]
 800cbca:	684b      	ldr	r3, [r1, #4]
 800cbcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 800cbd0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800cbd4:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cbd6:	6988      	ldr	r0, [r1, #24]
 800cbd8:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 800cbdc:	d002      	beq.n	800cbe4 <I2C_IsErrorOccurred+0x5a>
 800cbde:	b90b      	cbnz	r3, 800cbe4 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800cbe0:	2a20      	cmp	r2, #32
 800cbe2:	d10e      	bne.n	800cc02 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	f013 0f20 	tst.w	r3, #32
 800cbec:	d1db      	bne.n	800cba6 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cbee:	f7fe faf1 	bl	800b1d4 <HAL_GetTick>
 800cbf2:	eba0 0008 	sub.w	r0, r0, r8
 800cbf6:	2819      	cmp	r0, #25
 800cbf8:	d9f4      	bls.n	800cbe4 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800cbfa:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 800cbfe:	2701      	movs	r7, #1
              break;
 800cc00:	e7d1      	b.n	800cba6 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cc02:	684b      	ldr	r3, [r1, #4]
 800cc04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cc08:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800cc0a:	f7fe fae3 	bl	800b1d4 <HAL_GetTick>
 800cc0e:	4680      	mov	r8, r0
 800cc10:	e7e8      	b.n	800cbe4 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 800cc12:	b90f      	cbnz	r7, 800cc18 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc14:	2220      	movs	r2, #32
 800cc16:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800cc18:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800cc1c:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800cc1e:	6822      	ldr	r2, [r4, #0]
 800cc20:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cc22:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800cc26:	d005      	beq.n	800cc34 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800cc28:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cc2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc30:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800cc32:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800cc34:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800cc38:	d006      	beq.n	800cc48 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 800cc3a:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cc3e:	6822      	ldr	r2, [r4, #0]
 800cc40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cc44:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800cc46:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800cc48:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800cc4c:	d024      	beq.n	800cc98 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 800cc4e:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc58:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800cc5a:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	f7ff ff65 	bl	800cb2c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800cc62:	6822      	ldr	r2, [r4, #0]
 800cc64:	6853      	ldr	r3, [r2, #4]
 800cc66:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800cc6a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800cc6e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800cc72:	f023 0301 	bic.w	r3, r3, #1
 800cc76:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800cc78:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cc7a:	4333      	orrs	r3, r6
 800cc7c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800cc7e:	2320      	movs	r3, #32
 800cc80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc84:	2300      	movs	r3, #0
 800cc86:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800cc8a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800cc8e:	4628      	mov	r0, r5
 800cc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800cc94:	2500      	movs	r5, #0
 800cc96:	e7c2      	b.n	800cc1e <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 800cc98:	2d00      	cmp	r5, #0
 800cc9a:	d0f8      	beq.n	800cc8e <I2C_IsErrorOccurred+0x104>
 800cc9c:	e7de      	b.n	800cc5c <I2C_IsErrorOccurred+0xd2>

0800cc9e <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800cc9e:	b570      	push	{r4, r5, r6, lr}
 800cca0:	4604      	mov	r4, r0
 800cca2:	460d      	mov	r5, r1
 800cca4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	f013 0f02 	tst.w	r3, #2
 800ccae:	d122      	bne.n	800ccf6 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ccb0:	4632      	mov	r2, r6
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f7ff ff68 	bl	800cb8a <I2C_IsErrorOccurred>
 800ccba:	b9f0      	cbnz	r0, 800ccfa <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800ccbc:	f1b5 3fff 	cmp.w	r5, #4294967295
 800ccc0:	d0f1      	beq.n	800cca6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ccc2:	f7fe fa87 	bl	800b1d4 <HAL_GetTick>
 800ccc6:	1b80      	subs	r0, r0, r6
 800ccc8:	42a8      	cmp	r0, r5
 800ccca:	d801      	bhi.n	800ccd0 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800cccc:	2d00      	cmp	r5, #0
 800ccce:	d1ea      	bne.n	800cca6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800ccd0:	6823      	ldr	r3, [r4, #0]
 800ccd2:	699b      	ldr	r3, [r3, #24]
 800ccd4:	f013 0f02 	tst.w	r3, #2
 800ccd8:	d1e5      	bne.n	800cca6 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ccda:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ccdc:	f043 0320 	orr.w	r3, r3, #32
 800cce0:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cce2:	2320      	movs	r3, #32
 800cce4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800ccee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800ccf2:	2001      	movs	r0, #1
 800ccf4:	e000      	b.n	800ccf8 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 800ccf6:	2000      	movs	r0, #0
}
 800ccf8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800ccfa:	2001      	movs	r0, #1
 800ccfc:	e7fc      	b.n	800ccf8 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

0800ccfe <I2C_WaitOnFlagUntilTimeout>:
{
 800ccfe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd02:	4605      	mov	r5, r0
 800cd04:	4688      	mov	r8, r1
 800cd06:	4617      	mov	r7, r2
 800cd08:	461e      	mov	r6, r3
 800cd0a:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cd0e:	682b      	ldr	r3, [r5, #0]
 800cd10:	699c      	ldr	r4, [r3, #24]
 800cd12:	ea38 0404 	bics.w	r4, r8, r4
 800cd16:	bf0c      	ite	eq
 800cd18:	2301      	moveq	r3, #1
 800cd1a:	2300      	movne	r3, #0
 800cd1c:	42bb      	cmp	r3, r7
 800cd1e:	d127      	bne.n	800cd70 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd20:	464a      	mov	r2, r9
 800cd22:	4631      	mov	r1, r6
 800cd24:	4628      	mov	r0, r5
 800cd26:	f7ff ff30 	bl	800cb8a <I2C_IsErrorOccurred>
 800cd2a:	bb20      	cbnz	r0, 800cd76 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 800cd2c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cd30:	d0ed      	beq.n	800cd0e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd32:	f7fe fa4f 	bl	800b1d4 <HAL_GetTick>
 800cd36:	eba0 0009 	sub.w	r0, r0, r9
 800cd3a:	42b0      	cmp	r0, r6
 800cd3c:	d801      	bhi.n	800cd42 <I2C_WaitOnFlagUntilTimeout+0x44>
 800cd3e:	2e00      	cmp	r6, #0
 800cd40:	d1e5      	bne.n	800cd0e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800cd42:	682b      	ldr	r3, [r5, #0]
 800cd44:	699b      	ldr	r3, [r3, #24]
 800cd46:	ea38 0303 	bics.w	r3, r8, r3
 800cd4a:	bf0c      	ite	eq
 800cd4c:	2301      	moveq	r3, #1
 800cd4e:	2300      	movne	r3, #0
 800cd50:	42bb      	cmp	r3, r7
 800cd52:	d1dc      	bne.n	800cd0e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd54:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800cd56:	f043 0320 	orr.w	r3, r3, #32
 800cd5a:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800cd5c:	2320      	movs	r3, #32
 800cd5e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd62:	2300      	movs	r3, #0
 800cd64:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800cd68:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800cd6c:	2001      	movs	r0, #1
 800cd6e:	e000      	b.n	800cd72 <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 800cd70:	2000      	movs	r0, #0
}
 800cd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 800cd76:	2001      	movs	r0, #1
 800cd78:	e7fb      	b.n	800cd72 <I2C_WaitOnFlagUntilTimeout+0x74>

0800cd7a <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800cd7a:	b570      	push	{r4, r5, r6, lr}
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	460d      	mov	r5, r1
 800cd80:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd82:	e004      	b.n	800cd8e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	f013 0f20 	tst.w	r3, #32
 800cd8c:	d012      	beq.n	800cdb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd8e:	6823      	ldr	r3, [r4, #0]
 800cd90:	699b      	ldr	r3, [r3, #24]
 800cd92:	f013 0f20 	tst.w	r3, #32
 800cd96:	d11b      	bne.n	800cdd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cd98:	4632      	mov	r2, r6
 800cd9a:	4629      	mov	r1, r5
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f7ff fef4 	bl	800cb8a <I2C_IsErrorOccurred>
 800cda2:	b9b8      	cbnz	r0, 800cdd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cda4:	f7fe fa16 	bl	800b1d4 <HAL_GetTick>
 800cda8:	1b80      	subs	r0, r0, r6
 800cdaa:	42a8      	cmp	r0, r5
 800cdac:	d8ea      	bhi.n	800cd84 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800cdae:	2d00      	cmp	r5, #0
 800cdb0:	d1ed      	bne.n	800cd8e <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 800cdb2:	e7e7      	b.n	800cd84 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cdb4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800cdb6:	f043 0320 	orr.w	r3, r3, #32
 800cdba:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cdbc:	2320      	movs	r3, #32
 800cdbe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800cdc8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800cdcc:	2001      	movs	r0, #1
 800cdce:	e000      	b.n	800cdd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 800cdd0:	2000      	movs	r0, #0
}
 800cdd2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	e7fc      	b.n	800cdd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

0800cdd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdda:	4604      	mov	r4, r0
 800cddc:	460e      	mov	r6, r1
 800cdde:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800cde0:	2500      	movs	r5, #0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800cde2:	e018      	b.n	800ce16 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cde4:	2300      	movs	r3, #0
 800cde6:	6463      	str	r3, [r4, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800cde8:	f7fe f9f4 	bl	800b1d4 <HAL_GetTick>
 800cdec:	1bc0      	subs	r0, r0, r7
 800cdee:	42b0      	cmp	r0, r6
 800cdf0:	d800      	bhi.n	800cdf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 800cdf2:	b986      	cbnz	r6, 800ce16 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
 800cdf4:	b97d      	cbnz	r5, 800ce16 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	f013 0f04 	tst.w	r3, #4
 800cdfe:	d10a      	bne.n	800ce16 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ce00:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ce02:	f043 0320 	orr.w	r3, r3, #32
 800ce06:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ce08:	2320      	movs	r3, #32
 800ce0a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        status = HAL_ERROR;
 800ce14:	2501      	movs	r5, #1
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	699b      	ldr	r3, [r3, #24]
 800ce1a:	f013 0f04 	tst.w	r3, #4
 800ce1e:	d12e      	bne.n	800ce7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
 800ce20:	bb6d      	cbnz	r5, 800ce7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ce22:	463a      	mov	r2, r7
 800ce24:	4631      	mov	r1, r6
 800ce26:	4620      	mov	r0, r4
 800ce28:	f7ff feaf 	bl	800cb8a <I2C_IsErrorOccurred>
 800ce2c:	b100      	cbz	r0, 800ce30 <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
      status = HAL_ERROR;
 800ce2e:	2501      	movs	r5, #1
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800ce30:	6823      	ldr	r3, [r4, #0]
 800ce32:	699a      	ldr	r2, [r3, #24]
 800ce34:	f012 0f20 	tst.w	r2, #32
 800ce38:	d0d6      	beq.n	800cde8 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
 800ce3a:	2d00      	cmp	r5, #0
 800ce3c:	d1d4      	bne.n	800cde8 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800ce3e:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ce40:	699a      	ldr	r2, [r3, #24]
 800ce42:	f012 0f10 	tst.w	r2, #16
 800ce46:	d0cd      	beq.n	800cde4 <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce48:	2210      	movs	r2, #16
 800ce4a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800ce4c:	2304      	movs	r3, #4
 800ce4e:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	2220      	movs	r2, #32
 800ce54:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800ce56:	6821      	ldr	r1, [r4, #0]
 800ce58:	684b      	ldr	r3, [r1, #4]
 800ce5a:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800ce5e:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800ce62:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800ce66:	f023 0301 	bic.w	r3, r3, #1
 800ce6a:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800ce6c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce70:	2300      	movs	r3, #0
 800ce72:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800ce76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        status = HAL_ERROR;
 800ce7a:	2501      	movs	r5, #1
 800ce7c:	e7b4      	b.n	800cde8 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
}
 800ce7e:	4628      	mov	r0, r5
 800ce80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce82 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d05f      	beq.n	800cf46 <HAL_I2C_Init+0xc4>
{
 800ce86:	b510      	push	{r4, lr}
 800ce88:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ce8a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d048      	beq.n	800cf24 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ce92:	2324      	movs	r3, #36	@ 0x24
 800ce94:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800ce98:	6822      	ldr	r2, [r4, #0]
 800ce9a:	6813      	ldr	r3, [r2, #0]
 800ce9c:	f023 0301 	bic.w	r3, r3, #1
 800cea0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800cea2:	6863      	ldr	r3, [r4, #4]
 800cea4:	6822      	ldr	r2, [r4, #0]
 800cea6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800ceaa:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ceac:	6822      	ldr	r2, [r4, #0]
 800ceae:	6893      	ldr	r3, [r2, #8]
 800ceb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ceb4:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ceb6:	68e3      	ldr	r3, [r4, #12]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d038      	beq.n	800cf2e <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cebc:	68a3      	ldr	r3, [r4, #8]
 800cebe:	6822      	ldr	r2, [r4, #0]
 800cec0:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 800cec4:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cec6:	68e3      	ldr	r3, [r4, #12]
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d036      	beq.n	800cf3a <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800cecc:	6822      	ldr	r2, [r4, #0]
 800cece:	6853      	ldr	r3, [r2, #4]
 800ced0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ced4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ced6:	6822      	ldr	r2, [r4, #0]
 800ced8:	6853      	ldr	r3, [r2, #4]
 800ceda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800cede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cee2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cee4:	6822      	ldr	r2, [r4, #0]
 800cee6:	68d3      	ldr	r3, [r2, #12]
 800cee8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ceec:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ceee:	6923      	ldr	r3, [r4, #16]
 800cef0:	6962      	ldr	r2, [r4, #20]
 800cef2:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cef4:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cef6:	6822      	ldr	r2, [r4, #0]
 800cef8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800cefc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cefe:	69e3      	ldr	r3, [r4, #28]
 800cf00:	6a21      	ldr	r1, [r4, #32]
 800cf02:	6822      	ldr	r2, [r4, #0]
 800cf04:	430b      	orrs	r3, r1
 800cf06:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800cf08:	6822      	ldr	r2, [r4, #0]
 800cf0a:	6813      	ldr	r3, [r2, #0]
 800cf0c:	f043 0301 	orr.w	r3, r3, #1
 800cf10:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf12:	2000      	movs	r0, #0
 800cf14:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cf16:	2320      	movs	r3, #32
 800cf18:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf1c:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf1e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800cf22:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800cf24:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800cf28:	f000 fae6 	bl	800d4f8 <HAL_I2C_MspInit>
 800cf2c:	e7b1      	b.n	800ce92 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	6822      	ldr	r2, [r4, #0]
 800cf32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf36:	6093      	str	r3, [r2, #8]
 800cf38:	e7c5      	b.n	800cec6 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800cf3a:	6822      	ldr	r2, [r4, #0]
 800cf3c:	6853      	ldr	r3, [r2, #4]
 800cf3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cf42:	6053      	str	r3, [r2, #4]
 800cf44:	e7c7      	b.n	800ced6 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 800cf46:	2001      	movs	r0, #1
}
 800cf48:	4770      	bx	lr
	...

0800cf4c <HAL_I2C_Master_Transmit>:
{
 800cf4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf50:	b082      	sub	sp, #8
 800cf52:	460f      	mov	r7, r1
 800cf54:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf56:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800cf5a:	2920      	cmp	r1, #32
 800cf5c:	f040 80b7 	bne.w	800d0ce <HAL_I2C_Master_Transmit+0x182>
 800cf60:	4604      	mov	r4, r0
 800cf62:	4691      	mov	r9, r2
 800cf64:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 800cf66:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	f000 80b3 	beq.w	800d0d6 <HAL_I2C_Master_Transmit+0x18a>
 800cf70:	f04f 0a01 	mov.w	sl, #1
 800cf74:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800cf78:	f7fe f92c 	bl	800b1d4 <HAL_GetTick>
 800cf7c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cf7e:	9000      	str	r0, [sp, #0]
 800cf80:	2319      	movs	r3, #25
 800cf82:	4652      	mov	r2, sl
 800cf84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f7ff feb8 	bl	800ccfe <I2C_WaitOnFlagUntilTimeout>
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	f040 80a3 	bne.w	800d0da <HAL_I2C_Master_Transmit+0x18e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cf94:	2321      	movs	r3, #33	@ 0x21
 800cf96:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cf9a:	2310      	movs	r3, #16
 800cf9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800cfa4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800cfa8:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800cfac:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	2bff      	cmp	r3, #255	@ 0xff
 800cfb4:	d91e      	bls.n	800cff4 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfb6:	23ff      	movs	r3, #255	@ 0xff
 800cfb8:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800cfba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (hi2c->XferSize > 0U)
 800cfbe:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800cfc0:	b1ea      	cbz	r2, 800cffe <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cfc2:	6822      	ldr	r2, [r4, #0]
 800cfc4:	f899 1000 	ldrb.w	r1, [r9]
 800cfc8:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800cfca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800cfcc:	3201      	adds	r2, #1
 800cfce:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800cfd0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800cfd2:	b292      	uxth	r2, r2
 800cfd4:	3a01      	subs	r2, #1
 800cfd6:	b292      	uxth	r2, r2
 800cfd8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800cfda:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800cfdc:	3a01      	subs	r2, #1
 800cfde:	b292      	uxth	r2, r2
 800cfe0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800cfe2:	3201      	adds	r2, #1
 800cfe4:	4941      	ldr	r1, [pc, #260]	@ (800d0ec <HAL_I2C_Master_Transmit+0x1a0>)
 800cfe6:	9100      	str	r1, [sp, #0]
 800cfe8:	b2d2      	uxtb	r2, r2
 800cfea:	4639      	mov	r1, r7
 800cfec:	4620      	mov	r0, r4
 800cfee:	f7ff fdae 	bl	800cb4e <I2C_TransferConfig>
 800cff2:	e018      	b.n	800d026 <HAL_I2C_Master_Transmit+0xda>
      hi2c->XferSize = hi2c->XferCount;
 800cff4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800cff6:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800cff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800cffc:	e7df      	b.n	800cfbe <HAL_I2C_Master_Transmit+0x72>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800cffe:	493b      	ldr	r1, [pc, #236]	@ (800d0ec <HAL_I2C_Master_Transmit+0x1a0>)
 800d000:	9100      	str	r1, [sp, #0]
 800d002:	b2d2      	uxtb	r2, r2
 800d004:	4639      	mov	r1, r7
 800d006:	4620      	mov	r0, r4
 800d008:	f7ff fda1 	bl	800cb4e <I2C_TransferConfig>
 800d00c:	e00b      	b.n	800d026 <HAL_I2C_Master_Transmit+0xda>
          hi2c->XferSize = hi2c->XferCount;
 800d00e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d010:	b292      	uxth	r2, r2
 800d012:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d014:	2300      	movs	r3, #0
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d01c:	b2d2      	uxtb	r2, r2
 800d01e:	4639      	mov	r1, r7
 800d020:	4620      	mov	r0, r4
 800d022:	f7ff fd94 	bl	800cb4e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d026:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d028:	b29b      	uxth	r3, r3
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d033      	beq.n	800d096 <HAL_I2C_Master_Transmit+0x14a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d02e:	462a      	mov	r2, r5
 800d030:	4631      	mov	r1, r6
 800d032:	4620      	mov	r0, r4
 800d034:	f7ff fe33 	bl	800cc9e <I2C_WaitOnTXISFlagUntilTimeout>
 800d038:	2800      	cmp	r0, #0
 800d03a:	d150      	bne.n	800d0de <HAL_I2C_Master_Transmit+0x192>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d03c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	7812      	ldrb	r2, [r2, #0]
 800d042:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800d044:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d046:	3301      	adds	r3, #1
 800d048:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800d04a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	3b01      	subs	r3, #1
 800d050:	b29b      	uxth	r3, r3
 800d052:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800d054:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800d056:	3b01      	subs	r3, #1
 800d058:	b29b      	uxth	r3, r3
 800d05a:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d05c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d05e:	b292      	uxth	r2, r2
 800d060:	2a00      	cmp	r2, #0
 800d062:	d0e0      	beq.n	800d026 <HAL_I2C_Master_Transmit+0xda>
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1de      	bne.n	800d026 <HAL_I2C_Master_Transmit+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d068:	9500      	str	r5, [sp, #0]
 800d06a:	4633      	mov	r3, r6
 800d06c:	2200      	movs	r2, #0
 800d06e:	2180      	movs	r1, #128	@ 0x80
 800d070:	4620      	mov	r0, r4
 800d072:	f7ff fe44 	bl	800ccfe <I2C_WaitOnFlagUntilTimeout>
 800d076:	bba0      	cbnz	r0, 800d0e2 <HAL_I2C_Master_Transmit+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d078:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d07a:	b29b      	uxth	r3, r3
 800d07c:	2bff      	cmp	r3, #255	@ 0xff
 800d07e:	d9c6      	bls.n	800d00e <HAL_I2C_Master_Transmit+0xc2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d080:	22ff      	movs	r2, #255	@ 0xff
 800d082:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d084:	2300      	movs	r3, #0
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d08c:	4639      	mov	r1, r7
 800d08e:	4620      	mov	r0, r4
 800d090:	f7ff fd5d 	bl	800cb4e <I2C_TransferConfig>
 800d094:	e7c7      	b.n	800d026 <HAL_I2C_Master_Transmit+0xda>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d096:	462a      	mov	r2, r5
 800d098:	4631      	mov	r1, r6
 800d09a:	4620      	mov	r0, r4
 800d09c:	f7ff fe6d 	bl	800cd7a <I2C_WaitOnSTOPFlagUntilTimeout>
 800d0a0:	bb08      	cbnz	r0, 800d0e6 <HAL_I2C_Master_Transmit+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0a2:	6823      	ldr	r3, [r4, #0]
 800d0a4:	2220      	movs	r2, #32
 800d0a6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d0a8:	6821      	ldr	r1, [r4, #0]
 800d0aa:	684b      	ldr	r3, [r1, #4]
 800d0ac:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d0b0:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d0b4:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d0b8:	f023 0301 	bic.w	r3, r3, #1
 800d0bc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d0be:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800d0c8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800d0cc:	e000      	b.n	800d0d0 <HAL_I2C_Master_Transmit+0x184>
    return HAL_BUSY;
 800d0ce:	2002      	movs	r0, #2
}
 800d0d0:	b002      	add	sp, #8
 800d0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800d0d6:	2002      	movs	r0, #2
 800d0d8:	e7fa      	b.n	800d0d0 <HAL_I2C_Master_Transmit+0x184>
      return HAL_ERROR;
 800d0da:	2001      	movs	r0, #1
 800d0dc:	e7f8      	b.n	800d0d0 <HAL_I2C_Master_Transmit+0x184>
        return HAL_ERROR;
 800d0de:	2001      	movs	r0, #1
 800d0e0:	e7f6      	b.n	800d0d0 <HAL_I2C_Master_Transmit+0x184>
          return HAL_ERROR;
 800d0e2:	2001      	movs	r0, #1
 800d0e4:	e7f4      	b.n	800d0d0 <HAL_I2C_Master_Transmit+0x184>
      return HAL_ERROR;
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	e7f2      	b.n	800d0d0 <HAL_I2C_Master_Transmit+0x184>
 800d0ea:	bf00      	nop
 800d0ec:	80002000 	.word	0x80002000

0800d0f0 <HAL_I2C_Master_Receive>:
{
 800d0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	460f      	mov	r7, r1
 800d0f8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800d0fa:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800d0fe:	2920      	cmp	r1, #32
 800d100:	f040 80a3 	bne.w	800d24a <HAL_I2C_Master_Receive+0x15a>
 800d104:	4604      	mov	r4, r0
 800d106:	4691      	mov	r9, r2
 800d108:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 800d10a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d10e:	2b01      	cmp	r3, #1
 800d110:	f000 809f 	beq.w	800d252 <HAL_I2C_Master_Receive+0x162>
 800d114:	f04f 0a01 	mov.w	sl, #1
 800d118:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800d11c:	f7fe f85a 	bl	800b1d4 <HAL_GetTick>
 800d120:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d122:	9000      	str	r0, [sp, #0]
 800d124:	2319      	movs	r3, #25
 800d126:	4652      	mov	r2, sl
 800d128:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d12c:	4620      	mov	r0, r4
 800d12e:	f7ff fde6 	bl	800ccfe <I2C_WaitOnFlagUntilTimeout>
 800d132:	2800      	cmp	r0, #0
 800d134:	f040 808f 	bne.w	800d256 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d138:	2322      	movs	r3, #34	@ 0x22
 800d13a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d13e:	2310      	movs	r3, #16
 800d140:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d144:	2300      	movs	r3, #0
 800d146:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800d148:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800d14c:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800d150:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d152:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d154:	b29b      	uxth	r3, r3
 800d156:	2bff      	cmp	r3, #255	@ 0xff
 800d158:	d90b      	bls.n	800d172 <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = 1U;
 800d15a:	4652      	mov	r2, sl
 800d15c:	f8a4 a028 	strh.w	sl, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d160:	4b41      	ldr	r3, [pc, #260]	@ (800d268 <HAL_I2C_Master_Receive+0x178>)
 800d162:	9300      	str	r3, [sp, #0]
 800d164:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d168:	4639      	mov	r1, r7
 800d16a:	4620      	mov	r0, r4
 800d16c:	f7ff fcef 	bl	800cb4e <I2C_TransferConfig>
 800d170:	e018      	b.n	800d1a4 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800d172:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d174:	b292      	uxth	r2, r2
 800d176:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d178:	4b3b      	ldr	r3, [pc, #236]	@ (800d268 <HAL_I2C_Master_Receive+0x178>)
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d180:	b2d2      	uxtb	r2, r2
 800d182:	4639      	mov	r1, r7
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff fce2 	bl	800cb4e <I2C_TransferConfig>
 800d18a:	e00b      	b.n	800d1a4 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800d18c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800d18e:	b292      	uxth	r2, r2
 800d190:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d192:	2300      	movs	r3, #0
 800d194:	9300      	str	r3, [sp, #0]
 800d196:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d19a:	b2d2      	uxtb	r2, r2
 800d19c:	4639      	mov	r1, r7
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f7ff fcd5 	bl	800cb4e <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d1a4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d032      	beq.n	800d212 <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d1ac:	462a      	mov	r2, r5
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	f7ff fe11 	bl	800cdd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d14f      	bne.n	800d25a <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d1be:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d1c0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800d1c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800d1c8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800d1ca:	3a01      	subs	r2, #1
 800d1cc:	b292      	uxth	r2, r2
 800d1ce:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800d1d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d1da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d0e0      	beq.n	800d1a4 <HAL_I2C_Master_Receive+0xb4>
 800d1e2:	2a00      	cmp	r2, #0
 800d1e4:	d1de      	bne.n	800d1a4 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d1e6:	9500      	str	r5, [sp, #0]
 800d1e8:	4633      	mov	r3, r6
 800d1ea:	2180      	movs	r1, #128	@ 0x80
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f7ff fd86 	bl	800ccfe <I2C_WaitOnFlagUntilTimeout>
 800d1f2:	bba0      	cbnz	r0, 800d25e <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	2bff      	cmp	r3, #255	@ 0xff
 800d1fa:	d9c7      	bls.n	800d18c <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1fc:	22ff      	movs	r2, #255	@ 0xff
 800d1fe:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d200:	2300      	movs	r3, #0
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d208:	4639      	mov	r1, r7
 800d20a:	4620      	mov	r0, r4
 800d20c:	f7ff fc9f 	bl	800cb4e <I2C_TransferConfig>
 800d210:	e7c8      	b.n	800d1a4 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d212:	462a      	mov	r2, r5
 800d214:	4631      	mov	r1, r6
 800d216:	4620      	mov	r0, r4
 800d218:	f7ff fdaf 	bl	800cd7a <I2C_WaitOnSTOPFlagUntilTimeout>
 800d21c:	bb08      	cbnz	r0, 800d262 <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	2220      	movs	r2, #32
 800d222:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800d224:	6821      	ldr	r1, [r4, #0]
 800d226:	684b      	ldr	r3, [r1, #4]
 800d228:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800d22c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800d230:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800d234:	f023 0301 	bic.w	r3, r3, #1
 800d238:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800d23a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d23e:	2300      	movs	r3, #0
 800d240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800d244:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800d248:	e000      	b.n	800d24c <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 800d24a:	2002      	movs	r0, #2
}
 800d24c:	b002      	add	sp, #8
 800d24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800d252:	2002      	movs	r0, #2
 800d254:	e7fa      	b.n	800d24c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800d256:	2001      	movs	r0, #1
 800d258:	e7f8      	b.n	800d24c <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 800d25a:	2001      	movs	r0, #1
 800d25c:	e7f6      	b.n	800d24c <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 800d25e:	2001      	movs	r0, #1
 800d260:	e7f4      	b.n	800d24c <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800d262:	2001      	movs	r0, #1
 800d264:	e7f2      	b.n	800d24c <HAL_I2C_Master_Receive+0x15c>
 800d266:	bf00      	nop
 800d268:	80002400 	.word	0x80002400

0800d26c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d26c:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d26e:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800d272:	2a20      	cmp	r2, #32
 800d274:	d123      	bne.n	800d2be <HAL_I2CEx_ConfigAnalogFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d276:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800d27a:	2a01      	cmp	r2, #1
 800d27c:	d021      	beq.n	800d2c2 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800d27e:	2201      	movs	r2, #1
 800d280:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d284:	2224      	movs	r2, #36	@ 0x24
 800d286:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d28a:	6800      	ldr	r0, [r0, #0]
 800d28c:	6802      	ldr	r2, [r0, #0]
 800d28e:	f022 0201 	bic.w	r2, r2, #1
 800d292:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d294:	6818      	ldr	r0, [r3, #0]
 800d296:	6802      	ldr	r2, [r0, #0]
 800d298:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d29c:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d29e:	6818      	ldr	r0, [r3, #0]
 800d2a0:	6802      	ldr	r2, [r0, #0]
 800d2a2:	430a      	orrs	r2, r1
 800d2a4:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d2a6:	6819      	ldr	r1, [r3, #0]
 800d2a8:	680a      	ldr	r2, [r1, #0]
 800d2aa:	f042 0201 	orr.w	r2, r2, #1
 800d2ae:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d2b0:	2220      	movs	r2, #32
 800d2b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2b6:	2000      	movs	r0, #0
 800d2b8:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800d2bc:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800d2be:	2002      	movs	r0, #2
 800d2c0:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800d2c2:	2002      	movs	r0, #2
  }
}
 800d2c4:	4770      	bx	lr

0800d2c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d2c6:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d2c8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800d2cc:	2a20      	cmp	r2, #32
 800d2ce:	d121      	bne.n	800d314 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d2d0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800d2d4:	2a01      	cmp	r2, #1
 800d2d6:	d01f      	beq.n	800d318 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 800d2d8:	2201      	movs	r2, #1
 800d2da:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d2de:	2224      	movs	r2, #36	@ 0x24
 800d2e0:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d2e4:	6800      	ldr	r0, [r0, #0]
 800d2e6:	6802      	ldr	r2, [r0, #0]
 800d2e8:	f022 0201 	bic.w	r2, r2, #1
 800d2ec:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d2ee:	6818      	ldr	r0, [r3, #0]
 800d2f0:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d2f2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d2f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d2fa:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d2fc:	6819      	ldr	r1, [r3, #0]
 800d2fe:	680a      	ldr	r2, [r1, #0]
 800d300:	f042 0201 	orr.w	r2, r2, #1
 800d304:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d306:	2220      	movs	r2, #32
 800d308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d30c:	2000      	movs	r0, #0
 800d30e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800d312:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800d314:	2002      	movs	r0, #2
 800d316:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800d318:	2002      	movs	r0, #2
  }
}
 800d31a:	4770      	bx	lr

0800d31c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d31c:	b500      	push	{lr}
 800d31e:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d320:	4b0d      	ldr	r3, [pc, #52]	@ (800d358 <HAL_MspInit+0x3c>)
 800d322:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d324:	f042 0201 	orr.w	r2, r2, #1
 800d328:	661a      	str	r2, [r3, #96]	@ 0x60
 800d32a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d32c:	f002 0201 	and.w	r2, r2, #1
 800d330:	9200      	str	r2, [sp, #0]
 800d332:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d334:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d336:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800d33a:	659a      	str	r2, [r3, #88]	@ 0x58
 800d33c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d33e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d346:	2200      	movs	r2, #0
 800d348:	210f      	movs	r1, #15
 800d34a:	f06f 0001 	mvn.w	r0, #1
 800d34e:	f7ff f8d5 	bl	800c4fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d352:	b003      	add	sp, #12
 800d354:	f85d fb04 	ldr.w	pc, [sp], #4
 800d358:	40021000 	.word	0x40021000

0800d35c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800d35c:	b570      	push	{r4, r5, r6, lr}
 800d35e:	b09e      	sub	sp, #120	@ 0x78
 800d360:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d362:	2100      	movs	r1, #0
 800d364:	9119      	str	r1, [sp, #100]	@ 0x64
 800d366:	911a      	str	r1, [sp, #104]	@ 0x68
 800d368:	911b      	str	r1, [sp, #108]	@ 0x6c
 800d36a:	911c      	str	r1, [sp, #112]	@ 0x70
 800d36c:	911d      	str	r1, [sp, #116]	@ 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d36e:	2254      	movs	r2, #84	@ 0x54
 800d370:	a804      	add	r0, sp, #16
 800d372:	f002 fab2 	bl	800f8da <memset>
  if(hadc->Instance==ADC1)
 800d376:	6822      	ldr	r2, [r4, #0]
 800d378:	4b27      	ldr	r3, [pc, #156]	@ (800d418 <HAL_ADC_MspInit+0xbc>)
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d001      	beq.n	800d382 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800d37e:	b01e      	add	sp, #120	@ 0x78
 800d380:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800d382:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d386:	9304      	str	r3, [sp, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800d388:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d38c:	9316      	str	r3, [sp, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800d38e:	2302      	movs	r3, #2
 800d390:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800d392:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800d394:	2208      	movs	r2, #8
 800d396:	9207      	str	r2, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800d398:	2207      	movs	r2, #7
 800d39a:	9208      	str	r2, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800d39c:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800d39e:	930a      	str	r3, [sp, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800d3a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d3a4:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d3a6:	a804      	add	r0, sp, #16
 800d3a8:	f000 ff16 	bl	800e1d8 <HAL_RCCEx_PeriphCLKConfig>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d130      	bne.n	800d412 <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_ADC_CLK_ENABLE();
 800d3b0:	4b1a      	ldr	r3, [pc, #104]	@ (800d41c <HAL_ADC_MspInit+0xc0>)
 800d3b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d3b8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d3ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3bc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800d3c0:	9201      	str	r2, [sp, #4]
 800d3c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3c6:	f042 0201 	orr.w	r2, r2, #1
 800d3ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d3cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3ce:	f002 0201 	and.w	r2, r2, #1
 800d3d2:	9202      	str	r2, [sp, #8]
 800d3d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d3d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3d8:	f042 0202 	orr.w	r2, r2, #2
 800d3dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d3de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3e0:	f003 0302 	and.w	r3, r3, #2
 800d3e4:	9303      	str	r3, [sp, #12]
 800d3e6:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC4_Pin|ADC5_Pin
 800d3e8:	237b      	movs	r3, #123	@ 0x7b
 800d3ea:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800d3ec:	260b      	movs	r6, #11
 800d3ee:	961a      	str	r6, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3f0:	2500      	movs	r5, #0
 800d3f2:	951b      	str	r5, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3f4:	ac19      	add	r4, sp, #100	@ 0x64
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d3fc:	f7ff fab0 	bl	800c960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC7_Pin;
 800d400:	2301      	movs	r3, #1
 800d402:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800d404:	961a      	str	r6, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d406:	951b      	str	r5, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(ADC7_GPIO_Port, &GPIO_InitStruct);
 800d408:	4621      	mov	r1, r4
 800d40a:	4805      	ldr	r0, [pc, #20]	@ (800d420 <HAL_ADC_MspInit+0xc4>)
 800d40c:	f7ff faa8 	bl	800c960 <HAL_GPIO_Init>
}
 800d410:	e7b5      	b.n	800d37e <HAL_ADC_MspInit+0x22>
      Error_Handler();
 800d412:	f7fc fe39 	bl	800a088 <Error_Handler>
 800d416:	e7cb      	b.n	800d3b0 <HAL_ADC_MspInit+0x54>
 800d418:	50040000 	.word	0x50040000
 800d41c:	40021000 	.word	0x40021000
 800d420:	48000400 	.word	0x48000400

0800d424 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800d424:	b500      	push	{lr}
 800d426:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d428:	2300      	movs	r3, #0
 800d42a:	9303      	str	r3, [sp, #12]
 800d42c:	9304      	str	r3, [sp, #16]
 800d42e:	9305      	str	r3, [sp, #20]
 800d430:	9306      	str	r3, [sp, #24]
 800d432:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 800d434:	6802      	ldr	r2, [r0, #0]
 800d436:	4b24      	ldr	r3, [pc, #144]	@ (800d4c8 <HAL_CAN_MspInit+0xa4>)
 800d438:	429a      	cmp	r2, r3
 800d43a:	d002      	beq.n	800d442 <HAL_CAN_MspInit+0x1e>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800d43c:	b009      	add	sp, #36	@ 0x24
 800d43e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800d442:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 800d446:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d448:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800d44c:	659a      	str	r2, [r3, #88]	@ 0x58
 800d44e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d450:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 800d454:	9201      	str	r2, [sp, #4]
 800d456:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d458:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d45a:	f042 0201 	orr.w	r2, r2, #1
 800d45e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800d460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d462:	f003 0301 	and.w	r3, r3, #1
 800d466:	9302      	str	r3, [sp, #8]
 800d468:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d46a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d46e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d470:	2302      	movs	r3, #2
 800d472:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d474:	2303      	movs	r3, #3
 800d476:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800d478:	2309      	movs	r3, #9
 800d47a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d47c:	a903      	add	r1, sp, #12
 800d47e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d482:	f7ff fa6d 	bl	800c960 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800d486:	2200      	movs	r2, #0
 800d488:	2105      	movs	r1, #5
 800d48a:	2014      	movs	r0, #20
 800d48c:	f7ff f836 	bl	800c4fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800d490:	2014      	movs	r0, #20
 800d492:	f7ff f843 	bl	800c51c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800d496:	2200      	movs	r2, #0
 800d498:	2105      	movs	r1, #5
 800d49a:	2015      	movs	r0, #21
 800d49c:	f7ff f82e 	bl	800c4fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800d4a0:	2015      	movs	r0, #21
 800d4a2:	f7ff f83b 	bl	800c51c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2106      	movs	r1, #6
 800d4aa:	2013      	movs	r0, #19
 800d4ac:	f7ff f826 	bl	800c4fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800d4b0:	2013      	movs	r0, #19
 800d4b2:	f7ff f833 	bl	800c51c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 6, 0);
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	2106      	movs	r1, #6
 800d4ba:	2016      	movs	r0, #22
 800d4bc:	f7ff f81e 	bl	800c4fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800d4c0:	2016      	movs	r0, #22
 800d4c2:	f7ff f82b 	bl	800c51c <HAL_NVIC_EnableIRQ>
}
 800d4c6:	e7b9      	b.n	800d43c <HAL_CAN_MspInit+0x18>
 800d4c8:	40006400 	.word	0x40006400

0800d4cc <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800d4cc:	6802      	ldr	r2, [r0, #0]
 800d4ce:	4b09      	ldr	r3, [pc, #36]	@ (800d4f4 <HAL_CRC_MspInit+0x28>)
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d000      	beq.n	800d4d6 <HAL_CRC_MspInit+0xa>
 800d4d4:	4770      	bx	lr
{
 800d4d6:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800d4d8:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800d4dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d4e2:	649a      	str	r2, [r3, #72]	@ 0x48
 800d4e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d4e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d4ea:	9301      	str	r3, [sp, #4]
 800d4ec:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800d4ee:	b002      	add	sp, #8
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	40023000 	.word	0x40023000

0800d4f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800d4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4fc:	b0a1      	sub	sp, #132	@ 0x84
 800d4fe:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d500:	2100      	movs	r1, #0
 800d502:	911b      	str	r1, [sp, #108]	@ 0x6c
 800d504:	911c      	str	r1, [sp, #112]	@ 0x70
 800d506:	911d      	str	r1, [sp, #116]	@ 0x74
 800d508:	911e      	str	r1, [sp, #120]	@ 0x78
 800d50a:	911f      	str	r1, [sp, #124]	@ 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d50c:	2254      	movs	r2, #84	@ 0x54
 800d50e:	a806      	add	r0, sp, #24
 800d510:	f002 f9e3 	bl	800f8da <memset>
  if(hi2c->Instance==I2C1)
 800d514:	6823      	ldr	r3, [r4, #0]
 800d516:	4a42      	ldr	r2, [pc, #264]	@ (800d620 <HAL_I2C_MspInit+0x128>)
 800d518:	4293      	cmp	r3, r2
 800d51a:	d005      	beq.n	800d528 <HAL_I2C_MspInit+0x30>
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* USER CODE BEGIN I2C1_MspInit 1 */

    /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800d51c:	4a41      	ldr	r2, [pc, #260]	@ (800d624 <HAL_I2C_MspInit+0x12c>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d032      	beq.n	800d588 <HAL_I2C_MspInit+0x90>
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800d522:	b021      	add	sp, #132	@ 0x84
 800d524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800d528:	2340      	movs	r3, #64	@ 0x40
 800d52a:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800d52c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d530:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d532:	a806      	add	r0, sp, #24
 800d534:	f000 fe50 	bl	800e1d8 <HAL_RCCEx_PeriphCLKConfig>
 800d538:	bb18      	cbnz	r0, 800d582 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d53a:	4c3b      	ldr	r4, [pc, #236]	@ (800d628 <HAL_I2C_MspInit+0x130>)
 800d53c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d53e:	f043 0301 	orr.w	r3, r3, #1
 800d542:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d544:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d546:	f003 0301 	and.w	r3, r3, #1
 800d54a:	9301      	str	r3, [sp, #4]
 800d54c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d54e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800d552:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d554:	2312      	movs	r3, #18
 800d556:	931c      	str	r3, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP;
 800d558:	2300      	movs	r3, #0
 800d55a:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d55c:	2303      	movs	r3, #3
 800d55e:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d560:	2304      	movs	r3, #4
 800d562:	931f      	str	r3, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d564:	a91b      	add	r1, sp, #108	@ 0x6c
 800d566:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d56a:	f7ff f9f9 	bl	800c960 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d56e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d570:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d574:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d576:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d57c:	9302      	str	r3, [sp, #8]
 800d57e:	9b02      	ldr	r3, [sp, #8]
 800d580:	e7cf      	b.n	800d522 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 800d582:	f7fc fd81 	bl	800a088 <Error_Handler>
 800d586:	e7d8      	b.n	800d53a <HAL_I2C_MspInit+0x42>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800d588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d58c:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800d58e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d592:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d594:	a806      	add	r0, sp, #24
 800d596:	f000 fe1f 	bl	800e1d8 <HAL_RCCEx_PeriphCLKConfig>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d13c      	bne.n	800d618 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d59e:	4c22      	ldr	r4, [pc, #136]	@ (800d628 <HAL_I2C_MspInit+0x130>)
 800d5a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d5a2:	f043 0301 	orr.w	r3, r3, #1
 800d5a6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d5a8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	9303      	str	r3, [sp, #12]
 800d5b0:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d5b2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d5b4:	f043 0302 	orr.w	r3, r3, #2
 800d5b8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d5ba:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d5bc:	f003 0302 	and.w	r3, r3, #2
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800d5c4:	2380      	movs	r3, #128	@ 0x80
 800d5c6:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d5c8:	f04f 0912 	mov.w	r9, #18
 800d5cc:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL; //GPIO_PULLUP;
 800d5d0:	f04f 0800 	mov.w	r8, #0
 800d5d4:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5d8:	2703      	movs	r7, #3
 800d5da:	971e      	str	r7, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800d5dc:	2604      	movs	r6, #4
 800d5de:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5e0:	ad1b      	add	r5, sp, #108	@ 0x6c
 800d5e2:	4629      	mov	r1, r5
 800d5e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d5e8:	f7ff f9ba 	bl	800c960 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d5ec:	2310      	movs	r3, #16
 800d5ee:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d5f0:	f8cd 9070 	str.w	r9, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL; // GPIO_PULLUP;
 800d5f4:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5f8:	971e      	str	r7, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800d5fa:	961f      	str	r6, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	480b      	ldr	r0, [pc, #44]	@ (800d62c <HAL_I2C_MspInit+0x134>)
 800d600:	f7ff f9ae 	bl	800c960 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800d604:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d606:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d60a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d60c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d60e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d612:	9305      	str	r3, [sp, #20]
 800d614:	9b05      	ldr	r3, [sp, #20]
}
 800d616:	e784      	b.n	800d522 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 800d618:	f7fc fd36 	bl	800a088 <Error_Handler>
 800d61c:	e7bf      	b.n	800d59e <HAL_I2C_MspInit+0xa6>
 800d61e:	bf00      	nop
 800d620:	40005400 	.word	0x40005400
 800d624:	40005c00 	.word	0x40005c00
 800d628:	40021000 	.word	0x40021000
 800d62c:	48000400 	.word	0x48000400

0800d630 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800d630:	4b02      	ldr	r3, [pc, #8]	@ (800d63c <HAL_PWREx_GetVoltageRange+0xc>)
 800d632:	6818      	ldr	r0, [r3, #0]
#endif
}
 800d634:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	40007000 	.word	0x40007000

0800d640 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d640:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800d644:	d00f      	beq.n	800d666 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800d646:	4b1f      	ldr	r3, [pc, #124]	@ (800d6c4 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d64e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d652:	d034      	beq.n	800d6be <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d654:	4a1b      	ldr	r2, [pc, #108]	@ (800d6c4 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800d656:	6813      	ldr	r3, [r2, #0]
 800d658:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d65c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d660:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800d662:	2000      	movs	r0, #0
 800d664:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800d666:	4b17      	ldr	r3, [pc, #92]	@ (800d6c4 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d66e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d672:	d020      	beq.n	800d6b6 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d674:	4a13      	ldr	r2, [pc, #76]	@ (800d6c4 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800d676:	6813      	ldr	r3, [r2, #0]
 800d678:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d67c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d680:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d682:	4b11      	ldr	r3, [pc, #68]	@ (800d6c8 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2232      	movs	r2, #50	@ 0x32
 800d688:	fb02 f303 	mul.w	r3, r2, r3
 800d68c:	4a0f      	ldr	r2, [pc, #60]	@ (800d6cc <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800d68e:	fba2 2303 	umull	r2, r3, r2, r3
 800d692:	0c9b      	lsrs	r3, r3, #18
 800d694:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d696:	e000      	b.n	800d69a <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800d698:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d69a:	4a0a      	ldr	r2, [pc, #40]	@ (800d6c4 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800d69c:	6952      	ldr	r2, [r2, #20]
 800d69e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800d6a2:	d001      	beq.n	800d6a8 <HAL_PWREx_ControlVoltageScaling+0x68>
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1f7      	bne.n	800d698 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d6a8:	4b06      	ldr	r3, [pc, #24]	@ (800d6c4 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800d6aa:	695b      	ldr	r3, [r3, #20]
 800d6ac:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800d6b0:	d103      	bne.n	800d6ba <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	4770      	bx	lr
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	4770      	bx	lr
        return HAL_TIMEOUT;
 800d6ba:	2003      	movs	r0, #3
 800d6bc:	4770      	bx	lr
  return HAL_OK;
 800d6be:	2000      	movs	r0, #0
}
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	40007000 	.word	0x40007000
 800d6c8:	2000002c 	.word	0x2000002c
 800d6cc:	431bde83 	.word	0x431bde83

0800d6d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800d6d0:	b530      	push	{r4, r5, lr}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800d6d6:	4b20      	ldr	r3, [pc, #128]	@ (800d758 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800d6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6da:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800d6de:	d00b      	beq.n	800d6f8 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800d6e0:	f7ff ffa6 	bl	800d630 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d6e4:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800d6e8:	d017      	beq.n	800d71a <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800d6ea:	2c80      	cmp	r4, #128	@ 0x80
 800d6ec:	d81f      	bhi.n	800d72e <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800d6ee:	d02d      	beq.n	800d74c <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800d6f0:	2c70      	cmp	r4, #112	@ 0x70
 800d6f2:	d02d      	beq.n	800d750 <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d6f4:	2100      	movs	r1, #0
 800d6f6:	e01b      	b.n	800d730 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800d6f8:	4d17      	ldr	r5, [pc, #92]	@ (800d758 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800d6fa:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800d6fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d700:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d702:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800d704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d708:	9301      	str	r3, [sp, #4]
 800d70a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800d70c:	f7ff ff90 	bl	800d630 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800d710:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800d712:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d716:	65ab      	str	r3, [r5, #88]	@ 0x58
 800d718:	e7e4      	b.n	800d6e4 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800d71a:	2c80      	cmp	r4, #128	@ 0x80
 800d71c:	d903      	bls.n	800d726 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 800d71e:	2ca0      	cmp	r4, #160	@ 0xa0
 800d720:	d903      	bls.n	800d72a <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800d722:	2102      	movs	r1, #2
 800d724:	e004      	b.n	800d730 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800d726:	2100      	movs	r1, #0
 800d728:	e002      	b.n	800d730 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800d72a:	2101      	movs	r1, #1
 800d72c:	e000      	b.n	800d730 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800d72e:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800d730:	4a0a      	ldr	r2, [pc, #40]	@ (800d75c <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800d732:	6813      	ldr	r3, [r2, #0]
 800d734:	f023 0307 	bic.w	r3, r3, #7
 800d738:	430b      	orrs	r3, r1
 800d73a:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800d73c:	6813      	ldr	r3, [r2, #0]
 800d73e:	f003 0307 	and.w	r3, r3, #7
 800d742:	428b      	cmp	r3, r1
 800d744:	d106      	bne.n	800d754 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d746:	2000      	movs	r0, #0
}
 800d748:	b003      	add	sp, #12
 800d74a:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 800d74c:	2102      	movs	r1, #2
 800d74e:	e7ef      	b.n	800d730 <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800d750:	2101      	movs	r1, #1
 800d752:	e7ed      	b.n	800d730 <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 800d754:	2001      	movs	r0, #1
 800d756:	e7f7      	b.n	800d748 <RCC_SetFlashLatencyFromMSIRange+0x78>
 800d758:	40021000 	.word	0x40021000
 800d75c:	40022000 	.word	0x40022000

0800d760 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d760:	4a25      	ldr	r2, [pc, #148]	@ (800d7f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d762:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d764:	68d2      	ldr	r2, [r2, #12]
 800d766:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d76a:	f013 030c 	ands.w	r3, r3, #12
 800d76e:	d009      	beq.n	800d784 <HAL_RCC_GetSysClockFreq+0x24>
 800d770:	2b0c      	cmp	r3, #12
 800d772:	d005      	beq.n	800d780 <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800d774:	2b04      	cmp	r3, #4
 800d776:	d03b      	beq.n	800d7f0 <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800d778:	2b08      	cmp	r3, #8
 800d77a:	d03b      	beq.n	800d7f4 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800d77c:	2000      	movs	r0, #0
 800d77e:	e00f      	b.n	800d7a0 <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800d780:	2a01      	cmp	r2, #1
 800d782:	d1f7      	bne.n	800d774 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800d784:	4a1c      	ldr	r2, [pc, #112]	@ (800d7f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d786:	6812      	ldr	r2, [r2, #0]
 800d788:	f012 0f08 	tst.w	r2, #8
 800d78c:	d10c      	bne.n	800d7a8 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800d78e:	4a1a      	ldr	r2, [pc, #104]	@ (800d7f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d790:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800d794:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800d798:	4918      	ldr	r1, [pc, #96]	@ (800d7fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800d79a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d79e:	b113      	cbz	r3, 800d7a6 <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800d7a0:	2b0c      	cmp	r3, #12
 800d7a2:	d006      	beq.n	800d7b2 <HAL_RCC_GetSysClockFreq+0x52>
 800d7a4:	2000      	movs	r0, #0
}
 800d7a6:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800d7a8:	4a13      	ldr	r2, [pc, #76]	@ (800d7f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d7aa:	6812      	ldr	r2, [r2, #0]
 800d7ac:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800d7b0:	e7f2      	b.n	800d798 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d7b2:	4b11      	ldr	r3, [pc, #68]	@ (800d7f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d016      	beq.n	800d7ec <HAL_RCC_GetSysClockFreq+0x8c>
 800d7be:	2b03      	cmp	r3, #3
 800d7c0:	d100      	bne.n	800d7c4 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 800d7c2:	480f      	ldr	r0, [pc, #60]	@ (800d800 <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d7c4:	490c      	ldr	r1, [pc, #48]	@ (800d7f8 <HAL_RCC_GetSysClockFreq+0x98>)
 800d7c6:	68ca      	ldr	r2, [r1, #12]
 800d7c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800d7cc:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800d7ce:	68cb      	ldr	r3, [r1, #12]
 800d7d0:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800d7d4:	fb00 f303 	mul.w	r3, r0, r3
 800d7d8:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d7dc:	68c8      	ldr	r0, [r1, #12]
 800d7de:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800d7e2:	3001      	adds	r0, #1
 800d7e4:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800d7e6:	fbb3 f0f0 	udiv	r0, r3, r0
 800d7ea:	4770      	bx	lr
    switch (pllsource)
 800d7ec:	4805      	ldr	r0, [pc, #20]	@ (800d804 <HAL_RCC_GetSysClockFreq+0xa4>)
 800d7ee:	e7e9      	b.n	800d7c4 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 800d7f0:	4804      	ldr	r0, [pc, #16]	@ (800d804 <HAL_RCC_GetSysClockFreq+0xa4>)
 800d7f2:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800d7f4:	4802      	ldr	r0, [pc, #8]	@ (800d800 <HAL_RCC_GetSysClockFreq+0xa0>)
 800d7f6:	4770      	bx	lr
 800d7f8:	40021000 	.word	0x40021000
 800d7fc:	0800fdd0 	.word	0x0800fdd0
 800d800:	007a1200 	.word	0x007a1200
 800d804:	00f42400 	.word	0x00f42400

0800d808 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800d808:	2800      	cmp	r0, #0
 800d80a:	f000 831c 	beq.w	800de46 <HAL_RCC_OscConfig+0x63e>
{
 800d80e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d810:	b083      	sub	sp, #12
 800d812:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d814:	4b96      	ldr	r3, [pc, #600]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d816:	689d      	ldr	r5, [r3, #8]
 800d818:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d81c:	68de      	ldr	r6, [r3, #12]
 800d81e:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d822:	6803      	ldr	r3, [r0, #0]
 800d824:	f013 0f10 	tst.w	r3, #16
 800d828:	d05a      	beq.n	800d8e0 <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800d82a:	b1e5      	cbz	r5, 800d866 <HAL_RCC_OscConfig+0x5e>
 800d82c:	2d0c      	cmp	r5, #12
 800d82e:	d018      	beq.n	800d862 <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d830:	69a3      	ldr	r3, [r4, #24]
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 80bb 	beq.w	800d9ae <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800d838:	4a8d      	ldr	r2, [pc, #564]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d83a:	6813      	ldr	r3, [r2, #0]
 800d83c:	f043 0301 	orr.w	r3, r3, #1
 800d840:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800d842:	f7fd fcc7 	bl	800b1d4 <HAL_GetTick>
 800d846:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800d848:	4b89      	ldr	r3, [pc, #548]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f013 0f02 	tst.w	r3, #2
 800d850:	f040 809a 	bne.w	800d988 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d854:	f7fd fcbe 	bl	800b1d4 <HAL_GetTick>
 800d858:	1bc0      	subs	r0, r0, r7
 800d85a:	2802      	cmp	r0, #2
 800d85c:	d9f4      	bls.n	800d848 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800d85e:	2003      	movs	r0, #3
 800d860:	e2fc      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800d862:	2e01      	cmp	r6, #1
 800d864:	d1e4      	bne.n	800d830 <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800d866:	4b82      	ldr	r3, [pc, #520]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f013 0f02 	tst.w	r3, #2
 800d86e:	d003      	beq.n	800d878 <HAL_RCC_OscConfig+0x70>
 800d870:	69a3      	ldr	r3, [r4, #24]
 800d872:	2b00      	cmp	r3, #0
 800d874:	f000 82e9 	beq.w	800de4a <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d878:	6a20      	ldr	r0, [r4, #32]
 800d87a:	4b7d      	ldr	r3, [pc, #500]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f013 0f08 	tst.w	r3, #8
 800d882:	d05b      	beq.n	800d93c <HAL_RCC_OscConfig+0x134>
 800d884:	4b7a      	ldr	r3, [pc, #488]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d88c:	4298      	cmp	r0, r3
 800d88e:	d85c      	bhi.n	800d94a <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d890:	4b77      	ldr	r3, [pc, #476]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	f042 0208 	orr.w	r2, r2, #8
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800d8a0:	6a21      	ldr	r1, [r4, #32]
 800d8a2:	430a      	orrs	r2, r1
 800d8a4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d8a6:	685a      	ldr	r2, [r3, #4]
 800d8a8:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800d8ac:	69e1      	ldr	r1, [r4, #28]
 800d8ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d8b2:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800d8b4:	2d00      	cmp	r5, #0
 800d8b6:	d060      	beq.n	800d97a <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d8b8:	f7ff ff52 	bl	800d760 <HAL_RCC_GetSysClockFreq>
 800d8bc:	4b6c      	ldr	r3, [pc, #432]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800d8c4:	4a6b      	ldr	r2, [pc, #428]	@ (800da74 <HAL_RCC_OscConfig+0x26c>)
 800d8c6:	5cd3      	ldrb	r3, [r2, r3]
 800d8c8:	f003 031f 	and.w	r3, r3, #31
 800d8cc:	40d8      	lsrs	r0, r3
 800d8ce:	4b6a      	ldr	r3, [pc, #424]	@ (800da78 <HAL_RCC_OscConfig+0x270>)
 800d8d0:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800d8d2:	4b6a      	ldr	r3, [pc, #424]	@ (800da7c <HAL_RCC_OscConfig+0x274>)
 800d8d4:	6818      	ldr	r0, [r3, #0]
 800d8d6:	f000 ff61 	bl	800e79c <HAL_InitTick>
        if(status != HAL_OK)
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	f040 82be 	bne.w	800de5c <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	f013 0f01 	tst.w	r3, #1
 800d8e6:	f000 8081 	beq.w	800d9ec <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800d8ea:	2d08      	cmp	r5, #8
 800d8ec:	d075      	beq.n	800d9da <HAL_RCC_OscConfig+0x1d2>
 800d8ee:	2d0c      	cmp	r5, #12
 800d8f0:	d071      	beq.n	800d9d6 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8f2:	6863      	ldr	r3, [r4, #4]
 800d8f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8f8:	f000 8097 	beq.w	800da2a <HAL_RCC_OscConfig+0x222>
 800d8fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d900:	f000 8099 	beq.w	800da36 <HAL_RCC_OscConfig+0x22e>
 800d904:	4b5a      	ldr	r3, [pc, #360]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d914:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d916:	6863      	ldr	r3, [r4, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 8099 	beq.w	800da50 <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800d91e:	f7fd fc59 	bl	800b1d4 <HAL_GetTick>
 800d922:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d924:	4b52      	ldr	r3, [pc, #328]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800d92c:	d15e      	bne.n	800d9ec <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d92e:	f7fd fc51 	bl	800b1d4 <HAL_GetTick>
 800d932:	1bc0      	subs	r0, r0, r7
 800d934:	2864      	cmp	r0, #100	@ 0x64
 800d936:	d9f5      	bls.n	800d924 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800d938:	2003      	movs	r0, #3
 800d93a:	e28f      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d93c:	4b4c      	ldr	r3, [pc, #304]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d93e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d942:	091b      	lsrs	r3, r3, #4
 800d944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d948:	e7a0      	b.n	800d88c <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d94a:	f7ff fec1 	bl	800d6d0 <RCC_SetFlashLatencyFromMSIRange>
 800d94e:	2800      	cmp	r0, #0
 800d950:	f040 827d 	bne.w	800de4e <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d954:	4b46      	ldr	r3, [pc, #280]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	f042 0208 	orr.w	r2, r2, #8
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800d964:	6a21      	ldr	r1, [r4, #32]
 800d966:	430a      	orrs	r2, r1
 800d968:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800d970:	69e1      	ldr	r1, [r4, #28]
 800d972:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d976:	605a      	str	r2, [r3, #4]
 800d978:	e79e      	b.n	800d8b8 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d97a:	6a20      	ldr	r0, [r4, #32]
 800d97c:	f7ff fea8 	bl	800d6d0 <RCC_SetFlashLatencyFromMSIRange>
 800d980:	2800      	cmp	r0, #0
 800d982:	d099      	beq.n	800d8b8 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800d984:	2001      	movs	r0, #1
 800d986:	e269      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d988:	4b39      	ldr	r3, [pc, #228]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	f042 0208 	orr.w	r2, r2, #8
 800d990:	601a      	str	r2, [r3, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800d998:	6a21      	ldr	r1, [r4, #32]
 800d99a:	430a      	orrs	r2, r1
 800d99c:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d99e:	685a      	ldr	r2, [r3, #4]
 800d9a0:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800d9a4:	69e1      	ldr	r1, [r4, #28]
 800d9a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d9aa:	605a      	str	r2, [r3, #4]
 800d9ac:	e798      	b.n	800d8e0 <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800d9ae:	4a30      	ldr	r2, [pc, #192]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d9b0:	6813      	ldr	r3, [r2, #0]
 800d9b2:	f023 0301 	bic.w	r3, r3, #1
 800d9b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800d9b8:	f7fd fc0c 	bl	800b1d4 <HAL_GetTick>
 800d9bc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800d9be:	4b2c      	ldr	r3, [pc, #176]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	f013 0f02 	tst.w	r3, #2
 800d9c6:	d08b      	beq.n	800d8e0 <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d9c8:	f7fd fc04 	bl	800b1d4 <HAL_GetTick>
 800d9cc:	1bc0      	subs	r0, r0, r7
 800d9ce:	2802      	cmp	r0, #2
 800d9d0:	d9f5      	bls.n	800d9be <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800d9d2:	2003      	movs	r0, #3
 800d9d4:	e242      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800d9d6:	2e03      	cmp	r6, #3
 800d9d8:	d18b      	bne.n	800d8f2 <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d9da:	4b25      	ldr	r3, [pc, #148]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800d9e2:	d003      	beq.n	800d9ec <HAL_RCC_OscConfig+0x1e4>
 800d9e4:	6863      	ldr	r3, [r4, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	f000 8233 	beq.w	800de52 <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d9ec:	6823      	ldr	r3, [r4, #0]
 800d9ee:	f013 0f02 	tst.w	r3, #2
 800d9f2:	d058      	beq.n	800daa6 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800d9f4:	2d04      	cmp	r5, #4
 800d9f6:	d045      	beq.n	800da84 <HAL_RCC_OscConfig+0x27c>
 800d9f8:	2d0c      	cmp	r5, #12
 800d9fa:	d041      	beq.n	800da80 <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d9fc:	68e3      	ldr	r3, [r4, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d077      	beq.n	800daf2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800da02:	4a1b      	ldr	r2, [pc, #108]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800da04:	6813      	ldr	r3, [r2, #0]
 800da06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da0a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800da0c:	f7fd fbe2 	bl	800b1d4 <HAL_GetTick>
 800da10:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800da12:	4b17      	ldr	r3, [pc, #92]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800da1a:	d161      	bne.n	800dae0 <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da1c:	f7fd fbda 	bl	800b1d4 <HAL_GetTick>
 800da20:	1b80      	subs	r0, r0, r6
 800da22:	2802      	cmp	r0, #2
 800da24:	d9f5      	bls.n	800da12 <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800da26:	2003      	movs	r0, #3
 800da28:	e218      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800da2a:	4a11      	ldr	r2, [pc, #68]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800da2c:	6813      	ldr	r3, [r2, #0]
 800da2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da32:	6013      	str	r3, [r2, #0]
 800da34:	e76f      	b.n	800d916 <HAL_RCC_OscConfig+0x10e>
 800da36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da3a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800da44:	601a      	str	r2, [r3, #0]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	e762      	b.n	800d916 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800da50:	f7fd fbc0 	bl	800b1d4 <HAL_GetTick>
 800da54:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800da56:	4b06      	ldr	r3, [pc, #24]	@ (800da70 <HAL_RCC_OscConfig+0x268>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800da5e:	d0c5      	beq.n	800d9ec <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800da60:	f7fd fbb8 	bl	800b1d4 <HAL_GetTick>
 800da64:	1bc0      	subs	r0, r0, r7
 800da66:	2864      	cmp	r0, #100	@ 0x64
 800da68:	d9f5      	bls.n	800da56 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800da6a:	2003      	movs	r0, #3
 800da6c:	e1f6      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
 800da6e:	bf00      	nop
 800da70:	40021000 	.word	0x40021000
 800da74:	0800fe08 	.word	0x0800fe08
 800da78:	2000002c 	.word	0x2000002c
 800da7c:	20000008 	.word	0x20000008
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800da80:	2e02      	cmp	r6, #2
 800da82:	d1bb      	bne.n	800d9fc <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da84:	4ba4      	ldr	r3, [pc, #656]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800da8c:	d003      	beq.n	800da96 <HAL_RCC_OscConfig+0x28e>
 800da8e:	68e3      	ldr	r3, [r4, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 81e0 	beq.w	800de56 <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da96:	4aa0      	ldr	r2, [pc, #640]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800da98:	6853      	ldr	r3, [r2, #4]
 800da9a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800da9e:	6921      	ldr	r1, [r4, #16]
 800daa0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800daa4:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	f013 0f08 	tst.w	r3, #8
 800daac:	d04c      	beq.n	800db48 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800daae:	6963      	ldr	r3, [r4, #20]
 800dab0:	b39b      	cbz	r3, 800db1a <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800dab2:	4a99      	ldr	r2, [pc, #612]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dab4:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800dab8:	f043 0301 	orr.w	r3, r3, #1
 800dabc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800dac0:	f7fd fb88 	bl	800b1d4 <HAL_GetTick>
 800dac4:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800dac6:	4b94      	ldr	r3, [pc, #592]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dacc:	f013 0f02 	tst.w	r3, #2
 800dad0:	d13a      	bne.n	800db48 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dad2:	f7fd fb7f 	bl	800b1d4 <HAL_GetTick>
 800dad6:	1b80      	subs	r0, r0, r6
 800dad8:	2802      	cmp	r0, #2
 800dada:	d9f4      	bls.n	800dac6 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800dadc:	2003      	movs	r0, #3
 800dade:	e1bd      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dae0:	4a8d      	ldr	r2, [pc, #564]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dae2:	6853      	ldr	r3, [r2, #4]
 800dae4:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800dae8:	6921      	ldr	r1, [r4, #16]
 800daea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800daee:	6053      	str	r3, [r2, #4]
 800daf0:	e7d9      	b.n	800daa6 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800daf2:	4a89      	ldr	r2, [pc, #548]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800daf4:	6813      	ldr	r3, [r2, #0]
 800daf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dafa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800dafc:	f7fd fb6a 	bl	800b1d4 <HAL_GetTick>
 800db00:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800db02:	4b85      	ldr	r3, [pc, #532]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800db0a:	d0cc      	beq.n	800daa6 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800db0c:	f7fd fb62 	bl	800b1d4 <HAL_GetTick>
 800db10:	1b80      	subs	r0, r0, r6
 800db12:	2802      	cmp	r0, #2
 800db14:	d9f5      	bls.n	800db02 <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800db16:	2003      	movs	r0, #3
 800db18:	e1a0      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 800db1a:	4a7f      	ldr	r2, [pc, #508]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800db1c:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800db20:	f023 0301 	bic.w	r3, r3, #1
 800db24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800db28:	f7fd fb54 	bl	800b1d4 <HAL_GetTick>
 800db2c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800db2e:	4b7a      	ldr	r3, [pc, #488]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800db30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800db34:	f013 0f02 	tst.w	r3, #2
 800db38:	d006      	beq.n	800db48 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800db3a:	f7fd fb4b 	bl	800b1d4 <HAL_GetTick>
 800db3e:	1b80      	subs	r0, r0, r6
 800db40:	2802      	cmp	r0, #2
 800db42:	d9f4      	bls.n	800db2e <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800db44:	2003      	movs	r0, #3
 800db46:	e189      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	f013 0f04 	tst.w	r3, #4
 800db4e:	d07a      	beq.n	800dc46 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800db50:	4b71      	ldr	r3, [pc, #452]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800db52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db54:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800db58:	d136      	bne.n	800dbc8 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800db5a:	4b6f      	ldr	r3, [pc, #444]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800db5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800db5e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800db62:	659a      	str	r2, [r3, #88]	@ 0x58
 800db64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800db6a:	9301      	str	r3, [sp, #4]
 800db6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800db6e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800db70:	4b6a      	ldr	r3, [pc, #424]	@ (800dd1c <HAL_RCC_OscConfig+0x514>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800db78:	d028      	beq.n	800dbcc <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800db7a:	68a3      	ldr	r3, [r4, #8]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d039      	beq.n	800dbf4 <HAL_RCC_OscConfig+0x3ec>
 800db80:	2b05      	cmp	r3, #5
 800db82:	d03f      	beq.n	800dc04 <HAL_RCC_OscConfig+0x3fc>
 800db84:	4b64      	ldr	r3, [pc, #400]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800db86:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800db8a:	f022 0201 	bic.w	r2, r2, #1
 800db8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800db92:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800db96:	f022 0204 	bic.w	r2, r2, #4
 800db9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800db9e:	68a3      	ldr	r3, [r4, #8]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d03d      	beq.n	800dc20 <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800dba4:	f7fd fb16 	bl	800b1d4 <HAL_GetTick>
 800dba8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dbaa:	4b5b      	ldr	r3, [pc, #364]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dbac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbb0:	f013 0f02 	tst.w	r3, #2
 800dbb4:	d146      	bne.n	800dc44 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dbb6:	f7fd fb0d 	bl	800b1d4 <HAL_GetTick>
 800dbba:	1bc0      	subs	r0, r0, r7
 800dbbc:	f241 3388 	movw	r3, #5000	@ 0x1388
 800dbc0:	4298      	cmp	r0, r3
 800dbc2:	d9f2      	bls.n	800dbaa <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 800dbc4:	2003      	movs	r0, #3
 800dbc6:	e149      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 800dbc8:	2600      	movs	r6, #0
 800dbca:	e7d1      	b.n	800db70 <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dbcc:	4a53      	ldr	r2, [pc, #332]	@ (800dd1c <HAL_RCC_OscConfig+0x514>)
 800dbce:	6813      	ldr	r3, [r2, #0]
 800dbd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dbd4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800dbd6:	f7fd fafd 	bl	800b1d4 <HAL_GetTick>
 800dbda:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dbdc:	4b4f      	ldr	r3, [pc, #316]	@ (800dd1c <HAL_RCC_OscConfig+0x514>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800dbe4:	d1c9      	bne.n	800db7a <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dbe6:	f7fd faf5 	bl	800b1d4 <HAL_GetTick>
 800dbea:	1bc0      	subs	r0, r0, r7
 800dbec:	2802      	cmp	r0, #2
 800dbee:	d9f5      	bls.n	800dbdc <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800dbf0:	2003      	movs	r0, #3
 800dbf2:	e133      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dbf4:	4a48      	ldr	r2, [pc, #288]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dbf6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800dbfa:	f043 0301 	orr.w	r3, r3, #1
 800dbfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800dc02:	e7cc      	b.n	800db9e <HAL_RCC_OscConfig+0x396>
 800dc04:	4b44      	ldr	r3, [pc, #272]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dc06:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800dc0a:	f042 0204 	orr.w	r2, r2, #4
 800dc0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800dc12:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800dc16:	f042 0201 	orr.w	r2, r2, #1
 800dc1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800dc1e:	e7be      	b.n	800db9e <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800dc20:	f7fd fad8 	bl	800b1d4 <HAL_GetTick>
 800dc24:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800dc26:	4b3c      	ldr	r3, [pc, #240]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dc2c:	f013 0f02 	tst.w	r3, #2
 800dc30:	d008      	beq.n	800dc44 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc32:	f7fd facf 	bl	800b1d4 <HAL_GetTick>
 800dc36:	1bc0      	subs	r0, r0, r7
 800dc38:	f241 3388 	movw	r3, #5000	@ 0x1388
 800dc3c:	4298      	cmp	r0, r3
 800dc3e:	d9f2      	bls.n	800dc26 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800dc40:	2003      	movs	r0, #3
 800dc42:	e10b      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 800dc44:	b9e6      	cbnz	r6, 800dc80 <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	f013 0f20 	tst.w	r3, #32
 800dc4c:	d035      	beq.n	800dcba <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800dc4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800dc50:	b1e3      	cbz	r3, 800dc8c <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800dc52:	4a31      	ldr	r2, [pc, #196]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dc54:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800dc58:	f043 0301 	orr.w	r3, r3, #1
 800dc5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800dc60:	f7fd fab8 	bl	800b1d4 <HAL_GetTick>
 800dc64:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800dc66:	4b2c      	ldr	r3, [pc, #176]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dc68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc6c:	f013 0f02 	tst.w	r3, #2
 800dc70:	d123      	bne.n	800dcba <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dc72:	f7fd faaf 	bl	800b1d4 <HAL_GetTick>
 800dc76:	1b80      	subs	r0, r0, r6
 800dc78:	2802      	cmp	r0, #2
 800dc7a:	d9f4      	bls.n	800dc66 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 800dc7c:	2003      	movs	r0, #3
 800dc7e:	e0ed      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 800dc80:	4a25      	ldr	r2, [pc, #148]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dc82:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800dc84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc88:	6593      	str	r3, [r2, #88]	@ 0x58
 800dc8a:	e7dc      	b.n	800dc46 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 800dc8c:	4a22      	ldr	r2, [pc, #136]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dc8e:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800dc92:	f023 0301 	bic.w	r3, r3, #1
 800dc96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800dc9a:	f7fd fa9b 	bl	800b1d4 <HAL_GetTick>
 800dc9e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dca0:	4b1d      	ldr	r3, [pc, #116]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dca6:	f013 0f02 	tst.w	r3, #2
 800dcaa:	d006      	beq.n	800dcba <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dcac:	f7fd fa92 	bl	800b1d4 <HAL_GetTick>
 800dcb0:	1b80      	subs	r0, r0, r6
 800dcb2:	2802      	cmp	r0, #2
 800dcb4:	d9f4      	bls.n	800dca0 <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800dcb6:	2003      	movs	r0, #3
 800dcb8:	e0d0      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800dcba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f000 80cc 	beq.w	800de5a <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	d017      	beq.n	800dcf6 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800dcc6:	2d0c      	cmp	r5, #12
 800dcc8:	f000 80cc 	beq.w	800de64 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 800dccc:	4a12      	ldr	r2, [pc, #72]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dcce:	6813      	ldr	r3, [r2, #0]
 800dcd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dcd4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800dcd6:	f7fd fa7d 	bl	800b1d4 <HAL_GetTick>
 800dcda:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dcdc:	4b0e      	ldr	r3, [pc, #56]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800dce4:	f000 80a8 	beq.w	800de38 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dce8:	f7fd fa74 	bl	800b1d4 <HAL_GetTick>
 800dcec:	1b00      	subs	r0, r0, r4
 800dcee:	2802      	cmp	r0, #2
 800dcf0:	d9f4      	bls.n	800dcdc <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 800dcf2:	2003      	movs	r0, #3
 800dcf4:	e0b2      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 800dcf6:	4b08      	ldr	r3, [pc, #32]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dcf8:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcfa:	f003 0103 	and.w	r1, r3, #3
 800dcfe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800dd00:	4291      	cmp	r1, r2
 800dd02:	d00d      	beq.n	800dd20 <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800dd04:	2d0c      	cmp	r5, #12
 800dd06:	f000 80ab 	beq.w	800de60 <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800dd0a:	4b03      	ldr	r3, [pc, #12]	@ (800dd18 <HAL_RCC_OscConfig+0x510>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800dd12:	d02f      	beq.n	800dd74 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 800dd14:	2001      	movs	r0, #1
 800dd16:	e0a1      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
 800dd18:	40021000 	.word	0x40021000
 800dd1c:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dd20:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800dd24:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd26:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd28:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800dd2c:	d1ea      	bne.n	800dd04 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dd2e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800dd32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dd34:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800dd38:	d1e4      	bne.n	800dd04 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dd3a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800dd3e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800dd40:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800dd44:	d1de      	bne.n	800dd04 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dd46:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800dd4a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800dd4c:	0852      	lsrs	r2, r2, #1
 800dd4e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dd50:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800dd54:	d1d6      	bne.n	800dd04 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dd56:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800dd5a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800dd5c:	0852      	lsrs	r2, r2, #1
 800dd5e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dd60:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800dd64:	d1ce      	bne.n	800dd04 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dd66:	4b40      	ldr	r3, [pc, #256]	@ (800de68 <HAL_RCC_OscConfig+0x660>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800dd6e:	d049      	beq.n	800de04 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 800dd70:	2000      	movs	r0, #0
 800dd72:	e073      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 800dd74:	4a3c      	ldr	r2, [pc, #240]	@ (800de68 <HAL_RCC_OscConfig+0x660>)
 800dd76:	6813      	ldr	r3, [r2, #0]
 800dd78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dd7c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800dd7e:	f7fd fa29 	bl	800b1d4 <HAL_GetTick>
 800dd82:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dd84:	4b38      	ldr	r3, [pc, #224]	@ (800de68 <HAL_RCC_OscConfig+0x660>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800dd8c:	d006      	beq.n	800dd9c <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dd8e:	f7fd fa21 	bl	800b1d4 <HAL_GetTick>
 800dd92:	1b40      	subs	r0, r0, r5
 800dd94:	2802      	cmp	r0, #2
 800dd96:	d9f5      	bls.n	800dd84 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 800dd98:	2003      	movs	r0, #3
 800dd9a:	e05f      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dd9c:	4a32      	ldr	r2, [pc, #200]	@ (800de68 <HAL_RCC_OscConfig+0x660>)
 800dd9e:	68d3      	ldr	r3, [r2, #12]
 800dda0:	4932      	ldr	r1, [pc, #200]	@ (800de6c <HAL_RCC_OscConfig+0x664>)
 800dda2:	4019      	ands	r1, r3
 800dda4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dda6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800dda8:	3801      	subs	r0, #1
 800ddaa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800ddae:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ddb0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ddb4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800ddb6:	0840      	lsrs	r0, r0, #1
 800ddb8:	3801      	subs	r0, #1
 800ddba:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800ddbe:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800ddc0:	0840      	lsrs	r0, r0, #1
 800ddc2:	3801      	subs	r0, #1
 800ddc4:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800ddc8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800ddca:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800ddce:	4319      	orrs	r1, r3
 800ddd0:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800ddd2:	6813      	ldr	r3, [r2, #0]
 800ddd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ddd8:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ddda:	68d3      	ldr	r3, [r2, #12]
 800dddc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dde0:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800dde2:	f7fd f9f7 	bl	800b1d4 <HAL_GetTick>
 800dde6:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dde8:	4b1f      	ldr	r3, [pc, #124]	@ (800de68 <HAL_RCC_OscConfig+0x660>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800ddf0:	d106      	bne.n	800de00 <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ddf2:	f7fd f9ef 	bl	800b1d4 <HAL_GetTick>
 800ddf6:	1b00      	subs	r0, r0, r4
 800ddf8:	2802      	cmp	r0, #2
 800ddfa:	d9f5      	bls.n	800dde8 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 800ddfc:	2003      	movs	r0, #3
 800ddfe:	e02d      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800de00:	2000      	movs	r0, #0
 800de02:	e02b      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 800de04:	4b18      	ldr	r3, [pc, #96]	@ (800de68 <HAL_RCC_OscConfig+0x660>)
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800de0c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800de0e:	68da      	ldr	r2, [r3, #12]
 800de10:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800de14:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800de16:	f7fd f9dd 	bl	800b1d4 <HAL_GetTick>
 800de1a:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800de1c:	4b12      	ldr	r3, [pc, #72]	@ (800de68 <HAL_RCC_OscConfig+0x660>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800de24:	d106      	bne.n	800de34 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de26:	f7fd f9d5 	bl	800b1d4 <HAL_GetTick>
 800de2a:	1b03      	subs	r3, r0, r4
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d9f5      	bls.n	800de1c <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 800de30:	2003      	movs	r0, #3
 800de32:	e013      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800de34:	2000      	movs	r0, #0
 800de36:	e011      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800de38:	4a0b      	ldr	r2, [pc, #44]	@ (800de68 <HAL_RCC_OscConfig+0x660>)
 800de3a:	68d1      	ldr	r1, [r2, #12]
 800de3c:	4b0c      	ldr	r3, [pc, #48]	@ (800de70 <HAL_RCC_OscConfig+0x668>)
 800de3e:	400b      	ands	r3, r1
 800de40:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800de42:	2000      	movs	r0, #0
 800de44:	e00a      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 800de46:	2001      	movs	r0, #1
}
 800de48:	4770      	bx	lr
        return HAL_ERROR;
 800de4a:	2001      	movs	r0, #1
 800de4c:	e006      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 800de4e:	2001      	movs	r0, #1
 800de50:	e004      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800de52:	2001      	movs	r0, #1
 800de54:	e002      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800de56:	2001      	movs	r0, #1
 800de58:	e000      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800de5a:	2000      	movs	r0, #0
}
 800de5c:	b003      	add	sp, #12
 800de5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800de60:	2001      	movs	r0, #1
 800de62:	e7fb      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800de64:	2001      	movs	r0, #1
 800de66:	e7f9      	b.n	800de5c <HAL_RCC_OscConfig+0x654>
 800de68:	40021000 	.word	0x40021000
 800de6c:	019d808c 	.word	0x019d808c
 800de70:	feeefffc 	.word	0xfeeefffc

0800de74 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800de74:	2800      	cmp	r0, #0
 800de76:	f000 80af 	beq.w	800dfd8 <HAL_RCC_ClockConfig+0x164>
{
 800de7a:	b570      	push	{r4, r5, r6, lr}
 800de7c:	460d      	mov	r5, r1
 800de7e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800de80:	4b59      	ldr	r3, [pc, #356]	@ (800dfe8 <HAL_RCC_ClockConfig+0x174>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 0307 	and.w	r3, r3, #7
 800de88:	428b      	cmp	r3, r1
 800de8a:	d20b      	bcs.n	800dea4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de8c:	4a56      	ldr	r2, [pc, #344]	@ (800dfe8 <HAL_RCC_ClockConfig+0x174>)
 800de8e:	6813      	ldr	r3, [r2, #0]
 800de90:	f023 0307 	bic.w	r3, r3, #7
 800de94:	430b      	orrs	r3, r1
 800de96:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800de98:	6813      	ldr	r3, [r2, #0]
 800de9a:	f003 0307 	and.w	r3, r3, #7
 800de9e:	428b      	cmp	r3, r1
 800dea0:	f040 809c 	bne.w	800dfdc <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dea4:	6823      	ldr	r3, [r4, #0]
 800dea6:	f013 0f02 	tst.w	r3, #2
 800deaa:	d00c      	beq.n	800dec6 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800deac:	68a2      	ldr	r2, [r4, #8]
 800deae:	4b4f      	ldr	r3, [pc, #316]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d905      	bls.n	800dec6 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800deba:	494c      	ldr	r1, [pc, #304]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800debc:	688b      	ldr	r3, [r1, #8]
 800debe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dec2:	431a      	orrs	r2, r3
 800dec4:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	f013 0f01 	tst.w	r3, #1
 800decc:	d039      	beq.n	800df42 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dece:	6863      	ldr	r3, [r4, #4]
 800ded0:	2b03      	cmp	r3, #3
 800ded2:	d009      	beq.n	800dee8 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ded4:	2b02      	cmp	r3, #2
 800ded6:	d026      	beq.n	800df26 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ded8:	bb63      	cbnz	r3, 800df34 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800deda:	4a44      	ldr	r2, [pc, #272]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800dedc:	6812      	ldr	r2, [r2, #0]
 800dede:	f012 0f02 	tst.w	r2, #2
 800dee2:	d106      	bne.n	800def2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800dee4:	2001      	movs	r0, #1
 800dee6:	e076      	b.n	800dfd6 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dee8:	4a40      	ldr	r2, [pc, #256]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800deea:	6812      	ldr	r2, [r2, #0]
 800deec:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800def0:	d076      	beq.n	800dfe0 <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800def2:	493e      	ldr	r1, [pc, #248]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800def4:	688a      	ldr	r2, [r1, #8]
 800def6:	f022 0203 	bic.w	r2, r2, #3
 800defa:	4313      	orrs	r3, r2
 800defc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800defe:	f7fd f969 	bl	800b1d4 <HAL_GetTick>
 800df02:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df04:	4b39      	ldr	r3, [pc, #228]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	f003 030c 	and.w	r3, r3, #12
 800df0c:	6862      	ldr	r2, [r4, #4]
 800df0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800df12:	d016      	beq.n	800df42 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800df14:	f7fd f95e 	bl	800b1d4 <HAL_GetTick>
 800df18:	1b80      	subs	r0, r0, r6
 800df1a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800df1e:	4298      	cmp	r0, r3
 800df20:	d9f0      	bls.n	800df04 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800df22:	2003      	movs	r0, #3
 800df24:	e057      	b.n	800dfd6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800df26:	4a31      	ldr	r2, [pc, #196]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800df28:	6812      	ldr	r2, [r2, #0]
 800df2a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800df2e:	d1e0      	bne.n	800def2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800df30:	2001      	movs	r0, #1
 800df32:	e050      	b.n	800dfd6 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800df34:	4a2d      	ldr	r2, [pc, #180]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800df36:	6812      	ldr	r2, [r2, #0]
 800df38:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800df3c:	d1d9      	bne.n	800def2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800df3e:	2001      	movs	r0, #1
 800df40:	e049      	b.n	800dfd6 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df42:	6823      	ldr	r3, [r4, #0]
 800df44:	f013 0f02 	tst.w	r3, #2
 800df48:	d00c      	beq.n	800df64 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800df4a:	68a2      	ldr	r2, [r4, #8]
 800df4c:	4b27      	ldr	r3, [pc, #156]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df54:	429a      	cmp	r2, r3
 800df56:	d205      	bcs.n	800df64 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df58:	4924      	ldr	r1, [pc, #144]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800df5a:	688b      	ldr	r3, [r1, #8]
 800df5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800df60:	431a      	orrs	r2, r3
 800df62:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800df64:	4b20      	ldr	r3, [pc, #128]	@ (800dfe8 <HAL_RCC_ClockConfig+0x174>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f003 0307 	and.w	r3, r3, #7
 800df6c:	42ab      	cmp	r3, r5
 800df6e:	d90a      	bls.n	800df86 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df70:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe8 <HAL_RCC_ClockConfig+0x174>)
 800df72:	6813      	ldr	r3, [r2, #0]
 800df74:	f023 0307 	bic.w	r3, r3, #7
 800df78:	432b      	orrs	r3, r5
 800df7a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df7c:	6813      	ldr	r3, [r2, #0]
 800df7e:	f003 0307 	and.w	r3, r3, #7
 800df82:	42ab      	cmp	r3, r5
 800df84:	d12e      	bne.n	800dfe4 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800df86:	6823      	ldr	r3, [r4, #0]
 800df88:	f013 0f04 	tst.w	r3, #4
 800df8c:	d006      	beq.n	800df9c <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800df8e:	4a17      	ldr	r2, [pc, #92]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800df90:	6893      	ldr	r3, [r2, #8]
 800df92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800df96:	68e1      	ldr	r1, [r4, #12]
 800df98:	430b      	orrs	r3, r1
 800df9a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	f013 0f08 	tst.w	r3, #8
 800dfa2:	d007      	beq.n	800dfb4 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dfa4:	4a11      	ldr	r2, [pc, #68]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800dfa6:	6893      	ldr	r3, [r2, #8]
 800dfa8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800dfac:	6921      	ldr	r1, [r4, #16]
 800dfae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800dfb2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800dfb4:	f7ff fbd4 	bl	800d760 <HAL_RCC_GetSysClockFreq>
 800dfb8:	4b0c      	ldr	r3, [pc, #48]	@ (800dfec <HAL_RCC_ClockConfig+0x178>)
 800dfba:	689b      	ldr	r3, [r3, #8]
 800dfbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800dfc0:	4a0b      	ldr	r2, [pc, #44]	@ (800dff0 <HAL_RCC_ClockConfig+0x17c>)
 800dfc2:	5cd3      	ldrb	r3, [r2, r3]
 800dfc4:	f003 031f 	and.w	r3, r3, #31
 800dfc8:	40d8      	lsrs	r0, r3
 800dfca:	4b0a      	ldr	r3, [pc, #40]	@ (800dff4 <HAL_RCC_ClockConfig+0x180>)
 800dfcc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800dfce:	4b0a      	ldr	r3, [pc, #40]	@ (800dff8 <HAL_RCC_ClockConfig+0x184>)
 800dfd0:	6818      	ldr	r0, [r3, #0]
 800dfd2:	f000 fbe3 	bl	800e79c <HAL_InitTick>
}
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800dfd8:	2001      	movs	r0, #1
}
 800dfda:	4770      	bx	lr
      return HAL_ERROR;
 800dfdc:	2001      	movs	r0, #1
 800dfde:	e7fa      	b.n	800dfd6 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 800dfe0:	2001      	movs	r0, #1
 800dfe2:	e7f8      	b.n	800dfd6 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 800dfe4:	2001      	movs	r0, #1
 800dfe6:	e7f6      	b.n	800dfd6 <HAL_RCC_ClockConfig+0x162>
 800dfe8:	40022000 	.word	0x40022000
 800dfec:	40021000 	.word	0x40021000
 800dff0:	0800fe08 	.word	0x0800fe08
 800dff4:	2000002c 	.word	0x2000002c
 800dff8:	20000008 	.word	0x20000008

0800dffc <HAL_RCC_GetHCLKFreq>:
}
 800dffc:	4b01      	ldr	r3, [pc, #4]	@ (800e004 <HAL_RCC_GetHCLKFreq+0x8>)
 800dffe:	6818      	ldr	r0, [r3, #0]
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	2000002c 	.word	0x2000002c

0800e008 <HAL_RCC_GetPCLK1Freq>:
{
 800e008:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e00a:	f7ff fff7 	bl	800dffc <HAL_RCC_GetHCLKFreq>
 800e00e:	4b05      	ldr	r3, [pc, #20]	@ (800e024 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800e016:	4a04      	ldr	r2, [pc, #16]	@ (800e028 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e018:	5cd3      	ldrb	r3, [r2, r3]
 800e01a:	f003 031f 	and.w	r3, r3, #31
}
 800e01e:	40d8      	lsrs	r0, r3
 800e020:	bd08      	pop	{r3, pc}
 800e022:	bf00      	nop
 800e024:	40021000 	.word	0x40021000
 800e028:	0800fe00 	.word	0x0800fe00

0800e02c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e02c:	230f      	movs	r3, #15
 800e02e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800e030:	4b0b      	ldr	r3, [pc, #44]	@ (800e060 <HAL_RCC_GetClockConfig+0x34>)
 800e032:	689a      	ldr	r2, [r3, #8]
 800e034:	f002 0203 	and.w	r2, r2, #3
 800e038:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800e03a:	689a      	ldr	r2, [r3, #8]
 800e03c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800e040:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800e042:	689a      	ldr	r2, [r3, #8]
 800e044:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800e048:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	08db      	lsrs	r3, r3, #3
 800e04e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e052:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800e054:	4b03      	ldr	r3, [pc, #12]	@ (800e064 <HAL_RCC_GetClockConfig+0x38>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f003 0307 	and.w	r3, r3, #7
 800e05c:	600b      	str	r3, [r1, #0]
}
 800e05e:	4770      	bx	lr
 800e060:	40021000 	.word	0x40021000
 800e064:	40022000 	.word	0x40022000

0800e068 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800e068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e06a:	4604      	mov	r4, r0
 800e06c:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800e06e:	4b59      	ldr	r3, [pc, #356]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e070:	68db      	ldr	r3, [r3, #12]
 800e072:	f013 0f03 	tst.w	r3, #3
 800e076:	d018      	beq.n	800e0aa <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800e078:	4b56      	ldr	r3, [pc, #344]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	f003 0303 	and.w	r3, r3, #3
 800e080:	6802      	ldr	r2, [r0, #0]
 800e082:	4293      	cmp	r3, r2
 800e084:	d002      	beq.n	800e08c <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800e086:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 800e088:	4630      	mov	r0, r6
 800e08a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800e08c:	2a00      	cmp	r2, #0
 800e08e:	f000 809c 	beq.w	800e1ca <RCCEx_PLLSAI1_Config+0x162>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800e092:	4b50      	ldr	r3, [pc, #320]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e09a:	3301      	adds	r3, #1
 800e09c:	6842      	ldr	r2, [r0, #4]
       ||
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d001      	beq.n	800e0a6 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 800e0a2:	2601      	movs	r6, #1
 800e0a4:	e7f0      	b.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800e0a6:	2600      	movs	r6, #0
 800e0a8:	e019      	b.n	800e0de <RCCEx_PLLSAI1_Config+0x76>
    switch(PllSai1->PLLSAI1Source)
 800e0aa:	6803      	ldr	r3, [r0, #0]
 800e0ac:	2b02      	cmp	r3, #2
 800e0ae:	d055      	beq.n	800e15c <RCCEx_PLLSAI1_Config+0xf4>
 800e0b0:	2b03      	cmp	r3, #3
 800e0b2:	d05a      	beq.n	800e16a <RCCEx_PLLSAI1_Config+0x102>
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	f040 808a 	bne.w	800e1ce <RCCEx_PLLSAI1_Config+0x166>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800e0ba:	4a46      	ldr	r2, [pc, #280]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e0bc:	6812      	ldr	r2, [r2, #0]
 800e0be:	f012 0f02 	tst.w	r2, #2
 800e0c2:	d05e      	beq.n	800e182 <RCCEx_PLLSAI1_Config+0x11a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800e0c4:	4843      	ldr	r0, [pc, #268]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e0c6:	68c2      	ldr	r2, [r0, #12]
 800e0c8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800e0cc:	6861      	ldr	r1, [r4, #4]
 800e0ce:	3901      	subs	r1, #1
 800e0d0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	60c3      	str	r3, [r0, #12]
 800e0d8:	2600      	movs	r6, #0
  if(status == HAL_OK)
 800e0da:	2e00      	cmp	r6, #0
 800e0dc:	d1d4      	bne.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800e0de:	4a3d      	ldr	r2, [pc, #244]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e0e0:	6813      	ldr	r3, [r2, #0]
 800e0e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e0e6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800e0e8:	f7fd f874 	bl	800b1d4 <HAL_GetTick>
 800e0ec:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800e0ee:	4b39      	ldr	r3, [pc, #228]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800e0f6:	d005      	beq.n	800e104 <RCCEx_PLLSAI1_Config+0x9c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e0f8:	f7fd f86c 	bl	800b1d4 <HAL_GetTick>
 800e0fc:	1bc3      	subs	r3, r0, r7
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d9f5      	bls.n	800e0ee <RCCEx_PLLSAI1_Config+0x86>
        status = HAL_TIMEOUT;
 800e102:	2603      	movs	r6, #3
    if(status == HAL_OK)
 800e104:	2e00      	cmp	r6, #0
 800e106:	d1bf      	bne.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800e108:	2d00      	cmp	r5, #0
 800e10a:	d13c      	bne.n	800e186 <RCCEx_PLLSAI1_Config+0x11e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e10c:	4931      	ldr	r1, [pc, #196]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e10e:	690b      	ldr	r3, [r1, #16]
 800e110:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800e114:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800e118:	68a0      	ldr	r0, [r4, #8]
 800e11a:	68e2      	ldr	r2, [r4, #12]
 800e11c:	06d2      	lsls	r2, r2, #27
 800e11e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800e122:	4313      	orrs	r3, r2
 800e124:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800e126:	4a2b      	ldr	r2, [pc, #172]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e128:	6813      	ldr	r3, [r2, #0]
 800e12a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e12e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800e130:	f7fd f850 	bl	800b1d4 <HAL_GetTick>
 800e134:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800e136:	4b27      	ldr	r3, [pc, #156]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800e13e:	d105      	bne.n	800e14c <RCCEx_PLLSAI1_Config+0xe4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e140:	f7fd f848 	bl	800b1d4 <HAL_GetTick>
 800e144:	1b40      	subs	r0, r0, r5
 800e146:	2802      	cmp	r0, #2
 800e148:	d9f5      	bls.n	800e136 <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_TIMEOUT;
 800e14a:	2603      	movs	r6, #3
      if(status == HAL_OK)
 800e14c:	2e00      	cmp	r6, #0
 800e14e:	d19b      	bne.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800e150:	4a20      	ldr	r2, [pc, #128]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e152:	6913      	ldr	r3, [r2, #16]
 800e154:	69a1      	ldr	r1, [r4, #24]
 800e156:	430b      	orrs	r3, r1
 800e158:	6113      	str	r3, [r2, #16]
 800e15a:	e795      	b.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800e15c:	4a1d      	ldr	r2, [pc, #116]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e15e:	6812      	ldr	r2, [r2, #0]
 800e160:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800e164:	d1ae      	bne.n	800e0c4 <RCCEx_PLLSAI1_Config+0x5c>
 800e166:	2601      	movs	r6, #1
 800e168:	e78e      	b.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800e16a:	4a1a      	ldr	r2, [pc, #104]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e16c:	6812      	ldr	r2, [r2, #0]
 800e16e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800e172:	d1a7      	bne.n	800e0c4 <RCCEx_PLLSAI1_Config+0x5c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800e174:	4a17      	ldr	r2, [pc, #92]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e176:	6812      	ldr	r2, [r2, #0]
 800e178:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800e17c:	d1a2      	bne.n	800e0c4 <RCCEx_PLLSAI1_Config+0x5c>
 800e17e:	2601      	movs	r6, #1
 800e180:	e782      	b.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
        status = HAL_ERROR;
 800e182:	2601      	movs	r6, #1
 800e184:	e7a9      	b.n	800e0da <RCCEx_PLLSAI1_Config+0x72>
      else if(Divider == DIVIDER_Q_UPDATE)
 800e186:	2d01      	cmp	r5, #1
 800e188:	d00f      	beq.n	800e1aa <RCCEx_PLLSAI1_Config+0x142>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e18a:	4812      	ldr	r0, [pc, #72]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e18c:	6902      	ldr	r2, [r0, #16]
 800e18e:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 800e192:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800e196:	68a1      	ldr	r1, [r4, #8]
 800e198:	6963      	ldr	r3, [r4, #20]
 800e19a:	085b      	lsrs	r3, r3, #1
 800e19c:	3b01      	subs	r3, #1
 800e19e:	065b      	lsls	r3, r3, #25
 800e1a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e1a4:	431a      	orrs	r2, r3
 800e1a6:	6102      	str	r2, [r0, #16]
 800e1a8:	e7bd      	b.n	800e126 <RCCEx_PLLSAI1_Config+0xbe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800e1aa:	480a      	ldr	r0, [pc, #40]	@ (800e1d4 <RCCEx_PLLSAI1_Config+0x16c>)
 800e1ac:	6902      	ldr	r2, [r0, #16]
 800e1ae:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800e1b2:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800e1b6:	68a1      	ldr	r1, [r4, #8]
 800e1b8:	6923      	ldr	r3, [r4, #16]
 800e1ba:	085b      	lsrs	r3, r3, #1
 800e1bc:	3b01      	subs	r3, #1
 800e1be:	055b      	lsls	r3, r3, #21
 800e1c0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e1c4:	431a      	orrs	r2, r3
 800e1c6:	6102      	str	r2, [r0, #16]
 800e1c8:	e7ad      	b.n	800e126 <RCCEx_PLLSAI1_Config+0xbe>
      status = HAL_ERROR;
 800e1ca:	2601      	movs	r6, #1
 800e1cc:	e75c      	b.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
    switch(PllSai1->PLLSAI1Source)
 800e1ce:	2601      	movs	r6, #1
 800e1d0:	e75a      	b.n	800e088 <RCCEx_PLLSAI1_Config+0x20>
 800e1d2:	bf00      	nop
 800e1d4:	40021000 	.word	0x40021000

0800e1d8 <HAL_RCCEx_PeriphCLKConfig>:
{
 800e1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1dc:	b082      	sub	sp, #8
 800e1de:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e1e0:	6803      	ldr	r3, [r0, #0]
 800e1e2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800e1e6:	d026      	beq.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800e1e8:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e1ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e1ee:	d006      	beq.n	800e1fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 800e1f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e1f4:	d01d      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800e1f6:	b19b      	cbz	r3, 800e220 <HAL_RCCEx_PeriphCLKConfig+0x48>
 800e1f8:	2601      	movs	r6, #1
 800e1fa:	4637      	mov	r7, r6
 800e1fc:	e01d      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800e1fe:	4aae      	ldr	r2, [pc, #696]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e200:	68d3      	ldr	r3, [r2, #12]
 800e202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e206:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e208:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e20a:	4aab      	ldr	r2, [pc, #684]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e20c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e210:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800e214:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800e216:	430b      	orrs	r3, r1
 800e218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e21c:	2600      	movs	r6, #0
 800e21e:	e00c      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800e220:	2100      	movs	r1, #0
 800e222:	3004      	adds	r0, #4
 800e224:	f7ff ff20 	bl	800e068 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800e228:	4607      	mov	r7, r0
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d0ed      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x32>
      status = ret;
 800e22e:	4606      	mov	r6, r0
 800e230:	e003      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch(PeriphClkInit->Sai1ClockSelection)
 800e232:	2700      	movs	r7, #0
 800e234:	e7e9      	b.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e236:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e238:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e23a:	6823      	ldr	r3, [r4, #0]
 800e23c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800e240:	d06b      	beq.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800e242:	4b9d      	ldr	r3, [pc, #628]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e246:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800e24a:	d14c      	bne.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800e24c:	4b9a      	ldr	r3, [pc, #616]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e24e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e250:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e254:	659a      	str	r2, [r3, #88]	@ 0x58
 800e256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e258:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e25c:	9301      	str	r3, [sp, #4]
 800e25e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800e260:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e264:	4a95      	ldr	r2, [pc, #596]	@ (800e4bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800e266:	6813      	ldr	r3, [r2, #0]
 800e268:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e26c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800e26e:	f7fc ffb1 	bl	800b1d4 <HAL_GetTick>
 800e272:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800e274:	4b91      	ldr	r3, [pc, #580]	@ (800e4bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800e27c:	d105      	bne.n	800e28a <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e27e:	f7fc ffa9 	bl	800b1d4 <HAL_GetTick>
 800e282:	1b40      	subs	r0, r0, r5
 800e284:	2802      	cmp	r0, #2
 800e286:	d9f5      	bls.n	800e274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 800e288:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 800e28a:	2f00      	cmp	r7, #0
 800e28c:	d140      	bne.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e28e:	4b8a      	ldr	r3, [pc, #552]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e294:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800e298:	d018      	beq.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800e29a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d012      	beq.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e2a0:	4a85      	ldr	r2, [pc, #532]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e2a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800e2a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800e2aa:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800e2ae:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800e2b2:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e2b6:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800e2ba:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800e2be:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800e2c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e2c6:	f013 0f01 	tst.w	r3, #1
 800e2ca:	d10f      	bne.n	800e2ec <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 800e2cc:	2f00      	cmp	r7, #0
 800e2ce:	f040 80c9 	bne.w	800e464 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e2d2:	4a79      	ldr	r2, [pc, #484]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e2d4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800e2d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e2dc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800e2de:	430b      	orrs	r3, r1
 800e2e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800e2e4:	e015      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 800e2e6:	f04f 0800 	mov.w	r8, #0
 800e2ea:	e7bb      	b.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 800e2ec:	f7fc ff72 	bl	800b1d4 <HAL_GetTick>
 800e2f0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e2f2:	4b71      	ldr	r3, [pc, #452]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e2f8:	f013 0f02 	tst.w	r3, #2
 800e2fc:	d1e6      	bne.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e2fe:	f7fc ff69 	bl	800b1d4 <HAL_GetTick>
 800e302:	1b40      	subs	r0, r0, r5
 800e304:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e308:	4298      	cmp	r0, r3
 800e30a:	d9f2      	bls.n	800e2f2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 800e30c:	2703      	movs	r7, #3
 800e30e:	e7dd      	b.n	800e2cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 800e310:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 800e312:	f1b8 0f00 	cmp.w	r8, #0
 800e316:	f040 80a7 	bne.w	800e468 <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e31a:	6823      	ldr	r3, [r4, #0]
 800e31c:	f013 0f01 	tst.w	r3, #1
 800e320:	d008      	beq.n	800e334 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e322:	4a65      	ldr	r2, [pc, #404]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e324:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e328:	f023 0303 	bic.w	r3, r3, #3
 800e32c:	6a21      	ldr	r1, [r4, #32]
 800e32e:	430b      	orrs	r3, r1
 800e330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	f013 0f02 	tst.w	r3, #2
 800e33a:	d008      	beq.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e33c:	4a5e      	ldr	r2, [pc, #376]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e33e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e342:	f023 030c 	bic.w	r3, r3, #12
 800e346:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800e348:	430b      	orrs	r3, r1
 800e34a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	f013 0f20 	tst.w	r3, #32
 800e354:	d008      	beq.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e356:	4a58      	ldr	r2, [pc, #352]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e358:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e35c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e360:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800e362:	430b      	orrs	r3, r1
 800e364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800e36e:	d008      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e370:	4a51      	ldr	r2, [pc, #324]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e372:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e376:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800e37a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e37c:	430b      	orrs	r3, r1
 800e37e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800e388:	d008      	beq.n	800e39c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e38a:	4a4b      	ldr	r2, [pc, #300]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e38c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e390:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e394:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e396:	430b      	orrs	r3, r1
 800e398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800e3a2:	d008      	beq.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e3a4:	4a44      	ldr	r2, [pc, #272]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e3a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e3aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800e3ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e3b0:	430b      	orrs	r3, r1
 800e3b2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e3b6:	6823      	ldr	r3, [r4, #0]
 800e3b8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800e3bc:	d008      	beq.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e3be:	4a3e      	ldr	r2, [pc, #248]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e3c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e3c4:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800e3c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e3ca:	430b      	orrs	r3, r1
 800e3cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e3d0:	6823      	ldr	r3, [r4, #0]
 800e3d2:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800e3d6:	d00f      	beq.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e3d8:	4a37      	ldr	r2, [pc, #220]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e3da:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e3de:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800e3e2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800e3e4:	430b      	orrs	r3, r1
 800e3e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e3ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e3ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e3f0:	d040      	beq.n	800e474 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e3f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e3f6:	d042      	beq.n	800e47e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e3f8:	6823      	ldr	r3, [r4, #0]
 800e3fa:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800e3fe:	d00f      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e400:	4a2d      	ldr	r2, [pc, #180]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e402:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e406:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800e40a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e40c:	430b      	orrs	r3, r1
 800e40e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e412:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e414:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e418:	d039      	beq.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800e41a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e41e:	d03b      	beq.n	800e498 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e420:	6823      	ldr	r3, [r4, #0]
 800e422:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800e426:	d00c      	beq.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e428:	4a23      	ldr	r2, [pc, #140]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e42a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e42e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800e432:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e434:	430b      	orrs	r3, r1
 800e436:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e43a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e43c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e440:	d032      	beq.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e442:	6823      	ldr	r3, [r4, #0]
 800e444:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800e448:	d008      	beq.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e44a:	4a1b      	ldr	r2, [pc, #108]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e44c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800e450:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e454:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800e456:	430b      	orrs	r3, r1
 800e458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800e45c:	4630      	mov	r0, r6
 800e45e:	b002      	add	sp, #8
 800e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 800e464:	463e      	mov	r6, r7
 800e466:	e754      	b.n	800e312 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800e468:	4a13      	ldr	r2, [pc, #76]	@ (800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800e46a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800e46c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e470:	6593      	str	r3, [r2, #88]	@ 0x58
 800e472:	e752      	b.n	800e31a <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e474:	68d3      	ldr	r3, [r2, #12]
 800e476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e47a:	60d3      	str	r3, [r2, #12]
 800e47c:	e7bc      	b.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e47e:	2101      	movs	r1, #1
 800e480:	1d20      	adds	r0, r4, #4
 800e482:	f7ff fdf1 	bl	800e068 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800e486:	2800      	cmp	r0, #0
 800e488:	d0b6      	beq.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 800e48a:	4606      	mov	r6, r0
 800e48c:	e7b4      	b.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e48e:	68d3      	ldr	r3, [r2, #12]
 800e490:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e494:	60d3      	str	r3, [r2, #12]
 800e496:	e7c3      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800e498:	2101      	movs	r1, #1
 800e49a:	1d20      	adds	r0, r4, #4
 800e49c:	f7ff fde4 	bl	800e068 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	d0bd      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 800e4a4:	4606      	mov	r6, r0
 800e4a6:	e7bb      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800e4a8:	2102      	movs	r1, #2
 800e4aa:	1d20      	adds	r0, r4, #4
 800e4ac:	f7ff fddc 	bl	800e068 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	d0c6      	beq.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 800e4b4:	4606      	mov	r6, r0
 800e4b6:	e7c4      	b.n	800e442 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800e4b8:	40021000 	.word	0x40021000
 800e4bc:	40007000 	.word	0x40007000

0800e4c0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800e4c0:	4770      	bx	lr
	...

0800e4c4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e4c4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d126      	bne.n	800e51a <HAL_TIM_Base_Start_IT+0x56>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e4d2:	6802      	ldr	r2, [r0, #0]
 800e4d4:	68d3      	ldr	r3, [r2, #12]
 800e4d6:	f043 0301 	orr.w	r3, r3, #1
 800e4da:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4dc:	6803      	ldr	r3, [r0, #0]
 800e4de:	4a12      	ldr	r2, [pc, #72]	@ (800e528 <HAL_TIM_Base_Start_IT+0x64>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d00c      	beq.n	800e4fe <HAL_TIM_Base_Start_IT+0x3a>
 800e4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e8:	d009      	beq.n	800e4fe <HAL_TIM_Base_Start_IT+0x3a>
 800e4ea:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d005      	beq.n	800e4fe <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	f042 0201 	orr.w	r2, r2, #1
 800e4f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4fe:	6899      	ldr	r1, [r3, #8]
 800e500:	4a0a      	ldr	r2, [pc, #40]	@ (800e52c <HAL_TIM_Base_Start_IT+0x68>)
 800e502:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e504:	2a06      	cmp	r2, #6
 800e506:	d00a      	beq.n	800e51e <HAL_TIM_Base_Start_IT+0x5a>
 800e508:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800e50c:	d009      	beq.n	800e522 <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800e50e:	681a      	ldr	r2, [r3, #0]
 800e510:	f042 0201 	orr.w	r2, r2, #1
 800e514:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800e516:	2000      	movs	r0, #0
 800e518:	4770      	bx	lr
    return HAL_ERROR;
 800e51a:	2001      	movs	r0, #1
 800e51c:	4770      	bx	lr
  return HAL_OK;
 800e51e:	2000      	movs	r0, #0
 800e520:	4770      	bx	lr
 800e522:	2000      	movs	r0, #0
}
 800e524:	4770      	bx	lr
 800e526:	bf00      	nop
 800e528:	40012c00 	.word	0x40012c00
 800e52c:	00010007 	.word	0x00010007

0800e530 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e530:	4770      	bx	lr

0800e532 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e532:	4770      	bx	lr

0800e534 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e534:	4770      	bx	lr

0800e536 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e536:	4770      	bx	lr

0800e538 <HAL_TIM_IRQHandler>:
{
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800e53c:	6803      	ldr	r3, [r0, #0]
 800e53e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e540:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e542:	f015 0f02 	tst.w	r5, #2
 800e546:	d010      	beq.n	800e56a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e548:	f016 0f02 	tst.w	r6, #2
 800e54c:	d00d      	beq.n	800e56a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e54e:	f06f 0202 	mvn.w	r2, #2
 800e552:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e554:	2301      	movs	r3, #1
 800e556:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e558:	6803      	ldr	r3, [r0, #0]
 800e55a:	699b      	ldr	r3, [r3, #24]
 800e55c:	f013 0f03 	tst.w	r3, #3
 800e560:	d064      	beq.n	800e62c <HAL_TIM_IRQHandler+0xf4>
          HAL_TIM_IC_CaptureCallback(htim);
 800e562:	f7ff ffe6 	bl	800e532 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e566:	2300      	movs	r3, #0
 800e568:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e56a:	f015 0f04 	tst.w	r5, #4
 800e56e:	d012      	beq.n	800e596 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e570:	f016 0f04 	tst.w	r6, #4
 800e574:	d00f      	beq.n	800e596 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	f06f 0204 	mvn.w	r2, #4
 800e57c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e57e:	2302      	movs	r3, #2
 800e580:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e582:	6823      	ldr	r3, [r4, #0]
 800e584:	699b      	ldr	r3, [r3, #24]
 800e586:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800e58a:	d055      	beq.n	800e638 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 800e58c:	4620      	mov	r0, r4
 800e58e:	f7ff ffd0 	bl	800e532 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e592:	2300      	movs	r3, #0
 800e594:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e596:	f015 0f08 	tst.w	r5, #8
 800e59a:	d012      	beq.n	800e5c2 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e59c:	f016 0f08 	tst.w	r6, #8
 800e5a0:	d00f      	beq.n	800e5c2 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	f06f 0208 	mvn.w	r2, #8
 800e5a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e5aa:	2304      	movs	r3, #4
 800e5ac:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e5ae:	6823      	ldr	r3, [r4, #0]
 800e5b0:	69db      	ldr	r3, [r3, #28]
 800e5b2:	f013 0f03 	tst.w	r3, #3
 800e5b6:	d046      	beq.n	800e646 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f7ff ffba 	bl	800e532 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e5c2:	f015 0f10 	tst.w	r5, #16
 800e5c6:	d012      	beq.n	800e5ee <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e5c8:	f016 0f10 	tst.w	r6, #16
 800e5cc:	d00f      	beq.n	800e5ee <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	f06f 0210 	mvn.w	r2, #16
 800e5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e5d6:	2308      	movs	r3, #8
 800e5d8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e5da:	6823      	ldr	r3, [r4, #0]
 800e5dc:	69db      	ldr	r3, [r3, #28]
 800e5de:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800e5e2:	d037      	beq.n	800e654 <HAL_TIM_IRQHandler+0x11c>
        HAL_TIM_IC_CaptureCallback(htim);
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	f7ff ffa4 	bl	800e532 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e5ee:	f015 0f01 	tst.w	r5, #1
 800e5f2:	d002      	beq.n	800e5fa <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e5f4:	f016 0f01 	tst.w	r6, #1
 800e5f8:	d133      	bne.n	800e662 <HAL_TIM_IRQHandler+0x12a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e5fa:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 800e5fe:	d002      	beq.n	800e606 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e600:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800e604:	d135      	bne.n	800e672 <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e606:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800e60a:	d002      	beq.n	800e612 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e60c:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800e610:	d137      	bne.n	800e682 <HAL_TIM_IRQHandler+0x14a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e612:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800e616:	d002      	beq.n	800e61e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e618:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800e61c:	d139      	bne.n	800e692 <HAL_TIM_IRQHandler+0x15a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e61e:	f015 0f20 	tst.w	r5, #32
 800e622:	d002      	beq.n	800e62a <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e624:	f016 0f20 	tst.w	r6, #32
 800e628:	d13b      	bne.n	800e6a2 <HAL_TIM_IRQHandler+0x16a>
}
 800e62a:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e62c:	f7ff ff80 	bl	800e530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e630:	4620      	mov	r0, r4
 800e632:	f7ff ff7f 	bl	800e534 <HAL_TIM_PWM_PulseFinishedCallback>
 800e636:	e796      	b.n	800e566 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e638:	4620      	mov	r0, r4
 800e63a:	f7ff ff79 	bl	800e530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e63e:	4620      	mov	r0, r4
 800e640:	f7ff ff78 	bl	800e534 <HAL_TIM_PWM_PulseFinishedCallback>
 800e644:	e7a5      	b.n	800e592 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e646:	4620      	mov	r0, r4
 800e648:	f7ff ff72 	bl	800e530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e64c:	4620      	mov	r0, r4
 800e64e:	f7ff ff71 	bl	800e534 <HAL_TIM_PWM_PulseFinishedCallback>
 800e652:	e7b4      	b.n	800e5be <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e654:	4620      	mov	r0, r4
 800e656:	f7ff ff6b 	bl	800e530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e65a:	4620      	mov	r0, r4
 800e65c:	f7ff ff6a 	bl	800e534 <HAL_TIM_PWM_PulseFinishedCallback>
 800e660:	e7c3      	b.n	800e5ea <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	f06f 0201 	mvn.w	r2, #1
 800e668:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800e66a:	4620      	mov	r0, r4
 800e66c:	f7fb fd00 	bl	800a070 <HAL_TIM_PeriodElapsedCallback>
 800e670:	e7c3      	b.n	800e5fa <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e672:	6823      	ldr	r3, [r4, #0]
 800e674:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e678:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 f88b 	bl	800e796 <HAL_TIMEx_BreakCallback>
 800e680:	e7c1      	b.n	800e606 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e688:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800e68a:	4620      	mov	r0, r4
 800e68c:	f000 f884 	bl	800e798 <HAL_TIMEx_Break2Callback>
 800e690:	e7bf      	b.n	800e612 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e692:	6823      	ldr	r3, [r4, #0]
 800e694:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e698:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800e69a:	4620      	mov	r0, r4
 800e69c:	f7ff ff4b 	bl	800e536 <HAL_TIM_TriggerCallback>
 800e6a0:	e7bd      	b.n	800e61e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	f06f 0220 	mvn.w	r2, #32
 800e6a8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 f872 	bl	800e794 <HAL_TIMEx_CommutCallback>
}
 800e6b0:	e7bb      	b.n	800e62a <HAL_TIM_IRQHandler+0xf2>
	...

0800e6b4 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6b4:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6b6:	4a1e      	ldr	r2, [pc, #120]	@ (800e730 <TIM_Base_SetConfig+0x7c>)
 800e6b8:	4290      	cmp	r0, r2
 800e6ba:	d002      	beq.n	800e6c2 <TIM_Base_SetConfig+0xe>
 800e6bc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e6c0:	d103      	bne.n	800e6ca <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e6c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800e6c6:	684a      	ldr	r2, [r1, #4]
 800e6c8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6ca:	4a19      	ldr	r2, [pc, #100]	@ (800e730 <TIM_Base_SetConfig+0x7c>)
 800e6cc:	4290      	cmp	r0, r2
 800e6ce:	d00a      	beq.n	800e6e6 <TIM_Base_SetConfig+0x32>
 800e6d0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800e6d4:	d007      	beq.n	800e6e6 <TIM_Base_SetConfig+0x32>
 800e6d6:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800e6da:	4290      	cmp	r0, r2
 800e6dc:	d003      	beq.n	800e6e6 <TIM_Base_SetConfig+0x32>
 800e6de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e6e2:	4290      	cmp	r0, r2
 800e6e4:	d103      	bne.n	800e6ee <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6ea:	68ca      	ldr	r2, [r1, #12]
 800e6ec:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e6f2:	694a      	ldr	r2, [r1, #20]
 800e6f4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800e6f6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6f8:	688b      	ldr	r3, [r1, #8]
 800e6fa:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6fc:	680b      	ldr	r3, [r1, #0]
 800e6fe:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e700:	4b0b      	ldr	r3, [pc, #44]	@ (800e730 <TIM_Base_SetConfig+0x7c>)
 800e702:	4298      	cmp	r0, r3
 800e704:	d007      	beq.n	800e716 <TIM_Base_SetConfig+0x62>
 800e706:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800e70a:	4298      	cmp	r0, r3
 800e70c:	d003      	beq.n	800e716 <TIM_Base_SetConfig+0x62>
 800e70e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e712:	4298      	cmp	r0, r3
 800e714:	d101      	bne.n	800e71a <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e716:	690b      	ldr	r3, [r1, #16]
 800e718:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e71a:	2301      	movs	r3, #1
 800e71c:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e71e:	6903      	ldr	r3, [r0, #16]
 800e720:	f013 0f01 	tst.w	r3, #1
 800e724:	d003      	beq.n	800e72e <TIM_Base_SetConfig+0x7a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e726:	6903      	ldr	r3, [r0, #16]
 800e728:	f023 0301 	bic.w	r3, r3, #1
 800e72c:	6103      	str	r3, [r0, #16]
  }
}
 800e72e:	4770      	bx	lr
 800e730:	40012c00 	.word	0x40012c00

0800e734 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800e734:	b360      	cbz	r0, 800e790 <HAL_TIM_Base_Init+0x5c>
{
 800e736:	b510      	push	{r4, lr}
 800e738:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800e73a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800e73e:	b313      	cbz	r3, 800e786 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800e740:	2302      	movs	r3, #2
 800e742:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e746:	4621      	mov	r1, r4
 800e748:	f851 0b04 	ldr.w	r0, [r1], #4
 800e74c:	f7ff ffb2 	bl	800e6b4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e750:	2301      	movs	r3, #1
 800e752:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e756:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800e75a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800e75e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800e762:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800e766:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e76a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e76e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800e772:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e776:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800e77a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e77e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800e782:	2000      	movs	r0, #0
}
 800e784:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800e786:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800e78a:	f7ff fe99 	bl	800e4c0 <HAL_TIM_Base_MspInit>
 800e78e:	e7d7      	b.n	800e740 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800e790:	2001      	movs	r0, #1
}
 800e792:	4770      	bx	lr

0800e794 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e794:	4770      	bx	lr

0800e796 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e796:	4770      	bx	lr

0800e798 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e798:	4770      	bx	lr
	...

0800e79c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e79c:	b530      	push	{r4, r5, lr}
 800e79e:	b089      	sub	sp, #36	@ 0x24
 800e7a0:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800e7a2:	4b21      	ldr	r3, [pc, #132]	@ (800e828 <HAL_InitTick+0x8c>)
 800e7a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e7a6:	f042 0210 	orr.w	r2, r2, #16
 800e7aa:	659a      	str	r2, [r3, #88]	@ 0x58
 800e7ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7ae:	f003 0310 	and.w	r3, r3, #16
 800e7b2:	9301      	str	r3, [sp, #4]
 800e7b4:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800e7b6:	a902      	add	r1, sp, #8
 800e7b8:	a803      	add	r0, sp, #12
 800e7ba:	f7ff fc37 	bl	800e02c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800e7be:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800e7c0:	b9cb      	cbnz	r3, 800e7f6 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800e7c2:	f7ff fc21 	bl	800e008 <HAL_RCC_GetPCLK1Freq>
 800e7c6:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800e7c8:	4a18      	ldr	r2, [pc, #96]	@ (800e82c <HAL_InitTick+0x90>)
 800e7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e7ce:	0c9b      	lsrs	r3, r3, #18
 800e7d0:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800e7d2:	4817      	ldr	r0, [pc, #92]	@ (800e830 <HAL_InitTick+0x94>)
 800e7d4:	4a17      	ldr	r2, [pc, #92]	@ (800e834 <HAL_InitTick+0x98>)
 800e7d6:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800e7d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800e7dc:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800e7de:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e7e4:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e7e6:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800e7e8:	f7ff ffa4 	bl	800e734 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800e7ec:	4605      	mov	r5, r0
 800e7ee:	b130      	cbz	r0, 800e7fe <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	b009      	add	sp, #36	@ 0x24
 800e7f4:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800e7f6:	f7ff fc07 	bl	800e008 <HAL_RCC_GetPCLK1Freq>
 800e7fa:	0043      	lsls	r3, r0, #1
 800e7fc:	e7e4      	b.n	800e7c8 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800e7fe:	480c      	ldr	r0, [pc, #48]	@ (800e830 <HAL_InitTick+0x94>)
 800e800:	f7ff fe60 	bl	800e4c4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800e804:	4605      	mov	r5, r0
 800e806:	2800      	cmp	r0, #0
 800e808:	d1f2      	bne.n	800e7f0 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800e80a:	2036      	movs	r0, #54	@ 0x36
 800e80c:	f7fd fe86 	bl	800c51c <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e810:	2c0f      	cmp	r4, #15
 800e812:	d901      	bls.n	800e818 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 800e814:	2501      	movs	r5, #1
 800e816:	e7eb      	b.n	800e7f0 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800e818:	2200      	movs	r2, #0
 800e81a:	4621      	mov	r1, r4
 800e81c:	2036      	movs	r0, #54	@ 0x36
 800e81e:	f7fd fe6d 	bl	800c4fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800e822:	4b05      	ldr	r3, [pc, #20]	@ (800e838 <HAL_InitTick+0x9c>)
 800e824:	601c      	str	r4, [r3, #0]
 800e826:	e7e3      	b.n	800e7f0 <HAL_InitTick+0x54>
 800e828:	40021000 	.word	0x40021000
 800e82c:	431bde83 	.word	0x431bde83
 800e830:	20003e24 	.word	0x20003e24
 800e834:	40001000 	.word	0x40001000
 800e838:	20000008 	.word	0x20000008

0800e83c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e83c:	e7fe      	b.n	800e83c <NMI_Handler>

0800e83e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e83e:	e7fe      	b.n	800e83e <HardFault_Handler>

0800e840 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e840:	e7fe      	b.n	800e840 <MemManage_Handler>

0800e842 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e842:	e7fe      	b.n	800e842 <BusFault_Handler>

0800e844 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e844:	e7fe      	b.n	800e844 <UsageFault_Handler>

0800e846 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e846:	4770      	bx	lr

0800e848 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800e848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800e84a:	4802      	ldr	r0, [pc, #8]	@ (800e854 <CAN1_RX0_IRQHandler+0xc>)
 800e84c:	f7fd fcd8 	bl	800c200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800e850:	bd08      	pop	{r3, pc}
 800e852:	bf00      	nop
 800e854:	20003d4c 	.word	0x20003d4c

0800e858 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800e858:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800e85a:	4802      	ldr	r0, [pc, #8]	@ (800e864 <CAN1_RX1_IRQHandler+0xc>)
 800e85c:	f7fd fcd0 	bl	800c200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800e860:	bd08      	pop	{r3, pc}
 800e862:	bf00      	nop
 800e864:	20003d4c 	.word	0x20003d4c

0800e868 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800e868:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800e86a:	4802      	ldr	r0, [pc, #8]	@ (800e874 <CAN1_TX_IRQHandler+0xc>)
 800e86c:	f7fd fcc8 	bl	800c200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800e870:	bd08      	pop	{r3, pc}
 800e872:	bf00      	nop
 800e874:	20003d4c 	.word	0x20003d4c

0800e878 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800e878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800e87a:	4802      	ldr	r0, [pc, #8]	@ (800e884 <CAN1_SCE_IRQHandler+0xc>)
 800e87c:	f7fd fcc0 	bl	800c200 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800e880:	bd08      	pop	{r3, pc}
 800e882:	bf00      	nop
 800e884:	20003d4c 	.word	0x20003d4c

0800e888 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800e888:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800e88a:	4802      	ldr	r0, [pc, #8]	@ (800e894 <TIM6_DAC_IRQHandler+0xc>)
 800e88c:	f7ff fe54 	bl	800e538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800e890:	bd08      	pop	{r3, pc}
 800e892:	bf00      	nop
 800e894:	20003e24 	.word	0x20003e24

0800e898 <SystemInit>:

void SystemInit(void)
{
  /* Reset RCC clock configuration to default state (coming from bootloader) */
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800e898:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d8 <SystemInit+0x40>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	f042 0201 	orr.w	r2, r2, #1
 800e8a0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register (switch to MSI as system clock) */
  RCC->CFGR = 0x00000000U;
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON, HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 800e8ac:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 800e8b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register to default */
  RCC->PLLCFGR = 0x00001000U;
 800e8b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e8b6:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e8be:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800e8c0:	6199      	str	r1, [r3, #24]

#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800e8c2:	4b06      	ldr	r3, [pc, #24]	@ (800e8dc <SystemInit+0x44>)
 800e8c4:	4a06      	ldr	r2, [pc, #24]	@ (800e8e0 <SystemInit+0x48>)
 800e8c6:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800e8c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e8cc:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800e8d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif
}
 800e8d4:	4770      	bx	lr
 800e8d6:	bf00      	nop
 800e8d8:	40021000 	.word	0x40021000
 800e8dc:	e000ed00 	.word	0xe000ed00
 800e8e0:	08008000 	.word	0x08008000

0800e8e4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8e4:	4b08      	ldr	r3, [pc, #32]	@ (800e908 <prvResetNextTaskUnblockTime+0x24>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	b923      	cbnz	r3, 800e8f6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e8ec:	4b07      	ldr	r3, [pc, #28]	@ (800e90c <prvResetNextTaskUnblockTime+0x28>)
 800e8ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f6:	4b04      	ldr	r3, [pc, #16]	@ (800e908 <prvResetNextTaskUnblockTime+0x24>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e8fe:	685a      	ldr	r2, [r3, #4]
 800e900:	4b02      	ldr	r3, [pc, #8]	@ (800e90c <prvResetNextTaskUnblockTime+0x28>)
 800e902:	601a      	str	r2, [r3, #0]
	}
}
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	20003ee0 	.word	0x20003ee0
 800e90c:	20003e78 	.word	0x20003e78

0800e910 <prvInitialiseNewTask>:
{
 800e910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e914:	4680      	mov	r8, r0
 800e916:	460d      	mov	r5, r1
 800e918:	4617      	mov	r7, r2
 800e91a:	4699      	mov	r9, r3
 800e91c:	9e08      	ldr	r6, [sp, #32]
 800e91e:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800e922:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e924:	0092      	lsls	r2, r2, #2
 800e926:	21a5      	movs	r1, #165	@ 0xa5
 800e928:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e92a:	f000 ffd6 	bl	800f8da <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e92e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e930:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 800e934:	3a01      	subs	r2, #1
 800e936:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e93a:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800e93e:	b3a5      	cbz	r5, 800e9aa <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e940:	f04f 0c00 	mov.w	ip, #0
 800e944:	f1bc 0f0f 	cmp.w	ip, #15
 800e948:	d809      	bhi.n	800e95e <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e94a:	f815 300c 	ldrb.w	r3, [r5, ip]
 800e94e:	eb04 020c 	add.w	r2, r4, ip
 800e952:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800e956:	b113      	cbz	r3, 800e95e <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e958:	f10c 0c01 	add.w	ip, ip, #1
 800e95c:	e7f2      	b.n	800e944 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e95e:	2300      	movs	r3, #0
 800e960:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e964:	2e37      	cmp	r6, #55	@ 0x37
 800e966:	d900      	bls.n	800e96a <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e968:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800e96a:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800e96c:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e96e:	2500      	movs	r5, #0
 800e970:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e972:	1d20      	adds	r0, r4, #4
 800e974:	f7fb fac5 	bl	8009f02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e978:	f104 0018 	add.w	r0, r4, #24
 800e97c:	f7fb fac1 	bl	8009f02 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e980:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e982:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800e986:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e988:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800e98a:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e98c:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e990:	464a      	mov	r2, r9
 800e992:	4641      	mov	r1, r8
 800e994:	4638      	mov	r0, r7
 800e996:	f7fb fd6f 	bl	800a478 <pxPortInitialiseStack>
 800e99a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800e99c:	f1ba 0f00 	cmp.w	sl, #0
 800e9a0:	d001      	beq.n	800e9a6 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e9a2:	f8ca 4000 	str.w	r4, [sl]
}
 800e9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800e9b0:	e7d8      	b.n	800e964 <prvInitialiseNewTask+0x54>
	...

0800e9b4 <prvInitialiseTaskLists>:
{
 800e9b4:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9b6:	2400      	movs	r4, #0
 800e9b8:	e007      	b.n	800e9ca <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9ba:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800e9be:	0093      	lsls	r3, r2, #2
 800e9c0:	480e      	ldr	r0, [pc, #56]	@ (800e9fc <prvInitialiseTaskLists+0x48>)
 800e9c2:	4418      	add	r0, r3
 800e9c4:	f7fb fa92 	bl	8009eec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9c8:	3401      	adds	r4, #1
 800e9ca:	2c37      	cmp	r4, #55	@ 0x37
 800e9cc:	d9f5      	bls.n	800e9ba <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800e9ce:	4d0c      	ldr	r5, [pc, #48]	@ (800ea00 <prvInitialiseTaskLists+0x4c>)
 800e9d0:	4628      	mov	r0, r5
 800e9d2:	f7fb fa8b 	bl	8009eec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e9d6:	4c0b      	ldr	r4, [pc, #44]	@ (800ea04 <prvInitialiseTaskLists+0x50>)
 800e9d8:	4620      	mov	r0, r4
 800e9da:	f7fb fa87 	bl	8009eec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9de:	480a      	ldr	r0, [pc, #40]	@ (800ea08 <prvInitialiseTaskLists+0x54>)
 800e9e0:	f7fb fa84 	bl	8009eec <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800e9e4:	4809      	ldr	r0, [pc, #36]	@ (800ea0c <prvInitialiseTaskLists+0x58>)
 800e9e6:	f7fb fa81 	bl	8009eec <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800e9ea:	4809      	ldr	r0, [pc, #36]	@ (800ea10 <prvInitialiseTaskLists+0x5c>)
 800e9ec:	f7fb fa7e 	bl	8009eec <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9f0:	4b08      	ldr	r3, [pc, #32]	@ (800ea14 <prvInitialiseTaskLists+0x60>)
 800e9f2:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9f4:	4b08      	ldr	r3, [pc, #32]	@ (800ea18 <prvInitialiseTaskLists+0x64>)
 800e9f6:	601c      	str	r4, [r3, #0]
}
 800e9f8:	bd38      	pop	{r3, r4, r5, pc}
 800e9fa:	bf00      	nop
 800e9fc:	20003f0c 	.word	0x20003f0c
 800ea00:	20003ef8 	.word	0x20003ef8
 800ea04:	20003ee4 	.word	0x20003ee4
 800ea08:	20003ec8 	.word	0x20003ec8
 800ea0c:	20003eb4 	.word	0x20003eb4
 800ea10:	20003e9c 	.word	0x20003e9c
 800ea14:	20003ee0 	.word	0x20003ee0
 800ea18:	20003edc 	.word	0x20003edc

0800ea1c <prvAddNewTaskToReadyList>:
{
 800ea1c:	b510      	push	{r4, lr}
 800ea1e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ea20:	f7fb fd58 	bl	800a4d4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800ea24:	4a22      	ldr	r2, [pc, #136]	@ (800eab0 <prvAddNewTaskToReadyList+0x94>)
 800ea26:	6813      	ldr	r3, [r2, #0]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea2c:	4b21      	ldr	r3, [pc, #132]	@ (800eab4 <prvAddNewTaskToReadyList+0x98>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	b15b      	cbz	r3, 800ea4a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800ea32:	4b21      	ldr	r3, [pc, #132]	@ (800eab8 <prvAddNewTaskToReadyList+0x9c>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	b96b      	cbnz	r3, 800ea54 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea38:	4b1e      	ldr	r3, [pc, #120]	@ (800eab4 <prvAddNewTaskToReadyList+0x98>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d807      	bhi.n	800ea54 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800ea44:	4b1b      	ldr	r3, [pc, #108]	@ (800eab4 <prvAddNewTaskToReadyList+0x98>)
 800ea46:	601c      	str	r4, [r3, #0]
 800ea48:	e004      	b.n	800ea54 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800ea4a:	4b1a      	ldr	r3, [pc, #104]	@ (800eab4 <prvAddNewTaskToReadyList+0x98>)
 800ea4c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea4e:	6813      	ldr	r3, [r2, #0]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d029      	beq.n	800eaa8 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800ea54:	4a19      	ldr	r2, [pc, #100]	@ (800eabc <prvAddNewTaskToReadyList+0xa0>)
 800ea56:	6813      	ldr	r3, [r2, #0]
 800ea58:	3301      	adds	r3, #1
 800ea5a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea5c:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800ea5e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800ea60:	4b17      	ldr	r3, [pc, #92]	@ (800eac0 <prvAddNewTaskToReadyList+0xa4>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	4298      	cmp	r0, r3
 800ea66:	d901      	bls.n	800ea6c <prvAddNewTaskToReadyList+0x50>
 800ea68:	4b15      	ldr	r3, [pc, #84]	@ (800eac0 <prvAddNewTaskToReadyList+0xa4>)
 800ea6a:	6018      	str	r0, [r3, #0]
 800ea6c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ea70:	1d21      	adds	r1, r4, #4
 800ea72:	4b14      	ldr	r3, [pc, #80]	@ (800eac4 <prvAddNewTaskToReadyList+0xa8>)
 800ea74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ea78:	f7fb fa46 	bl	8009f08 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800ea7c:	f7fb fd4c 	bl	800a518 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ea80:	4b0d      	ldr	r3, [pc, #52]	@ (800eab8 <prvAddNewTaskToReadyList+0x9c>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	b17b      	cbz	r3, 800eaa6 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ea86:	4b0b      	ldr	r3, [pc, #44]	@ (800eab4 <prvAddNewTaskToReadyList+0x98>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea8c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d209      	bcs.n	800eaa6 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800ea92:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ea96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea9a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ea9e:	f3bf 8f4f 	dsb	sy
 800eaa2:	f3bf 8f6f 	isb	sy
}
 800eaa6:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800eaa8:	f7ff ff84 	bl	800e9b4 <prvInitialiseTaskLists>
 800eaac:	e7d2      	b.n	800ea54 <prvAddNewTaskToReadyList+0x38>
 800eaae:	bf00      	nop
 800eab0:	20003e98 	.word	0x20003e98
 800eab4:	2000436c 	.word	0x2000436c
 800eab8:	20003e8c 	.word	0x20003e8c
 800eabc:	20003e7c 	.word	0x20003e7c
 800eac0:	20003e90 	.word	0x20003e90
 800eac4:	20003f0c 	.word	0x20003f0c

0800eac8 <prvDeleteTCB>:
	{
 800eac8:	b510      	push	{r4, lr}
 800eaca:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eacc:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 800ead0:	b163      	cbz	r3, 800eaec <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d011      	beq.n	800eafa <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d00e      	beq.n	800eaf8 <prvDeleteTCB+0x30>
 800eada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eade:	f383 8811 	msr	BASEPRI, r3
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	f3bf 8f4f 	dsb	sy
 800eaea:	e7fe      	b.n	800eaea <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800eaec:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800eaee:	f7fb f9b3 	bl	8009e58 <vPortFree>
				vPortFree( pxTCB );
 800eaf2:	4620      	mov	r0, r4
 800eaf4:	f7fb f9b0 	bl	8009e58 <vPortFree>
	}
 800eaf8:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800eafa:	f7fb f9ad 	bl	8009e58 <vPortFree>
 800eafe:	e7fb      	b.n	800eaf8 <prvDeleteTCB+0x30>

0800eb00 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb00:	4b0f      	ldr	r3, [pc, #60]	@ (800eb40 <prvCheckTasksWaitingTermination+0x40>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	b1d3      	cbz	r3, 800eb3c <prvCheckTasksWaitingTermination+0x3c>
{
 800eb06:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800eb08:	f7fb fce4 	bl	800a4d4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb0c:	4b0d      	ldr	r3, [pc, #52]	@ (800eb44 <prvCheckTasksWaitingTermination+0x44>)
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb12:	1d20      	adds	r0, r4, #4
 800eb14:	f7fb fa1c 	bl	8009f50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb18:	4a0b      	ldr	r2, [pc, #44]	@ (800eb48 <prvCheckTasksWaitingTermination+0x48>)
 800eb1a:	6813      	ldr	r3, [r2, #0]
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb20:	4a07      	ldr	r2, [pc, #28]	@ (800eb40 <prvCheckTasksWaitingTermination+0x40>)
 800eb22:	6813      	ldr	r3, [r2, #0]
 800eb24:	3b01      	subs	r3, #1
 800eb26:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800eb28:	f7fb fcf6 	bl	800a518 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f7ff ffcb 	bl	800eac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb32:	4b03      	ldr	r3, [pc, #12]	@ (800eb40 <prvCheckTasksWaitingTermination+0x40>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1e6      	bne.n	800eb08 <prvCheckTasksWaitingTermination+0x8>
 }
 800eb3a:	bd10      	pop	{r4, pc}
 800eb3c:	4770      	bx	lr
 800eb3e:	bf00      	nop
 800eb40:	20003eb0 	.word	0x20003eb0
 800eb44:	20003eb4 	.word	0x20003eb4
 800eb48:	20003e98 	.word	0x20003e98

0800eb4c <prvIdleTask>:
{
 800eb4c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800eb4e:	f7ff ffd7 	bl	800eb00 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb52:	4b07      	ldr	r3, [pc, #28]	@ (800eb70 <prvIdleTask+0x24>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d9f9      	bls.n	800eb4e <prvIdleTask+0x2>
				taskYIELD();
 800eb5a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eb5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb62:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	e7ee      	b.n	800eb4e <prvIdleTask+0x2>
 800eb70:	20003f0c 	.word	0x20003f0c

0800eb74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eb74:	b570      	push	{r4, r5, r6, lr}
 800eb76:	4604      	mov	r4, r0
 800eb78:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800eb7a:	4b17      	ldr	r3, [pc, #92]	@ (800ebd8 <prvAddCurrentTaskToDelayedList+0x64>)
 800eb7c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb7e:	4b17      	ldr	r3, [pc, #92]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x68>)
 800eb80:	6818      	ldr	r0, [r3, #0]
 800eb82:	3004      	adds	r0, #4
 800eb84:	f7fb f9e4 	bl	8009f50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eb88:	f1b4 3fff 	cmp.w	r4, #4294967295
 800eb8c:	d00d      	beq.n	800ebaa <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eb8e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eb90:	4b12      	ldr	r3, [pc, #72]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x68>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800eb96:	42a6      	cmp	r6, r4
 800eb98:	d910      	bls.n	800ebbc <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eb9a:	4b11      	ldr	r3, [pc, #68]	@ (800ebe0 <prvAddCurrentTaskToDelayedList+0x6c>)
 800eb9c:	6818      	ldr	r0, [r3, #0]
 800eb9e:	4b0f      	ldr	r3, [pc, #60]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x68>)
 800eba0:	6819      	ldr	r1, [r3, #0]
 800eba2:	3104      	adds	r1, #4
 800eba4:	f7fb f9bb 	bl	8009f1e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eba8:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ebaa:	2d00      	cmp	r5, #0
 800ebac:	d0ef      	beq.n	800eb8e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebae:	4b0b      	ldr	r3, [pc, #44]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x68>)
 800ebb0:	6819      	ldr	r1, [r3, #0]
 800ebb2:	3104      	adds	r1, #4
 800ebb4:	480b      	ldr	r0, [pc, #44]	@ (800ebe4 <prvAddCurrentTaskToDelayedList+0x70>)
 800ebb6:	f7fb f9a7 	bl	8009f08 <vListInsertEnd>
 800ebba:	e7f5      	b.n	800eba8 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ebbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ebe8 <prvAddCurrentTaskToDelayedList+0x74>)
 800ebbe:	6818      	ldr	r0, [r3, #0]
 800ebc0:	4b06      	ldr	r3, [pc, #24]	@ (800ebdc <prvAddCurrentTaskToDelayedList+0x68>)
 800ebc2:	6819      	ldr	r1, [r3, #0]
 800ebc4:	3104      	adds	r1, #4
 800ebc6:	f7fb f9aa 	bl	8009f1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ebca:	4b08      	ldr	r3, [pc, #32]	@ (800ebec <prvAddCurrentTaskToDelayedList+0x78>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	42a3      	cmp	r3, r4
 800ebd0:	d9ea      	bls.n	800eba8 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800ebd2:	4b06      	ldr	r3, [pc, #24]	@ (800ebec <prvAddCurrentTaskToDelayedList+0x78>)
 800ebd4:	601c      	str	r4, [r3, #0]
}
 800ebd6:	e7e7      	b.n	800eba8 <prvAddCurrentTaskToDelayedList+0x34>
 800ebd8:	20003e94 	.word	0x20003e94
 800ebdc:	2000436c 	.word	0x2000436c
 800ebe0:	20003edc 	.word	0x20003edc
 800ebe4:	20003e9c 	.word	0x20003e9c
 800ebe8:	20003ee0 	.word	0x20003ee0
 800ebec:	20003e78 	.word	0x20003e78

0800ebf0 <xTaskCreateStatic>:
	{
 800ebf0:	b530      	push	{r4, r5, lr}
 800ebf2:	b087      	sub	sp, #28
 800ebf4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800ebf6:	b17c      	cbz	r4, 800ec18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ebf8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800ebfa:	b1b5      	cbz	r5, 800ec2a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800ebfc:	255c      	movs	r5, #92	@ 0x5c
 800ebfe:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec00:	9d04      	ldr	r5, [sp, #16]
 800ec02:	2d5c      	cmp	r5, #92	@ 0x5c
 800ec04:	d01a      	beq.n	800ec3c <xTaskCreateStatic+0x4c>
 800ec06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec0a:	f383 8811 	msr	BASEPRI, r3
 800ec0e:	f3bf 8f6f 	isb	sy
 800ec12:	f3bf 8f4f 	dsb	sy
 800ec16:	e7fe      	b.n	800ec16 <xTaskCreateStatic+0x26>
 800ec18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec1c:	f383 8811 	msr	BASEPRI, r3
 800ec20:	f3bf 8f6f 	isb	sy
 800ec24:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800ec28:	e7fe      	b.n	800ec28 <xTaskCreateStatic+0x38>
 800ec2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800ec3a:	e7fe      	b.n	800ec3a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec3c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec3e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800ec40:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec42:	2402      	movs	r4, #2
 800ec44:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec48:	2400      	movs	r4, #0
 800ec4a:	9403      	str	r4, [sp, #12]
 800ec4c:	9502      	str	r5, [sp, #8]
 800ec4e:	ac05      	add	r4, sp, #20
 800ec50:	9401      	str	r4, [sp, #4]
 800ec52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec54:	9400      	str	r4, [sp, #0]
 800ec56:	f7ff fe5b 	bl	800e910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec5a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800ec5c:	f7ff fede 	bl	800ea1c <prvAddNewTaskToReadyList>
	}
 800ec60:	9805      	ldr	r0, [sp, #20]
 800ec62:	b007      	add	sp, #28
 800ec64:	bd30      	pop	{r4, r5, pc}

0800ec66 <xTaskCreate>:
	{
 800ec66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	4607      	mov	r7, r0
 800ec6e:	4688      	mov	r8, r1
 800ec70:	4614      	mov	r4, r2
 800ec72:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ec74:	0090      	lsls	r0, r2, #2
 800ec76:	f7fb f863 	bl	8009d40 <pvPortMalloc>
			if( pxStack != NULL )
 800ec7a:	b308      	cbz	r0, 800ecc0 <xTaskCreate+0x5a>
 800ec7c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ec7e:	205c      	movs	r0, #92	@ 0x5c
 800ec80:	f7fb f85e 	bl	8009d40 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ec84:	4605      	mov	r5, r0
 800ec86:	b1a8      	cbz	r0, 800ecb4 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800ec88:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ec92:	9303      	str	r3, [sp, #12]
 800ec94:	9002      	str	r0, [sp, #8]
 800ec96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ec98:	9301      	str	r3, [sp, #4]
 800ec9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	4633      	mov	r3, r6
 800eca0:	4622      	mov	r2, r4
 800eca2:	4641      	mov	r1, r8
 800eca4:	4638      	mov	r0, r7
 800eca6:	f7ff fe33 	bl	800e910 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecaa:	4628      	mov	r0, r5
 800ecac:	f7ff feb6 	bl	800ea1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ecb0:	2001      	movs	r0, #1
 800ecb2:	e007      	b.n	800ecc4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800ecb4:	4648      	mov	r0, r9
 800ecb6:	f7fb f8cf 	bl	8009e58 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ecba:	f04f 30ff 	mov.w	r0, #4294967295
 800ecbe:	e001      	b.n	800ecc4 <xTaskCreate+0x5e>
 800ecc0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800ecc4:	b005      	add	sp, #20
 800ecc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800eccc <vTaskStartScheduler>:
{
 800eccc:	b510      	push	{r4, lr}
 800ecce:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ecd0:	2400      	movs	r4, #0
 800ecd2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ecd4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ecd6:	aa07      	add	r2, sp, #28
 800ecd8:	a906      	add	r1, sp, #24
 800ecda:	a805      	add	r0, sp, #20
 800ecdc:	f7fa fd1a 	bl	8009714 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ece0:	9b05      	ldr	r3, [sp, #20]
 800ece2:	9302      	str	r3, [sp, #8]
 800ece4:	9b06      	ldr	r3, [sp, #24]
 800ece6:	9301      	str	r3, [sp, #4]
 800ece8:	9400      	str	r4, [sp, #0]
 800ecea:	4623      	mov	r3, r4
 800ecec:	9a07      	ldr	r2, [sp, #28]
 800ecee:	4917      	ldr	r1, [pc, #92]	@ (800ed4c <vTaskStartScheduler+0x80>)
 800ecf0:	4817      	ldr	r0, [pc, #92]	@ (800ed50 <vTaskStartScheduler+0x84>)
 800ecf2:	f7ff ff7d 	bl	800ebf0 <xTaskCreateStatic>
 800ecf6:	4b17      	ldr	r3, [pc, #92]	@ (800ed54 <vTaskStartScheduler+0x88>)
 800ecf8:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800ecfa:	b1c0      	cbz	r0, 800ed2e <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800ecfc:	f000 fc06 	bl	800f50c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800ed00:	2801      	cmp	r0, #1
 800ed02:	d115      	bne.n	800ed30 <vTaskStartScheduler+0x64>
 800ed04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed08:	f383 8811 	msr	BASEPRI, r3
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed14:	4b10      	ldr	r3, [pc, #64]	@ (800ed58 <vTaskStartScheduler+0x8c>)
 800ed16:	f04f 32ff 	mov.w	r2, #4294967295
 800ed1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ed1c:	4b0f      	ldr	r3, [pc, #60]	@ (800ed5c <vTaskStartScheduler+0x90>)
 800ed1e:	2201      	movs	r2, #1
 800ed20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ed22:	4b0f      	ldr	r3, [pc, #60]	@ (800ed60 <vTaskStartScheduler+0x94>)
 800ed24:	2200      	movs	r2, #0
 800ed26:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800ed28:	f7fb fc6e 	bl	800a608 <xPortStartScheduler>
		}
 800ed2c:	e003      	b.n	800ed36 <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 800ed2e:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed30:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ed34:	d001      	beq.n	800ed3a <vTaskStartScheduler+0x6e>
}
 800ed36:	b008      	add	sp, #32
 800ed38:	bd10      	pop	{r4, pc}
 800ed3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed3e:	f383 8811 	msr	BASEPRI, r3
 800ed42:	f3bf 8f6f 	isb	sy
 800ed46:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ed4a:	e7fe      	b.n	800ed4a <vTaskStartScheduler+0x7e>
 800ed4c:	0800fca0 	.word	0x0800fca0
 800ed50:	0800eb4d 	.word	0x0800eb4d
 800ed54:	20003e74 	.word	0x20003e74
 800ed58:	20003e78 	.word	0x20003e78
 800ed5c:	20003e8c 	.word	0x20003e8c
 800ed60:	20003e94 	.word	0x20003e94

0800ed64 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800ed64:	4a02      	ldr	r2, [pc, #8]	@ (800ed70 <vTaskSuspendAll+0xc>)
 800ed66:	6813      	ldr	r3, [r2, #0]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	6013      	str	r3, [r2, #0]
}
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	20003e70 	.word	0x20003e70

0800ed74 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800ed74:	4b01      	ldr	r3, [pc, #4]	@ (800ed7c <xTaskGetTickCount+0x8>)
 800ed76:	6818      	ldr	r0, [r3, #0]
}
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	20003e94 	.word	0x20003e94

0800ed80 <xTaskGetTickCountFromISR>:
{
 800ed80:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed82:	f7fb fccd 	bl	800a720 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800ed86:	4b01      	ldr	r3, [pc, #4]	@ (800ed8c <xTaskGetTickCountFromISR+0xc>)
 800ed88:	6818      	ldr	r0, [r3, #0]
}
 800ed8a:	bd08      	pop	{r3, pc}
 800ed8c:	20003e94 	.word	0x20003e94

0800ed90 <xTaskIncrementTick>:
{
 800ed90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed92:	4b3a      	ldr	r3, [pc, #232]	@ (800ee7c <xTaskIncrementTick+0xec>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d169      	bne.n	800ee6e <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ed9a:	4b39      	ldr	r3, [pc, #228]	@ (800ee80 <xTaskIncrementTick+0xf0>)
 800ed9c:	681d      	ldr	r5, [r3, #0]
 800ed9e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800eda0:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800eda2:	b9c5      	cbnz	r5, 800edd6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800eda4:	4b37      	ldr	r3, [pc, #220]	@ (800ee84 <xTaskIncrementTick+0xf4>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	b143      	cbz	r3, 800edbe <xTaskIncrementTick+0x2e>
 800edac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edb0:	f383 8811 	msr	BASEPRI, r3
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	e7fe      	b.n	800edbc <xTaskIncrementTick+0x2c>
 800edbe:	4a31      	ldr	r2, [pc, #196]	@ (800ee84 <xTaskIncrementTick+0xf4>)
 800edc0:	6811      	ldr	r1, [r2, #0]
 800edc2:	4b31      	ldr	r3, [pc, #196]	@ (800ee88 <xTaskIncrementTick+0xf8>)
 800edc4:	6818      	ldr	r0, [r3, #0]
 800edc6:	6010      	str	r0, [r2, #0]
 800edc8:	6019      	str	r1, [r3, #0]
 800edca:	4a30      	ldr	r2, [pc, #192]	@ (800ee8c <xTaskIncrementTick+0xfc>)
 800edcc:	6813      	ldr	r3, [r2, #0]
 800edce:	3301      	adds	r3, #1
 800edd0:	6013      	str	r3, [r2, #0]
 800edd2:	f7ff fd87 	bl	800e8e4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800edd6:	4b2e      	ldr	r3, [pc, #184]	@ (800ee90 <xTaskIncrementTick+0x100>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	42ab      	cmp	r3, r5
 800eddc:	d93d      	bls.n	800ee5a <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800edde:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ede0:	4b2c      	ldr	r3, [pc, #176]	@ (800ee94 <xTaskIncrementTick+0x104>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800edea:	009a      	lsls	r2, r3, #2
 800edec:	4b2a      	ldr	r3, [pc, #168]	@ (800ee98 <xTaskIncrementTick+0x108>)
 800edee:	589b      	ldr	r3, [r3, r2]
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d900      	bls.n	800edf6 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800edf4:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800edf6:	4b29      	ldr	r3, [pc, #164]	@ (800ee9c <xTaskIncrementTick+0x10c>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d03c      	beq.n	800ee78 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800edfe:	2701      	movs	r7, #1
	return xSwitchRequired;
 800ee00:	e03a      	b.n	800ee78 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800ee02:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee04:	4b1f      	ldr	r3, [pc, #124]	@ (800ee84 <xTaskIncrementTick+0xf4>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	b343      	cbz	r3, 800ee5e <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee0c:	4b1d      	ldr	r3, [pc, #116]	@ (800ee84 <xTaskIncrementTick+0xf4>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee14:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800ee16:	429d      	cmp	r5, r3
 800ee18:	d326      	bcc.n	800ee68 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee1a:	1d26      	adds	r6, r4, #4
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f7fb f897 	bl	8009f50 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ee24:	b11b      	cbz	r3, 800ee2e <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee26:	f104 0018 	add.w	r0, r4, #24
 800ee2a:	f7fb f891 	bl	8009f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ee2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ee30:	4a1b      	ldr	r2, [pc, #108]	@ (800eea0 <xTaskIncrementTick+0x110>)
 800ee32:	6812      	ldr	r2, [r2, #0]
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d901      	bls.n	800ee3c <xTaskIncrementTick+0xac>
 800ee38:	4a19      	ldr	r2, [pc, #100]	@ (800eea0 <xTaskIncrementTick+0x110>)
 800ee3a:	6013      	str	r3, [r2, #0]
 800ee3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ee40:	009a      	lsls	r2, r3, #2
 800ee42:	4631      	mov	r1, r6
 800ee44:	4814      	ldr	r0, [pc, #80]	@ (800ee98 <xTaskIncrementTick+0x108>)
 800ee46:	4410      	add	r0, r2
 800ee48:	f7fb f85e 	bl	8009f08 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ee4c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ee4e:	4b11      	ldr	r3, [pc, #68]	@ (800ee94 <xTaskIncrementTick+0x104>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d2d4      	bcs.n	800ee02 <xTaskIncrementTick+0x72>
 800ee58:	e7d4      	b.n	800ee04 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800ee5a:	2700      	movs	r7, #0
 800ee5c:	e7d2      	b.n	800ee04 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ee90 <xTaskIncrementTick+0x100>)
 800ee60:	f04f 32ff 	mov.w	r2, #4294967295
 800ee64:	601a      	str	r2, [r3, #0]
					break;
 800ee66:	e7bb      	b.n	800ede0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800ee68:	4a09      	ldr	r2, [pc, #36]	@ (800ee90 <xTaskIncrementTick+0x100>)
 800ee6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee6c:	e7b8      	b.n	800ede0 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800ee6e:	4a0d      	ldr	r2, [pc, #52]	@ (800eea4 <xTaskIncrementTick+0x114>)
 800ee70:	6813      	ldr	r3, [r2, #0]
 800ee72:	3301      	adds	r3, #1
 800ee74:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800ee76:	2700      	movs	r7, #0
}
 800ee78:	4638      	mov	r0, r7
 800ee7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee7c:	20003e70 	.word	0x20003e70
 800ee80:	20003e94 	.word	0x20003e94
 800ee84:	20003ee0 	.word	0x20003ee0
 800ee88:	20003edc 	.word	0x20003edc
 800ee8c:	20003e80 	.word	0x20003e80
 800ee90:	20003e78 	.word	0x20003e78
 800ee94:	2000436c 	.word	0x2000436c
 800ee98:	20003f0c 	.word	0x20003f0c
 800ee9c:	20003e84 	.word	0x20003e84
 800eea0:	20003e90 	.word	0x20003e90
 800eea4:	20003e88 	.word	0x20003e88

0800eea8 <xTaskResumeAll>:
{
 800eea8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800eeaa:	4b35      	ldr	r3, [pc, #212]	@ (800ef80 <xTaskResumeAll+0xd8>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	b943      	cbnz	r3, 800eec2 <xTaskResumeAll+0x1a>
 800eeb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	e7fe      	b.n	800eec0 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800eec2:	f7fb fb07 	bl	800a4d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800eec6:	4b2e      	ldr	r3, [pc, #184]	@ (800ef80 <xTaskResumeAll+0xd8>)
 800eec8:	681a      	ldr	r2, [r3, #0]
 800eeca:	3a01      	subs	r2, #1
 800eecc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d14f      	bne.n	800ef74 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800eed4:	4b2b      	ldr	r3, [pc, #172]	@ (800ef84 <xTaskResumeAll+0xdc>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	b90b      	cbnz	r3, 800eede <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800eeda:	2400      	movs	r4, #0
 800eedc:	e04b      	b.n	800ef76 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800eede:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800eee0:	4b29      	ldr	r3, [pc, #164]	@ (800ef88 <xTaskResumeAll+0xe0>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	b31b      	cbz	r3, 800ef2e <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eee6:	4b28      	ldr	r3, [pc, #160]	@ (800ef88 <xTaskResumeAll+0xe0>)
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800eeec:	f104 0018 	add.w	r0, r4, #24
 800eef0:	f7fb f82e 	bl	8009f50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eef4:	1d25      	adds	r5, r4, #4
 800eef6:	4628      	mov	r0, r5
 800eef8:	f7fb f82a 	bl	8009f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800eefc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800eefe:	4b23      	ldr	r3, [pc, #140]	@ (800ef8c <xTaskResumeAll+0xe4>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	4298      	cmp	r0, r3
 800ef04:	d901      	bls.n	800ef0a <xTaskResumeAll+0x62>
 800ef06:	4b21      	ldr	r3, [pc, #132]	@ (800ef8c <xTaskResumeAll+0xe4>)
 800ef08:	6018      	str	r0, [r3, #0]
 800ef0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ef0e:	4629      	mov	r1, r5
 800ef10:	4b1f      	ldr	r3, [pc, #124]	@ (800ef90 <xTaskResumeAll+0xe8>)
 800ef12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef16:	f7fa fff7 	bl	8009f08 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef1a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ef1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ef94 <xTaskResumeAll+0xec>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d3dc      	bcc.n	800eee0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800ef26:	4b1c      	ldr	r3, [pc, #112]	@ (800ef98 <xTaskResumeAll+0xf0>)
 800ef28:	2201      	movs	r2, #1
 800ef2a:	601a      	str	r2, [r3, #0]
 800ef2c:	e7d8      	b.n	800eee0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800ef2e:	b10c      	cbz	r4, 800ef34 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800ef30:	f7ff fcd8 	bl	800e8e4 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ef34:	4b19      	ldr	r3, [pc, #100]	@ (800ef9c <xTaskResumeAll+0xf4>)
 800ef36:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800ef38:	b984      	cbnz	r4, 800ef5c <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800ef3a:	4b17      	ldr	r3, [pc, #92]	@ (800ef98 <xTaskResumeAll+0xf0>)
 800ef3c:	681c      	ldr	r4, [r3, #0]
 800ef3e:	b1d4      	cbz	r4, 800ef76 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800ef40:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ef44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef48:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ef54:	2401      	movs	r4, #1
 800ef56:	e00e      	b.n	800ef76 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ef58:	3c01      	subs	r4, #1
 800ef5a:	d007      	beq.n	800ef6c <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800ef5c:	f7ff ff18 	bl	800ed90 <xTaskIncrementTick>
 800ef60:	2800      	cmp	r0, #0
 800ef62:	d0f9      	beq.n	800ef58 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800ef64:	4b0c      	ldr	r3, [pc, #48]	@ (800ef98 <xTaskResumeAll+0xf0>)
 800ef66:	2201      	movs	r2, #1
 800ef68:	601a      	str	r2, [r3, #0]
 800ef6a:	e7f5      	b.n	800ef58 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800ef6c:	4b0b      	ldr	r3, [pc, #44]	@ (800ef9c <xTaskResumeAll+0xf4>)
 800ef6e:	2200      	movs	r2, #0
 800ef70:	601a      	str	r2, [r3, #0]
 800ef72:	e7e2      	b.n	800ef3a <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800ef74:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ef76:	f7fb facf 	bl	800a518 <vPortExitCritical>
}
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	bd38      	pop	{r3, r4, r5, pc}
 800ef7e:	bf00      	nop
 800ef80:	20003e70 	.word	0x20003e70
 800ef84:	20003e98 	.word	0x20003e98
 800ef88:	20003ec8 	.word	0x20003ec8
 800ef8c:	20003e90 	.word	0x20003e90
 800ef90:	20003f0c 	.word	0x20003f0c
 800ef94:	2000436c 	.word	0x2000436c
 800ef98:	20003e84 	.word	0x20003e84
 800ef9c:	20003e88 	.word	0x20003e88

0800efa0 <vTaskDelay>:
	{
 800efa0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800efa2:	b1a8      	cbz	r0, 800efd0 <vTaskDelay+0x30>
 800efa4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800efa6:	4b10      	ldr	r3, [pc, #64]	@ (800efe8 <vTaskDelay+0x48>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	b143      	cbz	r3, 800efbe <vTaskDelay+0x1e>
 800efac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efb0:	f383 8811 	msr	BASEPRI, r3
 800efb4:	f3bf 8f6f 	isb	sy
 800efb8:	f3bf 8f4f 	dsb	sy
 800efbc:	e7fe      	b.n	800efbc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800efbe:	f7ff fed1 	bl	800ed64 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800efc2:	2100      	movs	r1, #0
 800efc4:	4620      	mov	r0, r4
 800efc6:	f7ff fdd5 	bl	800eb74 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800efca:	f7ff ff6d 	bl	800eea8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800efce:	b948      	cbnz	r0, 800efe4 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800efd0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800efd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	f3bf 8f6f 	isb	sy
	}
 800efe4:	bd10      	pop	{r4, pc}
 800efe6:	bf00      	nop
 800efe8:	20003e70 	.word	0x20003e70

0800efec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800efec:	4b20      	ldr	r3, [pc, #128]	@ (800f070 <vTaskSwitchContext+0x84>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	b11b      	cbz	r3, 800effa <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800eff2:	4b20      	ldr	r3, [pc, #128]	@ (800f074 <vTaskSwitchContext+0x88>)
 800eff4:	2201      	movs	r2, #1
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800effa:	4b1e      	ldr	r3, [pc, #120]	@ (800f074 <vTaskSwitchContext+0x88>)
 800effc:	2200      	movs	r2, #0
 800effe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f000:	4b1d      	ldr	r3, [pc, #116]	@ (800f078 <vTaskSwitchContext+0x8c>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800f008:	008a      	lsls	r2, r1, #2
 800f00a:	491c      	ldr	r1, [pc, #112]	@ (800f07c <vTaskSwitchContext+0x90>)
 800f00c:	588a      	ldr	r2, [r1, r2]
 800f00e:	b95a      	cbnz	r2, 800f028 <vTaskSwitchContext+0x3c>
 800f010:	b10b      	cbz	r3, 800f016 <vTaskSwitchContext+0x2a>
 800f012:	3b01      	subs	r3, #1
 800f014:	e7f6      	b.n	800f004 <vTaskSwitchContext+0x18>
 800f016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	e7fe      	b.n	800f026 <vTaskSwitchContext+0x3a>
 800f028:	4608      	mov	r0, r1
 800f02a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800f02e:	008a      	lsls	r2, r1, #2
 800f030:	4402      	add	r2, r0
 800f032:	6851      	ldr	r1, [r2, #4]
 800f034:	6849      	ldr	r1, [r1, #4]
 800f036:	6051      	str	r1, [r2, #4]
 800f038:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800f03c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800f040:	3208      	adds	r2, #8
 800f042:	4402      	add	r2, r0
 800f044:	4291      	cmp	r1, r2
 800f046:	d00b      	beq.n	800f060 <vTaskSwitchContext+0x74>
 800f048:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800f04c:	0091      	lsls	r1, r2, #2
 800f04e:	4a0b      	ldr	r2, [pc, #44]	@ (800f07c <vTaskSwitchContext+0x90>)
 800f050:	440a      	add	r2, r1
 800f052:	6852      	ldr	r2, [r2, #4]
 800f054:	68d1      	ldr	r1, [r2, #12]
 800f056:	4a0a      	ldr	r2, [pc, #40]	@ (800f080 <vTaskSwitchContext+0x94>)
 800f058:	6011      	str	r1, [r2, #0]
 800f05a:	4a07      	ldr	r2, [pc, #28]	@ (800f078 <vTaskSwitchContext+0x8c>)
 800f05c:	6013      	str	r3, [r2, #0]
}
 800f05e:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f060:	6848      	ldr	r0, [r1, #4]
 800f062:	4662      	mov	r2, ip
 800f064:	0091      	lsls	r1, r2, #2
 800f066:	4a05      	ldr	r2, [pc, #20]	@ (800f07c <vTaskSwitchContext+0x90>)
 800f068:	440a      	add	r2, r1
 800f06a:	6050      	str	r0, [r2, #4]
 800f06c:	e7ec      	b.n	800f048 <vTaskSwitchContext+0x5c>
 800f06e:	bf00      	nop
 800f070:	20003e70 	.word	0x20003e70
 800f074:	20003e84 	.word	0x20003e84
 800f078:	20003e90 	.word	0x20003e90
 800f07c:	20003f0c 	.word	0x20003f0c
 800f080:	2000436c 	.word	0x2000436c

0800f084 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800f084:	b158      	cbz	r0, 800f09e <vTaskPlaceOnEventList+0x1a>
{
 800f086:	b510      	push	{r4, lr}
 800f088:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f08a:	4a09      	ldr	r2, [pc, #36]	@ (800f0b0 <vTaskPlaceOnEventList+0x2c>)
 800f08c:	6811      	ldr	r1, [r2, #0]
 800f08e:	3118      	adds	r1, #24
 800f090:	f7fa ff45 	bl	8009f1e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f094:	2101      	movs	r1, #1
 800f096:	4620      	mov	r0, r4
 800f098:	f7ff fd6c 	bl	800eb74 <prvAddCurrentTaskToDelayedList>
}
 800f09c:	bd10      	pop	{r4, pc}
 800f09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800f0ae:	e7fe      	b.n	800f0ae <vTaskPlaceOnEventList+0x2a>
 800f0b0:	2000436c 	.word	0x2000436c

0800f0b4 <vTaskPlaceOnEventListRestricted>:
	{
 800f0b4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800f0b6:	b170      	cbz	r0, 800f0d6 <vTaskPlaceOnEventListRestricted+0x22>
 800f0b8:	460d      	mov	r5, r1
 800f0ba:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f0bc:	4a0a      	ldr	r2, [pc, #40]	@ (800f0e8 <vTaskPlaceOnEventListRestricted+0x34>)
 800f0be:	6811      	ldr	r1, [r2, #0]
 800f0c0:	3118      	adds	r1, #24
 800f0c2:	f7fa ff21 	bl	8009f08 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800f0c6:	b10c      	cbz	r4, 800f0cc <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 800f0c8:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f0cc:	4621      	mov	r1, r4
 800f0ce:	4628      	mov	r0, r5
 800f0d0:	f7ff fd50 	bl	800eb74 <prvAddCurrentTaskToDelayedList>
	}
 800f0d4:	bd38      	pop	{r3, r4, r5, pc}
 800f0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0da:	f383 8811 	msr	BASEPRI, r3
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800f0e6:	e7fe      	b.n	800f0e6 <vTaskPlaceOnEventListRestricted+0x32>
 800f0e8:	2000436c 	.word	0x2000436c

0800f0ec <xTaskRemoveFromEventList>:
{
 800f0ec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0ee:	68c3      	ldr	r3, [r0, #12]
 800f0f0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f0f2:	b324      	cbz	r4, 800f13e <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0f4:	f104 0518 	add.w	r5, r4, #24
 800f0f8:	4628      	mov	r0, r5
 800f0fa:	f7fa ff29 	bl	8009f50 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0fe:	4b18      	ldr	r3, [pc, #96]	@ (800f160 <xTaskRemoveFromEventList+0x74>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	bb2b      	cbnz	r3, 800f150 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f104:	1d25      	adds	r5, r4, #4
 800f106:	4628      	mov	r0, r5
 800f108:	f7fa ff22 	bl	8009f50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f10c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f10e:	4b15      	ldr	r3, [pc, #84]	@ (800f164 <xTaskRemoveFromEventList+0x78>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4298      	cmp	r0, r3
 800f114:	d901      	bls.n	800f11a <xTaskRemoveFromEventList+0x2e>
 800f116:	4b13      	ldr	r3, [pc, #76]	@ (800f164 <xTaskRemoveFromEventList+0x78>)
 800f118:	6018      	str	r0, [r3, #0]
 800f11a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f11e:	4629      	mov	r1, r5
 800f120:	4b11      	ldr	r3, [pc, #68]	@ (800f168 <xTaskRemoveFromEventList+0x7c>)
 800f122:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f126:	f7fa feef 	bl	8009f08 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f12a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f12c:	4b0f      	ldr	r3, [pc, #60]	@ (800f16c <xTaskRemoveFromEventList+0x80>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f132:	429a      	cmp	r2, r3
 800f134:	d911      	bls.n	800f15a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800f136:	2001      	movs	r0, #1
 800f138:	4b0d      	ldr	r3, [pc, #52]	@ (800f170 <xTaskRemoveFromEventList+0x84>)
 800f13a:	6018      	str	r0, [r3, #0]
}
 800f13c:	bd38      	pop	{r3, r4, r5, pc}
 800f13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f142:	f383 8811 	msr	BASEPRI, r3
 800f146:	f3bf 8f6f 	isb	sy
 800f14a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800f14e:	e7fe      	b.n	800f14e <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f150:	4629      	mov	r1, r5
 800f152:	4808      	ldr	r0, [pc, #32]	@ (800f174 <xTaskRemoveFromEventList+0x88>)
 800f154:	f7fa fed8 	bl	8009f08 <vListInsertEnd>
 800f158:	e7e7      	b.n	800f12a <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 800f15a:	2000      	movs	r0, #0
	return xReturn;
 800f15c:	e7ee      	b.n	800f13c <xTaskRemoveFromEventList+0x50>
 800f15e:	bf00      	nop
 800f160:	20003e70 	.word	0x20003e70
 800f164:	20003e90 	.word	0x20003e90
 800f168:	20003f0c 	.word	0x20003f0c
 800f16c:	2000436c 	.word	0x2000436c
 800f170:	20003e84 	.word	0x20003e84
 800f174:	20003ec8 	.word	0x20003ec8

0800f178 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f178:	4b03      	ldr	r3, [pc, #12]	@ (800f188 <vTaskInternalSetTimeOutState+0x10>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f17e:	4b03      	ldr	r3, [pc, #12]	@ (800f18c <vTaskInternalSetTimeOutState+0x14>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6043      	str	r3, [r0, #4]
}
 800f184:	4770      	bx	lr
 800f186:	bf00      	nop
 800f188:	20003e80 	.word	0x20003e80
 800f18c:	20003e94 	.word	0x20003e94

0800f190 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800f190:	b1e0      	cbz	r0, 800f1cc <xTaskCheckForTimeOut+0x3c>
{
 800f192:	b570      	push	{r4, r5, r6, lr}
 800f194:	460c      	mov	r4, r1
 800f196:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800f198:	b309      	cbz	r1, 800f1de <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 800f19a:	f7fb f99b 	bl	800a4d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f19e:	4b1c      	ldr	r3, [pc, #112]	@ (800f210 <xTaskCheckForTimeOut+0x80>)
 800f1a0:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f1a2:	686b      	ldr	r3, [r5, #4]
 800f1a4:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 800f1a6:	6822      	ldr	r2, [r4, #0]
 800f1a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f1ac:	d028      	beq.n	800f200 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f1ae:	f8df c064 	ldr.w	ip, [pc, #100]	@ 800f214 <xTaskCheckForTimeOut+0x84>
 800f1b2:	f8dc c000 	ldr.w	ip, [ip]
 800f1b6:	682e      	ldr	r6, [r5, #0]
 800f1b8:	4566      	cmp	r6, ip
 800f1ba:	d001      	beq.n	800f1c0 <xTaskCheckForTimeOut+0x30>
 800f1bc:	428b      	cmp	r3, r1
 800f1be:	d924      	bls.n	800f20a <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f1c0:	4282      	cmp	r2, r0
 800f1c2:	d815      	bhi.n	800f1f0 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800f1c8:	2401      	movs	r4, #1
 800f1ca:	e01a      	b.n	800f202 <xTaskCheckForTimeOut+0x72>
 800f1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800f1dc:	e7fe      	b.n	800f1dc <xTaskCheckForTimeOut+0x4c>
 800f1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800f1ee:	e7fe      	b.n	800f1ee <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 800f1f0:	1a5b      	subs	r3, r3, r1
 800f1f2:	4413      	add	r3, r2
 800f1f4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	f7ff ffbe 	bl	800f178 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f1fc:	2400      	movs	r4, #0
 800f1fe:	e000      	b.n	800f202 <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 800f200:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f202:	f7fb f989 	bl	800a518 <vPortExitCritical>
}
 800f206:	4620      	mov	r0, r4
 800f208:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800f20a:	2401      	movs	r4, #1
 800f20c:	e7f9      	b.n	800f202 <xTaskCheckForTimeOut+0x72>
 800f20e:	bf00      	nop
 800f210:	20003e94 	.word	0x20003e94
 800f214:	20003e80 	.word	0x20003e80

0800f218 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f218:	4b01      	ldr	r3, [pc, #4]	@ (800f220 <vTaskMissedYield+0x8>)
 800f21a:	2201      	movs	r2, #1
 800f21c:	601a      	str	r2, [r3, #0]
}
 800f21e:	4770      	bx	lr
 800f220:	20003e84 	.word	0x20003e84

0800f224 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800f224:	4b01      	ldr	r3, [pc, #4]	@ (800f22c <xTaskGetCurrentTaskHandle+0x8>)
 800f226:	6818      	ldr	r0, [r3, #0]
	}
 800f228:	4770      	bx	lr
 800f22a:	bf00      	nop
 800f22c:	2000436c 	.word	0x2000436c

0800f230 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f230:	4b05      	ldr	r3, [pc, #20]	@ (800f248 <xTaskGetSchedulerState+0x18>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	b133      	cbz	r3, 800f244 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f236:	4b05      	ldr	r3, [pc, #20]	@ (800f24c <xTaskGetSchedulerState+0x1c>)
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	b10b      	cbz	r3, 800f240 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800f23c:	2000      	movs	r0, #0
	}
 800f23e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800f240:	2002      	movs	r0, #2
 800f242:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f244:	2001      	movs	r0, #1
 800f246:	4770      	bx	lr
 800f248:	20003e8c 	.word	0x20003e8c
 800f24c:	20003e70 	.word	0x20003e70

0800f250 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800f250:	2800      	cmp	r0, #0
 800f252:	d03e      	beq.n	800f2d2 <xTaskPriorityInherit+0x82>
	{
 800f254:	b538      	push	{r3, r4, r5, lr}
 800f256:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f258:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800f25a:	4a20      	ldr	r2, [pc, #128]	@ (800f2dc <xTaskPriorityInherit+0x8c>)
 800f25c:	6812      	ldr	r2, [r2, #0]
 800f25e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f260:	4293      	cmp	r3, r2
 800f262:	d22e      	bcs.n	800f2c2 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f264:	6982      	ldr	r2, [r0, #24]
 800f266:	2a00      	cmp	r2, #0
 800f268:	db05      	blt.n	800f276 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f26a:	4a1c      	ldr	r2, [pc, #112]	@ (800f2dc <xTaskPriorityInherit+0x8c>)
 800f26c:	6812      	ldr	r2, [r2, #0]
 800f26e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f270:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800f274:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f276:	6961      	ldr	r1, [r4, #20]
 800f278:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f27c:	4a18      	ldr	r2, [pc, #96]	@ (800f2e0 <xTaskPriorityInherit+0x90>)
 800f27e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f282:	4299      	cmp	r1, r3
 800f284:	d005      	beq.n	800f292 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f286:	4b15      	ldr	r3, [pc, #84]	@ (800f2dc <xTaskPriorityInherit+0x8c>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f28c:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 800f28e:	2001      	movs	r0, #1
	}
 800f290:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f292:	1d25      	adds	r5, r4, #4
 800f294:	4628      	mov	r0, r5
 800f296:	f7fa fe5b 	bl	8009f50 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f29a:	4b10      	ldr	r3, [pc, #64]	@ (800f2dc <xTaskPriorityInherit+0x8c>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800f2a0:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f2a2:	4b10      	ldr	r3, [pc, #64]	@ (800f2e4 <xTaskPriorityInherit+0x94>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	4298      	cmp	r0, r3
 800f2a8:	d901      	bls.n	800f2ae <xTaskPriorityInherit+0x5e>
 800f2aa:	4b0e      	ldr	r3, [pc, #56]	@ (800f2e4 <xTaskPriorityInherit+0x94>)
 800f2ac:	6018      	str	r0, [r3, #0]
 800f2ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f2b2:	4629      	mov	r1, r5
 800f2b4:	4b0a      	ldr	r3, [pc, #40]	@ (800f2e0 <xTaskPriorityInherit+0x90>)
 800f2b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f2ba:	f7fa fe25 	bl	8009f08 <vListInsertEnd>
				xReturn = pdTRUE;
 800f2be:	2001      	movs	r0, #1
 800f2c0:	e7e6      	b.n	800f290 <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f2c2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800f2c4:	4b05      	ldr	r3, [pc, #20]	@ (800f2dc <xTaskPriorityInherit+0x8c>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d303      	bcc.n	800f2d6 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	e7de      	b.n	800f290 <xTaskPriorityInherit+0x40>
 800f2d2:	2000      	movs	r0, #0
	}
 800f2d4:	4770      	bx	lr
					xReturn = pdTRUE;
 800f2d6:	2001      	movs	r0, #1
		return xReturn;
 800f2d8:	e7da      	b.n	800f290 <xTaskPriorityInherit+0x40>
 800f2da:	bf00      	nop
 800f2dc:	2000436c 	.word	0x2000436c
 800f2e0:	20003f0c 	.word	0x20003f0c
 800f2e4:	20003e90 	.word	0x20003e90

0800f2e8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	d03b      	beq.n	800f364 <xTaskPriorityDisinherit+0x7c>
	{
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800f2f0:	4b1e      	ldr	r3, [pc, #120]	@ (800f36c <xTaskPriorityDisinherit+0x84>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	4283      	cmp	r3, r0
 800f2f6:	d008      	beq.n	800f30a <xTaskPriorityDisinherit+0x22>
 800f2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f2fc:	f383 8811 	msr	BASEPRI, r3
 800f300:	f3bf 8f6f 	isb	sy
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	e7fe      	b.n	800f308 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800f30a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800f30c:	b943      	cbnz	r3, 800f320 <xTaskPriorityDisinherit+0x38>
 800f30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f312:	f383 8811 	msr	BASEPRI, r3
 800f316:	f3bf 8f6f 	isb	sy
 800f31a:	f3bf 8f4f 	dsb	sy
 800f31e:	e7fe      	b.n	800f31e <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800f320:	3b01      	subs	r3, #1
 800f322:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f324:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800f326:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800f328:	4291      	cmp	r1, r2
 800f32a:	d01d      	beq.n	800f368 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f32c:	b10b      	cbz	r3, 800f332 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800f32e:	2000      	movs	r0, #0
	}
 800f330:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f332:	1d05      	adds	r5, r0, #4
 800f334:	4628      	mov	r0, r5
 800f336:	f7fa fe0b 	bl	8009f50 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f33a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800f33c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f33e:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 800f342:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f344:	4b0a      	ldr	r3, [pc, #40]	@ (800f370 <xTaskPriorityDisinherit+0x88>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4298      	cmp	r0, r3
 800f34a:	d901      	bls.n	800f350 <xTaskPriorityDisinherit+0x68>
 800f34c:	4b08      	ldr	r3, [pc, #32]	@ (800f370 <xTaskPriorityDisinherit+0x88>)
 800f34e:	6018      	str	r0, [r3, #0]
 800f350:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f354:	4629      	mov	r1, r5
 800f356:	4b07      	ldr	r3, [pc, #28]	@ (800f374 <xTaskPriorityDisinherit+0x8c>)
 800f358:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f35c:	f7fa fdd4 	bl	8009f08 <vListInsertEnd>
					xReturn = pdTRUE;
 800f360:	2001      	movs	r0, #1
 800f362:	e7e5      	b.n	800f330 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800f364:	2000      	movs	r0, #0
	}
 800f366:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800f368:	2000      	movs	r0, #0
 800f36a:	e7e1      	b.n	800f330 <xTaskPriorityDisinherit+0x48>
 800f36c:	2000436c 	.word	0x2000436c
 800f370:	20003e90 	.word	0x20003e90
 800f374:	20003f0c 	.word	0x20003f0c

0800f378 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800f378:	2800      	cmp	r0, #0
 800f37a:	d046      	beq.n	800f40a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800f37c:	b538      	push	{r3, r4, r5, lr}
 800f37e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800f380:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800f382:	b943      	cbnz	r3, 800f396 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800f384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f388:	f383 8811 	msr	BASEPRI, r3
 800f38c:	f3bf 8f6f 	isb	sy
 800f390:	f3bf 8f4f 	dsb	sy
 800f394:	e7fe      	b.n	800f394 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f396:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800f398:	428a      	cmp	r2, r1
 800f39a:	d200      	bcs.n	800f39e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f39c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f39e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f3a0:	4291      	cmp	r1, r2
 800f3a2:	d001      	beq.n	800f3a8 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d000      	beq.n	800f3aa <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800f3a8:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800f3aa:	4b18      	ldr	r3, [pc, #96]	@ (800f40c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	42a3      	cmp	r3, r4
 800f3b0:	d022      	beq.n	800f3f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 800f3b2:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f3b4:	69a3      	ldr	r3, [r4, #24]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	db02      	blt.n	800f3c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ba:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800f3be:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f3c0:	6962      	ldr	r2, [r4, #20]
 800f3c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f3c6:	4b12      	ldr	r3, [pc, #72]	@ (800f410 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800f3c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f3cc:	429a      	cmp	r2, r3
 800f3ce:	d1eb      	bne.n	800f3a8 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3d0:	1d25      	adds	r5, r4, #4
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f7fa fdbc 	bl	8009f50 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f3d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800f3da:	4b0e      	ldr	r3, [pc, #56]	@ (800f414 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4298      	cmp	r0, r3
 800f3e0:	d901      	bls.n	800f3e6 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 800f3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800f414 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800f3e4:	6018      	str	r0, [r3, #0]
 800f3e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	4b08      	ldr	r3, [pc, #32]	@ (800f410 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800f3ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f3f2:	f7fa fd89 	bl	8009f08 <vListInsertEnd>
	}
 800f3f6:	e7d7      	b.n	800f3a8 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800f3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3fc:	f383 8811 	msr	BASEPRI, r3
 800f400:	f3bf 8f6f 	isb	sy
 800f404:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800f408:	e7fe      	b.n	800f408 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800f40a:	4770      	bx	lr
 800f40c:	2000436c 	.word	0x2000436c
 800f410:	20003f0c 	.word	0x20003f0c
 800f414:	20003e90 	.word	0x20003e90

0800f418 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800f418:	4b05      	ldr	r3, [pc, #20]	@ (800f430 <pvTaskIncrementMutexHeldCount+0x18>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	b123      	cbz	r3, 800f428 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800f41e:	4b04      	ldr	r3, [pc, #16]	@ (800f430 <pvTaskIncrementMutexHeldCount+0x18>)
 800f420:	681a      	ldr	r2, [r3, #0]
 800f422:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800f424:	3301      	adds	r3, #1
 800f426:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 800f428:	4b01      	ldr	r3, [pc, #4]	@ (800f430 <pvTaskIncrementMutexHeldCount+0x18>)
 800f42a:	6818      	ldr	r0, [r3, #0]
	}
 800f42c:	4770      	bx	lr
 800f42e:	bf00      	nop
 800f430:	2000436c 	.word	0x2000436c

0800f434 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f434:	4b06      	ldr	r3, [pc, #24]	@ (800f450 <prvGetNextExpireTime+0x1c>)
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	6813      	ldr	r3, [r2, #0]
 800f43a:	b92b      	cbnz	r3, 800f448 <prvGetNextExpireTime+0x14>
 800f43c:	2301      	movs	r3, #1
 800f43e:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f440:	b923      	cbnz	r3, 800f44c <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f442:	68d3      	ldr	r3, [r2, #12]
 800f444:	6818      	ldr	r0, [r3, #0]
 800f446:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f448:	2300      	movs	r3, #0
 800f44a:	e7f8      	b.n	800f43e <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f44c:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800f44e:	4770      	bx	lr
 800f450:	20004470 	.word	0x20004470

0800f454 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f454:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f456:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f458:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f45a:	4291      	cmp	r1, r2
 800f45c:	d80c      	bhi.n	800f478 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f45e:	1ad2      	subs	r2, r2, r3
 800f460:	6983      	ldr	r3, [r0, #24]
 800f462:	429a      	cmp	r2, r3
 800f464:	d301      	bcc.n	800f46a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f466:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800f468:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f46a:	1d01      	adds	r1, r0, #4
 800f46c:	4b09      	ldr	r3, [pc, #36]	@ (800f494 <prvInsertTimerInActiveList+0x40>)
 800f46e:	6818      	ldr	r0, [r3, #0]
 800f470:	f7fa fd55 	bl	8009f1e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f474:	2000      	movs	r0, #0
 800f476:	e7f7      	b.n	800f468 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f478:	429a      	cmp	r2, r3
 800f47a:	d201      	bcs.n	800f480 <prvInsertTimerInActiveList+0x2c>
 800f47c:	4299      	cmp	r1, r3
 800f47e:	d206      	bcs.n	800f48e <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f480:	1d01      	adds	r1, r0, #4
 800f482:	4b05      	ldr	r3, [pc, #20]	@ (800f498 <prvInsertTimerInActiveList+0x44>)
 800f484:	6818      	ldr	r0, [r3, #0]
 800f486:	f7fa fd4a 	bl	8009f1e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f48a:	2000      	movs	r0, #0
 800f48c:	e7ec      	b.n	800f468 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800f48e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800f490:	e7ea      	b.n	800f468 <prvInsertTimerInActiveList+0x14>
 800f492:	bf00      	nop
 800f494:	2000446c 	.word	0x2000446c
 800f498:	20004470 	.word	0x20004470

0800f49c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f49c:	b530      	push	{r4, r5, lr}
 800f49e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f4a0:	f7fb f818 	bl	800a4d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f4a4:	4b11      	ldr	r3, [pc, #68]	@ (800f4ec <prvCheckForValidListAndQueue+0x50>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	b11b      	cbz	r3, 800f4b2 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f4aa:	f7fb f835 	bl	800a518 <vPortExitCritical>
}
 800f4ae:	b003      	add	sp, #12
 800f4b0:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800f4b2:	4d0f      	ldr	r5, [pc, #60]	@ (800f4f0 <prvCheckForValidListAndQueue+0x54>)
 800f4b4:	4628      	mov	r0, r5
 800f4b6:	f7fa fd19 	bl	8009eec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f4ba:	4c0e      	ldr	r4, [pc, #56]	@ (800f4f4 <prvCheckForValidListAndQueue+0x58>)
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f7fa fd15 	bl	8009eec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800f4f8 <prvCheckForValidListAndQueue+0x5c>)
 800f4c4:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f4fc <prvCheckForValidListAndQueue+0x60>)
 800f4c8:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	9300      	str	r3, [sp, #0]
 800f4ce:	4b0c      	ldr	r3, [pc, #48]	@ (800f500 <prvCheckForValidListAndQueue+0x64>)
 800f4d0:	4a0c      	ldr	r2, [pc, #48]	@ (800f504 <prvCheckForValidListAndQueue+0x68>)
 800f4d2:	2110      	movs	r1, #16
 800f4d4:	200a      	movs	r0, #10
 800f4d6:	f7fb fa4c 	bl	800a972 <xQueueGenericCreateStatic>
 800f4da:	4b04      	ldr	r3, [pc, #16]	@ (800f4ec <prvCheckForValidListAndQueue+0x50>)
 800f4dc:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d0e3      	beq.n	800f4aa <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f4e2:	4909      	ldr	r1, [pc, #36]	@ (800f508 <prvCheckForValidListAndQueue+0x6c>)
 800f4e4:	f7fb fe1e 	bl	800b124 <vQueueAddToRegistry>
 800f4e8:	e7df      	b.n	800f4aa <prvCheckForValidListAndQueue+0xe>
 800f4ea:	bf00      	nop
 800f4ec:	20004468 	.word	0x20004468
 800f4f0:	20004488 	.word	0x20004488
 800f4f4:	20004474 	.word	0x20004474
 800f4f8:	20004470 	.word	0x20004470
 800f4fc:	2000446c 	.word	0x2000446c
 800f500:	20004370 	.word	0x20004370
 800f504:	200043c0 	.word	0x200043c0
 800f508:	0800fca8 	.word	0x0800fca8

0800f50c <xTimerCreateTimerTask>:
{
 800f50c:	b510      	push	{r4, lr}
 800f50e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800f510:	f7ff ffc4 	bl	800f49c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f514:	4b12      	ldr	r3, [pc, #72]	@ (800f560 <xTimerCreateTimerTask+0x54>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	b1cb      	cbz	r3, 800f54e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f51a:	2400      	movs	r4, #0
 800f51c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f51e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f520:	aa07      	add	r2, sp, #28
 800f522:	a906      	add	r1, sp, #24
 800f524:	a805      	add	r0, sp, #20
 800f526:	f7fa f901 	bl	800972c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f52a:	9b05      	ldr	r3, [sp, #20]
 800f52c:	9302      	str	r3, [sp, #8]
 800f52e:	9b06      	ldr	r3, [sp, #24]
 800f530:	9301      	str	r3, [sp, #4]
 800f532:	2302      	movs	r3, #2
 800f534:	9300      	str	r3, [sp, #0]
 800f536:	4623      	mov	r3, r4
 800f538:	9a07      	ldr	r2, [sp, #28]
 800f53a:	490a      	ldr	r1, [pc, #40]	@ (800f564 <xTimerCreateTimerTask+0x58>)
 800f53c:	480a      	ldr	r0, [pc, #40]	@ (800f568 <xTimerCreateTimerTask+0x5c>)
 800f53e:	f7ff fb57 	bl	800ebf0 <xTaskCreateStatic>
 800f542:	4b0a      	ldr	r3, [pc, #40]	@ (800f56c <xTimerCreateTimerTask+0x60>)
 800f544:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800f546:	b110      	cbz	r0, 800f54e <xTimerCreateTimerTask+0x42>
}
 800f548:	2001      	movs	r0, #1
 800f54a:	b008      	add	sp, #32
 800f54c:	bd10      	pop	{r4, pc}
 800f54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f552:	f383 8811 	msr	BASEPRI, r3
 800f556:	f3bf 8f6f 	isb	sy
 800f55a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800f55e:	e7fe      	b.n	800f55e <xTimerCreateTimerTask+0x52>
 800f560:	20004468 	.word	0x20004468
 800f564:	0800fcb0 	.word	0x0800fcb0
 800f568:	0800f871 	.word	0x0800f871
 800f56c:	20004464 	.word	0x20004464

0800f570 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800f570:	b1b8      	cbz	r0, 800f5a2 <xTimerGenericCommand+0x32>
 800f572:	469c      	mov	ip, r3
 800f574:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800f576:	4818      	ldr	r0, [pc, #96]	@ (800f5d8 <xTimerGenericCommand+0x68>)
 800f578:	6800      	ldr	r0, [r0, #0]
 800f57a:	b358      	cbz	r0, 800f5d4 <xTimerGenericCommand+0x64>
{
 800f57c:	b500      	push	{lr}
 800f57e:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 800f580:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f582:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f584:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f586:	2905      	cmp	r1, #5
 800f588:	dc1c      	bgt.n	800f5c4 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f58a:	f7ff fe51 	bl	800f230 <xTaskGetSchedulerState>
 800f58e:	2802      	cmp	r0, #2
 800f590:	d010      	beq.n	800f5b4 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f592:	2300      	movs	r3, #0
 800f594:	461a      	mov	r2, r3
 800f596:	4669      	mov	r1, sp
 800f598:	480f      	ldr	r0, [pc, #60]	@ (800f5d8 <xTimerGenericCommand+0x68>)
 800f59a:	6800      	ldr	r0, [r0, #0]
 800f59c:	f7fb fa57 	bl	800aa4e <xQueueGenericSend>
 800f5a0:	e015      	b.n	800f5ce <xTimerGenericCommand+0x5e>
 800f5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a6:	f383 8811 	msr	BASEPRI, r3
 800f5aa:	f3bf 8f6f 	isb	sy
 800f5ae:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800f5b2:	e7fe      	b.n	800f5b2 <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	9a06      	ldr	r2, [sp, #24]
 800f5b8:	4669      	mov	r1, sp
 800f5ba:	4807      	ldr	r0, [pc, #28]	@ (800f5d8 <xTimerGenericCommand+0x68>)
 800f5bc:	6800      	ldr	r0, [r0, #0]
 800f5be:	f7fb fa46 	bl	800aa4e <xQueueGenericSend>
 800f5c2:	e004      	b.n	800f5ce <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4662      	mov	r2, ip
 800f5c8:	4669      	mov	r1, sp
 800f5ca:	f7fb fb4a 	bl	800ac62 <xQueueGenericSendFromISR>
}
 800f5ce:	b005      	add	sp, #20
 800f5d0:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 800f5d4:	2000      	movs	r0, #0
}
 800f5d6:	4770      	bx	lr
 800f5d8:	20004468 	.word	0x20004468

0800f5dc <prvSwitchTimerLists>:
{
 800f5dc:	b570      	push	{r4, r5, r6, lr}
 800f5de:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5e0:	4b1b      	ldr	r3, [pc, #108]	@ (800f650 <prvSwitchTimerLists+0x74>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	681a      	ldr	r2, [r3, #0]
 800f5e6:	b362      	cbz	r2, 800f642 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5ec:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5ee:	1d25      	adds	r5, r4, #4
 800f5f0:	4628      	mov	r0, r5
 800f5f2:	f7fa fcad 	bl	8009f50 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5f6:	6a23      	ldr	r3, [r4, #32]
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5fc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f600:	f013 0f04 	tst.w	r3, #4
 800f604:	d0ec      	beq.n	800f5e0 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f606:	69a3      	ldr	r3, [r4, #24]
 800f608:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800f60a:	429e      	cmp	r6, r3
 800f60c:	d207      	bcs.n	800f61e <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f60e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f610:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f612:	4629      	mov	r1, r5
 800f614:	4b0e      	ldr	r3, [pc, #56]	@ (800f650 <prvSwitchTimerLists+0x74>)
 800f616:	6818      	ldr	r0, [r3, #0]
 800f618:	f7fa fc81 	bl	8009f1e <vListInsert>
 800f61c:	e7e0      	b.n	800f5e0 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f61e:	2100      	movs	r1, #0
 800f620:	9100      	str	r1, [sp, #0]
 800f622:	460b      	mov	r3, r1
 800f624:	4632      	mov	r2, r6
 800f626:	4620      	mov	r0, r4
 800f628:	f7ff ffa2 	bl	800f570 <xTimerGenericCommand>
				configASSERT( xResult );
 800f62c:	2800      	cmp	r0, #0
 800f62e:	d1d7      	bne.n	800f5e0 <prvSwitchTimerLists+0x4>
 800f630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f634:	f383 8811 	msr	BASEPRI, r3
 800f638:	f3bf 8f6f 	isb	sy
 800f63c:	f3bf 8f4f 	dsb	sy
 800f640:	e7fe      	b.n	800f640 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800f642:	4a04      	ldr	r2, [pc, #16]	@ (800f654 <prvSwitchTimerLists+0x78>)
 800f644:	6810      	ldr	r0, [r2, #0]
 800f646:	4902      	ldr	r1, [pc, #8]	@ (800f650 <prvSwitchTimerLists+0x74>)
 800f648:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800f64a:	6013      	str	r3, [r2, #0]
}
 800f64c:	b002      	add	sp, #8
 800f64e:	bd70      	pop	{r4, r5, r6, pc}
 800f650:	20004470 	.word	0x20004470
 800f654:	2000446c 	.word	0x2000446c

0800f658 <prvSampleTimeNow>:
{
 800f658:	b538      	push	{r3, r4, r5, lr}
 800f65a:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800f65c:	f7ff fb8a 	bl	800ed74 <xTaskGetTickCount>
 800f660:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800f662:	4b07      	ldr	r3, [pc, #28]	@ (800f680 <prvSampleTimeNow+0x28>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4283      	cmp	r3, r0
 800f668:	d805      	bhi.n	800f676 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800f66a:	2300      	movs	r3, #0
 800f66c:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800f66e:	4b04      	ldr	r3, [pc, #16]	@ (800f680 <prvSampleTimeNow+0x28>)
 800f670:	601c      	str	r4, [r3, #0]
}
 800f672:	4620      	mov	r0, r4
 800f674:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800f676:	f7ff ffb1 	bl	800f5dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f67a:	2301      	movs	r3, #1
 800f67c:	602b      	str	r3, [r5, #0]
 800f67e:	e7f6      	b.n	800f66e <prvSampleTimeNow+0x16>
 800f680:	20004460 	.word	0x20004460

0800f684 <prvProcessExpiredTimer>:
{
 800f684:	b570      	push	{r4, r5, r6, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	4606      	mov	r6, r0
 800f68a:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f68c:	4917      	ldr	r1, [pc, #92]	@ (800f6ec <prvProcessExpiredTimer+0x68>)
 800f68e:	6809      	ldr	r1, [r1, #0]
 800f690:	68c9      	ldr	r1, [r1, #12]
 800f692:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f694:	1d20      	adds	r0, r4, #4
 800f696:	f7fa fc5b 	bl	8009f50 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f69a:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 800f69e:	f01c 0f04 	tst.w	ip, #4
 800f6a2:	d108      	bne.n	800f6b6 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f6a4:	f02c 0c01 	bic.w	ip, ip, #1
 800f6a8:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f6ac:	6a23      	ldr	r3, [r4, #32]
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	4798      	blx	r3
}
 800f6b2:	b002      	add	sp, #8
 800f6b4:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f6b6:	69a1      	ldr	r1, [r4, #24]
 800f6b8:	4633      	mov	r3, r6
 800f6ba:	462a      	mov	r2, r5
 800f6bc:	4431      	add	r1, r6
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f7ff fec8 	bl	800f454 <prvInsertTimerInActiveList>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	d0f1      	beq.n	800f6ac <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	9100      	str	r1, [sp, #0]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	4632      	mov	r2, r6
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f7ff ff4d 	bl	800f570 <xTimerGenericCommand>
			configASSERT( xResult );
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d1e8      	bne.n	800f6ac <prvProcessExpiredTimer+0x28>
 800f6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6de:	f383 8811 	msr	BASEPRI, r3
 800f6e2:	f3bf 8f6f 	isb	sy
 800f6e6:	f3bf 8f4f 	dsb	sy
 800f6ea:	e7fe      	b.n	800f6ea <prvProcessExpiredTimer+0x66>
 800f6ec:	20004470 	.word	0x20004470

0800f6f0 <prvProcessTimerOrBlockTask>:
{
 800f6f0:	b570      	push	{r4, r5, r6, lr}
 800f6f2:	b082      	sub	sp, #8
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800f6f8:	f7ff fb34 	bl	800ed64 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f6fc:	a801      	add	r0, sp, #4
 800f6fe:	f7ff ffab 	bl	800f658 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800f702:	9b01      	ldr	r3, [sp, #4]
 800f704:	bb33      	cbnz	r3, 800f754 <prvProcessTimerOrBlockTask+0x64>
 800f706:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f708:	b9e4      	cbnz	r4, 800f744 <prvProcessTimerOrBlockTask+0x54>
 800f70a:	42b0      	cmp	r0, r6
 800f70c:	d213      	bcs.n	800f736 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f70e:	4622      	mov	r2, r4
 800f710:	1b71      	subs	r1, r6, r5
 800f712:	4b12      	ldr	r3, [pc, #72]	@ (800f75c <prvProcessTimerOrBlockTask+0x6c>)
 800f714:	6818      	ldr	r0, [r3, #0]
 800f716:	f7fb fd19 	bl	800b14c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f71a:	f7ff fbc5 	bl	800eea8 <xTaskResumeAll>
 800f71e:	b9d8      	cbnz	r0, 800f758 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 800f720:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f728:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	e010      	b.n	800f758 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 800f736:	f7ff fbb7 	bl	800eea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f73a:	4629      	mov	r1, r5
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7ff ffa1 	bl	800f684 <prvProcessExpiredTimer>
 800f742:	e009      	b.n	800f758 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f744:	4a06      	ldr	r2, [pc, #24]	@ (800f760 <prvProcessTimerOrBlockTask+0x70>)
 800f746:	6812      	ldr	r2, [r2, #0]
 800f748:	6812      	ldr	r2, [r2, #0]
 800f74a:	b90a      	cbnz	r2, 800f750 <prvProcessTimerOrBlockTask+0x60>
 800f74c:	2401      	movs	r4, #1
 800f74e:	e7de      	b.n	800f70e <prvProcessTimerOrBlockTask+0x1e>
 800f750:	461c      	mov	r4, r3
 800f752:	e7dc      	b.n	800f70e <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 800f754:	f7ff fba8 	bl	800eea8 <xTaskResumeAll>
}
 800f758:	b002      	add	sp, #8
 800f75a:	bd70      	pop	{r4, r5, r6, pc}
 800f75c:	20004468 	.word	0x20004468
 800f760:	2000446c 	.word	0x2000446c

0800f764 <prvProcessReceivedCommands>:
{
 800f764:	b510      	push	{r4, lr}
 800f766:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f768:	e002      	b.n	800f770 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f76a:	9b04      	ldr	r3, [sp, #16]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	da0f      	bge.n	800f790 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f770:	2200      	movs	r2, #0
 800f772:	a904      	add	r1, sp, #16
 800f774:	4b3d      	ldr	r3, [pc, #244]	@ (800f86c <prvProcessReceivedCommands+0x108>)
 800f776:	6818      	ldr	r0, [r3, #0]
 800f778:	f7fb fada 	bl	800ad30 <xQueueReceive>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d072      	beq.n	800f866 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f780:	9b04      	ldr	r3, [sp, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	daf1      	bge.n	800f76a <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f786:	9907      	ldr	r1, [sp, #28]
 800f788:	9806      	ldr	r0, [sp, #24]
 800f78a:	9b05      	ldr	r3, [sp, #20]
 800f78c:	4798      	blx	r3
 800f78e:	e7ec      	b.n	800f76a <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f790:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f792:	6963      	ldr	r3, [r4, #20]
 800f794:	b113      	cbz	r3, 800f79c <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f796:	1d20      	adds	r0, r4, #4
 800f798:	f7fa fbda 	bl	8009f50 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f79c:	a803      	add	r0, sp, #12
 800f79e:	f7ff ff5b 	bl	800f658 <prvSampleTimeNow>
 800f7a2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800f7a4:	9b04      	ldr	r3, [sp, #16]
 800f7a6:	2b09      	cmp	r3, #9
 800f7a8:	d8e2      	bhi.n	800f770 <prvProcessReceivedCommands+0xc>
 800f7aa:	e8df f003 	tbb	[pc, r3]
 800f7ae:	0505      	.short	0x0505
 800f7b0:	4e362f05 	.word	0x4e362f05
 800f7b4:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f7b8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f7bc:	f043 0301 	orr.w	r3, r3, #1
 800f7c0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f7c4:	9b05      	ldr	r3, [sp, #20]
 800f7c6:	69a1      	ldr	r1, [r4, #24]
 800f7c8:	4419      	add	r1, r3
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f7ff fe42 	bl	800f454 <prvInsertTimerInActiveList>
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d0cd      	beq.n	800f770 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7d4:	6a23      	ldr	r3, [r4, #32]
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f7da:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f7de:	f013 0f04 	tst.w	r3, #4
 800f7e2:	d0c5      	beq.n	800f770 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f7e4:	69a2      	ldr	r2, [r4, #24]
 800f7e6:	2100      	movs	r1, #0
 800f7e8:	9100      	str	r1, [sp, #0]
 800f7ea:	460b      	mov	r3, r1
 800f7ec:	9805      	ldr	r0, [sp, #20]
 800f7ee:	4402      	add	r2, r0
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f7ff febd 	bl	800f570 <xTimerGenericCommand>
							configASSERT( xResult );
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d1ba      	bne.n	800f770 <prvProcessReceivedCommands+0xc>
 800f7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7fe:	f383 8811 	msr	BASEPRI, r3
 800f802:	f3bf 8f6f 	isb	sy
 800f806:	f3bf 8f4f 	dsb	sy
 800f80a:	e7fe      	b.n	800f80a <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f80c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f810:	f023 0301 	bic.w	r3, r3, #1
 800f814:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 800f818:	e7aa      	b.n	800f770 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f81a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f81e:	f043 0301 	orr.w	r3, r3, #1
 800f822:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f826:	9905      	ldr	r1, [sp, #20]
 800f828:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f82a:	b129      	cbz	r1, 800f838 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f82c:	4603      	mov	r3, r0
 800f82e:	4401      	add	r1, r0
 800f830:	4620      	mov	r0, r4
 800f832:	f7ff fe0f 	bl	800f454 <prvInsertTimerInActiveList>
					break;
 800f836:	e79b      	b.n	800f770 <prvProcessReceivedCommands+0xc>
 800f838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f83c:	f383 8811 	msr	BASEPRI, r3
 800f840:	f3bf 8f6f 	isb	sy
 800f844:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f848:	e7fe      	b.n	800f848 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f84a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f84e:	f013 0f02 	tst.w	r3, #2
 800f852:	d004      	beq.n	800f85e <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f854:	f023 0301 	bic.w	r3, r3, #1
 800f858:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800f85c:	e788      	b.n	800f770 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800f85e:	4620      	mov	r0, r4
 800f860:	f7fa fafa 	bl	8009e58 <vPortFree>
 800f864:	e784      	b.n	800f770 <prvProcessReceivedCommands+0xc>
}
 800f866:	b008      	add	sp, #32
 800f868:	bd10      	pop	{r4, pc}
 800f86a:	bf00      	nop
 800f86c:	20004468 	.word	0x20004468

0800f870 <prvTimerTask>:
{
 800f870:	b500      	push	{lr}
 800f872:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f874:	a801      	add	r0, sp, #4
 800f876:	f7ff fddd 	bl	800f434 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f87a:	9901      	ldr	r1, [sp, #4]
 800f87c:	f7ff ff38 	bl	800f6f0 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800f880:	f7ff ff70 	bl	800f764 <prvProcessReceivedCommands>
	for( ;; )
 800f884:	e7f6      	b.n	800f874 <prvTimerTask+0x4>
	...

0800f888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800f888:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800f8c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800f88c:	f7ff f804 	bl	800e898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800f890:	480c      	ldr	r0, [pc, #48]	@ (800f8c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800f892:	490d      	ldr	r1, [pc, #52]	@ (800f8c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800f894:	4a0d      	ldr	r2, [pc, #52]	@ (800f8cc <LoopForever+0xe>)
  movs r3, #0
 800f896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800f898:	e002      	b.n	800f8a0 <LoopCopyDataInit>

0800f89a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800f89a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800f89c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800f89e:	3304      	adds	r3, #4

0800f8a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800f8a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800f8a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800f8a4:	d3f9      	bcc.n	800f89a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800f8a6:	4a0a      	ldr	r2, [pc, #40]	@ (800f8d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800f8a8:	4c0a      	ldr	r4, [pc, #40]	@ (800f8d4 <LoopForever+0x16>)
  movs r3, #0
 800f8aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800f8ac:	e001      	b.n	800f8b2 <LoopFillZerobss>

0800f8ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800f8ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800f8b0:	3204      	adds	r2, #4

0800f8b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800f8b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800f8b4:	d3fb      	bcc.n	800f8ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800f8b6:	f000 f81f 	bl	800f8f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800f8ba:	f7fa fd05 	bl	800a2c8 <main>

0800f8be <LoopForever>:

LoopForever:
    b LoopForever
 800f8be:	e7fe      	b.n	800f8be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800f8c0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800f8c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800f8c8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800f8cc:	0800fe28 	.word	0x0800fe28
  ldr r2, =_sbss
 800f8d0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800f8d4:	200045d4 	.word	0x200045d4

0800f8d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800f8d8:	e7fe      	b.n	800f8d8 <ADC1_IRQHandler>

0800f8da <memset>:
 800f8da:	4402      	add	r2, r0
 800f8dc:	4603      	mov	r3, r0
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d100      	bne.n	800f8e4 <memset+0xa>
 800f8e2:	4770      	bx	lr
 800f8e4:	f803 1b01 	strb.w	r1, [r3], #1
 800f8e8:	e7f9      	b.n	800f8de <memset+0x4>
	...

0800f8ec <__errno>:
 800f8ec:	4b01      	ldr	r3, [pc, #4]	@ (800f8f4 <__errno+0x8>)
 800f8ee:	6818      	ldr	r0, [r3, #0]
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	20000030 	.word	0x20000030

0800f8f8 <__libc_init_array>:
 800f8f8:	b570      	push	{r4, r5, r6, lr}
 800f8fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f930 <__libc_init_array+0x38>)
 800f8fc:	4d0d      	ldr	r5, [pc, #52]	@ (800f934 <__libc_init_array+0x3c>)
 800f8fe:	1b5b      	subs	r3, r3, r5
 800f900:	109c      	asrs	r4, r3, #2
 800f902:	2600      	movs	r6, #0
 800f904:	42a6      	cmp	r6, r4
 800f906:	d109      	bne.n	800f91c <__libc_init_array+0x24>
 800f908:	f000 f958 	bl	800fbbc <_init>
 800f90c:	4d0a      	ldr	r5, [pc, #40]	@ (800f938 <__libc_init_array+0x40>)
 800f90e:	4b0b      	ldr	r3, [pc, #44]	@ (800f93c <__libc_init_array+0x44>)
 800f910:	1b5b      	subs	r3, r3, r5
 800f912:	109c      	asrs	r4, r3, #2
 800f914:	2600      	movs	r6, #0
 800f916:	42a6      	cmp	r6, r4
 800f918:	d105      	bne.n	800f926 <__libc_init_array+0x2e>
 800f91a:	bd70      	pop	{r4, r5, r6, pc}
 800f91c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f920:	4798      	blx	r3
 800f922:	3601      	adds	r6, #1
 800f924:	e7ee      	b.n	800f904 <__libc_init_array+0xc>
 800f926:	f855 3b04 	ldr.w	r3, [r5], #4
 800f92a:	4798      	blx	r3
 800f92c:	3601      	adds	r6, #1
 800f92e:	e7f2      	b.n	800f916 <__libc_init_array+0x1e>
 800f930:	0800fe18 	.word	0x0800fe18
 800f934:	0800fe18 	.word	0x0800fe18
 800f938:	0800fe18 	.word	0x0800fe18
 800f93c:	0800fe1c 	.word	0x0800fe1c

0800f940 <memcpy>:
 800f940:	440a      	add	r2, r1
 800f942:	4291      	cmp	r1, r2
 800f944:	f100 33ff 	add.w	r3, r0, #4294967295
 800f948:	d100      	bne.n	800f94c <memcpy+0xc>
 800f94a:	4770      	bx	lr
 800f94c:	b510      	push	{r4, lr}
 800f94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f952:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f956:	4291      	cmp	r1, r2
 800f958:	d1f9      	bne.n	800f94e <memcpy+0xe>
 800f95a:	bd10      	pop	{r4, pc}

0800f95c <logf>:
 800f95c:	b508      	push	{r3, lr}
 800f95e:	ed2d 8b02 	vpush	{d8}
 800f962:	eeb0 8a40 	vmov.f32	s16, s0
 800f966:	f000 f82f 	bl	800f9c8 <__ieee754_logf>
 800f96a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f972:	d60f      	bvs.n	800f994 <logf+0x38>
 800f974:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f97c:	dc0a      	bgt.n	800f994 <logf+0x38>
 800f97e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f986:	d108      	bne.n	800f99a <logf+0x3e>
 800f988:	f7ff ffb0 	bl	800f8ec <__errno>
 800f98c:	2322      	movs	r3, #34	@ 0x22
 800f98e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800f9b4 <logf+0x58>
 800f992:	6003      	str	r3, [r0, #0]
 800f994:	ecbd 8b02 	vpop	{d8}
 800f998:	bd08      	pop	{r3, pc}
 800f99a:	f7ff ffa7 	bl	800f8ec <__errno>
 800f99e:	ecbd 8b02 	vpop	{d8}
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2221      	movs	r2, #33	@ 0x21
 800f9a6:	601a      	str	r2, [r3, #0]
 800f9a8:	4803      	ldr	r0, [pc, #12]	@ (800f9b8 <logf+0x5c>)
 800f9aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f9ae:	f000 b805 	b.w	800f9bc <nanf>
 800f9b2:	bf00      	nop
 800f9b4:	ff800000 	.word	0xff800000
 800f9b8:	0800fc54 	.word	0x0800fc54

0800f9bc <nanf>:
 800f9bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f9c4 <nanf+0x8>
 800f9c0:	4770      	bx	lr
 800f9c2:	bf00      	nop
 800f9c4:	7fc00000 	.word	0x7fc00000

0800f9c8 <__ieee754_logf>:
 800f9c8:	ee10 2a10 	vmov	r2, s0
 800f9cc:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 800f9d0:	d02f      	beq.n	800fa32 <__ieee754_logf+0x6a>
 800f9d2:	2a00      	cmp	r2, #0
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	db33      	blt.n	800fa40 <__ieee754_logf+0x78>
 800f9d8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f9dc:	da40      	bge.n	800fa60 <__ieee754_logf+0x98>
 800f9de:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 800f9e2:	db34      	blt.n	800fa4e <__ieee754_logf+0x86>
 800f9e4:	f04f 0c00 	mov.w	ip, #0
 800f9e8:	4864      	ldr	r0, [pc, #400]	@ (800fb7c <__ieee754_logf+0x1b4>)
 800f9ea:	f3c3 0116 	ubfx	r1, r3, #0, #23
 800f9ee:	4408      	add	r0, r1
 800f9f0:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 800f9f4:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 800f9f8:	430a      	orrs	r2, r1
 800f9fa:	15db      	asrs	r3, r3, #23
 800f9fc:	ee00 2a10 	vmov	s0, r2
 800fa00:	3b7f      	subs	r3, #127	@ 0x7f
 800fa02:	4a5f      	ldr	r2, [pc, #380]	@ (800fb80 <__ieee754_logf+0x1b8>)
 800fa04:	4463      	add	r3, ip
 800fa06:	f101 0c0f 	add.w	ip, r1, #15
 800fa0a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fa0e:	ea0c 0202 	and.w	r2, ip, r2
 800fa12:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa16:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800fa1a:	bb22      	cbnz	r2, 800fa66 <__ieee754_logf+0x9e>
 800fa1c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fa20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa24:	d162      	bne.n	800faec <__ieee754_logf+0x124>
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	f040 8090 	bne.w	800fb4c <__ieee754_logf+0x184>
 800fa2c:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 800fb84 <__ieee754_logf+0x1bc>
 800fa30:	4770      	bx	lr
 800fa32:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800fb88 <__ieee754_logf+0x1c0>
 800fa36:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800fb84 <__ieee754_logf+0x1bc>
 800fa3a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800fa3e:	4770      	bx	lr
 800fa40:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fa44:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800fb84 <__ieee754_logf+0x1bc>
 800fa48:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800fa4c:	4770      	bx	lr
 800fa4e:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 800fb8c <__ieee754_logf+0x1c4>
 800fa52:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fa56:	f06f 0c18 	mvn.w	ip, #24
 800fa5a:	ee17 3a90 	vmov	r3, s15
 800fa5e:	e7c3      	b.n	800f9e8 <__ieee754_logf+0x20>
 800fa60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fa64:	4770      	bx	lr
 800fa66:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800fa6a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800fa6e:	ee07 3a10 	vmov	s14, r3
 800fa72:	ee80 4a27 	vdiv.f32	s8, s0, s15
 800fa76:	4846      	ldr	r0, [pc, #280]	@ (800fb90 <__ieee754_logf+0x1c8>)
 800fa78:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 800fa7c:	4408      	add	r0, r1
 800fa7e:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800fa82:	4302      	orrs	r2, r0
 800fa84:	2a00      	cmp	r2, #0
 800fa86:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 800fb94 <__ieee754_logf+0x1cc>
 800fa8a:	eddf 4a43 	vldr	s9, [pc, #268]	@ 800fb98 <__ieee754_logf+0x1d0>
 800fa8e:	eddf 5a43 	vldr	s11, [pc, #268]	@ 800fb9c <__ieee754_logf+0x1d4>
 800fa92:	eddf 3a43 	vldr	s7, [pc, #268]	@ 800fba0 <__ieee754_logf+0x1d8>
 800fa96:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 800fba4 <__ieee754_logf+0x1dc>
 800fa9a:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800fba8 <__ieee754_logf+0x1e0>
 800fa9e:	eddf 6a43 	vldr	s13, [pc, #268]	@ 800fbac <__ieee754_logf+0x1e4>
 800faa2:	ee24 6a04 	vmul.f32	s12, s8, s8
 800faa6:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 800faaa:	ee26 7a06 	vmul.f32	s14, s12, s12
 800faae:	eee7 4a03 	vfma.f32	s9, s14, s6
 800fab2:	eea7 5a23 	vfma.f32	s10, s14, s7
 800fab6:	eee4 5a87 	vfma.f32	s11, s9, s14
 800faba:	eee5 6a07 	vfma.f32	s13, s10, s14
 800fabe:	eee5 7a87 	vfma.f32	s15, s11, s14
 800fac2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fac6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800faca:	dd2a      	ble.n	800fb22 <__ieee754_logf+0x15a>
 800facc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fad0:	ee20 7a07 	vmul.f32	s14, s0, s14
 800fad4:	ee27 7a00 	vmul.f32	s14, s14, s0
 800fad8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fadc:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fae0:	bb3b      	cbnz	r3, 800fb32 <__ieee754_logf+0x16a>
 800fae2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fae6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800faea:	4770      	bx	lr
 800faec:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800fbb0 <__ieee754_logf+0x1e8>
 800faf0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800faf4:	eee0 7a47 	vfms.f32	s15, s0, s14
 800faf8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fafc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d0f0      	beq.n	800fae6 <__ieee754_logf+0x11e>
 800fb04:	ee07 3a90 	vmov	s15, r3
 800fb08:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 800fbb4 <__ieee754_logf+0x1ec>
 800fb0c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800fbb8 <__ieee754_logf+0x1f0>
 800fb10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb14:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800fb18:	ee37 0a40 	vsub.f32	s0, s14, s0
 800fb1c:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 800fb20:	4770      	bx	lr
 800fb22:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fb26:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fb2a:	b9e3      	cbnz	r3, 800fb66 <__ieee754_logf+0x19e>
 800fb2c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fb30:	4770      	bx	lr
 800fb32:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 800fbb4 <__ieee754_logf+0x1ec>
 800fb36:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800fbb8 <__ieee754_logf+0x1f0>
 800fb3a:	eee2 7a86 	vfma.f32	s15, s5, s12
 800fb3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb42:	ee37 0a40 	vsub.f32	s0, s14, s0
 800fb46:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 800fb4a:	4770      	bx	lr
 800fb4c:	ee07 3a90 	vmov	s15, r3
 800fb50:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800fbb4 <__ieee754_logf+0x1ec>
 800fb54:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800fbb8 <__ieee754_logf+0x1f0>
 800fb58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb5c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fb60:	eea7 0a87 	vfma.f32	s0, s15, s14
 800fb64:	4770      	bx	lr
 800fb66:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800fbb4 <__ieee754_logf+0x1ec>
 800fb6a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800fbb8 <__ieee754_logf+0x1f0>
 800fb6e:	eee2 7ae6 	vfms.f32	s15, s5, s13
 800fb72:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fb76:	ee92 0a87 	vfnms.f32	s0, s5, s14
 800fb7a:	4770      	bx	lr
 800fb7c:	004afb20 	.word	0x004afb20
 800fb80:	007ffff0 	.word	0x007ffff0
 800fb84:	00000000 	.word	0x00000000
 800fb88:	cc000000 	.word	0xcc000000
 800fb8c:	4c000000 	.word	0x4c000000
 800fb90:	ffcf5c30 	.word	0xffcf5c30
 800fb94:	3e178897 	.word	0x3e178897
 800fb98:	3e3a3325 	.word	0x3e3a3325
 800fb9c:	3e924925 	.word	0x3e924925
 800fba0:	3e1cd04f 	.word	0x3e1cd04f
 800fba4:	3e638e29 	.word	0x3e638e29
 800fba8:	3f2aaaab 	.word	0x3f2aaaab
 800fbac:	3ecccccd 	.word	0x3ecccccd
 800fbb0:	3eaaaaab 	.word	0x3eaaaaab
 800fbb4:	3717f7d1 	.word	0x3717f7d1
 800fbb8:	3f317180 	.word	0x3f317180

0800fbbc <_init>:
 800fbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbbe:	bf00      	nop
 800fbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbc2:	bc08      	pop	{r3}
 800fbc4:	469e      	mov	lr, r3
 800fbc6:	4770      	bx	lr

0800fbc8 <_fini>:
 800fbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbca:	bf00      	nop
 800fbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbce:	bc08      	pop	{r3}
 800fbd0:	469e      	mov	lr, r3
 800fbd2:	4770      	bx	lr
 800fbd4:	0000      	movs	r0, r0
	...
