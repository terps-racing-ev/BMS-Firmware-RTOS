
build/debug/BMS-Firmware-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000190  08008000  08008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a40  08008190  08008190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08010bd0  08010bd0  00009bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ea8  08010ea8  0000a088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08010ea8  08010ea8  0000a088  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08010ea8  08010ea8  0000a088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010ea8  08010ea8  00009ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08010eb0  08010eb0  00009eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08010eb8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004598  20000088  08010f40  0000a088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004620  08010f40  0000a620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031375  00000000  00000000  0000a0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e47  00000000  00000000  0003b466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f70  00000000  00000000  000412b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c2d  00000000  00000000  00043220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025acc  00000000  00000000  00044e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b1a7  00000000  00000000  0006a919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000059c4  00000000  00000000  00075ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00018d6f  00000000  00000000  0007b484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000941f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008190 <__do_global_dtors_aux>:
 8008190:	b510      	push	{r4, lr}
 8008192:	4c05      	ldr	r4, [pc, #20]	@ (80081a8 <__do_global_dtors_aux+0x18>)
 8008194:	7823      	ldrb	r3, [r4, #0]
 8008196:	b933      	cbnz	r3, 80081a6 <__do_global_dtors_aux+0x16>
 8008198:	4b04      	ldr	r3, [pc, #16]	@ (80081ac <__do_global_dtors_aux+0x1c>)
 800819a:	b113      	cbz	r3, 80081a2 <__do_global_dtors_aux+0x12>
 800819c:	4804      	ldr	r0, [pc, #16]	@ (80081b0 <__do_global_dtors_aux+0x20>)
 800819e:	f3af 8000 	nop.w
 80081a2:	2301      	movs	r3, #1
 80081a4:	7023      	strb	r3, [r4, #0]
 80081a6:	bd10      	pop	{r4, pc}
 80081a8:	20000088 	.word	0x20000088
 80081ac:	00000000 	.word	0x00000000
 80081b0:	08010bb8 	.word	0x08010bb8

080081b4 <frame_dummy>:
 80081b4:	b508      	push	{r3, lr}
 80081b6:	4b03      	ldr	r3, [pc, #12]	@ (80081c4 <frame_dummy+0x10>)
 80081b8:	b11b      	cbz	r3, 80081c2 <frame_dummy+0xe>
 80081ba:	4903      	ldr	r1, [pc, #12]	@ (80081c8 <frame_dummy+0x14>)
 80081bc:	4803      	ldr	r0, [pc, #12]	@ (80081cc <frame_dummy+0x18>)
 80081be:	f3af 8000 	nop.w
 80081c2:	bd08      	pop	{r3, pc}
 80081c4:	00000000 	.word	0x00000000
 80081c8:	2000008c 	.word	0x2000008c
 80081cc:	08010bb8 	.word	0x08010bb8

080081d0 <BQ_ConfigStatusInit>:
  * @param  status: Pointer to status structure to initialize
  * @retval None
  */
void BQ_ConfigStatusInit(BQ_ConfigStatus_t *status)
{
    if (status != NULL) {
 80081d0:	b158      	cbz	r0, 80081ea <BQ_ConfigStatusInit+0x1a>
        status->settings_written = 0;
 80081d2:	2200      	movs	r2, #0
 80081d4:	7002      	strb	r2, [r0, #0]
        status->settings_verified = 0;
 80081d6:	7042      	strb	r2, [r0, #1]
        status->write_error_count = 0;
 80081d8:	7082      	strb	r2, [r0, #2]
        status->verify_error_count = 0;
 80081da:	70c2      	strb	r2, [r0, #3]
        status->failed_address = 0;
 80081dc:	8082      	strh	r2, [r0, #4]
        status->failed_expected = 0;
 80081de:	7182      	strb	r2, [r0, #6]
        status->failed_actual = 0;
 80081e0:	71c2      	strb	r2, [r0, #7]
        status->unseal_failed = 0;
 80081e2:	7202      	strb	r2, [r0, #8]
        status->enter_cfg_failed = 0;
 80081e4:	7242      	strb	r2, [r0, #9]
        status->exit_cfg_failed = 0;
 80081e6:	7282      	strb	r2, [r0, #10]
        status->i2c_error_code = 0;
 80081e8:	72c2      	strb	r2, [r0, #11]
    }
}
 80081ea:	4770      	bx	lr

080081ec <BQ_CalculateChecksum>:
  * @param  data: Data byte to add to checksum
  * @retval uint8_t: Updated checksum
  */
static uint8_t BQ_CalculateChecksum(uint8_t oldChecksum, uint8_t data)
{
    if (!oldChecksum)
 80081ec:	b910      	cbnz	r0, 80081f4 <BQ_CalculateChecksum+0x8>
        return ~data;
 80081ee:	43c9      	mvns	r1, r1
 80081f0:	b2c8      	uxtb	r0, r1
 80081f2:	4770      	bx	lr
    else
        return ~((~oldChecksum) + data);
 80081f4:	1a40      	subs	r0, r0, r1
 80081f6:	b2c0      	uxtb	r0, r0
}
 80081f8:	4770      	bx	lr

080081fa <BQ76952_ReadRegister16>:
{
 80081fa:	b570      	push	{r4, r5, r6, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	4605      	mov	r5, r0
 8008200:	461e      	mov	r6, r3
    uint8_t reg_byte = (uint8_t)(reg_addr & 0xFF);  // Direct commands are 8-bit addresses
 8008202:	f88d 200f 	strb.w	r2, [sp, #15]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), &reg_byte, 1, I2C_TIMEOUT_MS);
 8008206:	004c      	lsls	r4, r1, #1
 8008208:	2264      	movs	r2, #100	@ 0x64
 800820a:	9200      	str	r2, [sp, #0]
 800820c:	2301      	movs	r3, #1
 800820e:	f10d 020f 	add.w	r2, sp, #15
 8008212:	4621      	mov	r1, r4
 8008214:	f005 fdf8 	bl	800de08 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) {
 8008218:	b108      	cbz	r0, 800821e <BQ76952_ReadRegister16+0x24>
}
 800821a:	b004      	add	sp, #16
 800821c:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_I2C_Master_Receive(hi2c, (device_addr << 1), data, 2, I2C_TIMEOUT_MS);
 800821e:	2364      	movs	r3, #100	@ 0x64
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	2302      	movs	r3, #2
 8008224:	aa03      	add	r2, sp, #12
 8008226:	4621      	mov	r1, r4
 8008228:	4628      	mov	r0, r5
 800822a:	f005 febf 	bl	800dfac <HAL_I2C_Master_Receive>
    if (status != HAL_OK) {
 800822e:	2800      	cmp	r0, #0
 8008230:	d1f3      	bne.n	800821a <BQ76952_ReadRegister16+0x20>
    *value = (uint16_t)data[0] | ((uint16_t)data[1] << 8);
 8008232:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8008236:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800823a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800823e:	8033      	strh	r3, [r6, #0]
    return HAL_OK;
 8008240:	e7eb      	b.n	800821a <BQ76952_ReadRegister16+0x20>

08008242 <BQ_ReadCell>:
    if (hi2c == NULL || voltage_mv == NULL || cell_num < 1 || cell_num > 16) {
 8008242:	2800      	cmp	r0, #0
 8008244:	d03f      	beq.n	80082c6 <BQ_ReadCell+0x84>
{
 8008246:	b510      	push	{r4, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	461c      	mov	r4, r3
 800824c:	4684      	mov	ip, r0
    if (hi2c == NULL || voltage_mv == NULL || cell_num < 1 || cell_num > 16) {
 800824e:	2b00      	cmp	r3, #0
 8008250:	d03b      	beq.n	80082ca <BQ_ReadCell+0x88>
 8008252:	2a00      	cmp	r2, #0
 8008254:	d03b      	beq.n	80082ce <BQ_ReadCell+0x8c>
 8008256:	2a10      	cmp	r2, #16
 8008258:	d83c      	bhi.n	80082d4 <BQ_ReadCell+0x92>
    switch (cell_num) {
 800825a:	3a01      	subs	r2, #1
 800825c:	2a0f      	cmp	r2, #15
 800825e:	d83b      	bhi.n	80082d8 <BQ_ReadCell+0x96>
 8008260:	e8df f002 	tbb	[pc, r2]
 8008264:	15132f08 	.word	0x15132f08
 8008268:	1d1b1917 	.word	0x1d1b1917
 800826c:	2523211f 	.word	0x2523211f
 8008270:	2d2b2927 	.word	0x2d2b2927
 8008274:	2214      	movs	r2, #20
    status = BQ76952_ReadRegister16(hi2c, device_addr, reg_addr, &raw_value);
 8008276:	f10d 0306 	add.w	r3, sp, #6
 800827a:	4660      	mov	r0, ip
 800827c:	f7ff ffbd 	bl	80081fa <BQ76952_ReadRegister16>
    if (status == HAL_OK) {
 8008280:	bb30      	cbnz	r0, 80082d0 <BQ_ReadCell+0x8e>
        *voltage_mv = raw_value;
 8008282:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8008286:	8023      	strh	r3, [r4, #0]
 8008288:	e022      	b.n	80082d0 <BQ_ReadCell+0x8e>
        case 3:  reg_addr = Cell3Voltage;  break;
 800828a:	2218      	movs	r2, #24
 800828c:	e7f3      	b.n	8008276 <BQ_ReadCell+0x34>
        case 4:  reg_addr = Cell4Voltage;  break;
 800828e:	221a      	movs	r2, #26
 8008290:	e7f1      	b.n	8008276 <BQ_ReadCell+0x34>
        case 5:  reg_addr = Cell5Voltage;  break;
 8008292:	221c      	movs	r2, #28
 8008294:	e7ef      	b.n	8008276 <BQ_ReadCell+0x34>
        case 6:  reg_addr = Cell6Voltage;  break;
 8008296:	221e      	movs	r2, #30
 8008298:	e7ed      	b.n	8008276 <BQ_ReadCell+0x34>
        case 7:  reg_addr = Cell7Voltage;  break;
 800829a:	2220      	movs	r2, #32
 800829c:	e7eb      	b.n	8008276 <BQ_ReadCell+0x34>
        case 8:  reg_addr = Cell8Voltage;  break;
 800829e:	2222      	movs	r2, #34	@ 0x22
 80082a0:	e7e9      	b.n	8008276 <BQ_ReadCell+0x34>
        case 9:  reg_addr = Cell9Voltage;  break;
 80082a2:	2224      	movs	r2, #36	@ 0x24
 80082a4:	e7e7      	b.n	8008276 <BQ_ReadCell+0x34>
        case 10: reg_addr = Cell10Voltage; break;
 80082a6:	2226      	movs	r2, #38	@ 0x26
 80082a8:	e7e5      	b.n	8008276 <BQ_ReadCell+0x34>
        case 11: reg_addr = Cell11Voltage; break;
 80082aa:	2228      	movs	r2, #40	@ 0x28
 80082ac:	e7e3      	b.n	8008276 <BQ_ReadCell+0x34>
        case 12: reg_addr = Cell12Voltage; break;
 80082ae:	222a      	movs	r2, #42	@ 0x2a
 80082b0:	e7e1      	b.n	8008276 <BQ_ReadCell+0x34>
        case 13: reg_addr = Cell13Voltage; break;
 80082b2:	222c      	movs	r2, #44	@ 0x2c
 80082b4:	e7df      	b.n	8008276 <BQ_ReadCell+0x34>
        case 14: reg_addr = Cell14Voltage; break;
 80082b6:	222e      	movs	r2, #46	@ 0x2e
 80082b8:	e7dd      	b.n	8008276 <BQ_ReadCell+0x34>
        case 15: reg_addr = Cell15Voltage; break;
 80082ba:	2230      	movs	r2, #48	@ 0x30
 80082bc:	e7db      	b.n	8008276 <BQ_ReadCell+0x34>
        case 16: reg_addr = Cell16Voltage; break;
 80082be:	2232      	movs	r2, #50	@ 0x32
 80082c0:	e7d9      	b.n	8008276 <BQ_ReadCell+0x34>
        case 2:  reg_addr = Cell2Voltage;  break;
 80082c2:	2216      	movs	r2, #22
 80082c4:	e7d7      	b.n	8008276 <BQ_ReadCell+0x34>
        return HAL_ERROR;
 80082c6:	2001      	movs	r0, #1
}
 80082c8:	4770      	bx	lr
        return HAL_ERROR;
 80082ca:	2001      	movs	r0, #1
 80082cc:	e000      	b.n	80082d0 <BQ_ReadCell+0x8e>
 80082ce:	2001      	movs	r0, #1
}
 80082d0:	b002      	add	sp, #8
 80082d2:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 80082d4:	2001      	movs	r0, #1
 80082d6:	e7fb      	b.n	80082d0 <BQ_ReadCell+0x8e>
    switch (cell_num) {
 80082d8:	2001      	movs	r0, #1
 80082da:	e7f9      	b.n	80082d0 <BQ_ReadCell+0x8e>

080082dc <BQ_ReadBMS1>:
    if (data == NULL) {
 80082dc:	2800      	cmp	r0, #0
 80082de:	d042      	beq.n	8008366 <BQ_ReadBMS1+0x8a>
{
 80082e0:	b570      	push	{r4, r5, r6, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	4606      	mov	r6, r0
    if (I2C1Handle != NULL) {
 80082e6:	4b23      	ldr	r3, [pc, #140]	@ (8008374 <BQ_ReadBMS1+0x98>)
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	b120      	cbz	r0, 80082f6 <BQ_ReadBMS1+0x1a>
        if (osMutexAcquire(I2C1Handle, I2C_TIMEOUT_MS) != osOK) {
 80082ec:	2164      	movs	r1, #100	@ 0x64
 80082ee:	f001 fe04 	bl	8009efa <osMutexAcquire>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d139      	bne.n	800836a <BQ_ReadBMS1+0x8e>
{
 80082f6:	2500      	movs	r5, #0
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 80082f8:	2d08      	cmp	r5, #8
 80082fa:	d81b      	bhi.n	8008334 <BQ_ReadBMS1+0x58>
        uint16_t voltage_mv = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	f8ad 3006 	strh.w	r3, [sp, #6]
        status = BQ_ReadCell(&hi2c1, BQ76952_I2C_ADDR_BMS1, i + 1, &voltage_mv);
 8008302:	1c6c      	adds	r4, r5, #1
 8008304:	b2e4      	uxtb	r4, r4
 8008306:	f10d 0306 	add.w	r3, sp, #6
 800830a:	4622      	mov	r2, r4
 800830c:	2108      	movs	r1, #8
 800830e:	481a      	ldr	r0, [pc, #104]	@ (8008378 <BQ_ReadBMS1+0x9c>)
 8008310:	f7ff ff97 	bl	8008242 <BQ_ReadCell>
        if (status == HAL_OK) {
 8008314:	b928      	cbnz	r0, 8008322 <BQ_ReadBMS1+0x46>
            data->cell_voltage_mv[i] = voltage_mv;
 8008316:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800831a:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 800831e:	4625      	mov	r5, r4
 8008320:	e7ea      	b.n	80082f8 <BQ_ReadBMS1+0x1c>
            data->valid = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	7633      	strb	r3, [r6, #24]
            if (I2C1Handle != NULL) {
 8008326:	4b13      	ldr	r3, [pc, #76]	@ (8008374 <BQ_ReadBMS1+0x98>)
 8008328:	6818      	ldr	r0, [r3, #0]
 800832a:	b108      	cbz	r0, 8008330 <BQ_ReadBMS1+0x54>
                osMutexRelease(I2C1Handle);
 800832c:	f001 fe14 	bl	8009f58 <osMutexRelease>
            return HAL_ERROR;
 8008330:	2001      	movs	r0, #1
 8008332:	e016      	b.n	8008362 <BQ_ReadBMS1+0x86>
    if (I2C1Handle != NULL) {
 8008334:	4b0f      	ldr	r3, [pc, #60]	@ (8008374 <BQ_ReadBMS1+0x98>)
 8008336:	6818      	ldr	r0, [r3, #0]
 8008338:	b108      	cbz	r0, 800833e <BQ_ReadBMS1+0x62>
        osMutexRelease(I2C1Handle);
 800833a:	f001 fe0d 	bl	8009f58 <osMutexRelease>
    if (voltage_mutex != NULL) {
 800833e:	4b0f      	ldr	r3, [pc, #60]	@ (800837c <BQ_ReadBMS1+0xa0>)
 8008340:	6818      	ldr	r0, [r3, #0]
 8008342:	b118      	cbz	r0, 800834c <BQ_ReadBMS1+0x70>
        osMutexAcquire(voltage_mutex, osWaitForever);
 8008344:	f04f 31ff 	mov.w	r1, #4294967295
 8008348:	f001 fdd7 	bl	8009efa <osMutexAcquire>
    data->last_update_tick = osKernelGetTickCount();
 800834c:	f001 fd18 	bl	8009d80 <osKernelGetTickCount>
 8008350:	6170      	str	r0, [r6, #20]
    data->valid = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	7633      	strb	r3, [r6, #24]
    if (voltage_mutex != NULL) {
 8008356:	4b09      	ldr	r3, [pc, #36]	@ (800837c <BQ_ReadBMS1+0xa0>)
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	b140      	cbz	r0, 800836e <BQ_ReadBMS1+0x92>
        osMutexRelease(voltage_mutex);
 800835c:	f001 fdfc 	bl	8009f58 <osMutexRelease>
    return HAL_OK;
 8008360:	2000      	movs	r0, #0
}
 8008362:	b002      	add	sp, #8
 8008364:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8008366:	2001      	movs	r0, #1
}
 8008368:	4770      	bx	lr
            return HAL_ERROR;
 800836a:	2001      	movs	r0, #1
 800836c:	e7f9      	b.n	8008362 <BQ_ReadBMS1+0x86>
    return HAL_OK;
 800836e:	2000      	movs	r0, #0
 8008370:	e7f7      	b.n	8008362 <BQ_ReadBMS1+0x86>
 8008372:	bf00      	nop
 8008374:	20003cb4 	.word	0x20003cb4
 8008378:	20003d20 	.word	0x20003d20
 800837c:	200000c4 	.word	0x200000c4

08008380 <BQ_SendCANMessage>:
    if (data == NULL) {
 8008380:	2800      	cmp	r0, #0
 8008382:	d062      	beq.n	800844a <BQ_SendCANMessage+0xca>
{
 8008384:	b510      	push	{r4, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	4604      	mov	r4, r0
    can_data[0] = (uint8_t)(data->cell_voltage_mv[0] & 0xFF);
 800838a:	8803      	ldrh	r3, [r0, #0]
 800838c:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[0] >> 8) & 0xFF);
 8008390:	0a1b      	lsrs	r3, r3, #8
 8008392:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[1] & 0xFF);
 8008396:	8843      	ldrh	r3, [r0, #2]
 8008398:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[1] >> 8) & 0xFF);
 800839c:	0a1b      	lsrs	r3, r3, #8
 800839e:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[2] & 0xFF);
 80083a2:	8883      	ldrh	r3, [r0, #4]
 80083a4:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[2] >> 8) & 0xFF);
 80083a8:	0a1b      	lsrs	r3, r3, #8
 80083aa:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 80083ae:	2300      	movs	r3, #0
 80083b0:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 80083b4:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_0_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 80083b8:	2302      	movs	r3, #2
 80083ba:	2206      	movs	r2, #6
 80083bc:	4669      	mov	r1, sp
 80083be:	4824      	ldr	r0, [pc, #144]	@ (8008450 <BQ_SendCANMessage+0xd0>)
 80083c0:	6800      	ldr	r0, [r0, #0]
 80083c2:	f000 ff37 	bl	8009234 <CAN_SendMessage>
    if (status != HAL_OK) {
 80083c6:	b108      	cbz	r0, 80083cc <BQ_SendCANMessage+0x4c>
}
 80083c8:	b002      	add	sp, #8
 80083ca:	bd10      	pop	{r4, pc}
    can_data[0] = (uint8_t)(data->cell_voltage_mv[3] & 0xFF);
 80083cc:	88e3      	ldrh	r3, [r4, #6]
 80083ce:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[3] >> 8) & 0xFF);
 80083d2:	0a1b      	lsrs	r3, r3, #8
 80083d4:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[4] & 0xFF);
 80083d8:	8923      	ldrh	r3, [r4, #8]
 80083da:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[4] >> 8) & 0xFF);
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[5] & 0xFF);
 80083e4:	8963      	ldrh	r3, [r4, #10]
 80083e6:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[5] >> 8) & 0xFF);
 80083ea:	0a1b      	lsrs	r3, r3, #8
 80083ec:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 80083f0:	2300      	movs	r3, #0
 80083f2:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 80083f6:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_1_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 80083fa:	2302      	movs	r3, #2
 80083fc:	2206      	movs	r2, #6
 80083fe:	4669      	mov	r1, sp
 8008400:	4814      	ldr	r0, [pc, #80]	@ (8008454 <BQ_SendCANMessage+0xd4>)
 8008402:	6800      	ldr	r0, [r0, #0]
 8008404:	f000 ff16 	bl	8009234 <CAN_SendMessage>
    if (status != HAL_OK) {
 8008408:	2800      	cmp	r0, #0
 800840a:	d1dd      	bne.n	80083c8 <BQ_SendCANMessage+0x48>
    can_data[0] = (uint8_t)(data->cell_voltage_mv[6] & 0xFF);
 800840c:	89a3      	ldrh	r3, [r4, #12]
 800840e:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[6] >> 8) & 0xFF);
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[7] & 0xFF);
 8008418:	89e3      	ldrh	r3, [r4, #14]
 800841a:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[7] >> 8) & 0xFF);
 800841e:	0a1b      	lsrs	r3, r3, #8
 8008420:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[8] & 0xFF);
 8008424:	8a23      	ldrh	r3, [r4, #16]
 8008426:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[8] >> 8) & 0xFF);
 800842a:	0a1b      	lsrs	r3, r3, #8
 800842c:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 8008430:	2300      	movs	r3, #0
 8008432:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 8008436:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_2_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 800843a:	2302      	movs	r3, #2
 800843c:	2206      	movs	r2, #6
 800843e:	4669      	mov	r1, sp
 8008440:	4805      	ldr	r0, [pc, #20]	@ (8008458 <BQ_SendCANMessage+0xd8>)
 8008442:	6800      	ldr	r0, [r0, #0]
 8008444:	f000 fef6 	bl	8009234 <CAN_SendMessage>
    return status;
 8008448:	e7be      	b.n	80083c8 <BQ_SendCANMessage+0x48>
        return HAL_ERROR;
 800844a:	2001      	movs	r0, #1
}
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20000d6c 	.word	0x20000d6c
 8008454:	20000d68 	.word	0x20000d68
 8008458:	20000d64 	.word	0x20000d64

0800845c <BQ_CheckLimits>:
    if (data == NULL || !data->valid) {
 800845c:	2800      	cmp	r0, #0
 800845e:	d050      	beq.n	8008502 <BQ_CheckLimits+0xa6>
{
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	4601      	mov	r1, r0
    if (data == NULL || !data->valid) {
 8008464:	7e03      	ldrb	r3, [r0, #24]
 8008466:	b3bb      	cbz	r3, 80084d8 <BQ_CheckLimits+0x7c>
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 8008468:	2300      	movs	r3, #0
    bool low_voltage_warning = false;
 800846a:	461e      	mov	r6, r3
    bool high_voltage_warning = false;
 800846c:	461d      	mov	r5, r3
    bool under_voltage_detected = false;
 800846e:	461c      	mov	r4, r3
    bool over_voltage_detected = false;
 8008470:	461f      	mov	r7, r3
 8008472:	e002      	b.n	800847a <BQ_CheckLimits+0x1e>
            over_voltage_detected = true;
 8008474:	2701      	movs	r7, #1
    for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 8008476:	3301      	adds	r3, #1
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b08      	cmp	r3, #8
 800847c:	d818      	bhi.n	80084b0 <BQ_CheckLimits+0x54>
        uint16_t voltage_mv = data->cell_voltage_mv[i];
 800847e:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
        if (voltage_mv == 0) {
 8008482:	2a00      	cmp	r2, #0
 8008484:	d0f7      	beq.n	8008476 <BQ_CheckLimits+0x1a>
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
 8008486:	f241 0068 	movw	r0, #4200	@ 0x1068
 800848a:	4282      	cmp	r2, r0
 800848c:	d8f2      	bhi.n	8008474 <BQ_CheckLimits+0x18>
        else if (voltage_mv < CELL_VOLTAGE_MIN_MV) {
 800848e:	f640 10c3 	movw	r0, #2499	@ 0x9c3
 8008492:	4282      	cmp	r2, r0
 8008494:	d908      	bls.n	80084a8 <BQ_CheckLimits+0x4c>
        else if (voltage_mv > CELL_VOLTAGE_WARNING_HIGH_MV) {
 8008496:	f241 0004 	movw	r0, #4100	@ 0x1004
 800849a:	4282      	cmp	r2, r0
 800849c:	d806      	bhi.n	80084ac <BQ_CheckLimits+0x50>
        else if (voltage_mv < CELL_VOLTAGE_WARNING_LOW_MV) {
 800849e:	f5b2 6f2f 	cmp.w	r2, #2800	@ 0xaf0
 80084a2:	d2e8      	bcs.n	8008476 <BQ_CheckLimits+0x1a>
            low_voltage_warning = true;
 80084a4:	2601      	movs	r6, #1
 80084a6:	e7e6      	b.n	8008476 <BQ_CheckLimits+0x1a>
            under_voltage_detected = true;
 80084a8:	2401      	movs	r4, #1
 80084aa:	e7e4      	b.n	8008476 <BQ_CheckLimits+0x1a>
            high_voltage_warning = true;
 80084ac:	2501      	movs	r5, #1
 80084ae:	e7e2      	b.n	8008476 <BQ_CheckLimits+0x1a>
    if (over_voltage_detected) {
 80084b0:	b19f      	cbz	r7, 80084da <BQ_CheckLimits+0x7e>
        ErrorMgr_SetError(ERROR_OVER_VOLTAGE);
 80084b2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084b6:	f002 f935 	bl	800a724 <ErrorMgr_SetError>
    if (under_voltage_detected) {
 80084ba:	b19c      	cbz	r4, 80084e4 <BQ_CheckLimits+0x88>
        ErrorMgr_SetError(ERROR_UNDER_VOLTAGE);
 80084bc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084c0:	f002 f930 	bl	800a724 <ErrorMgr_SetError>
    if (high_voltage_warning) {
 80084c4:	b19d      	cbz	r5, 80084ee <BQ_CheckLimits+0x92>
        ErrorMgr_SetWarning(WARNING_HIGH_VOLTAGE);
 80084c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084ca:	f002 f987 	bl	800a7dc <ErrorMgr_SetWarning>
    if (low_voltage_warning) {
 80084ce:	b19e      	cbz	r6, 80084f8 <BQ_CheckLimits+0x9c>
        ErrorMgr_SetWarning(WARNING_LOW_VOLTAGE);
 80084d0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084d4:	f002 f982 	bl	800a7dc <ErrorMgr_SetWarning>
}
 80084d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
 80084da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084de:	f002 f947 	bl	800a770 <ErrorMgr_ClearError>
 80084e2:	e7ea      	b.n	80084ba <BQ_CheckLimits+0x5e>
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
 80084e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084e8:	f002 f942 	bl	800a770 <ErrorMgr_ClearError>
 80084ec:	e7ea      	b.n	80084c4 <BQ_CheckLimits+0x68>
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
 80084ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80084f2:	f002 f98b 	bl	800a80c <ErrorMgr_ClearWarning>
 80084f6:	e7ea      	b.n	80084ce <BQ_CheckLimits+0x72>
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
 80084f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80084fc:	f002 f986 	bl	800a80c <ErrorMgr_ClearWarning>
 8008500:	e7ea      	b.n	80084d8 <BQ_CheckLimits+0x7c>
 8008502:	4770      	bx	lr

08008504 <BQ_ReadBMS2>:
    if (data == NULL) {
 8008504:	2800      	cmp	r0, #0
 8008506:	d04f      	beq.n	80085a8 <BQ_ReadBMS2+0xa4>
{
 8008508:	b570      	push	{r4, r5, r6, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	4606      	mov	r6, r0
    if (I2C3Handle != NULL) {
 800850e:	4b29      	ldr	r3, [pc, #164]	@ (80085b4 <BQ_ReadBMS2+0xb0>)
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	b120      	cbz	r0, 800851e <BQ_ReadBMS2+0x1a>
        if (osMutexAcquire(I2C3Handle, I2C_TIMEOUT_MS) != osOK) {
 8008514:	2164      	movs	r1, #100	@ 0x64
 8008516:	f001 fcf0 	bl	8009efa <osMutexAcquire>
 800851a:	2800      	cmp	r0, #0
 800851c:	d146      	bne.n	80085ac <BQ_ReadBMS2+0xa8>
    g_last_i2c3_error = HAL_I2C_GetError(&hi2c3);
 800851e:	4826      	ldr	r0, [pc, #152]	@ (80085b8 <BQ_ReadBMS2+0xb4>)
 8008520:	f005 fea3 	bl	800e26a <HAL_I2C_GetError>
 8008524:	4b25      	ldr	r3, [pc, #148]	@ (80085bc <BQ_ReadBMS2+0xb8>)
 8008526:	6018      	str	r0, [r3, #0]
    if (g_last_i2c3_error != HAL_I2C_ERROR_NONE) {
 8008528:	b130      	cbz	r0, 8008538 <BQ_ReadBMS2+0x34>
        __HAL_I2C_CLEAR_FLAG(&hi2c3, I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_AF | I2C_FLAG_OVR);
 800852a:	4b23      	ldr	r3, [pc, #140]	@ (80085b8 <BQ_ReadBMS2+0xb4>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8008532:	61d1      	str	r1, [r2, #28]
        hi2c3.ErrorCode = HAL_I2C_ERROR_NONE;
 8008534:	2200      	movs	r2, #0
 8008536:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8008538:	2500      	movs	r5, #0
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 800853a:	2d08      	cmp	r5, #8
 800853c:	d81b      	bhi.n	8008576 <BQ_ReadBMS2+0x72>
        uint16_t voltage_mv = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	f8ad 3006 	strh.w	r3, [sp, #6]
        status = BQ_ReadCell(&hi2c3, BQ76952_I2C_ADDR_BMS2, i + 1, &voltage_mv);
 8008544:	1c6c      	adds	r4, r5, #1
 8008546:	b2e4      	uxtb	r4, r4
 8008548:	f10d 0306 	add.w	r3, sp, #6
 800854c:	4622      	mov	r2, r4
 800854e:	2108      	movs	r1, #8
 8008550:	4819      	ldr	r0, [pc, #100]	@ (80085b8 <BQ_ReadBMS2+0xb4>)
 8008552:	f7ff fe76 	bl	8008242 <BQ_ReadCell>
        if (status == HAL_OK) {
 8008556:	b928      	cbnz	r0, 8008564 <BQ_ReadBMS2+0x60>
            data->cell_voltage_mv[i] = voltage_mv;
 8008558:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800855c:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 8008560:	4625      	mov	r5, r4
 8008562:	e7ea      	b.n	800853a <BQ_ReadBMS2+0x36>
            data->valid = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	7633      	strb	r3, [r6, #24]
            if (I2C3Handle != NULL) {
 8008568:	4b12      	ldr	r3, [pc, #72]	@ (80085b4 <BQ_ReadBMS2+0xb0>)
 800856a:	6818      	ldr	r0, [r3, #0]
 800856c:	b108      	cbz	r0, 8008572 <BQ_ReadBMS2+0x6e>
                osMutexRelease(I2C3Handle);
 800856e:	f001 fcf3 	bl	8009f58 <osMutexRelease>
            return HAL_ERROR;
 8008572:	2001      	movs	r0, #1
 8008574:	e016      	b.n	80085a4 <BQ_ReadBMS2+0xa0>
    if (I2C3Handle != NULL) {
 8008576:	4b0f      	ldr	r3, [pc, #60]	@ (80085b4 <BQ_ReadBMS2+0xb0>)
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	b108      	cbz	r0, 8008580 <BQ_ReadBMS2+0x7c>
        osMutexRelease(I2C3Handle);
 800857c:	f001 fcec 	bl	8009f58 <osMutexRelease>
    if (voltage_mutex_bms2 != NULL) {
 8008580:	4b0f      	ldr	r3, [pc, #60]	@ (80085c0 <BQ_ReadBMS2+0xbc>)
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	b118      	cbz	r0, 800858e <BQ_ReadBMS2+0x8a>
        osMutexAcquire(voltage_mutex_bms2, osWaitForever);
 8008586:	f04f 31ff 	mov.w	r1, #4294967295
 800858a:	f001 fcb6 	bl	8009efa <osMutexAcquire>
    data->last_update_tick = osKernelGetTickCount();
 800858e:	f001 fbf7 	bl	8009d80 <osKernelGetTickCount>
 8008592:	6170      	str	r0, [r6, #20]
    data->valid = 1;
 8008594:	2301      	movs	r3, #1
 8008596:	7633      	strb	r3, [r6, #24]
    if (voltage_mutex_bms2 != NULL) {
 8008598:	4b09      	ldr	r3, [pc, #36]	@ (80085c0 <BQ_ReadBMS2+0xbc>)
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	b140      	cbz	r0, 80085b0 <BQ_ReadBMS2+0xac>
        osMutexRelease(voltage_mutex_bms2);
 800859e:	f001 fcdb 	bl	8009f58 <osMutexRelease>
    return HAL_OK;
 80085a2:	2000      	movs	r0, #0
}
 80085a4:	b002      	add	sp, #8
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80085a8:	2001      	movs	r0, #1
}
 80085aa:	4770      	bx	lr
            return HAL_ERROR;
 80085ac:	2001      	movs	r0, #1
 80085ae:	e7f9      	b.n	80085a4 <BQ_ReadBMS2+0xa0>
    return HAL_OK;
 80085b0:	2000      	movs	r0, #0
 80085b2:	e7f7      	b.n	80085a4 <BQ_ReadBMS2+0xa0>
 80085b4:	20003cb0 	.word	0x20003cb0
 80085b8:	20003ccc 	.word	0x20003ccc
 80085bc:	200000bc 	.word	0x200000bc
 80085c0:	200000c0 	.word	0x200000c0

080085c4 <BQ_SendCANMessage_BMS2>:
    if (data == NULL) {
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d062      	beq.n	800868e <BQ_SendCANMessage_BMS2+0xca>
{
 80085c8:	b510      	push	{r4, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	4604      	mov	r4, r0
    can_data[0] = (uint8_t)(data->cell_voltage_mv[0] & 0xFF);
 80085ce:	8803      	ldrh	r3, [r0, #0]
 80085d0:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[0] >> 8) & 0xFF);
 80085d4:	0a1b      	lsrs	r3, r3, #8
 80085d6:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[1] & 0xFF);
 80085da:	8843      	ldrh	r3, [r0, #2]
 80085dc:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[1] >> 8) & 0xFF);
 80085e0:	0a1b      	lsrs	r3, r3, #8
 80085e2:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[2] & 0xFF);
 80085e6:	8883      	ldrh	r3, [r0, #4]
 80085e8:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[2] >> 8) & 0xFF);
 80085ec:	0a1b      	lsrs	r3, r3, #8
 80085ee:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 80085f2:	2300      	movs	r3, #0
 80085f4:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 80085f8:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_3_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 80085fc:	2302      	movs	r3, #2
 80085fe:	2206      	movs	r2, #6
 8008600:	4669      	mov	r1, sp
 8008602:	4824      	ldr	r0, [pc, #144]	@ (8008694 <BQ_SendCANMessage_BMS2+0xd0>)
 8008604:	6800      	ldr	r0, [r0, #0]
 8008606:	f000 fe15 	bl	8009234 <CAN_SendMessage>
    if (status != HAL_OK) {
 800860a:	b108      	cbz	r0, 8008610 <BQ_SendCANMessage_BMS2+0x4c>
}
 800860c:	b002      	add	sp, #8
 800860e:	bd10      	pop	{r4, pc}
    can_data[0] = (uint8_t)(data->cell_voltage_mv[3] & 0xFF);
 8008610:	88e3      	ldrh	r3, [r4, #6]
 8008612:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[3] >> 8) & 0xFF);
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[4] & 0xFF);
 800861c:	8923      	ldrh	r3, [r4, #8]
 800861e:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[4] >> 8) & 0xFF);
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[5] & 0xFF);
 8008628:	8963      	ldrh	r3, [r4, #10]
 800862a:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[5] >> 8) & 0xFF);
 800862e:	0a1b      	lsrs	r3, r3, #8
 8008630:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 8008634:	2300      	movs	r3, #0
 8008636:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 800863a:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_4_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 800863e:	2302      	movs	r3, #2
 8008640:	2206      	movs	r2, #6
 8008642:	4669      	mov	r1, sp
 8008644:	4814      	ldr	r0, [pc, #80]	@ (8008698 <BQ_SendCANMessage_BMS2+0xd4>)
 8008646:	6800      	ldr	r0, [r0, #0]
 8008648:	f000 fdf4 	bl	8009234 <CAN_SendMessage>
    if (status != HAL_OK) {
 800864c:	2800      	cmp	r0, #0
 800864e:	d1dd      	bne.n	800860c <BQ_SendCANMessage_BMS2+0x48>
    can_data[0] = (uint8_t)(data->cell_voltage_mv[6] & 0xFF);
 8008650:	89a3      	ldrh	r3, [r4, #12]
 8008652:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((data->cell_voltage_mv[6] >> 8) & 0xFF);
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(data->cell_voltage_mv[7] & 0xFF);
 800865c:	89e3      	ldrh	r3, [r4, #14]
 800865e:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((data->cell_voltage_mv[7] >> 8) & 0xFF);
 8008662:	0a1b      	lsrs	r3, r3, #8
 8008664:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(data->cell_voltage_mv[8] & 0xFF);
 8008668:	8a23      	ldrh	r3, [r4, #16]
 800866a:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((data->cell_voltage_mv[8] >> 8) & 0xFF);
 800866e:	0a1b      	lsrs	r3, r3, #8
 8008670:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Padding
 8008674:	2300      	movs	r3, #0
 8008676:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Padding
 800867a:	f88d 3007 	strb.w	r3, [sp, #7]
    status = CAN_SendMessage(CAN_VOLTAGE_5_ID, can_data, 6, CAN_PRIORITY_NORMAL);
 800867e:	2302      	movs	r3, #2
 8008680:	2206      	movs	r2, #6
 8008682:	4669      	mov	r1, sp
 8008684:	4805      	ldr	r0, [pc, #20]	@ (800869c <BQ_SendCANMessage_BMS2+0xd8>)
 8008686:	6800      	ldr	r0, [r0, #0]
 8008688:	f000 fdd4 	bl	8009234 <CAN_SendMessage>
    return status;
 800868c:	e7be      	b.n	800860c <BQ_SendCANMessage_BMS2+0x48>
        return HAL_ERROR;
 800868e:	2001      	movs	r0, #1
}
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	20000d60 	.word	0x20000d60
 8008698:	20000d5c 	.word	0x20000d5c
 800869c:	20000d58 	.word	0x20000d58

080086a0 <BQ_SendChipStatus>:
{
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	4606      	mov	r6, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	4615      	mov	r5, r2
    uint16_t stack_voltage = 0;
 80086aa:	2300      	movs	r3, #0
 80086ac:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t alarm_status = 0;
 80086b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    int16_t ts2_temp = 0;
 80086b4:	f8ad 300a 	strh.w	r3, [sp, #10]
    status = BQ76952_ReadRegister16(hi2c, device_addr, StackVoltage, &stack_voltage);
 80086b8:	f10d 030e 	add.w	r3, sp, #14
 80086bc:	2234      	movs	r2, #52	@ 0x34
 80086be:	f7ff fd9c 	bl	80081fa <BQ76952_ReadRegister16>
    if (status != HAL_OK) {
 80086c2:	4603      	mov	r3, r0
 80086c4:	b110      	cbz	r0, 80086cc <BQ_SendChipStatus+0x2c>
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	b004      	add	sp, #16
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
    status = BQ76952_ReadRegister16(hi2c, device_addr, AlarmStatus, &alarm_status);
 80086cc:	ab03      	add	r3, sp, #12
 80086ce:	2262      	movs	r2, #98	@ 0x62
 80086d0:	4621      	mov	r1, r4
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7ff fd91 	bl	80081fa <BQ76952_ReadRegister16>
    if (status != HAL_OK) {
 80086d8:	4603      	mov	r3, r0
 80086da:	2800      	cmp	r0, #0
 80086dc:	d1f3      	bne.n	80086c6 <BQ_SendChipStatus+0x26>
    status = BQ76952_ReadRegister16(hi2c, device_addr, TS2Temperature, (uint16_t*)&ts2_temp);
 80086de:	f10d 030a 	add.w	r3, sp, #10
 80086e2:	2272      	movs	r2, #114	@ 0x72
 80086e4:	4621      	mov	r1, r4
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7ff fd87 	bl	80081fa <BQ76952_ReadRegister16>
    if (status != HAL_OK) {
 80086ec:	4603      	mov	r3, r0
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d1e9      	bne.n	80086c6 <BQ_SendChipStatus+0x26>
    can_data[0] = (uint8_t)(stack_voltage & 0xFF);
 80086f2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80086f6:	f88d 3000 	strb.w	r3, [sp]
    can_data[1] = (uint8_t)((stack_voltage >> 8) & 0xFF);
 80086fa:	0a1b      	lsrs	r3, r3, #8
 80086fc:	f88d 3001 	strb.w	r3, [sp, #1]
    can_data[2] = (uint8_t)(alarm_status & 0xFF);
 8008700:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008704:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (uint8_t)((alarm_status >> 8) & 0xFF);
 8008708:	0a1b      	lsrs	r3, r3, #8
 800870a:	f88d 3003 	strb.w	r3, [sp, #3]
    can_data[4] = (uint8_t)(ts2_temp & 0xFF);
 800870e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8008712:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (uint8_t)((ts2_temp >> 8) & 0xFF);
 8008716:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800871a:	f88d 3005 	strb.w	r3, [sp, #5]
    can_data[6] = 0x00;  // Reserved
 800871e:	2300      	movs	r3, #0
 8008720:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = 0x00;  // Reserved
 8008724:	f88d 3007 	strb.w	r3, [sp, #7]
    return CAN_SendMessage(can_id, can_data, 8, CAN_PRIORITY_NORMAL);
 8008728:	2302      	movs	r3, #2
 800872a:	2208      	movs	r2, #8
 800872c:	4669      	mov	r1, sp
 800872e:	4628      	mov	r0, r5
 8008730:	f000 fd80 	bl	8009234 <CAN_SendMessage>
 8008734:	4603      	mov	r3, r0
 8008736:	e7c6      	b.n	80086c6 <BQ_SendChipStatus+0x26>

08008738 <BQ_CheckLimits_BMS2>:
    if (data == NULL || !data->valid) {
 8008738:	2800      	cmp	r0, #0
 800873a:	d050      	beq.n	80087de <BQ_CheckLimits_BMS2+0xa6>
{
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	4601      	mov	r1, r0
    if (data == NULL || !data->valid) {
 8008740:	7e03      	ldrb	r3, [r0, #24]
 8008742:	b3bb      	cbz	r3, 80087b4 <BQ_CheckLimits_BMS2+0x7c>
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 8008744:	2300      	movs	r3, #0
    bool low_voltage_warning = false;
 8008746:	461e      	mov	r6, r3
    bool high_voltage_warning = false;
 8008748:	461d      	mov	r5, r3
    bool under_voltage_detected = false;
 800874a:	461c      	mov	r4, r3
    bool over_voltage_detected = false;
 800874c:	461f      	mov	r7, r3
 800874e:	e002      	b.n	8008756 <BQ_CheckLimits_BMS2+0x1e>
            over_voltage_detected = true;
 8008750:	2701      	movs	r7, #1
    for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 8008752:	3301      	adds	r3, #1
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b08      	cmp	r3, #8
 8008758:	d818      	bhi.n	800878c <BQ_CheckLimits_BMS2+0x54>
        uint16_t voltage_mv = data->cell_voltage_mv[i];
 800875a:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
        if (voltage_mv == 0) {
 800875e:	2a00      	cmp	r2, #0
 8008760:	d0f7      	beq.n	8008752 <BQ_CheckLimits_BMS2+0x1a>
        if (voltage_mv > CELL_VOLTAGE_MAX_MV) {
 8008762:	f241 0068 	movw	r0, #4200	@ 0x1068
 8008766:	4282      	cmp	r2, r0
 8008768:	d8f2      	bhi.n	8008750 <BQ_CheckLimits_BMS2+0x18>
        else if (voltage_mv < CELL_VOLTAGE_MIN_MV) {
 800876a:	f640 10c3 	movw	r0, #2499	@ 0x9c3
 800876e:	4282      	cmp	r2, r0
 8008770:	d908      	bls.n	8008784 <BQ_CheckLimits_BMS2+0x4c>
        else if (voltage_mv > CELL_VOLTAGE_WARNING_HIGH_MV) {
 8008772:	f241 0004 	movw	r0, #4100	@ 0x1004
 8008776:	4282      	cmp	r2, r0
 8008778:	d806      	bhi.n	8008788 <BQ_CheckLimits_BMS2+0x50>
        else if (voltage_mv < CELL_VOLTAGE_WARNING_LOW_MV) {
 800877a:	f5b2 6f2f 	cmp.w	r2, #2800	@ 0xaf0
 800877e:	d2e8      	bcs.n	8008752 <BQ_CheckLimits_BMS2+0x1a>
            low_voltage_warning = true;
 8008780:	2601      	movs	r6, #1
 8008782:	e7e6      	b.n	8008752 <BQ_CheckLimits_BMS2+0x1a>
            under_voltage_detected = true;
 8008784:	2401      	movs	r4, #1
 8008786:	e7e4      	b.n	8008752 <BQ_CheckLimits_BMS2+0x1a>
            high_voltage_warning = true;
 8008788:	2501      	movs	r5, #1
 800878a:	e7e2      	b.n	8008752 <BQ_CheckLimits_BMS2+0x1a>
    if (over_voltage_detected) {
 800878c:	b19f      	cbz	r7, 80087b6 <BQ_CheckLimits_BMS2+0x7e>
        ErrorMgr_SetError(ERROR_OVER_VOLTAGE);
 800878e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008792:	f001 ffc7 	bl	800a724 <ErrorMgr_SetError>
    if (under_voltage_detected) {
 8008796:	b19c      	cbz	r4, 80087c0 <BQ_CheckLimits_BMS2+0x88>
        ErrorMgr_SetError(ERROR_UNDER_VOLTAGE);
 8008798:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800879c:	f001 ffc2 	bl	800a724 <ErrorMgr_SetError>
    if (high_voltage_warning) {
 80087a0:	b19d      	cbz	r5, 80087ca <BQ_CheckLimits_BMS2+0x92>
        ErrorMgr_SetWarning(WARNING_HIGH_VOLTAGE);
 80087a2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80087a6:	f002 f819 	bl	800a7dc <ErrorMgr_SetWarning>
    if (low_voltage_warning) {
 80087aa:	b19e      	cbz	r6, 80087d4 <BQ_CheckLimits_BMS2+0x9c>
        ErrorMgr_SetWarning(WARNING_LOW_VOLTAGE);
 80087ac:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80087b0:	f002 f814 	bl	800a7dc <ErrorMgr_SetWarning>
}
 80087b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ErrorMgr_ClearError(ERROR_OVER_VOLTAGE);
 80087b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80087ba:	f001 ffd9 	bl	800a770 <ErrorMgr_ClearError>
 80087be:	e7ea      	b.n	8008796 <BQ_CheckLimits_BMS2+0x5e>
        ErrorMgr_ClearError(ERROR_UNDER_VOLTAGE);
 80087c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80087c4:	f001 ffd4 	bl	800a770 <ErrorMgr_ClearError>
 80087c8:	e7ea      	b.n	80087a0 <BQ_CheckLimits_BMS2+0x68>
        ErrorMgr_ClearWarning(WARNING_HIGH_VOLTAGE);
 80087ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80087ce:	f002 f81d 	bl	800a80c <ErrorMgr_ClearWarning>
 80087d2:	e7ea      	b.n	80087aa <BQ_CheckLimits_BMS2+0x72>
        ErrorMgr_ClearWarning(WARNING_LOW_VOLTAGE);
 80087d4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80087d8:	f002 f818 	bl	800a80c <ErrorMgr_ClearWarning>
 80087dc:	e7ea      	b.n	80087b4 <BQ_CheckLimits_BMS2+0x7c>
 80087de:	4770      	bx	lr

080087e0 <BQ_ResetChips>:
{
 80087e0:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(BMS_RESET_GPIO_Port, BMS_RESET_Pin, GPIO_PIN_SET);
 80087e2:	4c0a      	ldr	r4, [pc, #40]	@ (800880c <BQ_ResetChips+0x2c>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	2140      	movs	r1, #64	@ 0x40
 80087e8:	4620      	mov	r0, r4
 80087ea:	f005 f8ef 	bl	800d9cc <HAL_GPIO_WritePin>
    osDelay(500);
 80087ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80087f2:	f001 fb29 	bl	8009e48 <osDelay>
    HAL_GPIO_WritePin(BMS_RESET_GPIO_Port, BMS_RESET_Pin, GPIO_PIN_RESET);
 80087f6:	2200      	movs	r2, #0
 80087f8:	2140      	movs	r1, #64	@ 0x40
 80087fa:	4620      	mov	r0, r4
 80087fc:	f005 f8e6 	bl	800d9cc <HAL_GPIO_WritePin>
    osDelay(200);
 8008800:	20c8      	movs	r0, #200	@ 0xc8
 8008802:	f001 fb21 	bl	8009e48 <osDelay>
}
 8008806:	2000      	movs	r0, #0
 8008808:	bd10      	pop	{r4, pc}
 800880a:	bf00      	nop
 800880c:	48000400 	.word	0x48000400

08008810 <BQ_GetLastI2C3Error>:
}
 8008810:	4b01      	ldr	r3, [pc, #4]	@ (8008818 <BQ_GetLastI2C3Error+0x8>)
 8008812:	6818      	ldr	r0, [r3, #0]
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	200000bc 	.word	0x200000bc

0800881c <BQ_ReadRAM>:
  * @retval HAL_StatusTypeDef
  * @note   Based on working C++ implementation - writes address in ONE transaction, then reads
  */
HAL_StatusTypeDef BQ_ReadRAM(I2C_HandleTypeDef *hi2c, uint8_t device_addr,
                             uint16_t reg_addr, uint8_t *data, uint8_t length)
{
 800881c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800881e:	b085      	sub	sp, #20
 8008820:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
    HAL_StatusTypeDef status;
    uint8_t tx_buffer[4];
    uint8_t idx = 0;
    
    if (length > 32) return HAL_ERROR; // Max RAM read size
 8008824:	2f20      	cmp	r7, #32
 8008826:	d902      	bls.n	800882e <BQ_ReadRAM+0x12>
 8008828:	2001      	movs	r0, #1
    // The C++ code reads from BQ_I2C_ADDR_READ, which is just device_addr with read bit
    status = HAL_I2C_Master_Receive(hi2c, (device_addr << 1), data, length, I2C_TIMEOUT_MS);
    if (status != HAL_OK) return status;
    
    return HAL_OK;
}
 800882a:	b005      	add	sp, #20
 800882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800882e:	4605      	mov	r5, r0
 8008830:	461e      	mov	r6, r3
    tx_buffer[idx++] = 0x3E;  // CMD_DIR_SUBCMD_LOW
 8008832:	233e      	movs	r3, #62	@ 0x3e
 8008834:	f88d 300c 	strb.w	r3, [sp, #12]
    tx_buffer[idx++] = reg_addr & 0xFF;  // Address LSB
 8008838:	f88d 200d 	strb.w	r2, [sp, #13]
    tx_buffer[idx++] = (reg_addr >> 8) & 0xFF;  // Address MSB
 800883c:	0a12      	lsrs	r2, r2, #8
 800883e:	f88d 200e 	strb.w	r2, [sp, #14]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), tx_buffer, idx, I2C_TIMEOUT_MS);
 8008842:	004c      	lsls	r4, r1, #1
 8008844:	2364      	movs	r3, #100	@ 0x64
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	2303      	movs	r3, #3
 800884a:	aa03      	add	r2, sp, #12
 800884c:	4621      	mov	r1, r4
 800884e:	f005 fadb 	bl	800de08 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) return status;
 8008852:	2800      	cmp	r0, #0
 8008854:	d1e9      	bne.n	800882a <BQ_ReadRAM+0xe>
    osDelay(2);
 8008856:	2002      	movs	r0, #2
 8008858:	f001 faf6 	bl	8009e48 <osDelay>
    status = HAL_I2C_Master_Receive(hi2c, (device_addr << 1), data, length, I2C_TIMEOUT_MS);
 800885c:	2364      	movs	r3, #100	@ 0x64
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	463b      	mov	r3, r7
 8008862:	4632      	mov	r2, r6
 8008864:	4621      	mov	r1, r4
 8008866:	4628      	mov	r0, r5
 8008868:	f005 fba0 	bl	800dfac <HAL_I2C_Master_Receive>
    if (status != HAL_OK) return status;
 800886c:	e7dd      	b.n	800882a <BQ_ReadRAM+0xe>

0800886e <BQ_SendSubcommand>:
  * @param  device_addr: BQ76952 I2C device address
  * @param  subcommand: 16-bit subcommand
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ_SendSubcommand(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint16_t subcommand)
{
 800886e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008870:	b085      	sub	sp, #20
 8008872:	4607      	mov	r7, r0
 8008874:	4614      	mov	r4, r2
    HAL_StatusTypeDef status;
    uint8_t data[2];
    
    // Subcommands are sent by writing LSB to 0x3E and MSB to 0x40
    // First write LSB to register 0x3E
    data[0] = 0x3E;  // Register address
 8008876:	233e      	movs	r3, #62	@ 0x3e
 8008878:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = subcommand & 0xFF;  // LSB
 800887c:	f88d 200d 	strb.w	r2, [sp, #13]
    
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), data, 2, I2C_TIMEOUT_MS);
 8008880:	004d      	lsls	r5, r1, #1
 8008882:	2364      	movs	r3, #100	@ 0x64
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2302      	movs	r3, #2
 8008888:	aa03      	add	r2, sp, #12
 800888a:	4629      	mov	r1, r5
 800888c:	f005 fabc 	bl	800de08 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) {
 8008890:	4606      	mov	r6, r0
 8008892:	b110      	cbz	r0, 800889a <BQ_SendSubcommand+0x2c>
    
    // Delay for command processing
    osDelay(10);
    
    return status;
}
 8008894:	4630      	mov	r0, r6
 8008896:	b005      	add	sp, #20
 8008898:	bdf0      	pop	{r4, r5, r6, r7, pc}
    osDelay(2);
 800889a:	2002      	movs	r0, #2
 800889c:	f001 fad4 	bl	8009e48 <osDelay>
    data[0] = 0x40;  // Register address
 80088a0:	2340      	movs	r3, #64	@ 0x40
 80088a2:	f88d 300c 	strb.w	r3, [sp, #12]
    data[1] = (subcommand >> 8) & 0xFF;  // MSB
 80088a6:	0a24      	lsrs	r4, r4, #8
 80088a8:	f88d 400d 	strb.w	r4, [sp, #13]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), data, 2, I2C_TIMEOUT_MS);
 80088ac:	2364      	movs	r3, #100	@ 0x64
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	2302      	movs	r3, #2
 80088b2:	aa03      	add	r2, sp, #12
 80088b4:	4629      	mov	r1, r5
 80088b6:	4638      	mov	r0, r7
 80088b8:	f005 faa6 	bl	800de08 <HAL_I2C_Master_Transmit>
 80088bc:	4606      	mov	r6, r0
    osDelay(10);
 80088be:	200a      	movs	r0, #10
 80088c0:	f001 fac2 	bl	8009e48 <osDelay>
    return status;
 80088c4:	e7e6      	b.n	8008894 <BQ_SendSubcommand+0x26>

080088c6 <BQ_WriteRAM>:
{
 80088c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ca:	b085      	sub	sp, #20
 80088cc:	f89d a038 	ldrb.w	sl, [sp, #56]	@ 0x38
    if (length > 32) return HAL_ERROR; // Max 32 bytes per BQ76952 spec
 80088d0:	f1ba 0f20 	cmp.w	sl, #32
 80088d4:	d904      	bls.n	80088e0 <BQ_WriteRAM+0x1a>
 80088d6:	2401      	movs	r4, #1
}
 80088d8:	4620      	mov	r0, r4
 80088da:	b005      	add	sp, #20
 80088dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e0:	4605      	mov	r5, r0
 80088e2:	4688      	mov	r8, r1
 80088e4:	4617      	mov	r7, r2
 80088e6:	461e      	mov	r6, r3
    status = BQ_SendSubcommand(hi2c, device_addr, SET_CFGUPDATE);
 80088e8:	2290      	movs	r2, #144	@ 0x90
 80088ea:	f7ff ffc0 	bl	800886e <BQ_SendSubcommand>
    if (status != HAL_OK) return status;
 80088ee:	4604      	mov	r4, r0
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d1f1      	bne.n	80088d8 <BQ_WriteRAM+0x12>
    osDelay(5);  // Increased from 2ms - give chip more time to enter CONFIG_UPDATE
 80088f4:	2005      	movs	r0, #5
 80088f6:	f001 faa7 	bl	8009e48 <osDelay>
    tx_buffer[0] = 0x3E;
 80088fa:	233e      	movs	r3, #62	@ 0x3e
 80088fc:	f88d 300c 	strb.w	r3, [sp, #12]
    tx_buffer[1] = reg_addr & 0xFF;  // Address LSB
 8008900:	fa5f fb87 	uxtb.w	fp, r7
 8008904:	f88d b00d 	strb.w	fp, [sp, #13]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), tx_buffer, 2, I2C_TIMEOUT_MS);
 8008908:	ea4f 0948 	mov.w	r9, r8, lsl #1
 800890c:	2364      	movs	r3, #100	@ 0x64
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	2302      	movs	r3, #2
 8008912:	aa03      	add	r2, sp, #12
 8008914:	4649      	mov	r1, r9
 8008916:	4628      	mov	r0, r5
 8008918:	f005 fa76 	bl	800de08 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) return status;
 800891c:	4604      	mov	r4, r0
 800891e:	2800      	cmp	r0, #0
 8008920:	d1da      	bne.n	80088d8 <BQ_WriteRAM+0x12>
    tx_buffer[0] = 0x3F;
 8008922:	233f      	movs	r3, #63	@ 0x3f
 8008924:	f88d 300c 	strb.w	r3, [sp, #12]
    tx_buffer[1] = (reg_addr >> 8) & 0xFF;  // Address MSB
 8008928:	0a3f      	lsrs	r7, r7, #8
 800892a:	f88d 700d 	strb.w	r7, [sp, #13]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), tx_buffer, 2, I2C_TIMEOUT_MS);
 800892e:	2364      	movs	r3, #100	@ 0x64
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	2302      	movs	r3, #2
 8008934:	aa03      	add	r2, sp, #12
 8008936:	4649      	mov	r1, r9
 8008938:	4628      	mov	r0, r5
 800893a:	f005 fa65 	bl	800de08 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) return status;
 800893e:	4604      	mov	r4, r0
 8008940:	2800      	cmp	r0, #0
 8008942:	d1c9      	bne.n	80088d8 <BQ_WriteRAM+0x12>
    checksum = BQ_CalculateChecksum(checksum, reg_addr & 0xFF);
 8008944:	4659      	mov	r1, fp
 8008946:	f7ff fc51 	bl	80081ec <BQ_CalculateChecksum>
    checksum = BQ_CalculateChecksum(checksum, (reg_addr >> 8) & 0xFF);
 800894a:	4639      	mov	r1, r7
 800894c:	f7ff fc4e 	bl	80081ec <BQ_CalculateChecksum>
 8008950:	4607      	mov	r7, r0
    for (uint8_t i = 0; i < length; i++) {
 8008952:	4554      	cmp	r4, sl
 8008954:	d218      	bcs.n	8008988 <BQ_WriteRAM+0xc2>
        tx_buffer[0] = 0x40 + i;  // Buffer register 0x40-0x5F
 8008956:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800895a:	f88d 300c 	strb.w	r3, [sp, #12]
        tx_buffer[1] = data[i];
 800895e:	5d33      	ldrb	r3, [r6, r4]
 8008960:	f88d 300d 	strb.w	r3, [sp, #13]
        status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), tx_buffer, 2, I2C_TIMEOUT_MS);
 8008964:	2364      	movs	r3, #100	@ 0x64
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	2302      	movs	r3, #2
 800896a:	aa03      	add	r2, sp, #12
 800896c:	4649      	mov	r1, r9
 800896e:	4628      	mov	r0, r5
 8008970:	f005 fa4a 	bl	800de08 <HAL_I2C_Master_Transmit>
        if (status != HAL_OK) return status;
 8008974:	2800      	cmp	r0, #0
 8008976:	d136      	bne.n	80089e6 <BQ_WriteRAM+0x120>
        checksum = BQ_CalculateChecksum(checksum, data[i]);
 8008978:	5d31      	ldrb	r1, [r6, r4]
 800897a:	4638      	mov	r0, r7
 800897c:	f7ff fc36 	bl	80081ec <BQ_CalculateChecksum>
 8008980:	4607      	mov	r7, r0
    for (uint8_t i = 0; i < length; i++) {
 8008982:	3401      	adds	r4, #1
 8008984:	b2e4      	uxtb	r4, r4
 8008986:	e7e4      	b.n	8008952 <BQ_WriteRAM+0x8c>
    tx_buffer[0] = 0x60;
 8008988:	2360      	movs	r3, #96	@ 0x60
 800898a:	f88d 300c 	strb.w	r3, [sp, #12]
    tx_buffer[1] = checksum;
 800898e:	f88d 700d 	strb.w	r7, [sp, #13]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), tx_buffer, 2, I2C_TIMEOUT_MS);
 8008992:	2364      	movs	r3, #100	@ 0x64
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	2302      	movs	r3, #2
 8008998:	aa03      	add	r2, sp, #12
 800899a:	4649      	mov	r1, r9
 800899c:	4628      	mov	r0, r5
 800899e:	f005 fa33 	bl	800de08 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) return status;
 80089a2:	4604      	mov	r4, r0
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d197      	bne.n	80088d8 <BQ_WriteRAM+0x12>
    data_length_value = length + 4;
 80089a8:	f10a 0304 	add.w	r3, sl, #4
    tx_buffer[0] = 0x61;
 80089ac:	2261      	movs	r2, #97	@ 0x61
 80089ae:	f88d 200c 	strb.w	r2, [sp, #12]
    tx_buffer[1] = data_length_value;
 80089b2:	f88d 300d 	strb.w	r3, [sp, #13]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), tx_buffer, 2, I2C_TIMEOUT_MS);
 80089b6:	2364      	movs	r3, #100	@ 0x64
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	2302      	movs	r3, #2
 80089bc:	aa03      	add	r2, sp, #12
 80089be:	4649      	mov	r1, r9
 80089c0:	4628      	mov	r0, r5
 80089c2:	f005 fa21 	bl	800de08 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) return status;
 80089c6:	4604      	mov	r4, r0
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d185      	bne.n	80088d8 <BQ_WriteRAM+0x12>
    osDelay(5);  // Allow chip to process the write before exiting CONFIG_UPDATE
 80089cc:	2005      	movs	r0, #5
 80089ce:	f001 fa3b 	bl	8009e48 <osDelay>
    status = BQ_SendSubcommand(hi2c, device_addr, EXIT_CFGUPDATE);
 80089d2:	2292      	movs	r2, #146	@ 0x92
 80089d4:	4641      	mov	r1, r8
 80089d6:	4628      	mov	r0, r5
 80089d8:	f7ff ff49 	bl	800886e <BQ_SendSubcommand>
 80089dc:	4604      	mov	r4, r0
    osDelay(5);  // Increased from 1ms - give chip time to commit changes and exit
 80089de:	2005      	movs	r0, #5
 80089e0:	f001 fa32 	bl	8009e48 <osDelay>
    return status;
 80089e4:	e778      	b.n	80088d8 <BQ_WriteRAM+0x12>
        if (status != HAL_OK) return status;
 80089e6:	4604      	mov	r4, r0
 80089e8:	e776      	b.n	80088d8 <BQ_WriteRAM+0x12>

080089ea <BQ_UnsealDevice>:
  * @param  device_addr: BQ76952 I2C device address
  * @retval HAL_StatusTypeDef
  * @note   Default unseal keys are 0x0414 and 0x3672
  */
HAL_StatusTypeDef BQ_UnsealDevice(I2C_HandleTypeDef *hi2c, uint8_t device_addr)
{
 80089ea:	b570      	push	{r4, r5, r6, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	4606      	mov	r6, r0
    HAL_StatusTypeDef status;
    uint8_t buffer[3];
    
    // Send first unseal key (0x0414)
    buffer[0] = 0x3E; // Subcommand register
 80089f0:	233e      	movs	r3, #62	@ 0x3e
 80089f2:	f88d 300c 	strb.w	r3, [sp, #12]
    buffer[1] = 0x14; // LSB of first key
 80089f6:	2314      	movs	r3, #20
 80089f8:	f88d 300d 	strb.w	r3, [sp, #13]
    buffer[2] = 0x04; // MSB of first key
 80089fc:	2304      	movs	r3, #4
 80089fe:	f88d 300e 	strb.w	r3, [sp, #14]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), buffer, 3, I2C_TIMEOUT_MS);
 8008a02:	004c      	lsls	r4, r1, #1
 8008a04:	2364      	movs	r3, #100	@ 0x64
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	2303      	movs	r3, #3
 8008a0a:	aa03      	add	r2, sp, #12
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	f005 f9fb 	bl	800de08 <HAL_I2C_Master_Transmit>
    if (status != HAL_OK) return status;
 8008a12:	4605      	mov	r5, r0
 8008a14:	b110      	cbz	r0, 8008a1c <BQ_UnsealDevice+0x32>
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), buffer, 3, I2C_TIMEOUT_MS);
    
    osDelay(50); // Wait for unseal to complete
    
    return status;
}
 8008a16:	4628      	mov	r0, r5
 8008a18:	b004      	add	sp, #16
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
    osDelay(10);
 8008a1c:	200a      	movs	r0, #10
 8008a1e:	f001 fa13 	bl	8009e48 <osDelay>
    buffer[0] = 0x3E; // Subcommand register
 8008a22:	233e      	movs	r3, #62	@ 0x3e
 8008a24:	f88d 300c 	strb.w	r3, [sp, #12]
    buffer[1] = 0x72; // LSB of second key
 8008a28:	2372      	movs	r3, #114	@ 0x72
 8008a2a:	f88d 300d 	strb.w	r3, [sp, #13]
    buffer[2] = 0x36; // MSB of second key
 8008a2e:	2336      	movs	r3, #54	@ 0x36
 8008a30:	f88d 300e 	strb.w	r3, [sp, #14]
    status = HAL_I2C_Master_Transmit(hi2c, (device_addr << 1), buffer, 3, I2C_TIMEOUT_MS);
 8008a34:	2364      	movs	r3, #100	@ 0x64
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	2303      	movs	r3, #3
 8008a3a:	aa03      	add	r2, sp, #12
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f005 f9e2 	bl	800de08 <HAL_I2C_Master_Transmit>
 8008a44:	4605      	mov	r5, r0
    osDelay(50); // Wait for unseal to complete
 8008a46:	2032      	movs	r0, #50	@ 0x32
 8008a48:	f001 f9fe 	bl	8009e48 <osDelay>
    return status;
 8008a4c:	e7e3      	b.n	8008a16 <BQ_UnsealDevice+0x2c>
	...

08008a50 <BQ_ConfigureRegisters>:
  * @param  device_addr: BQ76952 I2C device address
  * @param  status: Pointer to status structure to store result
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ_ConfigureRegisters(I2C_HandleTypeDef *hi2c, uint8_t device_addr, BQ_ConfigStatus_t *status)
{
 8008a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a54:	b085      	sub	sp, #20
 8008a56:	4606      	mov	r6, r0
 8008a58:	460f      	mov	r7, r1
    HAL_StatusTypeDef hal_status;
    uint8_t write_buffer[4];
    
    // Initialize status
    if (status != NULL) {
 8008a5a:	4615      	mov	r5, r2
 8008a5c:	b112      	cbz	r2, 8008a64 <BQ_ConfigureRegisters+0x14>
        BQ_ConfigStatusInit(status);
 8008a5e:	4610      	mov	r0, r2
 8008a60:	f7ff fbb6 	bl	80081d0 <BQ_ConfigStatusInit>
    }
    
    // Acquire I2C mutex
    if (hi2c == &hi2c1 && I2C1Handle != NULL) {
 8008a64:	4b69      	ldr	r3, [pc, #420]	@ (8008c0c <BQ_ConfigureRegisters+0x1bc>)
 8008a66:	429e      	cmp	r6, r3
 8008a68:	d020      	beq.n	8008aac <BQ_ConfigureRegisters+0x5c>
        if (osMutexAcquire(I2C1Handle, I2C_TIMEOUT_MS) != osOK) {
            return HAL_ERROR;
        }
    } else if (hi2c == &hi2c3 && I2C3Handle != NULL) {
 8008a6a:	4b69      	ldr	r3, [pc, #420]	@ (8008c10 <BQ_ConfigureRegisters+0x1c0>)
 8008a6c:	429e      	cmp	r6, r3
 8008a6e:	d029      	beq.n	8008ac4 <BQ_ConfigureRegisters+0x74>
    }
    
    // CRITICAL: Device should be UNSEALED to write RAM registers per TRM
    // However, chips may already be unsealed via OTP programming
    // Try to unseal - if it fails, continue anyway (chip may already be unsealed)
    hal_status = BQ_UnsealDevice(hi2c, device_addr);
 8008a70:	4639      	mov	r1, r7
 8008a72:	4630      	mov	r0, r6
 8008a74:	f7ff ffb9 	bl	80089ea <BQ_UnsealDevice>
    if (hal_status != HAL_OK) {
 8008a78:	4681      	mov	r9, r0
 8008a7a:	b178      	cbz	r0, 8008a9c <BQ_ConfigureRegisters+0x4c>
        // Unseal failed - this is often OK if chip is already unsealed via OTP
        // Record the failure but continue with configuration attempt
        if (status != NULL) {
 8008a7c:	b145      	cbz	r5, 8008a90 <BQ_ConfigureRegisters+0x40>
            status->unseal_failed = 1;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	722b      	strb	r3, [r5, #8]
            // Store I2C error but don't increment write_error_count yet
            status->i2c_error_code = (hi2c == &hi2c1) ? hi2c1.ErrorCode : hi2c3.ErrorCode;
 8008a82:	4b62      	ldr	r3, [pc, #392]	@ (8008c0c <BQ_ConfigureRegisters+0x1bc>)
 8008a84:	429e      	cmp	r6, r3
 8008a86:	d029      	beq.n	8008adc <BQ_ConfigureRegisters+0x8c>
 8008a88:	4b61      	ldr	r3, [pc, #388]	@ (8008c10 <BQ_ConfigureRegisters+0x1c0>)
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	72eb      	strb	r3, [r5, #11]
        }
        // Clear I2C error code so subsequent operations can proceed
        if (hi2c == &hi2c1) {
 8008a90:	4b5e      	ldr	r3, [pc, #376]	@ (8008c0c <BQ_ConfigureRegisters+0x1bc>)
 8008a92:	429e      	cmp	r6, r3
 8008a94:	d025      	beq.n	8008ae2 <BQ_ConfigureRegisters+0x92>
            hi2c1.ErrorCode = HAL_I2C_ERROR_NONE;
        } else if (hi2c == &hi2c3) {
 8008a96:	4b5e      	ldr	r3, [pc, #376]	@ (8008c10 <BQ_ConfigureRegisters+0x1c0>)
 8008a98:	429e      	cmp	r6, r3
 8008a9a:	d025      	beq.n	8008ae8 <BQ_ConfigureRegisters+0x98>
            hi2c3.ErrorCode = HAL_I2C_ERROR_NONE;
        }
    }
    
    osDelay(10);  // Give chip time to process unseal command (or ignore it)
 8008a9c:	200a      	movs	r0, #10
 8008a9e:	f001 f9d3 	bl	8009e48 <osDelay>
    
    // Note: CONFIG_UPDATE is handled inside BQ_WriteRAM for each register write
    
    // Debug: Always set count for diagnostics
    if (status != NULL) {
 8008aa2:	b10d      	cbz	r5, 8008aa8 <BQ_ConfigureRegisters+0x58>
        status->failed_expected = 0xFF;  // Debug marker to confirm we reached this point
 8008aa4:	23ff      	movs	r3, #255	@ 0xff
 8008aa6:	71ab      	strb	r3, [r5, #6]
{
 8008aa8:	2400      	movs	r4, #0
 8008aaa:	e052      	b.n	8008b52 <BQ_ConfigureRegisters+0x102>
    if (hi2c == &hi2c1 && I2C1Handle != NULL) {
 8008aac:	4b59      	ldr	r3, [pc, #356]	@ (8008c14 <BQ_ConfigureRegisters+0x1c4>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d0da      	beq.n	8008a6a <BQ_ConfigureRegisters+0x1a>
        if (osMutexAcquire(I2C1Handle, I2C_TIMEOUT_MS) != osOK) {
 8008ab4:	2164      	movs	r1, #100	@ 0x64
 8008ab6:	f001 fa20 	bl	8009efa <osMutexAcquire>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d0d8      	beq.n	8008a70 <BQ_ConfigureRegisters+0x20>
            return HAL_ERROR;
 8008abe:	f04f 0901 	mov.w	r9, #1
 8008ac2:	e06e      	b.n	8008ba2 <BQ_ConfigureRegisters+0x152>
    } else if (hi2c == &hi2c3 && I2C3Handle != NULL) {
 8008ac4:	4b54      	ldr	r3, [pc, #336]	@ (8008c18 <BQ_ConfigureRegisters+0x1c8>)
 8008ac6:	6818      	ldr	r0, [r3, #0]
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d0d1      	beq.n	8008a70 <BQ_ConfigureRegisters+0x20>
        if (osMutexAcquire(I2C3Handle, I2C_TIMEOUT_MS) != osOK) {
 8008acc:	2164      	movs	r1, #100	@ 0x64
 8008ace:	f001 fa14 	bl	8009efa <osMutexAcquire>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d0cc      	beq.n	8008a70 <BQ_ConfigureRegisters+0x20>
            return HAL_ERROR;
 8008ad6:	f04f 0901 	mov.w	r9, #1
 8008ada:	e062      	b.n	8008ba2 <BQ_ConfigureRegisters+0x152>
            status->i2c_error_code = (hi2c == &hi2c1) ? hi2c1.ErrorCode : hi2c3.ErrorCode;
 8008adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	e7d5      	b.n	8008a8e <BQ_ConfigureRegisters+0x3e>
            hi2c1.ErrorCode = HAL_I2C_ERROR_NONE;
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	645a      	str	r2, [r3, #68]	@ 0x44
 8008ae6:	e7d9      	b.n	8008a9c <BQ_ConfigureRegisters+0x4c>
            hi2c3.ErrorCode = HAL_I2C_ERROR_NONE;
 8008ae8:	2200      	movs	r2, #0
 8008aea:	645a      	str	r2, [r3, #68]	@ 0x44
 8008aec:	e7d6      	b.n	8008a9c <BQ_ConfigureRegisters+0x4c>
    
    // Write all configuration registers
    for (uint8_t i = 0; i < bq_register_config_count; i++) {
        // Prepare data in LSB-first (little-endian) format as required by BQ76952
        if (bq_register_config[i].size == 1) {
            write_buffer[0] = (uint8_t)(bq_register_config[i].value & 0xFF);
 8008aee:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8008af2:	4a4a      	ldr	r2, [pc, #296]	@ (8008c1c <BQ_ConfigureRegisters+0x1cc>)
 8008af4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008af8:	7892      	ldrb	r2, [r2, #2]
 8008afa:	f88d 200c 	strb.w	r2, [sp, #12]
 8008afe:	e00a      	b.n	8008b16 <BQ_ConfigureRegisters+0xc6>
        } else if (bq_register_config[i].size == 2) {
            // 16-bit value: LSB first, then MSB
            write_buffer[0] = (uint8_t)(bq_register_config[i].value & 0xFF);        // LSB
 8008b00:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8008b04:	4a45      	ldr	r2, [pc, #276]	@ (8008c1c <BQ_ConfigureRegisters+0x1cc>)
 8008b06:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008b0a:	8852      	ldrh	r2, [r2, #2]
 8008b0c:	f88d 200c 	strb.w	r2, [sp, #12]
            write_buffer[1] = (uint8_t)((bq_register_config[i].value >> 8) & 0xFF); // MSB
 8008b10:	0a12      	lsrs	r2, r2, #8
 8008b12:	f88d 200d 	strb.w	r2, [sp, #13]
            hal_status = HAL_ERROR;
            goto cleanup;
        }
        
        // Store expected value for debugging
        if (status != NULL) {
 8008b16:	b155      	cbz	r5, 8008b2e <BQ_ConfigureRegisters+0xde>
            status->failed_address = bq_register_config[i].address;
 8008b18:	4a40      	ldr	r2, [pc, #256]	@ (8008c1c <BQ_ConfigureRegisters+0x1cc>)
 8008b1a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8008b1e:	eb02 0c40 	add.w	ip, r2, r0, lsl #1
 8008b22:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 8008b26:	80aa      	strh	r2, [r5, #4]
            status->failed_expected = (uint8_t)(bq_register_config[i].value & 0xFF);
 8008b28:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8008b2c:	71aa      	strb	r2, [r5, #6]
        }
        
        hal_status = BQ_WriteRAM(hi2c, device_addr, 
                                bq_register_config[i].address,
 8008b2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
        hal_status = BQ_WriteRAM(hi2c, device_addr, 
 8008b32:	9100      	str	r1, [sp, #0]
 8008b34:	ab03      	add	r3, sp, #12
 8008b36:	4939      	ldr	r1, [pc, #228]	@ (8008c1c <BQ_ConfigureRegisters+0x1cc>)
 8008b38:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7ff fec1 	bl	80088c6 <BQ_WriteRAM>
                                write_buffer,
                                bq_register_config[i].size);
        
        if (hal_status != HAL_OK) {
 8008b44:	4681      	mov	r9, r0
 8008b46:	b9d8      	cbnz	r0, 8008b80 <BQ_ConfigureRegisters+0x130>
                status->i2c_error_code = (hi2c == &hi2c1) ? hi2c1.ErrorCode : hi2c3.ErrorCode;
            }
            goto cleanup;
        }
        
        osDelay(20); // Increased delay between writes for stability
 8008b48:	2014      	movs	r0, #20
 8008b4a:	f001 f97d 	bl	8009e48 <osDelay>
    for (uint8_t i = 0; i < bq_register_config_count; i++) {
 8008b4e:	3401      	adds	r4, #1
 8008b50:	b2e4      	uxtb	r4, r4
 8008b52:	4b33      	ldr	r3, [pc, #204]	@ (8008c20 <BQ_ConfigureRegisters+0x1d0>)
 8008b54:	f893 8000 	ldrb.w	r8, [r3]
 8008b58:	45a0      	cmp	r8, r4
 8008b5a:	d929      	bls.n	8008bb0 <BQ_ConfigureRegisters+0x160>
        if (bq_register_config[i].size == 1) {
 8008b5c:	4623      	mov	r3, r4
 8008b5e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8008b62:	4a2e      	ldr	r2, [pc, #184]	@ (8008c1c <BQ_ConfigureRegisters+0x1cc>)
 8008b64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8008b68:	7911      	ldrb	r1, [r2, #4]
 8008b6a:	2901      	cmp	r1, #1
 8008b6c:	d0bf      	beq.n	8008aee <BQ_ConfigureRegisters+0x9e>
        } else if (bq_register_config[i].size == 2) {
 8008b6e:	2902      	cmp	r1, #2
 8008b70:	d0c6      	beq.n	8008b00 <BQ_ConfigureRegisters+0xb0>
            if (status != NULL) {
 8008b72:	b115      	cbz	r5, 8008b7a <BQ_ConfigureRegisters+0x12a>
                status->write_error_count++;
 8008b74:	78ab      	ldrb	r3, [r5, #2]
 8008b76:	3301      	adds	r3, #1
 8008b78:	70ab      	strb	r3, [r5, #2]
            hal_status = HAL_ERROR;
 8008b7a:	f04f 0901 	mov.w	r9, #1
            goto cleanup;
 8008b7e:	e00a      	b.n	8008b96 <BQ_ConfigureRegisters+0x146>
            if (status != NULL) {
 8008b80:	b14d      	cbz	r5, 8008b96 <BQ_ConfigureRegisters+0x146>
                status->write_error_count++;
 8008b82:	78ab      	ldrb	r3, [r5, #2]
 8008b84:	3301      	adds	r3, #1
 8008b86:	70ab      	strb	r3, [r5, #2]
                status->i2c_error_code = (hi2c == &hi2c1) ? hi2c1.ErrorCode : hi2c3.ErrorCode;
 8008b88:	4b20      	ldr	r3, [pc, #128]	@ (8008c0c <BQ_ConfigureRegisters+0x1bc>)
 8008b8a:	429e      	cmp	r6, r3
 8008b8c:	d00d      	beq.n	8008baa <BQ_ConfigureRegisters+0x15a>
 8008b8e:	4b20      	ldr	r3, [pc, #128]	@ (8008c10 <BQ_ConfigureRegisters+0x1c0>)
 8008b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	72eb      	strb	r3, [r5, #11]
        status->settings_written = 1;
    }
    
cleanup:
    // Release I2C mutex
    if (hi2c == &hi2c1 && I2C1Handle != NULL) {
 8008b96:	4b1d      	ldr	r3, [pc, #116]	@ (8008c0c <BQ_ConfigureRegisters+0x1bc>)
 8008b98:	429e      	cmp	r6, r3
 8008b9a:	d028      	beq.n	8008bee <BQ_ConfigureRegisters+0x19e>
        osMutexRelease(I2C1Handle);
    } else if (hi2c == &hi2c3 && I2C3Handle != NULL) {
 8008b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c10 <BQ_ConfigureRegisters+0x1c0>)
 8008b9e:	429e      	cmp	r6, r3
 8008ba0:	d02c      	beq.n	8008bfc <BQ_ConfigureRegisters+0x1ac>
        osMutexRelease(I2C3Handle);
    }
    
    return hal_status;
}
 8008ba2:	4648      	mov	r0, r9
 8008ba4:	b005      	add	sp, #20
 8008ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                status->i2c_error_code = (hi2c == &hi2c1) ? hi2c1.ErrorCode : hi2c3.ErrorCode;
 8008baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	e7f1      	b.n	8008b94 <BQ_ConfigureRegisters+0x144>
    osDelay(50);
 8008bb0:	2032      	movs	r0, #50	@ 0x32
 8008bb2:	f001 f949 	bl	8009e48 <osDelay>
    if (status != NULL && bq_register_config_count > 0) {
 8008bb6:	b115      	cbz	r5, 8008bbe <BQ_ConfigureRegisters+0x16e>
 8008bb8:	f1b8 0f00 	cmp.w	r8, #0
 8008bbc:	d107      	bne.n	8008bce <BQ_ConfigureRegisters+0x17e>
    if (hal_status == HAL_OK && status != NULL) {
 8008bbe:	f1b9 0f00 	cmp.w	r9, #0
 8008bc2:	d1e8      	bne.n	8008b96 <BQ_ConfigureRegisters+0x146>
 8008bc4:	2d00      	cmp	r5, #0
 8008bc6:	d0e6      	beq.n	8008b96 <BQ_ConfigureRegisters+0x146>
        status->settings_written = 1;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	702b      	strb	r3, [r5, #0]
 8008bcc:	e7e3      	b.n	8008b96 <BQ_ConfigureRegisters+0x146>
                               bq_register_config[0].address,
 8008bce:	4a13      	ldr	r2, [pc, #76]	@ (8008c1c <BQ_ConfigureRegisters+0x1cc>)
                               bq_register_config[0].size);
 8008bd0:	7913      	ldrb	r3, [r2, #4]
        hal_status = BQ_ReadRAM(hi2c, device_addr,
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	ab02      	add	r3, sp, #8
 8008bd6:	8812      	ldrh	r2, [r2, #0]
 8008bd8:	4639      	mov	r1, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff fe1e 	bl	800881c <BQ_ReadRAM>
        if (hal_status == HAL_OK) {
 8008be0:	4681      	mov	r9, r0
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d1d7      	bne.n	8008b96 <BQ_ConfigureRegisters+0x146>
            status->failed_actual = temp_read[0]; // Store what we read back
 8008be6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008bea:	71eb      	strb	r3, [r5, #7]
 8008bec:	e7e7      	b.n	8008bbe <BQ_ConfigureRegisters+0x16e>
    if (hi2c == &hi2c1 && I2C1Handle != NULL) {
 8008bee:	4b09      	ldr	r3, [pc, #36]	@ (8008c14 <BQ_ConfigureRegisters+0x1c4>)
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0d2      	beq.n	8008b9c <BQ_ConfigureRegisters+0x14c>
        osMutexRelease(I2C1Handle);
 8008bf6:	f001 f9af 	bl	8009f58 <osMutexRelease>
 8008bfa:	e7d2      	b.n	8008ba2 <BQ_ConfigureRegisters+0x152>
    } else if (hi2c == &hi2c3 && I2C3Handle != NULL) {
 8008bfc:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <BQ_ConfigureRegisters+0x1c8>)
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d0ce      	beq.n	8008ba2 <BQ_ConfigureRegisters+0x152>
        osMutexRelease(I2C3Handle);
 8008c04:	f001 f9a8 	bl	8009f58 <osMutexRelease>
 8008c08:	e7cb      	b.n	8008ba2 <BQ_ConfigureRegisters+0x152>
 8008c0a:	bf00      	nop
 8008c0c:	20003d20 	.word	0x20003d20
 8008c10:	20003ccc 	.word	0x20003ccc
 8008c14:	20003cb4 	.word	0x20003cb4
 8008c18:	20003cb0 	.word	0x20003cb0
 8008c1c:	08010c04 	.word	0x08010c04
 8008c20:	08010c00 	.word	0x08010c00

08008c24 <BQ_VerifyConfiguration>:
  * @param  device_addr: BQ76952 I2C device address
  * @param  status: Pointer to status structure to store result
  * @retval HAL_StatusTypeDef (HAL_OK if all match, HAL_ERROR if mismatch)
  */
HAL_StatusTypeDef BQ_VerifyConfiguration(I2C_HandleTypeDef *hi2c, uint8_t device_addr, BQ_ConfigStatus_t *status)
{
 8008c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	b085      	sub	sp, #20
 8008c2a:	4607      	mov	r7, r0
 8008c2c:	468a      	mov	sl, r1
 8008c2e:	4690      	mov	r8, r2
    HAL_StatusTypeDef hal_status = HAL_OK;
    uint8_t read_buffer[4];
    
    // Acquire I2C mutex
    if (hi2c == &hi2c1 && I2C1Handle != NULL) {
 8008c30:	4b53      	ldr	r3, [pc, #332]	@ (8008d80 <BQ_VerifyConfiguration+0x15c>)
 8008c32:	4298      	cmp	r0, r3
 8008c34:	d01c      	beq.n	8008c70 <BQ_VerifyConfiguration+0x4c>
        if (osMutexAcquire(I2C1Handle, I2C_TIMEOUT_MS) != osOK) {
            return HAL_ERROR;
        }
    } else if (hi2c == &hi2c3 && I2C3Handle != NULL) {
 8008c36:	4b53      	ldr	r3, [pc, #332]	@ (8008d84 <BQ_VerifyConfiguration+0x160>)
 8008c38:	429f      	cmp	r7, r3
 8008c3a:	d025      	beq.n	8008c88 <BQ_VerifyConfiguration+0x64>
            hal_status = HAL_ERROR;
            break;
        }
        
        // Compare with expected values
        for (uint8_t j = 0; j < bq_register_config[i].size; j++) {
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	46b1      	mov	r9, r6
    for (uint8_t i = 0; i < bq_register_config_count; i++) {
 8008c40:	4b51      	ldr	r3, [pc, #324]	@ (8008d88 <BQ_VerifyConfiguration+0x164>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	42b3      	cmp	r3, r6
 8008c46:	d96d      	bls.n	8008d24 <BQ_VerifyConfiguration+0x100>
        hal_status = BQ_ReadRAM(hi2c, device_addr,
 8008c48:	4635      	mov	r5, r6
                               bq_register_config[i].address,
 8008c4a:	4b50      	ldr	r3, [pc, #320]	@ (8008d8c <BQ_VerifyConfiguration+0x168>)
 8008c4c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8008c50:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8008c54:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
                               bq_register_config[i].size);
 8008c58:	790c      	ldrb	r4, [r1, #4]
        hal_status = BQ_ReadRAM(hi2c, device_addr,
 8008c5a:	9400      	str	r4, [sp, #0]
 8008c5c:	ab03      	add	r3, sp, #12
 8008c5e:	465a      	mov	r2, fp
 8008c60:	4651      	mov	r1, sl
 8008c62:	4638      	mov	r0, r7
 8008c64:	f7ff fdda 	bl	800881c <BQ_ReadRAM>
        if (hal_status != HAL_OK) {
 8008c68:	4681      	mov	r9, r0
 8008c6a:	b9c8      	cbnz	r0, 8008ca0 <BQ_VerifyConfiguration+0x7c>
        for (uint8_t j = 0; j < bq_register_config[i].size; j++) {
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	e032      	b.n	8008cd6 <BQ_VerifyConfiguration+0xb2>
    if (hi2c == &hi2c1 && I2C1Handle != NULL) {
 8008c70:	4b47      	ldr	r3, [pc, #284]	@ (8008d90 <BQ_VerifyConfiguration+0x16c>)
 8008c72:	6818      	ldr	r0, [r3, #0]
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d0de      	beq.n	8008c36 <BQ_VerifyConfiguration+0x12>
        if (osMutexAcquire(I2C1Handle, I2C_TIMEOUT_MS) != osOK) {
 8008c78:	2164      	movs	r1, #100	@ 0x64
 8008c7a:	f001 f93e 	bl	8009efa <osMutexAcquire>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d0dc      	beq.n	8008c3c <BQ_VerifyConfiguration+0x18>
            return HAL_ERROR;
 8008c82:	f04f 0901 	mov.w	r9, #1
 8008c86:	e05c      	b.n	8008d42 <BQ_VerifyConfiguration+0x11e>
    } else if (hi2c == &hi2c3 && I2C3Handle != NULL) {
 8008c88:	4b42      	ldr	r3, [pc, #264]	@ (8008d94 <BQ_VerifyConfiguration+0x170>)
 8008c8a:	6818      	ldr	r0, [r3, #0]
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	d0d5      	beq.n	8008c3c <BQ_VerifyConfiguration+0x18>
        if (osMutexAcquire(I2C3Handle, I2C_TIMEOUT_MS) != osOK) {
 8008c90:	2164      	movs	r1, #100	@ 0x64
 8008c92:	f001 f932 	bl	8009efa <osMutexAcquire>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d0d0      	beq.n	8008c3c <BQ_VerifyConfiguration+0x18>
            return HAL_ERROR;
 8008c9a:	f04f 0901 	mov.w	r9, #1
 8008c9e:	e050      	b.n	8008d42 <BQ_VerifyConfiguration+0x11e>
            if (status != NULL) {
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	d05a      	beq.n	8008d5c <BQ_VerifyConfiguration+0x138>
                status->verify_error_count++;
 8008ca6:	f898 3003 	ldrb.w	r3, [r8, #3]
 8008caa:	3301      	adds	r3, #1
 8008cac:	f888 3003 	strb.w	r3, [r8, #3]
            hal_status = HAL_ERROR;
 8008cb0:	f04f 0901 	mov.w	r9, #1
 8008cb4:	e03f      	b.n	8008d36 <BQ_VerifyConfiguration+0x112>
            uint8_t expected_byte;
            if (bq_register_config[i].size == 1) {
                expected_byte = bq_register_config[i].value;
 8008cb6:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008cba:	4a34      	ldr	r2, [pc, #208]	@ (8008d8c <BQ_VerifyConfiguration+0x168>)
 8008cbc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8008cc0:	7892      	ldrb	r2, [r2, #2]
            } else {
                expected_byte = (bq_register_config[i].value >> (j * 8)) & 0xFF;
            }
            
            if (read_buffer[j] != expected_byte) {
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f103 0110 	add.w	r1, r3, #16
 8008cc8:	4469      	add	r1, sp
 8008cca:	f811 1c04 	ldrb.w	r1, [r1, #-4]
 8008cce:	4291      	cmp	r1, r2
 8008cd0:	d10f      	bne.n	8008cf2 <BQ_VerifyConfiguration+0xce>
        for (uint8_t j = 0; j < bq_register_config[i].size; j++) {
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	429c      	cmp	r4, r3
 8008cd8:	d937      	bls.n	8008d4a <BQ_VerifyConfiguration+0x126>
            if (bq_register_config[i].size == 1) {
 8008cda:	2c01      	cmp	r4, #1
 8008cdc:	d0eb      	beq.n	8008cb6 <BQ_VerifyConfiguration+0x92>
                expected_byte = (bq_register_config[i].value >> (j * 8)) & 0xFF;
 8008cde:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8008ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8008d8c <BQ_VerifyConfiguration+0x168>)
 8008ce4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8008ce8:	8852      	ldrh	r2, [r2, #2]
 8008cea:	00d9      	lsls	r1, r3, #3
 8008cec:	410a      	asrs	r2, r1
 8008cee:	b2d2      	uxtb	r2, r2
 8008cf0:	e7e7      	b.n	8008cc2 <BQ_VerifyConfiguration+0x9e>
                if (status != NULL) {
 8008cf2:	f1b8 0f00 	cmp.w	r8, #0
 8008cf6:	d02b      	beq.n	8008d50 <BQ_VerifyConfiguration+0x12c>
                    status->verify_error_count++;
 8008cf8:	f898 3003 	ldrb.w	r3, [r8, #3]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	f888 3003 	strb.w	r3, [r8, #3]
                    if (status->failed_address == 0) {
 8008d02:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8008d06:	bb33      	cbnz	r3, 8008d56 <BQ_VerifyConfiguration+0x132>
                        status->failed_address = bq_register_config[i].address;
 8008d08:	f8a8 b004 	strh.w	fp, [r8, #4]
                        status->failed_expected = expected_byte;
 8008d0c:	f888 2006 	strb.w	r2, [r8, #6]
                        status->failed_actual = read_buffer[j];
 8008d10:	f100 0310 	add.w	r3, r0, #16
 8008d14:	eb0d 0003 	add.w	r0, sp, r3
 8008d18:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8008d1c:	f888 3007 	strb.w	r3, [r8, #7]
                    }
                }
                hal_status = HAL_ERROR;
 8008d20:	f04f 0901 	mov.w	r9, #1
        }
        
        if (hal_status != HAL_OK) break;
    }
    
    if (hal_status == HAL_OK && status != NULL) {
 8008d24:	f1b9 0f00 	cmp.w	r9, #0
 8008d28:	d105      	bne.n	8008d36 <BQ_VerifyConfiguration+0x112>
 8008d2a:	f1b8 0f00 	cmp.w	r8, #0
 8008d2e:	d002      	beq.n	8008d36 <BQ_VerifyConfiguration+0x112>
        status->settings_verified = 1;
 8008d30:	2301      	movs	r3, #1
 8008d32:	f888 3001 	strb.w	r3, [r8, #1]
    }
    
    // Release I2C mutex
    if (hi2c == &hi2c1 && I2C1Handle != NULL) {
 8008d36:	4b12      	ldr	r3, [pc, #72]	@ (8008d80 <BQ_VerifyConfiguration+0x15c>)
 8008d38:	429f      	cmp	r7, r3
 8008d3a:	d012      	beq.n	8008d62 <BQ_VerifyConfiguration+0x13e>
        osMutexRelease(I2C1Handle);
    } else if (hi2c == &hi2c3 && I2C3Handle != NULL) {
 8008d3c:	4b11      	ldr	r3, [pc, #68]	@ (8008d84 <BQ_VerifyConfiguration+0x160>)
 8008d3e:	429f      	cmp	r7, r3
 8008d40:	d016      	beq.n	8008d70 <BQ_VerifyConfiguration+0x14c>
        osMutexRelease(I2C3Handle);
    }
    
    return hal_status;
}
 8008d42:	4648      	mov	r0, r9
 8008d44:	b005      	add	sp, #20
 8008d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (uint8_t i = 0; i < bq_register_config_count; i++) {
 8008d4a:	3601      	adds	r6, #1
 8008d4c:	b2f6      	uxtb	r6, r6
 8008d4e:	e777      	b.n	8008c40 <BQ_VerifyConfiguration+0x1c>
                hal_status = HAL_ERROR;
 8008d50:	f04f 0901 	mov.w	r9, #1
 8008d54:	e7e6      	b.n	8008d24 <BQ_VerifyConfiguration+0x100>
 8008d56:	f04f 0901 	mov.w	r9, #1
 8008d5a:	e7e3      	b.n	8008d24 <BQ_VerifyConfiguration+0x100>
            hal_status = HAL_ERROR;
 8008d5c:	f04f 0901 	mov.w	r9, #1
 8008d60:	e7e9      	b.n	8008d36 <BQ_VerifyConfiguration+0x112>
    if (hi2c == &hi2c1 && I2C1Handle != NULL) {
 8008d62:	4b0b      	ldr	r3, [pc, #44]	@ (8008d90 <BQ_VerifyConfiguration+0x16c>)
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d0e8      	beq.n	8008d3c <BQ_VerifyConfiguration+0x118>
        osMutexRelease(I2C1Handle);
 8008d6a:	f001 f8f5 	bl	8009f58 <osMutexRelease>
 8008d6e:	e7e8      	b.n	8008d42 <BQ_VerifyConfiguration+0x11e>
    } else if (hi2c == &hi2c3 && I2C3Handle != NULL) {
 8008d70:	4b08      	ldr	r3, [pc, #32]	@ (8008d94 <BQ_VerifyConfiguration+0x170>)
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d0e4      	beq.n	8008d42 <BQ_VerifyConfiguration+0x11e>
        osMutexRelease(I2C3Handle);
 8008d78:	f001 f8ee 	bl	8009f58 <osMutexRelease>
 8008d7c:	e7e1      	b.n	8008d42 <BQ_VerifyConfiguration+0x11e>
 8008d7e:	bf00      	nop
 8008d80:	20003d20 	.word	0x20003d20
 8008d84:	20003ccc 	.word	0x20003ccc
 8008d88:	08010c00 	.word	0x08010c00
 8008d8c:	08010c04 	.word	0x08010c04
 8008d90:	20003cb4 	.word	0x20003cb4
 8008d94:	20003cb0 	.word	0x20003cb0

08008d98 <BQ_MonitorTask>:
{
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	b084      	sub	sp, #16
    const osMutexAttr_t mutex_attr = {
 8008d9c:	4b42      	ldr	r3, [pc, #264]	@ (8008ea8 <BQ_MonitorTask+0x110>)
 8008d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008da0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    voltage_mutex = osMutexNew(&mutex_attr);
 8008da4:	4668      	mov	r0, sp
 8008da6:	f001 f85d 	bl	8009e64 <osMutexNew>
 8008daa:	4b40      	ldr	r3, [pc, #256]	@ (8008eac <BQ_MonitorTask+0x114>)
 8008dac:	6018      	str	r0, [r3, #0]
    osDelay(500);
 8008dae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008db2:	f001 f849 	bl	8009e48 <osDelay>
    BQ_ResetChips();
 8008db6:	f7ff fd13 	bl	80087e0 <BQ_ResetChips>
    osDelay(1000);
 8008dba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008dbe:	f001 f843 	bl	8009e48 <osDelay>
    BQ_ConfigStatusInit(&config_status_bms1);
 8008dc2:	4c3b      	ldr	r4, [pc, #236]	@ (8008eb0 <BQ_MonitorTask+0x118>)
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f7ff fa03 	bl	80081d0 <BQ_ConfigStatusInit>
    status = BQ_ConfigureRegisters(&hi2c1, BQ76952_I2C_ADDR_BMS1, &config_status_bms1);
 8008dca:	4622      	mov	r2, r4
 8008dcc:	2108      	movs	r1, #8
 8008dce:	4839      	ldr	r0, [pc, #228]	@ (8008eb4 <BQ_MonitorTask+0x11c>)
 8008dd0:	f7ff fe3e 	bl	8008a50 <BQ_ConfigureRegisters>
    if (status != HAL_OK) {
 8008dd4:	b150      	cbz	r0, 8008dec <BQ_MonitorTask+0x54>
        ErrorMgr_SetError(ERROR_I2C_BMS1);
 8008dd6:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008dda:	f001 fca3 	bl	800a724 <ErrorMgr_SetError>
    last_read_tick = osKernelGetTickCount();
 8008dde:	f000 ffcf 	bl	8009d80 <osKernelGetTickCount>
 8008de2:	4606      	mov	r6, r0
    last_can_tick = osKernelGetTickCount();
 8008de4:	f000 ffcc 	bl	8009d80 <osKernelGetTickCount>
 8008de8:	4605      	mov	r5, r0
 8008dea:	e050      	b.n	8008e8e <BQ_MonitorTask+0xf6>
        osDelay(100); // Small delay before verification
 8008dec:	2064      	movs	r0, #100	@ 0x64
 8008dee:	f001 f82b 	bl	8009e48 <osDelay>
        status = BQ_VerifyConfiguration(&hi2c1, BQ76952_I2C_ADDR_BMS1, &config_status_bms1);
 8008df2:	4a2f      	ldr	r2, [pc, #188]	@ (8008eb0 <BQ_MonitorTask+0x118>)
 8008df4:	2108      	movs	r1, #8
 8008df6:	482f      	ldr	r0, [pc, #188]	@ (8008eb4 <BQ_MonitorTask+0x11c>)
 8008df8:	f7ff ff14 	bl	8008c24 <BQ_VerifyConfiguration>
        if (status != HAL_OK) {
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d0ee      	beq.n	8008dde <BQ_MonitorTask+0x46>
            ErrorMgr_SetError(ERROR_I2C_BMS1); // Configuration mismatch
 8008e00:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008e04:	f001 fc8e 	bl	800a724 <ErrorMgr_SetError>
 8008e08:	e7e9      	b.n	8008dde <BQ_MonitorTask+0x46>
            status = BQ_ReadBMS1(&voltage_data_bms1);
 8008e0a:	482b      	ldr	r0, [pc, #172]	@ (8008eb8 <BQ_MonitorTask+0x120>)
 8008e0c:	f7ff fa66 	bl	80082dc <BQ_ReadBMS1>
            if (status != HAL_OK) {
 8008e10:	b940      	cbnz	r0, 8008e24 <BQ_MonitorTask+0x8c>
                ErrorMgr_ClearError(ERROR_I2C_BMS1);
 8008e12:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008e16:	f001 fcab 	bl	800a770 <ErrorMgr_ClearError>
                BQ_CheckLimits(&voltage_data_bms1);
 8008e1a:	4827      	ldr	r0, [pc, #156]	@ (8008eb8 <BQ_MonitorTask+0x120>)
 8008e1c:	f7ff fb1e 	bl	800845c <BQ_CheckLimits>
            last_read_tick = current_tick;
 8008e20:	4626      	mov	r6, r4
 8008e22:	e03b      	b.n	8008e9c <BQ_MonitorTask+0x104>
                ErrorMgr_SetError(ERROR_I2C_BMS1);
 8008e24:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8008e28:	f001 fc7c 	bl	800a724 <ErrorMgr_SetError>
                ErrorMgr_SetError(ERROR_I2C_FAULT);  // General I2C fault flag
 8008e2c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8008e30:	f001 fc78 	bl	800a724 <ErrorMgr_SetError>
                if (voltage_mutex != NULL) {
 8008e34:	4b1d      	ldr	r3, [pc, #116]	@ (8008eac <BQ_MonitorTask+0x114>)
 8008e36:	6818      	ldr	r0, [r3, #0]
 8008e38:	b118      	cbz	r0, 8008e42 <BQ_MonitorTask+0xaa>
                    osMutexAcquire(voltage_mutex, osWaitForever);
 8008e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e3e:	f001 f85c 	bl	8009efa <osMutexAcquire>
{
 8008e42:	2300      	movs	r3, #0
 8008e44:	e005      	b.n	8008e52 <BQ_MonitorTask+0xba>
                    voltage_data_bms1.cell_voltage_mv[i] = 0;
 8008e46:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb8 <BQ_MonitorTask+0x120>)
 8008e48:	2100      	movs	r1, #0
 8008e4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint8_t i = 0; i < BMS1_NUM_CELLS; i++) {
 8008e4e:	3301      	adds	r3, #1
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d9f7      	bls.n	8008e46 <BQ_MonitorTask+0xae>
                voltage_data_bms1.valid = 0;
 8008e56:	4e18      	ldr	r6, [pc, #96]	@ (8008eb8 <BQ_MonitorTask+0x120>)
 8008e58:	2300      	movs	r3, #0
 8008e5a:	7633      	strb	r3, [r6, #24]
                voltage_data_bms1.last_update_tick = osKernelGetTickCount();
 8008e5c:	f000 ff90 	bl	8009d80 <osKernelGetTickCount>
 8008e60:	6170      	str	r0, [r6, #20]
                if (voltage_mutex != NULL) {
 8008e62:	4b12      	ldr	r3, [pc, #72]	@ (8008eac <BQ_MonitorTask+0x114>)
 8008e64:	6818      	ldr	r0, [r3, #0]
 8008e66:	b118      	cbz	r0, 8008e70 <BQ_MonitorTask+0xd8>
                    osMutexRelease(voltage_mutex);
 8008e68:	f001 f876 	bl	8009f58 <osMutexRelease>
            last_read_tick = current_tick;
 8008e6c:	4626      	mov	r6, r4
 8008e6e:	e015      	b.n	8008e9c <BQ_MonitorTask+0x104>
 8008e70:	4626      	mov	r6, r4
 8008e72:	e013      	b.n	8008e9c <BQ_MonitorTask+0x104>
            BQ_SendCANMessage(&voltage_data_bms1);
 8008e74:	4810      	ldr	r0, [pc, #64]	@ (8008eb8 <BQ_MonitorTask+0x120>)
 8008e76:	f7ff fa83 	bl	8008380 <BQ_SendCANMessage>
            BQ_SendChipStatus(&hi2c1, BQ76952_I2C_ADDR_BMS1, CAN_BMS1_STATUS_ID);
 8008e7a:	4b10      	ldr	r3, [pc, #64]	@ (8008ebc <BQ_MonitorTask+0x124>)
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	2108      	movs	r1, #8
 8008e80:	480c      	ldr	r0, [pc, #48]	@ (8008eb4 <BQ_MonitorTask+0x11c>)
 8008e82:	f7ff fc0d 	bl	80086a0 <BQ_SendChipStatus>
            last_can_tick = current_tick;
 8008e86:	4625      	mov	r5, r4
        osDelay(10);
 8008e88:	200a      	movs	r0, #10
 8008e8a:	f000 ffdd 	bl	8009e48 <osDelay>
        current_tick = osKernelGetTickCount();
 8008e8e:	f000 ff77 	bl	8009d80 <osKernelGetTickCount>
 8008e92:	4604      	mov	r4, r0
        if ((current_tick - last_read_tick) >= VOLTAGE_READ_INTERVAL_MS) {
 8008e94:	1b83      	subs	r3, r0, r6
 8008e96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008e9a:	d2b6      	bcs.n	8008e0a <BQ_MonitorTask+0x72>
        if ((current_tick - last_can_tick) >= VOLTAGE_CAN_INTERVAL_MS) {
 8008e9c:	1b63      	subs	r3, r4, r5
 8008e9e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008ea2:	d2e7      	bcs.n	8008e74 <BQ_MonitorTask+0xdc>
 8008ea4:	e7f0      	b.n	8008e88 <BQ_MonitorTask+0xf0>
 8008ea6:	bf00      	nop
 8008ea8:	08010bd0 	.word	0x08010bd0
 8008eac:	200000c4 	.word	0x200000c4
 8008eb0:	200000b0 	.word	0x200000b0
 8008eb4:	20003d20 	.word	0x20003d20
 8008eb8:	200000e4 	.word	0x200000e4
 8008ebc:	20000d54 	.word	0x20000d54

08008ec0 <BQ_SendConfigStatus>:
  * @param  status_bms1: Pointer to BMS1 configuration status
  * @param  status_bms2: Pointer to BMS2 configuration status
  * @retval HAL_StatusTypeDef: HAL_OK on success, HAL_ERROR on failure
  */
HAL_StatusTypeDef BQ_SendConfigStatus(BQ_ConfigStatus_t *status_bms1, BQ_ConfigStatus_t *status_bms2)
{
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	460c      	mov	r4, r1
    uint8_t can_data[8];
    HAL_StatusTypeDef result;
    
    // Message 1: Basic status flags
    // Byte 0: BMS1 status flags
    can_data[0] = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	f88d 3000 	strb.w	r3, [sp]
    if (status_bms1 != NULL) {
 8008ecc:	4605      	mov	r5, r0
 8008ece:	b1e8      	cbz	r0, 8008f0c <BQ_SendConfigStatus+0x4c>
        can_data[0] = (status_bms1->settings_written << 0) |
 8008ed0:	f990 3000 	ldrsb.w	r3, [r0]
                      (status_bms1->settings_verified << 1) |
 8008ed4:	7842      	ldrb	r2, [r0, #1]
        can_data[0] = (status_bms1->settings_written << 0) |
 8008ed6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8008eda:	b25b      	sxtb	r3, r3
                      ((status_bms1->write_error_count > 0 ? 1 : 0) << 2) |
 8008edc:	7882      	ldrb	r2, [r0, #2]
                      (status_bms1->settings_verified << 1) |
 8008ede:	2a00      	cmp	r2, #0
 8008ee0:	f000 8082 	beq.w	8008fe8 <BQ_SendConfigStatus+0x128>
 8008ee4:	2204      	movs	r2, #4
 8008ee6:	4313      	orrs	r3, r2
                      ((status_bms1->verify_error_count > 0 ? 1 : 0) << 3) |
 8008ee8:	78ea      	ldrb	r2, [r5, #3]
                      ((status_bms1->write_error_count > 0 ? 1 : 0) << 2) |
 8008eea:	2a00      	cmp	r2, #0
 8008eec:	d07e      	beq.n	8008fec <BQ_SendConfigStatus+0x12c>
 8008eee:	2208      	movs	r2, #8
 8008ef0:	4313      	orrs	r3, r2
                      (status_bms1->unseal_failed << 4) |
 8008ef2:	7a2a      	ldrb	r2, [r5, #8]
                      ((status_bms1->verify_error_count > 0 ? 1 : 0) << 3) |
 8008ef4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008ef8:	b25b      	sxtb	r3, r3
                      (status_bms1->enter_cfg_failed << 5) |
 8008efa:	7a6a      	ldrb	r2, [r5, #9]
                      (status_bms1->unseal_failed << 4) |
 8008efc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8008f00:	b25b      	sxtb	r3, r3
                      (status_bms1->exit_cfg_failed << 6);
 8008f02:	7aaa      	ldrb	r2, [r5, #10]
                      (status_bms1->enter_cfg_failed << 5) |
 8008f04:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
        can_data[0] = (status_bms1->settings_written << 0) |
 8008f08:	f88d 3000 	strb.w	r3, [sp]
    }
    
    // Byte 1: BMS2 status flags
    can_data[1] = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f88d 3001 	strb.w	r3, [sp, #1]
    if (status_bms2 != NULL) {
 8008f12:	b1e4      	cbz	r4, 8008f4e <BQ_SendConfigStatus+0x8e>
        can_data[1] = (status_bms2->settings_written << 0) |
 8008f14:	f994 3000 	ldrsb.w	r3, [r4]
                      (status_bms2->settings_verified << 1) |
 8008f18:	7862      	ldrb	r2, [r4, #1]
        can_data[1] = (status_bms2->settings_written << 0) |
 8008f1a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8008f1e:	b25b      	sxtb	r3, r3
                      ((status_bms2->write_error_count > 0 ? 1 : 0) << 2) |
 8008f20:	78a2      	ldrb	r2, [r4, #2]
                      (status_bms2->settings_verified << 1) |
 8008f22:	2a00      	cmp	r2, #0
 8008f24:	d064      	beq.n	8008ff0 <BQ_SendConfigStatus+0x130>
 8008f26:	2204      	movs	r2, #4
 8008f28:	4313      	orrs	r3, r2
                      ((status_bms2->verify_error_count > 0 ? 1 : 0) << 3) |
 8008f2a:	78e2      	ldrb	r2, [r4, #3]
                      ((status_bms2->write_error_count > 0 ? 1 : 0) << 2) |
 8008f2c:	2a00      	cmp	r2, #0
 8008f2e:	d061      	beq.n	8008ff4 <BQ_SendConfigStatus+0x134>
 8008f30:	2208      	movs	r2, #8
 8008f32:	4313      	orrs	r3, r2
                      (status_bms2->unseal_failed << 4) |
 8008f34:	7a22      	ldrb	r2, [r4, #8]
                      ((status_bms2->verify_error_count > 0 ? 1 : 0) << 3) |
 8008f36:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008f3a:	b25b      	sxtb	r3, r3
                      (status_bms2->enter_cfg_failed << 5) |
 8008f3c:	7a62      	ldrb	r2, [r4, #9]
                      (status_bms2->unseal_failed << 4) |
 8008f3e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8008f42:	b25b      	sxtb	r3, r3
                      (status_bms2->exit_cfg_failed << 6);
 8008f44:	7aa2      	ldrb	r2, [r4, #10]
                      (status_bms2->enter_cfg_failed << 5) |
 8008f46:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
        can_data[1] = (status_bms2->settings_written << 0) |
 8008f4a:	f88d 3001 	strb.w	r3, [sp, #1]
    }
    
    // Byte 2: BMS1 write error count
    can_data[2] = (status_bms1 != NULL) ? status_bms1->write_error_count : 0;
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	d052      	beq.n	8008ff8 <BQ_SendConfigStatus+0x138>
 8008f52:	78ab      	ldrb	r3, [r5, #2]
 8008f54:	f88d 3002 	strb.w	r3, [sp, #2]
    
    // Byte 3: BMS1 verify error count
    can_data[3] = (status_bms1 != NULL) ? status_bms1->verify_error_count : 0;
 8008f58:	78eb      	ldrb	r3, [r5, #3]
 8008f5a:	f88d 3003 	strb.w	r3, [sp, #3]
    
    // Byte 4: BMS2 write error count
    can_data[4] = (status_bms2 != NULL) ? status_bms2->write_error_count : 0;
 8008f5e:	2c00      	cmp	r4, #0
 8008f60:	d04e      	beq.n	8009000 <BQ_SendConfigStatus+0x140>
 8008f62:	78a3      	ldrb	r3, [r4, #2]
 8008f64:	f88d 3004 	strb.w	r3, [sp, #4]
    
    // Byte 5: BMS2 verify error count
    can_data[5] = (status_bms2 != NULL) ? status_bms2->verify_error_count : 0;
 8008f68:	78e3      	ldrb	r3, [r4, #3]
 8008f6a:	f88d 3005 	strb.w	r3, [sp, #5]
    
    // Byte 6-7: Failed address (first one encountered, if any)
    uint16_t failed_addr = 0;
    if (status_bms1 != NULL && status_bms1->failed_address != 0) {
 8008f6e:	b10d      	cbz	r5, 8008f74 <BQ_SendConfigStatus+0xb4>
 8008f70:	88ab      	ldrh	r3, [r5, #4]
 8008f72:	b913      	cbnz	r3, 8008f7a <BQ_SendConfigStatus+0xba>
        failed_addr = status_bms1->failed_address;
    } else if (status_bms2 != NULL && status_bms2->failed_address != 0) {
 8008f74:	2c00      	cmp	r4, #0
 8008f76:	d047      	beq.n	8009008 <BQ_SendConfigStatus+0x148>
 8008f78:	88a3      	ldrh	r3, [r4, #4]
        failed_addr = status_bms2->failed_address;
    }
    can_data[6] = failed_addr & 0xFF;
 8008f7a:	f88d 3006 	strb.w	r3, [sp, #6]
    can_data[7] = (failed_addr >> 8) & 0xFF;
 8008f7e:	0a1b      	lsrs	r3, r3, #8
 8008f80:	f88d 3007 	strb.w	r3, [sp, #7]
    
    result = CAN_SendMessage(CAN_BMS_CONFIG_STATUS_ID, can_data, 8, CAN_PRIORITY_NORMAL);
 8008f84:	2302      	movs	r3, #2
 8008f86:	2208      	movs	r2, #8
 8008f88:	4669      	mov	r1, sp
 8008f8a:	4826      	ldr	r0, [pc, #152]	@ (8009024 <BQ_SendConfigStatus+0x164>)
 8008f8c:	6800      	ldr	r0, [r0, #0]
 8008f8e:	f000 f951 	bl	8009234 <CAN_SendMessage>
 8008f92:	4606      	mov	r6, r0
    
    // Message 2: Detailed diagnostic info (using next ID)
    // Byte 0: BMS1 I2C error code
    can_data[0] = (status_bms1 != NULL) ? status_bms1->i2c_error_code : 0;
 8008f94:	2d00      	cmp	r5, #0
 8008f96:	d039      	beq.n	800900c <BQ_SendConfigStatus+0x14c>
 8008f98:	7aeb      	ldrb	r3, [r5, #11]
 8008f9a:	f88d 3000 	strb.w	r3, [sp]
    
    // Byte 1: BMS2 I2C error code
    can_data[1] = (status_bms2 != NULL) ? status_bms2->i2c_error_code : 0;
 8008f9e:	2c00      	cmp	r4, #0
 8008fa0:	d036      	beq.n	8009010 <BQ_SendConfigStatus+0x150>
 8008fa2:	7ae3      	ldrb	r3, [r4, #11]
 8008fa4:	f88d 3001 	strb.w	r3, [sp, #1]
    
    // Byte 2: BMS1 failed expected value
    can_data[2] = (status_bms1 != NULL) ? status_bms1->failed_expected : 0;
 8008fa8:	b3a5      	cbz	r5, 8009014 <BQ_SendConfigStatus+0x154>
 8008faa:	79ab      	ldrb	r3, [r5, #6]
 8008fac:	f88d 3002 	strb.w	r3, [sp, #2]
    
    // Byte 3: BMS1 failed actual value
    can_data[3] = (status_bms1 != NULL) ? status_bms1->failed_actual : 0;
 8008fb0:	79eb      	ldrb	r3, [r5, #7]
 8008fb2:	f88d 3003 	strb.w	r3, [sp, #3]
    
    // Byte 4: BMS2 failed expected value
    can_data[4] = (status_bms2 != NULL) ? status_bms2->failed_expected : 0;
 8008fb6:	b38c      	cbz	r4, 800901c <BQ_SendConfigStatus+0x15c>
 8008fb8:	79a3      	ldrb	r3, [r4, #6]
 8008fba:	f88d 3004 	strb.w	r3, [sp, #4]
    
    // Byte 5: BMS2 failed actual value
    can_data[5] = (status_bms2 != NULL) ? status_bms2->failed_actual : 0;
 8008fbe:	79e3      	ldrb	r3, [r4, #7]
 8008fc0:	f88d 3005 	strb.w	r3, [sp, #5]
    
    // Byte 6: Number of settings to configure
    can_data[6] = bq_register_config_count;
 8008fc4:	4b18      	ldr	r3, [pc, #96]	@ (8009028 <BQ_SendConfigStatus+0x168>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	f88d 3006 	strb.w	r3, [sp, #6]
    
    // Byte 7: Reserved
    can_data[7] = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f88d 3007 	strb.w	r3, [sp, #7]
    
    // Send diagnostic message (use next sequential CAN ID)
    CAN_SendMessage(CAN_BMS_CONFIG_STATUS_ID + 1, can_data, 8, CAN_PRIORITY_NORMAL);
 8008fd2:	4b14      	ldr	r3, [pc, #80]	@ (8009024 <BQ_SendConfigStatus+0x164>)
 8008fd4:	6818      	ldr	r0, [r3, #0]
 8008fd6:	2302      	movs	r3, #2
 8008fd8:	2208      	movs	r2, #8
 8008fda:	4669      	mov	r1, sp
 8008fdc:	3001      	adds	r0, #1
 8008fde:	f000 f929 	bl	8009234 <CAN_SendMessage>
    
    return result;
}
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	b002      	add	sp, #8
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
                      (status_bms1->settings_verified << 1) |
 8008fe8:	2200      	movs	r2, #0
 8008fea:	e77c      	b.n	8008ee6 <BQ_SendConfigStatus+0x26>
                      ((status_bms1->write_error_count > 0 ? 1 : 0) << 2) |
 8008fec:	2200      	movs	r2, #0
 8008fee:	e77f      	b.n	8008ef0 <BQ_SendConfigStatus+0x30>
                      (status_bms2->settings_verified << 1) |
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	e799      	b.n	8008f28 <BQ_SendConfigStatus+0x68>
                      ((status_bms2->write_error_count > 0 ? 1 : 0) << 2) |
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	e79c      	b.n	8008f32 <BQ_SendConfigStatus+0x72>
    can_data[2] = (status_bms1 != NULL) ? status_bms1->write_error_count : 0;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (status_bms1 != NULL) ? status_bms1->verify_error_count : 0;
 8008ffe:	e7ac      	b.n	8008f5a <BQ_SendConfigStatus+0x9a>
    can_data[4] = (status_bms2 != NULL) ? status_bms2->write_error_count : 0;
 8009000:	2300      	movs	r3, #0
 8009002:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (status_bms2 != NULL) ? status_bms2->verify_error_count : 0;
 8009006:	e7b0      	b.n	8008f6a <BQ_SendConfigStatus+0xaa>
    uint16_t failed_addr = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	e7b6      	b.n	8008f7a <BQ_SendConfigStatus+0xba>
    can_data[0] = (status_bms1 != NULL) ? status_bms1->i2c_error_code : 0;
 800900c:	2300      	movs	r3, #0
 800900e:	e7c4      	b.n	8008f9a <BQ_SendConfigStatus+0xda>
    can_data[1] = (status_bms2 != NULL) ? status_bms2->i2c_error_code : 0;
 8009010:	2300      	movs	r3, #0
 8009012:	e7c7      	b.n	8008fa4 <BQ_SendConfigStatus+0xe4>
    can_data[2] = (status_bms1 != NULL) ? status_bms1->failed_expected : 0;
 8009014:	2300      	movs	r3, #0
 8009016:	f88d 3002 	strb.w	r3, [sp, #2]
    can_data[3] = (status_bms1 != NULL) ? status_bms1->failed_actual : 0;
 800901a:	e7ca      	b.n	8008fb2 <BQ_SendConfigStatus+0xf2>
    can_data[4] = (status_bms2 != NULL) ? status_bms2->failed_expected : 0;
 800901c:	2300      	movs	r3, #0
 800901e:	f88d 3004 	strb.w	r3, [sp, #4]
    can_data[5] = (status_bms2 != NULL) ? status_bms2->failed_actual : 0;
 8009022:	e7cd      	b.n	8008fc0 <BQ_SendConfigStatus+0x100>
 8009024:	20000d44 	.word	0x20000d44
 8009028:	08010c00 	.word	0x08010c00

0800902c <BQ_MonitorTask_BMS2>:
{
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	b084      	sub	sp, #16
    const osMutexAttr_t mutex_attr = {
 8009030:	4b4d      	ldr	r3, [pc, #308]	@ (8009168 <BQ_MonitorTask_BMS2+0x13c>)
 8009032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009034:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    voltage_mutex_bms2 = osMutexNew(&mutex_attr);
 8009038:	4668      	mov	r0, sp
 800903a:	f000 ff13 	bl	8009e64 <osMutexNew>
 800903e:	4b4b      	ldr	r3, [pc, #300]	@ (800916c <BQ_MonitorTask_BMS2+0x140>)
 8009040:	6018      	str	r0, [r3, #0]
    osDelay(500);
 8009042:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009046:	f000 feff 	bl	8009e48 <osDelay>
    osDelay(1000);
 800904a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800904e:	f000 fefb 	bl	8009e48 <osDelay>
    if (I2C3Handle != NULL) {
 8009052:	4b47      	ldr	r3, [pc, #284]	@ (8009170 <BQ_MonitorTask_BMS2+0x144>)
 8009054:	6818      	ldr	r0, [r3, #0]
 8009056:	b118      	cbz	r0, 8009060 <BQ_MonitorTask_BMS2+0x34>
        osMutexAcquire(I2C3Handle, osWaitForever);
 8009058:	f04f 31ff 	mov.w	r1, #4294967295
 800905c:	f000 ff4d 	bl	8009efa <osMutexAcquire>
    status = HAL_I2C_IsDeviceReady(&hi2c3, (BQ76952_I2C_ADDR_BMS2 << 1), 3, 100);
 8009060:	2364      	movs	r3, #100	@ 0x64
 8009062:	2203      	movs	r2, #3
 8009064:	2110      	movs	r1, #16
 8009066:	4843      	ldr	r0, [pc, #268]	@ (8009174 <BQ_MonitorTask_BMS2+0x148>)
 8009068:	f005 f85e 	bl	800e128 <HAL_I2C_IsDeviceReady>
    if (status != HAL_OK) {
 800906c:	b9e8      	cbnz	r0, 80090aa <BQ_MonitorTask_BMS2+0x7e>
    if (I2C3Handle != NULL) {
 800906e:	4b40      	ldr	r3, [pc, #256]	@ (8009170 <BQ_MonitorTask_BMS2+0x144>)
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	b108      	cbz	r0, 8009078 <BQ_MonitorTask_BMS2+0x4c>
        osMutexRelease(I2C3Handle);
 8009074:	f000 ff70 	bl	8009f58 <osMutexRelease>
    BQ_ConfigStatusInit(&config_status_bms2);
 8009078:	4c3f      	ldr	r4, [pc, #252]	@ (8009178 <BQ_MonitorTask_BMS2+0x14c>)
 800907a:	4620      	mov	r0, r4
 800907c:	f7ff f8a8 	bl	80081d0 <BQ_ConfigStatusInit>
    status = BQ_ConfigureRegisters(&hi2c3, BQ76952_I2C_ADDR_BMS2, &config_status_bms2);
 8009080:	4622      	mov	r2, r4
 8009082:	2108      	movs	r1, #8
 8009084:	483b      	ldr	r0, [pc, #236]	@ (8009174 <BQ_MonitorTask_BMS2+0x148>)
 8009086:	f7ff fce3 	bl	8008a50 <BQ_ConfigureRegisters>
    if (status != HAL_OK) {
 800908a:	b198      	cbz	r0, 80090b4 <BQ_MonitorTask_BMS2+0x88>
        ErrorMgr_SetError(ERROR_I2C_BMS2);
 800908c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8009090:	f001 fb48 	bl	800a724 <ErrorMgr_SetError>
    BQ_SendConfigStatus(NULL, &config_status_bms2);
 8009094:	4938      	ldr	r1, [pc, #224]	@ (8009178 <BQ_MonitorTask_BMS2+0x14c>)
 8009096:	2000      	movs	r0, #0
 8009098:	f7ff ff12 	bl	8008ec0 <BQ_SendConfigStatus>
    last_read_tick = osKernelGetTickCount();
 800909c:	f000 fe70 	bl	8009d80 <osKernelGetTickCount>
 80090a0:	4606      	mov	r6, r0
    last_can_tick = osKernelGetTickCount();
 80090a2:	f000 fe6d 	bl	8009d80 <osKernelGetTickCount>
 80090a6:	4605      	mov	r5, r0
 80090a8:	e051      	b.n	800914e <BQ_MonitorTask_BMS2+0x122>
        ErrorMgr_SetError(ERROR_I2C_BMS2);
 80090aa:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80090ae:	f001 fb39 	bl	800a724 <ErrorMgr_SetError>
 80090b2:	e7dc      	b.n	800906e <BQ_MonitorTask_BMS2+0x42>
        osDelay(100); // Small delay before verification
 80090b4:	2064      	movs	r0, #100	@ 0x64
 80090b6:	f000 fec7 	bl	8009e48 <osDelay>
        status = BQ_VerifyConfiguration(&hi2c3, BQ76952_I2C_ADDR_BMS2, &config_status_bms2);
 80090ba:	4a2f      	ldr	r2, [pc, #188]	@ (8009178 <BQ_MonitorTask_BMS2+0x14c>)
 80090bc:	2108      	movs	r1, #8
 80090be:	482d      	ldr	r0, [pc, #180]	@ (8009174 <BQ_MonitorTask_BMS2+0x148>)
 80090c0:	f7ff fdb0 	bl	8008c24 <BQ_VerifyConfiguration>
        if (status != HAL_OK) {
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d0e5      	beq.n	8009094 <BQ_MonitorTask_BMS2+0x68>
            ErrorMgr_SetError(ERROR_I2C_BMS2); // Configuration mismatch
 80090c8:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80090cc:	f001 fb2a 	bl	800a724 <ErrorMgr_SetError>
 80090d0:	e7e0      	b.n	8009094 <BQ_MonitorTask_BMS2+0x68>
            status = BQ_ReadBMS2(&voltage_data_bms2);
 80090d2:	482a      	ldr	r0, [pc, #168]	@ (800917c <BQ_MonitorTask_BMS2+0x150>)
 80090d4:	f7ff fa16 	bl	8008504 <BQ_ReadBMS2>
            if (status != HAL_OK) {
 80090d8:	b940      	cbnz	r0, 80090ec <BQ_MonitorTask_BMS2+0xc0>
                ErrorMgr_ClearError(ERROR_I2C_BMS2);
 80090da:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80090de:	f001 fb47 	bl	800a770 <ErrorMgr_ClearError>
                BQ_CheckLimits_BMS2(&voltage_data_bms2);
 80090e2:	4826      	ldr	r0, [pc, #152]	@ (800917c <BQ_MonitorTask_BMS2+0x150>)
 80090e4:	f7ff fb28 	bl	8008738 <BQ_CheckLimits_BMS2>
            last_read_tick = current_tick;
 80090e8:	4626      	mov	r6, r4
 80090ea:	e037      	b.n	800915c <BQ_MonitorTask_BMS2+0x130>
                ErrorMgr_SetError(ERROR_I2C_BMS2);
 80090ec:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80090f0:	f001 fb18 	bl	800a724 <ErrorMgr_SetError>
                if (voltage_mutex_bms2 != NULL) {
 80090f4:	4b1d      	ldr	r3, [pc, #116]	@ (800916c <BQ_MonitorTask_BMS2+0x140>)
 80090f6:	6818      	ldr	r0, [r3, #0]
 80090f8:	b118      	cbz	r0, 8009102 <BQ_MonitorTask_BMS2+0xd6>
                    osMutexAcquire(voltage_mutex_bms2, osWaitForever);
 80090fa:	f04f 31ff 	mov.w	r1, #4294967295
 80090fe:	f000 fefc 	bl	8009efa <osMutexAcquire>
{
 8009102:	2300      	movs	r3, #0
 8009104:	e005      	b.n	8009112 <BQ_MonitorTask_BMS2+0xe6>
                    voltage_data_bms2.cell_voltage_mv[i] = 0;
 8009106:	4a1d      	ldr	r2, [pc, #116]	@ (800917c <BQ_MonitorTask_BMS2+0x150>)
 8009108:	2100      	movs	r1, #0
 800910a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
                for (uint8_t i = 0; i < BMS2_NUM_CELLS; i++) {
 800910e:	3301      	adds	r3, #1
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b08      	cmp	r3, #8
 8009114:	d9f7      	bls.n	8009106 <BQ_MonitorTask_BMS2+0xda>
                voltage_data_bms2.valid = 0;
 8009116:	4e19      	ldr	r6, [pc, #100]	@ (800917c <BQ_MonitorTask_BMS2+0x150>)
 8009118:	2300      	movs	r3, #0
 800911a:	7633      	strb	r3, [r6, #24]
                voltage_data_bms2.last_update_tick = osKernelGetTickCount();
 800911c:	f000 fe30 	bl	8009d80 <osKernelGetTickCount>
 8009120:	6170      	str	r0, [r6, #20]
                if (voltage_mutex_bms2 != NULL) {
 8009122:	4b12      	ldr	r3, [pc, #72]	@ (800916c <BQ_MonitorTask_BMS2+0x140>)
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	b118      	cbz	r0, 8009130 <BQ_MonitorTask_BMS2+0x104>
                    osMutexRelease(voltage_mutex_bms2);
 8009128:	f000 ff16 	bl	8009f58 <osMutexRelease>
            last_read_tick = current_tick;
 800912c:	4626      	mov	r6, r4
 800912e:	e015      	b.n	800915c <BQ_MonitorTask_BMS2+0x130>
 8009130:	4626      	mov	r6, r4
 8009132:	e013      	b.n	800915c <BQ_MonitorTask_BMS2+0x130>
            BQ_SendCANMessage_BMS2(&voltage_data_bms2);
 8009134:	4811      	ldr	r0, [pc, #68]	@ (800917c <BQ_MonitorTask_BMS2+0x150>)
 8009136:	f7ff fa45 	bl	80085c4 <BQ_SendCANMessage_BMS2>
            BQ_SendChipStatus(&hi2c3, BQ76952_I2C_ADDR_BMS2, CAN_BMS2_STATUS_ID);
 800913a:	4b11      	ldr	r3, [pc, #68]	@ (8009180 <BQ_MonitorTask_BMS2+0x154>)
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	2108      	movs	r1, #8
 8009140:	480c      	ldr	r0, [pc, #48]	@ (8009174 <BQ_MonitorTask_BMS2+0x148>)
 8009142:	f7ff faad 	bl	80086a0 <BQ_SendChipStatus>
            last_can_tick = current_tick;
 8009146:	4625      	mov	r5, r4
        osDelay(10);
 8009148:	200a      	movs	r0, #10
 800914a:	f000 fe7d 	bl	8009e48 <osDelay>
        current_tick = osKernelGetTickCount();
 800914e:	f000 fe17 	bl	8009d80 <osKernelGetTickCount>
 8009152:	4604      	mov	r4, r0
        if ((current_tick - last_read_tick) >= VOLTAGE_READ_INTERVAL_MS) {
 8009154:	1b83      	subs	r3, r0, r6
 8009156:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800915a:	d2ba      	bcs.n	80090d2 <BQ_MonitorTask_BMS2+0xa6>
        if ((current_tick - last_can_tick) >= VOLTAGE_CAN_INTERVAL_MS) {
 800915c:	1b63      	subs	r3, r4, r5
 800915e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009162:	d2e7      	bcs.n	8009134 <BQ_MonitorTask_BMS2+0x108>
 8009164:	e7f0      	b.n	8009148 <BQ_MonitorTask_BMS2+0x11c>
 8009166:	bf00      	nop
 8009168:	08010be0 	.word	0x08010be0
 800916c:	200000c0 	.word	0x200000c0
 8009170:	20003cb0 	.word	0x20003cb0
 8009174:	20003ccc 	.word	0x20003ccc
 8009178:	200000a4 	.word	0x200000a4
 800917c:	200000c8 	.word	0x200000c8
 8009180:	20000d50 	.word	0x20000d50

08009184 <__NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009184:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009188:	4905      	ldr	r1, [pc, #20]	@ (80091a0 <__NVIC_SystemReset+0x1c>)
 800918a:	68ca      	ldr	r2, [r1, #12]
 800918c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009190:	4b04      	ldr	r3, [pc, #16]	@ (80091a4 <__NVIC_SystemReset+0x20>)
 8009192:	4313      	orrs	r3, r2
 8009194:	60cb      	str	r3, [r1, #12]
 8009196:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800919a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800919c:	e7fd      	b.n	800919a <__NVIC_SystemReset+0x16>
 800919e:	bf00      	nop
 80091a0:	e000ed00 	.word	0xe000ed00
 80091a4:	05fa0004 	.word	0x05fa0004

080091a8 <CAN_TransmitMessage>:
  * @brief  Transmit single message to CAN hardware
  * @param  msg: Pointer to message structure
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef CAN_TransmitMessage(CAN_Message_t *msg)
{
 80091a8:	b530      	push	{r4, r5, lr}
 80091aa:	b089      	sub	sp, #36	@ 0x24
 80091ac:	4605      	mov	r5, r0
    uint32_t TxMailbox;
    HAL_StatusTypeDef status;
    uint8_t retry_count = 0;
    
    // Configure TX header for extended ID
    TxHeader.ExtId = msg->id;
 80091ae:	6803      	ldr	r3, [r0, #0]
 80091b0:	9303      	str	r3, [sp, #12]
    TxHeader.StdId = 0;
 80091b2:	2400      	movs	r4, #0
 80091b4:	9402      	str	r4, [sp, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80091b6:	9405      	str	r4, [sp, #20]
    TxHeader.IDE = CAN_ID_EXT;
 80091b8:	2304      	movs	r3, #4
 80091ba:	9304      	str	r3, [sp, #16]
    TxHeader.DLC = msg->length;
 80091bc:	7b03      	ldrb	r3, [r0, #12]
 80091be:	9306      	str	r3, [sp, #24]
    TxHeader.TransmitGlobalTime = DISABLE;
 80091c0:	f88d 401c 	strb.w	r4, [sp, #28]
    
    // Attempt transmission with retries
    while (retry_count < CAN_MAX_RETRIES) {
 80091c4:	2c02      	cmp	r4, #2
 80091c6:	d814      	bhi.n	80091f2 <CAN_TransmitMessage+0x4a>
        status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, msg->data, &TxMailbox);
 80091c8:	ab01      	add	r3, sp, #4
 80091ca:	1d2a      	adds	r2, r5, #4
 80091cc:	a902      	add	r1, sp, #8
 80091ce:	480d      	ldr	r0, [pc, #52]	@ (8009204 <CAN_TransmitMessage+0x5c>)
 80091d0:	f003 fe2e 	bl	800ce30 <HAL_CAN_AddTxMessage>
        
        if (status == HAL_OK) {
 80091d4:	4603      	mov	r3, r0
 80091d6:	b138      	cbz	r0, 80091e8 <CAN_TransmitMessage+0x40>
            can_stats.tx_success_count++;
            return HAL_OK;
        }
        
        retry_count++;
 80091d8:	3401      	adds	r4, #1
 80091da:	b2e4      	uxtb	r4, r4
        
        // Brief delay before retry (1ms)
        if (retry_count < CAN_MAX_RETRIES) {
 80091dc:	2c02      	cmp	r4, #2
 80091de:	d808      	bhi.n	80091f2 <CAN_TransmitMessage+0x4a>
            osDelay(1);
 80091e0:	2001      	movs	r0, #1
 80091e2:	f000 fe31 	bl	8009e48 <osDelay>
 80091e6:	e7ed      	b.n	80091c4 <CAN_TransmitMessage+0x1c>
            can_stats.tx_success_count++;
 80091e8:	4907      	ldr	r1, [pc, #28]	@ (8009208 <CAN_TransmitMessage+0x60>)
 80091ea:	680a      	ldr	r2, [r1, #0]
 80091ec:	3201      	adds	r2, #1
 80091ee:	600a      	str	r2, [r1, #0]
            return HAL_OK;
 80091f0:	e004      	b.n	80091fc <CAN_TransmitMessage+0x54>
        }
    }
    
    // All retries failed
    can_stats.tx_error_count++;
 80091f2:	4a05      	ldr	r2, [pc, #20]	@ (8009208 <CAN_TransmitMessage+0x60>)
 80091f4:	6853      	ldr	r3, [r2, #4]
 80091f6:	3301      	adds	r3, #1
 80091f8:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	b009      	add	sp, #36	@ 0x24
 8009200:	bd30      	pop	{r4, r5, pc}
 8009202:	bf00      	nop
 8009204:	20003d98 	.word	0x20003d98
 8009208:	20000100 	.word	0x20000100

0800920c <CAN_ProcessTxQueue>:
/**
  * @brief  Process TX queue and transmit messages
  * @retval None
  */
static void CAN_ProcessTxQueue(void)
{
 800920c:	b500      	push	{lr}
 800920e:	b087      	sub	sp, #28
    CAN_Message_t msg;
    
    // Try to send as many messages as possible
    while (osMessageQueueGet(CANTxQueueHandle, &msg, NULL, 0) == osOK) {
 8009210:	2300      	movs	r3, #0
 8009212:	461a      	mov	r2, r3
 8009214:	a901      	add	r1, sp, #4
 8009216:	4806      	ldr	r0, [pc, #24]	@ (8009230 <CAN_ProcessTxQueue+0x24>)
 8009218:	6800      	ldr	r0, [r0, #0]
 800921a:	f001 f80d 	bl	800a238 <osMessageQueueGet>
 800921e:	b920      	cbnz	r0, 800922a <CAN_ProcessTxQueue+0x1e>
        // Transmit the message
        if (CAN_TransmitMessage(&msg) != HAL_OK) {
 8009220:	a801      	add	r0, sp, #4
 8009222:	f7ff ffc1 	bl	80091a8 <CAN_TransmitMessage>
 8009226:	2800      	cmp	r0, #0
 8009228:	d0f2      	beq.n	8009210 <CAN_ProcessTxQueue+0x4>
            // If transmission failed, could re-queue message here if desired
            // For now, we just count it as an error
            break;  // Stop processing queue if hardware is busy
        }
    }
}
 800922a:	b007      	add	sp, #28
 800922c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009230:	20000120 	.word	0x20000120

08009234 <CAN_SendMessage>:
    if (length > 8 || id > 0x1FFFFFFF) {
 8009234:	2a08      	cmp	r2, #8
 8009236:	d82a      	bhi.n	800928e <CAN_SendMessage+0x5a>
{
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	460e      	mov	r6, r1
 800923e:	4614      	mov	r4, r2
 8009240:	461d      	mov	r5, r3
    if (length > 8 || id > 0x1FFFFFFF) {
 8009242:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 8009246:	d302      	bcc.n	800924e <CAN_SendMessage+0x1a>
        return HAL_ERROR;
 8009248:	2001      	movs	r0, #1
}
 800924a:	b006      	add	sp, #24
 800924c:	bd70      	pop	{r4, r5, r6, pc}
    msg.id = id;
 800924e:	9001      	str	r0, [sp, #4]
    msg.length = length;
 8009250:	f88d 2010 	strb.w	r2, [sp, #16]
    msg.priority = priority;
 8009254:	f88d 3011 	strb.w	r3, [sp, #17]
    msg.timestamp = osKernelGetTickCount();
 8009258:	f000 fd92 	bl	8009d80 <osKernelGetTickCount>
 800925c:	9005      	str	r0, [sp, #20]
    if (data != NULL && length > 0) {
 800925e:	b106      	cbz	r6, 8009262 <CAN_SendMessage+0x2e>
 8009260:	b94c      	cbnz	r4, 8009276 <CAN_SendMessage+0x42>
    if (osMessageQueuePut(CANTxQueueHandle, &msg, priority, CAN_TX_TIMEOUT_MS) != osOK) {
 8009262:	2364      	movs	r3, #100	@ 0x64
 8009264:	462a      	mov	r2, r5
 8009266:	a901      	add	r1, sp, #4
 8009268:	480a      	ldr	r0, [pc, #40]	@ (8009294 <CAN_SendMessage+0x60>)
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	f000 ffa2 	bl	800a1b4 <osMessageQueuePut>
 8009270:	b938      	cbnz	r0, 8009282 <CAN_SendMessage+0x4e>
    return HAL_OK;
 8009272:	2000      	movs	r0, #0
 8009274:	e7e9      	b.n	800924a <CAN_SendMessage+0x16>
        memcpy(msg.data, data, length);
 8009276:	4622      	mov	r2, r4
 8009278:	4631      	mov	r1, r6
 800927a:	a802      	add	r0, sp, #8
 800927c:	f007 fb5e 	bl	801093c <memcpy>
 8009280:	e7ef      	b.n	8009262 <CAN_SendMessage+0x2e>
        can_stats.tx_queue_full_count++;
 8009282:	4a05      	ldr	r2, [pc, #20]	@ (8009298 <CAN_SendMessage+0x64>)
 8009284:	6893      	ldr	r3, [r2, #8]
 8009286:	3301      	adds	r3, #1
 8009288:	6093      	str	r3, [r2, #8]
        return HAL_ERROR;
 800928a:	2001      	movs	r0, #1
 800928c:	e7dd      	b.n	800924a <CAN_SendMessage+0x16>
        return HAL_ERROR;
 800928e:	2001      	movs	r0, #1
}
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20000120 	.word	0x20000120
 8009298:	20000100 	.word	0x20000100

0800929c <CAN_ResetStatistics>:
  * @brief  Reset CAN statistics
  * @retval None
  */
void CAN_ResetStatistics(void)
{
    memset(&can_stats, 0, sizeof(CAN_Statistics_t));
 800929c:	4b04      	ldr	r3, [pc, #16]	@ (80092b0 <CAN_ResetStatistics+0x14>)
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	605a      	str	r2, [r3, #4]
 80092a4:	609a      	str	r2, [r3, #8]
 80092a6:	60da      	str	r2, [r3, #12]
 80092a8:	611a      	str	r2, [r3, #16]
 80092aa:	615a      	str	r2, [r3, #20]
}
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	20000100 	.word	0x20000100

080092b4 <CAN_Manager_Init>:
{
 80092b4:	b510      	push	{r4, lr}
    CANTxQueueHandle = osMessageQueueNew(CAN_TX_QUEUE_SIZE, sizeof(CAN_Message_t), NULL);
 80092b6:	2200      	movs	r2, #0
 80092b8:	2114      	movs	r1, #20
 80092ba:	2040      	movs	r0, #64	@ 0x40
 80092bc:	f000 ff2f 	bl	800a11e <osMessageQueueNew>
 80092c0:	4b0d      	ldr	r3, [pc, #52]	@ (80092f8 <CAN_Manager_Init+0x44>)
 80092c2:	6018      	str	r0, [r3, #0]
    if (CANTxQueueHandle == NULL) {
 80092c4:	b198      	cbz	r0, 80092ee <CAN_Manager_Init+0x3a>
    CANRxQueueHandle = osMessageQueueNew(CAN_RX_QUEUE_SIZE, sizeof(CAN_Message_t), NULL);
 80092c6:	2200      	movs	r2, #0
 80092c8:	2114      	movs	r1, #20
 80092ca:	2020      	movs	r0, #32
 80092cc:	f000 ff27 	bl	800a11e <osMessageQueueNew>
 80092d0:	4b0a      	ldr	r3, [pc, #40]	@ (80092fc <CAN_Manager_Init+0x48>)
 80092d2:	6018      	str	r0, [r3, #0]
    if (CANRxQueueHandle == NULL) {
 80092d4:	b170      	cbz	r0, 80092f4 <CAN_Manager_Init+0x40>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | 
 80092d6:	f248 4112 	movw	r1, #33810	@ 0x8412
 80092da:	4809      	ldr	r0, [pc, #36]	@ (8009300 <CAN_Manager_Init+0x4c>)
 80092dc:	f003 fed2 	bl	800d084 <HAL_CAN_ActivateNotification>
 80092e0:	4604      	mov	r4, r0
 80092e2:	b108      	cbz	r0, 80092e8 <CAN_Manager_Init+0x34>
        return HAL_ERROR;
 80092e4:	2401      	movs	r4, #1
 80092e6:	e003      	b.n	80092f0 <CAN_Manager_Init+0x3c>
    CAN_ResetStatistics();
 80092e8:	f7ff ffd8 	bl	800929c <CAN_ResetStatistics>
    return HAL_OK;
 80092ec:	e000      	b.n	80092f0 <CAN_Manager_Init+0x3c>
        return HAL_ERROR;
 80092ee:	2401      	movs	r4, #1
}
 80092f0:	4620      	mov	r0, r4
 80092f2:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 80092f4:	2401      	movs	r4, #1
 80092f6:	e7fb      	b.n	80092f0 <CAN_Manager_Init+0x3c>
 80092f8:	20000120 	.word	0x20000120
 80092fc:	2000011c 	.word	0x2000011c
 8009300:	20003d98 	.word	0x20003d98

08009304 <CAN_IsMessageForThisModule>:
/**
  * @brief  Check if CAN message is meant for this module through ID
  * @param  hcan: pointer to CAN handle
  * @retval None
  */
bool CAN_IsMessageForThisModule(uint32_t can_id) {
 8009304:	b510      	push	{r4, lr}
 8009306:	4604      	mov	r4, r0
    // Module ID is encoded in bits 12:15 of rx can id
    // TODO: handle messages that might not have this format?
    uint8_t this_module_id = Config_GetModuleID();
 8009308:	f001 f802 	bl	800a310 <Config_GetModuleID>
    uint8_t rx_module_id = (can_id >> 12) & 0x0F;
 800930c:	f3c4 3303 	ubfx	r3, r4, #12, #4
    
    return (
        rx_module_id == this_module_id ||   // Specifically for this module
 8009310:	4298      	cmp	r0, r3
 8009312:	d006      	beq.n	8009322 <CAN_IsMessageForThisModule+0x1e>
 8009314:	4b04      	ldr	r3, [pc, #16]	@ (8009328 <CAN_IsMessageForThisModule+0x24>)
 8009316:	429c      	cmp	r4, r3
 8009318:	d001      	beq.n	800931e <CAN_IsMessageForThisModule+0x1a>
 800931a:	2000      	movs	r0, #0
        can_id == CAN_DEBUG_REQUEST_ID      // Debug ID (all modules)
    );
}
 800931c:	bd10      	pop	{r4, pc}
        rx_module_id == this_module_id ||   // Specifically for this module
 800931e:	2001      	movs	r0, #1
 8009320:	e7fc      	b.n	800931c <CAN_IsMessageForThisModule+0x18>
 8009322:	2001      	movs	r0, #1
 8009324:	e7fa      	b.n	800931c <CAN_IsMessageForThisModule+0x18>
 8009326:	bf00      	nop
 8009328:	08f00f10 	.word	0x08f00f10

0800932c <HAL_CAN_RxFifo0MsgPendingCallback>:
{
 800932c:	b500      	push	{lr}
 800932e:	b08d      	sub	sp, #52	@ 0x34
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, msg.data) == HAL_OK) {
 8009330:	ab01      	add	r3, sp, #4
 8009332:	aa05      	add	r2, sp, #20
 8009334:	2100      	movs	r1, #0
 8009336:	f003 fdf0 	bl	800cf1a <HAL_CAN_GetRxMessage>
 800933a:	b110      	cbz	r0, 8009342 <HAL_CAN_RxFifo0MsgPendingCallback+0x16>
}
 800933c:	b00d      	add	sp, #52	@ 0x34
 800933e:	f85d fb04 	ldr.w	pc, [sp], #4
        msg.id = RxHeader.ExtId;
 8009342:	9b06      	ldr	r3, [sp, #24]
 8009344:	9300      	str	r3, [sp, #0]
        msg.length = RxHeader.DLC;
 8009346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009348:	f88d 300c 	strb.w	r3, [sp, #12]
        msg.priority = 0;  // RX messages don't have priority
 800934c:	2300      	movs	r3, #0
 800934e:	f88d 300d 	strb.w	r3, [sp, #13]
        msg.timestamp = osKernelGetTickCount();
 8009352:	f000 fd15 	bl	8009d80 <osKernelGetTickCount>
 8009356:	9004      	str	r0, [sp, #16]
        if (CAN_IsMessageForThisModule(msg.id)) {
 8009358:	9800      	ldr	r0, [sp, #0]
 800935a:	f7ff ffd3 	bl	8009304 <CAN_IsMessageForThisModule>
 800935e:	2800      	cmp	r0, #0
 8009360:	d0ec      	beq.n	800933c <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
            if (osMessageQueuePut(CANRxQueueHandle, &msg, 0, 0) != osOK) {
 8009362:	2300      	movs	r3, #0
 8009364:	461a      	mov	r2, r3
 8009366:	4669      	mov	r1, sp
 8009368:	4805      	ldr	r0, [pc, #20]	@ (8009380 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	f000 ff22 	bl	800a1b4 <osMessageQueuePut>
 8009370:	2800      	cmp	r0, #0
 8009372:	d0e3      	beq.n	800933c <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
                can_stats.rx_queue_full_count++;
 8009374:	4a03      	ldr	r2, [pc, #12]	@ (8009384 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8009376:	6913      	ldr	r3, [r2, #16]
 8009378:	3301      	adds	r3, #1
 800937a:	6113      	str	r3, [r2, #16]
}
 800937c:	e7de      	b.n	800933c <HAL_CAN_RxFifo0MsgPendingCallback+0x10>
 800937e:	bf00      	nop
 8009380:	2000011c 	.word	0x2000011c
 8009384:	20000100 	.word	0x20000100

08009388 <HAL_CAN_RxFifo1MsgPendingCallback>:
{
 8009388:	b500      	push	{lr}
 800938a:	b08d      	sub	sp, #52	@ 0x34
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, msg.data) == HAL_OK) {
 800938c:	ab01      	add	r3, sp, #4
 800938e:	aa05      	add	r2, sp, #20
 8009390:	2101      	movs	r1, #1
 8009392:	f003 fdc2 	bl	800cf1a <HAL_CAN_GetRxMessage>
 8009396:	b110      	cbz	r0, 800939e <HAL_CAN_RxFifo1MsgPendingCallback+0x16>
}
 8009398:	b00d      	add	sp, #52	@ 0x34
 800939a:	f85d fb04 	ldr.w	pc, [sp], #4
        msg.id = RxHeader.ExtId;
 800939e:	9b06      	ldr	r3, [sp, #24]
 80093a0:	9300      	str	r3, [sp, #0]
        msg.length = RxHeader.DLC;
 80093a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a4:	f88d 300c 	strb.w	r3, [sp, #12]
        msg.priority = 0;  // RX messages don't have priority
 80093a8:	2300      	movs	r3, #0
 80093aa:	f88d 300d 	strb.w	r3, [sp, #13]
        msg.timestamp = osKernelGetTickCount();
 80093ae:	f000 fce7 	bl	8009d80 <osKernelGetTickCount>
 80093b2:	9004      	str	r0, [sp, #16]
        if (CAN_IsMessageForThisModule(msg.id)) {
 80093b4:	9800      	ldr	r0, [sp, #0]
 80093b6:	f7ff ffa5 	bl	8009304 <CAN_IsMessageForThisModule>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d0ec      	beq.n	8009398 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
            if (osMessageQueuePut(CANRxQueueHandle, &msg, 0, 0) != osOK) {
 80093be:	2300      	movs	r3, #0
 80093c0:	461a      	mov	r2, r3
 80093c2:	4669      	mov	r1, sp
 80093c4:	4805      	ldr	r0, [pc, #20]	@ (80093dc <HAL_CAN_RxFifo1MsgPendingCallback+0x54>)
 80093c6:	6800      	ldr	r0, [r0, #0]
 80093c8:	f000 fef4 	bl	800a1b4 <osMessageQueuePut>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d0e3      	beq.n	8009398 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
                can_stats.rx_queue_full_count++;
 80093d0:	4a03      	ldr	r2, [pc, #12]	@ (80093e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>)
 80093d2:	6913      	ldr	r3, [r2, #16]
 80093d4:	3301      	adds	r3, #1
 80093d6:	6113      	str	r3, [r2, #16]
}
 80093d8:	e7de      	b.n	8009398 <HAL_CAN_RxFifo1MsgPendingCallback+0x10>
 80093da:	bf00      	nop
 80093dc:	2000011c 	.word	0x2000011c
 80093e0:	20000100 	.word	0x20000100

080093e4 <HAL_CAN_ErrorCallback>:
  * @brief  CAN error callback
  * @param  hcan: pointer to CAN handle
  * @retval None
  */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80093e4:	b508      	push	{r3, lr}
    uint32_t error = HAL_CAN_GetError(hcan);
 80093e6:	f003 ff91 	bl	800d30c <HAL_CAN_GetError>
    
    // Check for bus-off condition
    if (error & HAL_CAN_ERROR_BOF) {
 80093ea:	f010 0f04 	tst.w	r0, #4
 80093ee:	d100      	bne.n	80093f2 <HAL_CAN_ErrorCallback+0xe>
        // Attempt to recover from bus-off
        // Note: May need to stop and restart CAN peripheral
    }
    
    // Handle other errors as needed
}
 80093f0:	bd08      	pop	{r3, pc}
        can_stats.bus_off_count++;
 80093f2:	4a04      	ldr	r2, [pc, #16]	@ (8009404 <HAL_CAN_ErrorCallback+0x20>)
 80093f4:	6953      	ldr	r3, [r2, #20]
 80093f6:	3301      	adds	r3, #1
 80093f8:	6153      	str	r3, [r2, #20]
        ErrorMgr_SetError(ERROR_CAN_BUS_OFF);
 80093fa:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80093fe:	f001 f991 	bl	800a724 <ErrorMgr_SetError>
}
 8009402:	e7f5      	b.n	80093f0 <HAL_CAN_ErrorCallback+0xc>
 8009404:	20000100 	.word	0x20000100

08009408 <CAN_SendHeartbeat>:
  *         Byte 5: Warning flags summary (any warnings = 0xFF, none = 0x00)
  *         Byte 6-7: Fault count (16-bit)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendHeartbeat(void)
{
 8009408:	b500      	push	{lr}
 800940a:	b089      	sub	sp, #36	@ 0x24
    Error_Manager_t status;
    uint8_t heartbeat_data[8];
    
    // Get current error manager status
    ErrorMgr_GetStatus(&status);
 800940c:	a803      	add	r0, sp, #12
 800940e:	f001 fa33 	bl	800a878 <ErrorMgr_GetStatus>
    
    // Pack heartbeat message
    heartbeat_data[0] = (uint8_t)status.state;                    // BMS state
 8009412:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009416:	f88d 3004 	strb.w	r3, [sp, #4]
    heartbeat_data[1] = (uint8_t)(status.error_flags & 0xFF);     // Error byte 0
 800941a:	9b03      	ldr	r3, [sp, #12]
 800941c:	f88d 3005 	strb.w	r3, [sp, #5]
    heartbeat_data[2] = (uint8_t)((status.error_flags >> 8) & 0xFF);   // Error byte 1
 8009420:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009424:	f88d 2006 	strb.w	r2, [sp, #6]
    heartbeat_data[3] = (uint8_t)((status.error_flags >> 16) & 0xFF);  // Error byte 2
 8009428:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800942c:	f88d 2007 	strb.w	r2, [sp, #7]
    heartbeat_data[4] = (uint8_t)((status.error_flags >> 24) & 0xFF);  // Error byte 3
 8009430:	0e1b      	lsrs	r3, r3, #24
 8009432:	f88d 3008 	strb.w	r3, [sp, #8]
    heartbeat_data[5] = (status.warning_flags != 0) ? 0xFF : 0x00;     // Warning summary
 8009436:	9b04      	ldr	r3, [sp, #16]
 8009438:	b193      	cbz	r3, 8009460 <CAN_SendHeartbeat+0x58>
 800943a:	23ff      	movs	r3, #255	@ 0xff
 800943c:	f88d 3009 	strb.w	r3, [sp, #9]
    heartbeat_data[6] = (uint8_t)(status.fault_count & 0xFF);          // Fault count low byte
 8009440:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8009444:	f88d 300a 	strb.w	r3, [sp, #10]
    heartbeat_data[7] = (uint8_t)((status.fault_count >> 8) & 0xFF);   // Fault count high byte
 8009448:	2300      	movs	r3, #0
 800944a:	f88d 300b 	strb.w	r3, [sp, #11]
    
    // Send heartbeat with high priority
    return CAN_SendMessage(CAN_BMS_HEARTBEAT_ID, heartbeat_data, 8, CAN_PRIORITY_CRITICAL);
 800944e:	2208      	movs	r2, #8
 8009450:	a901      	add	r1, sp, #4
 8009452:	4804      	ldr	r0, [pc, #16]	@ (8009464 <CAN_SendHeartbeat+0x5c>)
 8009454:	6800      	ldr	r0, [r0, #0]
 8009456:	f7ff feed 	bl	8009234 <CAN_SendMessage>
}
 800945a:	b009      	add	sp, #36	@ 0x24
 800945c:	f85d fb04 	ldr.w	pc, [sp], #4
    heartbeat_data[5] = (status.warning_flags != 0) ? 0xFF : 0x00;     // Warning summary
 8009460:	2300      	movs	r3, #0
 8009462:	e7eb      	b.n	800943c <CAN_SendHeartbeat+0x34>
 8009464:	20000d4c 	.word	0x20000d4c

08009468 <CAN_SendStatistics>:
/**
  * @brief  Send CAN statistics message for diagnostics
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendStatistics(void)
{
 8009468:	b500      	push	{lr}
 800946a:	b083      	sub	sp, #12
    uint8_t stats_data[8];
    
    // Pack CAN statistics message
    // Bytes 0-1: RX message count (16-bit)
    stats_data[0] = (uint8_t)(can_stats.rx_message_count & 0xFF);
 800946c:	4b12      	ldr	r3, [pc, #72]	@ (80094b8 <CAN_SendStatistics+0x50>)
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	f88d 2000 	strb.w	r2, [sp]
    stats_data[1] = (uint8_t)((can_stats.rx_message_count >> 8) & 0xFF);
 8009474:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8009478:	f88d 2001 	strb.w	r2, [sp, #1]
    
    // Bytes 2-3: TX success count (16-bit)
    stats_data[2] = (uint8_t)(can_stats.tx_success_count & 0xFF);
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	f88d 2002 	strb.w	r2, [sp, #2]
    stats_data[3] = (uint8_t)((can_stats.tx_success_count >> 8) & 0xFF);
 8009482:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8009486:	f88d 2003 	strb.w	r2, [sp, #3]
    
    // Byte 4: TX error count
    stats_data[4] = (uint8_t)(can_stats.tx_error_count & 0xFF);
 800948a:	791a      	ldrb	r2, [r3, #4]
 800948c:	f88d 2004 	strb.w	r2, [sp, #4]
    
    // Byte 5: RX queue full count
    stats_data[5] = (uint8_t)(can_stats.rx_queue_full_count & 0xFF);
 8009490:	7c1a      	ldrb	r2, [r3, #16]
 8009492:	f88d 2005 	strb.w	r2, [sp, #5]
    
    // Byte 6: Bus-off count
    stats_data[6] = (uint8_t)(can_stats.bus_off_count & 0xFF);
 8009496:	7d1a      	ldrb	r2, [r3, #20]
 8009498:	f88d 2006 	strb.w	r2, [sp, #6]
    
    // Byte 7: TX queue full count
    stats_data[7] = (uint8_t)(can_stats.tx_queue_full_count & 0xFF);
 800949c:	7a1b      	ldrb	r3, [r3, #8]
 800949e:	f88d 3007 	strb.w	r3, [sp, #7]
    
    // Send statistics with normal priority
    return CAN_SendMessage(CAN_BMS_STATS_ID, stats_data, 8, CAN_PRIORITY_NORMAL);
 80094a2:	2302      	movs	r3, #2
 80094a4:	2208      	movs	r2, #8
 80094a6:	4669      	mov	r1, sp
 80094a8:	4804      	ldr	r0, [pc, #16]	@ (80094bc <CAN_SendStatistics+0x54>)
 80094aa:	6800      	ldr	r0, [r0, #0]
 80094ac:	f7ff fec2 	bl	8009234 <CAN_SendMessage>
}
 80094b0:	b003      	add	sp, #12
 80094b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80094b6:	bf00      	nop
 80094b8:	20000100 	.word	0x20000100
 80094bc:	20000d48 	.word	0x20000d48

080094c0 <CAN_SendDebugInfo>:
  *         Byte 3: Reserved (CPU usage if implemented)
  *         Bytes 4-7: Uptime in seconds (32-bit)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendDebugInfo(void)
{
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	b082      	sub	sp, #8
    uint8_t debug_data[8];

    // Get current module ID
    extern uint8_t Config_GetModuleID(void);
    uint8_t module_id = Config_GetModuleID();
 80094c4:	f000 ff24 	bl	800a310 <Config_GetModuleID>
 80094c8:	4606      	mov	r6, r0

    // Get heap memory statistics (in bytes)
    size_t free_heap = xPortGetFreeHeapSize();
 80094ca:	f001 fb65 	bl	800ab98 <xPortGetFreeHeapSize>
 80094ce:	4605      	mov	r5, r0
    size_t min_free_heap = xPortGetMinimumEverFreeHeapSize();
 80094d0:	f001 fb68 	bl	800aba4 <xPortGetMinimumEverFreeHeapSize>
 80094d4:	4604      	mov	r4, r0

    // Get uptime in seconds (convert from milliseconds)
    uint32_t uptime_sec = osKernelGetTickCount() / 1000;
 80094d6:	f000 fc53 	bl	8009d80 <osKernelGetTickCount>
 80094da:	4a13      	ldr	r2, [pc, #76]	@ (8009528 <CAN_SendDebugInfo+0x68>)
 80094dc:	fba2 2300 	umull	r2, r3, r2, r0

    // Pack debug information message
    debug_data[0] = module_id;                              // Byte 0: Module ID
 80094e0:	f88d 6000 	strb.w	r6, [sp]
    debug_data[1] = (uint8_t)((free_heap >> 8) & 0xFF);     // Byte 1: Free heap MSB (in 256-byte units)
 80094e4:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80094e8:	f88d 5001 	strb.w	r5, [sp, #1]
    debug_data[2] = (uint8_t)((min_free_heap >> 8) & 0xFF); // Byte 2: Min free heap MSB (in 256-byte units)
 80094ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80094f0:	f88d 4002 	strb.w	r4, [sp, #2]
    debug_data[3] = 0;                                      // Byte 3: Reserved
 80094f4:	2200      	movs	r2, #0
 80094f6:	f88d 2003 	strb.w	r2, [sp, #3]
    debug_data[4] = (uint8_t)(uptime_sec & 0xFF);           // Byte 4: Uptime LSB
 80094fa:	f3c3 1287 	ubfx	r2, r3, #6, #8
 80094fe:	f88d 2004 	strb.w	r2, [sp, #4]
    debug_data[5] = (uint8_t)((uptime_sec >> 8) & 0xFF);    // Byte 5: Uptime
 8009502:	f3c3 3287 	ubfx	r2, r3, #14, #8
 8009506:	f88d 2005 	strb.w	r2, [sp, #5]
    debug_data[6] = (uint8_t)((uptime_sec >> 16) & 0xFF);   // Byte 6: Uptime
 800950a:	0d9b      	lsrs	r3, r3, #22
 800950c:	f88d 3006 	strb.w	r3, [sp, #6]
    debug_data[7] = (uint8_t)((uptime_sec >> 24) & 0xFF);   // Byte 7: Uptime MSB
 8009510:	2300      	movs	r3, #0
 8009512:	f88d 3007 	strb.w	r3, [sp, #7]

    // Send debug info with high priority
    return CAN_SendMessage(CAN_DEBUG_RESPONSE_ID, debug_data, 8, CAN_PRIORITY_HIGH);
 8009516:	2301      	movs	r3, #1
 8009518:	2208      	movs	r2, #8
 800951a:	4669      	mov	r1, sp
 800951c:	4803      	ldr	r0, [pc, #12]	@ (800952c <CAN_SendDebugInfo+0x6c>)
 800951e:	6800      	ldr	r0, [r0, #0]
 8009520:	f7ff fe88 	bl	8009234 <CAN_SendMessage>
}
 8009524:	b002      	add	sp, #8
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	10624dd3 	.word	0x10624dd3
 800952c:	20000d30 	.word	0x20000d30

08009530 <CAN_SendI2CDiagnostics>:
  *         Byte 3: I2C3 state (HAL_I2C_STATE_*)
  *         Bytes 4-7: Reserved for future use
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_SendI2CDiagnostics(void)
{
 8009530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009534:	b082      	sub	sp, #8
    uint8_t diag_data[8] = {0};
 8009536:	2400      	movs	r4, #0
 8009538:	9400      	str	r4, [sp, #0]
 800953a:	9401      	str	r4, [sp, #4]
    // Get I2C error codes for diagnostics
    extern I2C_HandleTypeDef hi2c1;
    extern I2C_HandleTypeDef hi2c3;
    extern uint32_t BQ_GetLastI2C3Error(void);
    
    uint32_t i2c1_error = HAL_I2C_GetError(&hi2c1);
 800953c:	4d14      	ldr	r5, [pc, #80]	@ (8009590 <CAN_SendI2CDiagnostics+0x60>)
 800953e:	4628      	mov	r0, r5
 8009540:	f004 fe93 	bl	800e26a <HAL_I2C_GetError>
 8009544:	4607      	mov	r7, r0
    uint32_t i2c3_error = BQ_GetLastI2C3Error();
 8009546:	f7ff f963 	bl	8008810 <BQ_GetLastI2C3Error>
 800954a:	4606      	mov	r6, r0
    
    HAL_I2C_StateTypeDef i2c1_state = HAL_I2C_GetState(&hi2c1);
 800954c:	4628      	mov	r0, r5
 800954e:	f004 fe89 	bl	800e264 <HAL_I2C_GetState>
 8009552:	4605      	mov	r5, r0
    HAL_I2C_StateTypeDef i2c3_state = HAL_I2C_GetState(&hi2c3);
 8009554:	480f      	ldr	r0, [pc, #60]	@ (8009594 <CAN_SendI2CDiagnostics+0x64>)
 8009556:	f004 fe85 	bl	800e264 <HAL_I2C_GetState>
    
    // Pack I2C diagnostics message
    diag_data[0] = (uint8_t)(i2c1_error & 0xFF);        // Byte 0: I2C1 error code
 800955a:	f88d 7000 	strb.w	r7, [sp]
    diag_data[1] = (uint8_t)(i2c3_error & 0xFF);        // Byte 1: I2C3 error code
 800955e:	f88d 6001 	strb.w	r6, [sp, #1]
    diag_data[2] = (uint8_t)(i2c1_state & 0xFF);        // Byte 2: I2C1 state
 8009562:	f88d 5002 	strb.w	r5, [sp, #2]
    diag_data[3] = (uint8_t)(i2c3_state & 0xFF);        // Byte 3: I2C3 state
 8009566:	f88d 0003 	strb.w	r0, [sp, #3]
    diag_data[4] = 0;                                   // Byte 4: Reserved
 800956a:	f88d 4004 	strb.w	r4, [sp, #4]
    diag_data[5] = 0;                                   // Byte 5: Reserved
 800956e:	f88d 4005 	strb.w	r4, [sp, #5]
    diag_data[6] = 0;                                   // Byte 6: Reserved
 8009572:	f88d 4006 	strb.w	r4, [sp, #6]
    diag_data[7] = 0;                                   // Byte 7: Reserved
 8009576:	f88d 4007 	strb.w	r4, [sp, #7]
    
    // Send I2C diagnostics with high priority
    return CAN_SendMessage(CAN_I2C_DIAG_ID, diag_data, 8, CAN_PRIORITY_HIGH);
 800957a:	2301      	movs	r3, #1
 800957c:	2208      	movs	r2, #8
 800957e:	4669      	mov	r1, sp
 8009580:	4805      	ldr	r0, [pc, #20]	@ (8009598 <CAN_SendI2CDiagnostics+0x68>)
 8009582:	6800      	ldr	r0, [r0, #0]
 8009584:	f7ff fe56 	bl	8009234 <CAN_SendMessage>
 8009588:	b002      	add	sp, #8
 800958a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800958e:	bf00      	nop
 8009590:	20003d20 	.word	0x20003d20
 8009594:	20003ccc 	.word	0x20003ccc
 8009598:	20000d2c 	.word	0x20000d2c

0800959c <CAN_ProcessRxMessage>:
{
 800959c:	b500      	push	{lr}
 800959e:	b083      	sub	sp, #12
    can_stats.rx_message_count++;
 80095a0:	4a26      	ldr	r2, [pc, #152]	@ (800963c <CAN_ProcessRxMessage+0xa0>)
 80095a2:	68d3      	ldr	r3, [r2, #12]
 80095a4:	3301      	adds	r3, #1
 80095a6:	60d3      	str	r3, [r2, #12]
    if (msg->id == CAN_DEBUG_REQUEST_ID) {
 80095a8:	6803      	ldr	r3, [r0, #0]
 80095aa:	4a25      	ldr	r2, [pc, #148]	@ (8009640 <CAN_ProcessRxMessage+0xa4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d011      	beq.n	80095d4 <CAN_ProcessRxMessage+0x38>
    uint32_t base_id = msg->id & 0xFFFF0FFF;
 80095b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
    if (base_id == (CAN_CONFIG_CMD_BASE & 0xFFFF0FFF)) {
 80095b4:	4a23      	ldr	r2, [pc, #140]	@ (8009644 <CAN_ProcessRxMessage+0xa8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d011      	beq.n	80095de <CAN_ProcessRxMessage+0x42>
    if (base_id == (CAN_RESET_CMD_BASE & 0xFFFF0FFF)) {
 80095ba:	4a23      	ldr	r2, [pc, #140]	@ (8009648 <CAN_ProcessRxMessage+0xac>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d013      	beq.n	80095e8 <CAN_ProcessRxMessage+0x4c>
    if (base_id == (CAN_BMS_RESET_CMD_BASE & 0xFFFF0FFF)) {
 80095c0:	4a22      	ldr	r2, [pc, #136]	@ (800964c <CAN_ProcessRxMessage+0xb0>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d012      	beq.n	80095ec <CAN_ProcessRxMessage+0x50>
    if (rx_callback != NULL) {
 80095c6:	4b22      	ldr	r3, [pc, #136]	@ (8009650 <CAN_ProcessRxMessage+0xb4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	b103      	cbz	r3, 80095ce <CAN_ProcessRxMessage+0x32>
        rx_callback(msg);
 80095cc:	4798      	blx	r3
}
 80095ce:	b003      	add	sp, #12
 80095d0:	f85d fb04 	ldr.w	pc, [sp], #4
        CAN_SendDebugInfo();
 80095d4:	f7ff ff74 	bl	80094c0 <CAN_SendDebugInfo>
        CAN_SendI2CDiagnostics();
 80095d8:	f7ff ffaa 	bl	8009530 <CAN_SendI2CDiagnostics>
        return;
 80095dc:	e7f7      	b.n	80095ce <CAN_ProcessRxMessage+0x32>
        Config_ProcessCANCommand(msg->data, msg->length);
 80095de:	7b01      	ldrb	r1, [r0, #12]
 80095e0:	3004      	adds	r0, #4
 80095e2:	f000 ffa7 	bl	800a534 <Config_ProcessCANCommand>
        return;
 80095e6:	e7f2      	b.n	80095ce <CAN_ProcessRxMessage+0x32>
        NVIC_SystemReset();
 80095e8:	f7ff fdcc 	bl	8009184 <__NVIC_SystemReset>
        uint8_t ack_data[8] = {0};
 80095ec:	2300      	movs	r3, #0
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	9301      	str	r3, [sp, #4]
        if (BMSResetSemHandle != NULL) {
 80095f2:	4b18      	ldr	r3, [pc, #96]	@ (8009654 <CAN_ProcessRxMessage+0xb8>)
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	b1e8      	cbz	r0, 8009634 <CAN_ProcessRxMessage+0x98>
            sem_result = osSemaphoreRelease(BMSResetSemHandle);
 80095f8:	f000 fd62 	bl	800a0c0 <osSemaphoreRelease>
        ack_data[0] = (sem_result == osOK) ? 0x00 : 0x01;
 80095fc:	3800      	subs	r0, #0
 80095fe:	bf18      	it	ne
 8009600:	2001      	movne	r0, #1
 8009602:	f88d 0000 	strb.w	r0, [sp]
        ack_data[1] = 0x00;
 8009606:	2300      	movs	r3, #0
 8009608:	f88d 3001 	strb.w	r3, [sp, #1]
        ack_data[2] = 0x00;
 800960c:	f88d 3002 	strb.w	r3, [sp, #2]
        ack_data[3] = 0x00;
 8009610:	f88d 3003 	strb.w	r3, [sp, #3]
        ack_data[4] = 0x00;
 8009614:	f88d 3004 	strb.w	r3, [sp, #4]
        ack_data[5] = 0x00;
 8009618:	f88d 3005 	strb.w	r3, [sp, #5]
        ack_data[6] = 0x00;
 800961c:	f88d 3006 	strb.w	r3, [sp, #6]
        ack_data[7] = 0x00;
 8009620:	f88d 3007 	strb.w	r3, [sp, #7]
        CAN_SendMessage(CAN_BMS_RESET_ACK_ID, ack_data, 8, CAN_PRIORITY_HIGH);
 8009624:	2301      	movs	r3, #1
 8009626:	2208      	movs	r2, #8
 8009628:	4669      	mov	r1, sp
 800962a:	480b      	ldr	r0, [pc, #44]	@ (8009658 <CAN_ProcessRxMessage+0xbc>)
 800962c:	6800      	ldr	r0, [r0, #0]
 800962e:	f7ff fe01 	bl	8009234 <CAN_SendMessage>
        return;
 8009632:	e7cc      	b.n	80095ce <CAN_ProcessRxMessage+0x32>
            sem_result = osError;
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	e7e0      	b.n	80095fc <CAN_ProcessRxMessage+0x60>
 800963a:	bf00      	nop
 800963c:	20000100 	.word	0x20000100
 8009640:	08f00f10 	.word	0x08f00f10
 8009644:	08f00f00 	.word	0x08f00f00
 8009648:	08f00f02 	.word	0x08f00f02
 800964c:	08f00f03 	.word	0x08f00f03
 8009650:	20000118 	.word	0x20000118
 8009654:	20003ca8 	.word	0x20003ca8
 8009658:	20000d34 	.word	0x20000d34

0800965c <CAN_ManagerTask>:
{
 800965c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009660:	b086      	sub	sp, #24
    osDelay(100);
 8009662:	2064      	movs	r0, #100	@ 0x64
 8009664:	f000 fbf0 	bl	8009e48 <osDelay>
    last_heartbeat_tick = osKernelGetTickCount();
 8009668:	f000 fb8a 	bl	8009d80 <osKernelGetTickCount>
 800966c:	4680      	mov	r8, r0
    last_stats_tick = osKernelGetTickCount();
 800966e:	f000 fb87 	bl	8009d80 <osKernelGetTickCount>
 8009672:	4607      	mov	r7, r0
    last_uptime_tick = osKernelGetTickCount();
 8009674:	f000 fb84 	bl	8009d80 <osKernelGetTickCount>
 8009678:	4606      	mov	r6, r0
 800967a:	e020      	b.n	80096be <CAN_ManagerTask+0x62>
            CAN_ProcessRxMessage(&rx_msg);
 800967c:	a801      	add	r0, sp, #4
 800967e:	f7ff ff8d 	bl	800959c <CAN_ProcessRxMessage>
        while (osMessageQueueGet(CANRxQueueHandle, &rx_msg, NULL, 0) == osOK) {
 8009682:	2300      	movs	r3, #0
 8009684:	461a      	mov	r2, r3
 8009686:	a901      	add	r1, sp, #4
 8009688:	4c13      	ldr	r4, [pc, #76]	@ (80096d8 <CAN_ManagerTask+0x7c>)
 800968a:	6820      	ldr	r0, [r4, #0]
 800968c:	f000 fdd4 	bl	800a238 <osMessageQueueGet>
 8009690:	2800      	cmp	r0, #0
 8009692:	d0f3      	beq.n	800967c <CAN_ManagerTask+0x20>
        CAN_ProcessTxQueue();
 8009694:	f7ff fdba 	bl	800920c <CAN_ProcessTxQueue>
        if ((current_tick - last_heartbeat_tick) >= CAN_HEARTBEAT_INTERVAL_MS) {
 8009698:	eba5 0308 	sub.w	r3, r5, r8
 800969c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096a0:	d211      	bcs.n	80096c6 <CAN_ManagerTask+0x6a>
        if ((current_tick - last_stats_tick) >= 1000) {
 80096a2:	1beb      	subs	r3, r5, r7
 80096a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096a8:	d211      	bcs.n	80096ce <CAN_ManagerTask+0x72>
        if ((current_tick - last_uptime_tick) >= 1000) {
 80096aa:	1bab      	subs	r3, r5, r6
 80096ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096b0:	d302      	bcc.n	80096b8 <CAN_ManagerTask+0x5c>
            ErrorMgr_UpdateUptime();
 80096b2:	f001 f923 	bl	800a8fc <ErrorMgr_UpdateUptime>
            last_uptime_tick = current_tick;
 80096b6:	462e      	mov	r6, r5
        osDelay(10);
 80096b8:	200a      	movs	r0, #10
 80096ba:	f000 fbc5 	bl	8009e48 <osDelay>
        current_tick = osKernelGetTickCount();
 80096be:	f000 fb5f 	bl	8009d80 <osKernelGetTickCount>
 80096c2:	4605      	mov	r5, r0
        while (osMessageQueueGet(CANRxQueueHandle, &rx_msg, NULL, 0) == osOK) {
 80096c4:	e7dd      	b.n	8009682 <CAN_ManagerTask+0x26>
            CAN_SendHeartbeat();
 80096c6:	f7ff fe9f 	bl	8009408 <CAN_SendHeartbeat>
            last_heartbeat_tick = current_tick;
 80096ca:	46a8      	mov	r8, r5
 80096cc:	e7e9      	b.n	80096a2 <CAN_ManagerTask+0x46>
            CAN_SendStatistics();
 80096ce:	f7ff fecb 	bl	8009468 <CAN_SendStatistics>
            last_stats_tick = current_tick;
 80096d2:	462f      	mov	r7, r5
 80096d4:	e7e9      	b.n	80096aa <CAN_ManagerTask+0x4e>
 80096d6:	bf00      	nop
 80096d8:	2000011c 	.word	0x2000011c

080096dc <CellTemp_IsADCEnabled>:
  * @param  adc_index: ADC channel index (0-6)
  * @retval 1 if enabled, 0 if disabled
  */
static uint8_t CellTemp_IsADCEnabled(uint8_t adc_index)
{
    if (adc_index >= NUM_ADC_CHANNELS) {
 80096dc:	2806      	cmp	r0, #6
 80096de:	d802      	bhi.n	80096e6 <CellTemp_IsADCEnabled+0xa>
        return 0;
    }
    return adc_channel_enabled[adc_index];
 80096e0:	4b02      	ldr	r3, [pc, #8]	@ (80096ec <CellTemp_IsADCEnabled+0x10>)
 80096e2:	5c18      	ldrb	r0, [r3, r0]
 80096e4:	4770      	bx	lr
        return 0;
 80096e6:	2000      	movs	r0, #0
}
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	08010cec 	.word	0x08010cec

080096f0 <CellTemp_IsFaultDetectionEnabled>:
  * @param  thermistor_index: Thermistor index (0-55)
  * @retval 1 if fault detection enabled, 0 if disabled
  */
static uint8_t CellTemp_IsFaultDetectionEnabled(uint8_t thermistor_index)
{
    if (thermistor_index >= TOTAL_THERMISTORS) {
 80096f0:	2837      	cmp	r0, #55	@ 0x37
 80096f2:	d814      	bhi.n	800971e <CellTemp_IsFaultDetectionEnabled+0x2e>
{
 80096f4:	b410      	push	{r4}
        return 0;
    }
    // Check if the corresponding bit is set in the fault mask
    return (thermistor_fault_mask & (1ULL << thermistor_index)) ? 1 : 0;
 80096f6:	4a0b      	ldr	r2, [pc, #44]	@ (8009724 <CellTemp_IsFaultDetectionEnabled+0x34>)
 80096f8:	6813      	ldr	r3, [r2, #0]
 80096fa:	6854      	ldr	r4, [r2, #4]
 80096fc:	f1c0 0120 	rsb	r1, r0, #32
 8009700:	f1a0 0220 	sub.w	r2, r0, #32
 8009704:	fa23 f000 	lsr.w	r0, r3, r0
 8009708:	fa04 f101 	lsl.w	r1, r4, r1
 800970c:	4308      	orrs	r0, r1
 800970e:	fa24 f202 	lsr.w	r2, r4, r2
 8009712:	4310      	orrs	r0, r2
 8009714:	f000 0001 	and.w	r0, r0, #1
}
 8009718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800971c:	4770      	bx	lr
        return 0;
 800971e:	2000      	movs	r0, #0
}
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000000 	.word	0x20000000

08009728 <CellTemp_ConfigureADCChannel>:
{
 8009728:	b500      	push	{lr}
 800972a:	b087      	sub	sp, #28
    ADC_ChannelConfTypeDef sConfig = {0};
 800972c:	4669      	mov	r1, sp
 800972e:	2300      	movs	r3, #0
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	9302      	str	r3, [sp, #8]
 8009736:	9303      	str	r3, [sp, #12]
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	9305      	str	r3, [sp, #20]
    sConfig.Channel = channel;
 800973c:	9000      	str	r0, [sp, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800973e:	2306      	movs	r3, #6
 8009740:	9301      	str	r3, [sp, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; // Long sampling for high impedance
 8009742:	2307      	movs	r3, #7
 8009744:	9302      	str	r3, [sp, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8009746:	237f      	movs	r3, #127	@ 0x7f
 8009748:	9303      	str	r3, [sp, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800974a:	2304      	movs	r3, #4
 800974c:	9304      	str	r3, [sp, #16]
    return HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800974e:	4803      	ldr	r0, [pc, #12]	@ (800975c <CellTemp_ConfigureADCChannel+0x34>)
 8009750:	f002 fe14 	bl	800c37c <HAL_ADC_ConfigChannel>
}
 8009754:	b007      	add	sp, #28
 8009756:	f85d fb04 	ldr.w	pc, [sp], #4
 800975a:	bf00      	nop
 800975c:	20003dc0 	.word	0x20003dc0

08009760 <CellTemp_SendTemperatureMessage>:
  * @param  msg_index: Message index (0-13, for 14 messages total)
  * @param  start_therm_idx: Starting thermistor index
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef CellTemp_SendTemperatureMessage(uint8_t msg_index, uint8_t start_therm_idx)
{
 8009760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009762:	b083      	sub	sp, #12
 8009764:	4606      	mov	r6, r0
 8009766:	460d      	mov	r5, r1
    uint8_t TxData[8];
    
    // Check if this message corresponds to a disabled ADC channel
    // Each message covers 4 thermistors, determine which ADC channel(s) it uses
    uint8_t first_adc = start_therm_idx / MUX_CHANNELS;
 8009768:	08cc      	lsrs	r4, r1, #3
    uint8_t last_adc = (start_therm_idx + 3) / MUX_CHANNELS;
 800976a:	1ccf      	adds	r7, r1, #3
 800976c:	08ff      	lsrs	r7, r7, #3
    
    // Skip message if all ADC channels for this message are disabled
    uint8_t any_enabled = 0;
    for (uint8_t adc = first_adc; adc <= last_adc && adc < NUM_ADC_CHANNELS; adc++) {
 800976e:	e001      	b.n	8009774 <CellTemp_SendTemperatureMessage+0x14>
 8009770:	3401      	adds	r4, #1
 8009772:	b2e4      	uxtb	r4, r4
 8009774:	42bc      	cmp	r4, r7
 8009776:	d80a      	bhi.n	800978e <CellTemp_SendTemperatureMessage+0x2e>
 8009778:	2c06      	cmp	r4, #6
 800977a:	d806      	bhi.n	800978a <CellTemp_SendTemperatureMessage+0x2a>
        if (CellTemp_IsADCEnabled(adc)) {
 800977c:	4620      	mov	r0, r4
 800977e:	f7ff ffad 	bl	80096dc <CellTemp_IsADCEnabled>
 8009782:	2800      	cmp	r0, #0
 8009784:	d0f4      	beq.n	8009770 <CellTemp_SendTemperatureMessage+0x10>
            any_enabled = 1;
 8009786:	2001      	movs	r0, #1
 8009788:	e002      	b.n	8009790 <CellTemp_SendTemperatureMessage+0x30>
    uint8_t any_enabled = 0;
 800978a:	2000      	movs	r0, #0
 800978c:	e000      	b.n	8009790 <CellTemp_SendTemperatureMessage+0x30>
 800978e:	2000      	movs	r0, #0
            break;
        }
    }
    
    if (!any_enabled) {
 8009790:	2800      	cmp	r0, #0
 8009792:	d03d      	beq.n	8009810 <CellTemp_SendTemperatureMessage+0xb0>
    }
    
    // Prepare CAN message with 4 thermistor readings per message
    // Temperature format: temp_celsius * 10 (0.1°C resolution), little endian
    
    for (uint8_t i = 0; i < 4; i++) {
 8009794:	2400      	movs	r4, #0
 8009796:	e00d      	b.n	80097b4 <CellTemp_SendTemperatureMessage+0x54>
        uint8_t therm_idx = start_therm_idx + i;
        int16_t temp_data = 0x8000; // Default invalid temperature marker
 8009798:	4b1e      	ldr	r3, [pc, #120]	@ (8009814 <CellTemp_SendTemperatureMessage+0xb4>)
                temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
            }
        }
        
        // Pack temperature data (little endian)
        TxData[i * 2] = temp_data & 0xFF;         // LSB
 800979a:	0062      	lsls	r2, r4, #1
 800979c:	a902      	add	r1, sp, #8
 800979e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80097a2:	f801 3c08 	strb.w	r3, [r1, #-8]
        TxData[i * 2 + 1] = (temp_data >> 8) & 0xFF; // MSB
 80097a6:	3209      	adds	r2, #9
 80097a8:	446a      	add	r2, sp
 80097aa:	121b      	asrs	r3, r3, #8
 80097ac:	f802 3c08 	strb.w	r3, [r2, #-8]
    for (uint8_t i = 0; i < 4; i++) {
 80097b0:	3401      	adds	r4, #1
 80097b2:	b2e4      	uxtb	r4, r4
 80097b4:	2c03      	cmp	r4, #3
 80097b6:	d823      	bhi.n	8009800 <CellTemp_SendTemperatureMessage+0xa0>
        uint8_t therm_idx = start_therm_idx + i;
 80097b8:	1967      	adds	r7, r4, r5
 80097ba:	b2ff      	uxtb	r7, r7
        if (therm_idx < TOTAL_THERMISTORS) {
 80097bc:	2f37      	cmp	r7, #55	@ 0x37
 80097be:	d8eb      	bhi.n	8009798 <CellTemp_SendTemperatureMessage+0x38>
            if (CellTemp_IsADCEnabled(therm_adc) && 
 80097c0:	08f8      	lsrs	r0, r7, #3
 80097c2:	f7ff ff8b 	bl	80096dc <CellTemp_IsADCEnabled>
 80097c6:	b1b8      	cbz	r0, 80097f8 <CellTemp_SendTemperatureMessage+0x98>
                temp_state.thermistors[therm_idx].temperature > -126.0f) {
 80097c8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80097cc:	4b12      	ldr	r3, [pc, #72]	@ (8009818 <CellTemp_SendTemperatureMessage+0xb8>)
 80097ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097d2:	edd3 7a01 	vldr	s15, [r3, #4]
            if (CellTemp_IsADCEnabled(therm_adc) && 
 80097d6:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800981c <CellTemp_SendTemperatureMessage+0xbc>
 80097da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e2:	dd0b      	ble.n	80097fc <CellTemp_SendTemperatureMessage+0x9c>
                temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
 80097e4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80097e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097f0:	ee17 3a90 	vmov	r3, s15
 80097f4:	b21b      	sxth	r3, r3
 80097f6:	e7d0      	b.n	800979a <CellTemp_SendTemperatureMessage+0x3a>
        int16_t temp_data = 0x8000; // Default invalid temperature marker
 80097f8:	4b06      	ldr	r3, [pc, #24]	@ (8009814 <CellTemp_SendTemperatureMessage+0xb4>)
 80097fa:	e7ce      	b.n	800979a <CellTemp_SendTemperatureMessage+0x3a>
 80097fc:	4b05      	ldr	r3, [pc, #20]	@ (8009814 <CellTemp_SendTemperatureMessage+0xb4>)
 80097fe:	e7cc      	b.n	800979a <CellTemp_SendTemperatureMessage+0x3a>
    }
    
    // Send via CAN Manager (non-blocking, queued)
    // CAN_TEMP_ID already has module offset applied from Config_Init()
    uint32_t can_id = CAN_TEMP_ID + msg_index;
 8009800:	4b07      	ldr	r3, [pc, #28]	@ (8009820 <CellTemp_SendTemperatureMessage+0xc0>)
 8009802:	6818      	ldr	r0, [r3, #0]
    return CAN_SendMessage(can_id, TxData, 8, CAN_PRIORITY_NORMAL);
 8009804:	2302      	movs	r3, #2
 8009806:	2208      	movs	r2, #8
 8009808:	4669      	mov	r1, sp
 800980a:	4430      	add	r0, r6
 800980c:	f7ff fd12 	bl	8009234 <CAN_SendMessage>
}
 8009810:	b003      	add	sp, #12
 8009812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009814:	ffff8000 	.word	0xffff8000
 8009818:	20000124 	.word	0x20000124
 800981c:	c2fc0000 	.word	0xc2fc0000
 8009820:	20000d74 	.word	0x20000d74

08009824 <CellTemp_Init>:
{
 8009824:	b510      	push	{r4, lr}
    memset(&temp_state, 0, sizeof(temp_monitor_state_t));
 8009826:	f240 524c 	movw	r2, #1356	@ 0x54c
 800982a:	2100      	movs	r1, #0
 800982c:	481a      	ldr	r0, [pc, #104]	@ (8009898 <CellTemp_Init+0x74>)
 800982e:	f007 f852 	bl	80108d6 <memset>
    for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8009832:	2300      	movs	r3, #0
 8009834:	e019      	b.n	800986a <CellTemp_Init+0x46>
        temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 8009836:	4a18      	ldr	r2, [pc, #96]	@ (8009898 <CellTemp_Init+0x74>)
 8009838:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800983c:	00c8      	lsls	r0, r1, #3
 800983e:	1811      	adds	r1, r2, r0
 8009840:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8009844:	f802 c000 	strb.w	ip, [r2, r0]
        temp_state.thermistors[i].mux_channel = i % MUX_CHANNELS;
 8009848:	f003 0007 	and.w	r0, r3, #7
 800984c:	7048      	strb	r0, [r1, #1]
        temp_state.thermistors[i].temperature = -127.0f; // Invalid temperature marker
 800984e:	4813      	ldr	r0, [pc, #76]	@ (800989c <CellTemp_Init+0x78>)
 8009850:	6048      	str	r0, [r1, #4]
        temp_state.thermistors[i].raw_adc = 0;
 8009852:	2000      	movs	r0, #0
 8009854:	8108      	strh	r0, [r1, #8]
        temp_state.thermistors[i].last_read_time = 0;
 8009856:	60c8      	str	r0, [r1, #12]
        temp_state.thermistors[i].adc_accumulator = 0;
 8009858:	6108      	str	r0, [r1, #16]
        temp_state.thermistors[i].sample_count = 0;
 800985a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800985e:	ea4f 01cc 	mov.w	r1, ip, lsl #3
 8009862:	440a      	add	r2, r1
 8009864:	8290      	strh	r0, [r2, #20]
    for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8009866:	3301      	adds	r3, #1
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b37      	cmp	r3, #55	@ 0x37
 800986c:	d9e3      	bls.n	8009836 <CellTemp_Init+0x12>
    HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 800986e:	4c0c      	ldr	r4, [pc, #48]	@ (80098a0 <CellTemp_Init+0x7c>)
 8009870:	2200      	movs	r2, #0
 8009872:	2102      	movs	r1, #2
 8009874:	4620      	mov	r0, r4
 8009876:	f004 f8a9 	bl	800d9cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 800987a:	2200      	movs	r2, #0
 800987c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009884:	f004 f8a2 	bl	800d9cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 8009888:	2200      	movs	r2, #0
 800988a:	2120      	movs	r1, #32
 800988c:	4620      	mov	r0, r4
 800988e:	f004 f89d 	bl	800d9cc <HAL_GPIO_WritePin>
}
 8009892:	2000      	movs	r0, #0
 8009894:	bd10      	pop	{r4, pc}
 8009896:	bf00      	nop
 8009898:	20000124 	.word	0x20000124
 800989c:	c2fe0000 	.word	0xc2fe0000
 80098a0:	48000400 	.word	0x48000400

080098a4 <CellTemp_ReadADC>:
{
 80098a4:	b510      	push	{r4, lr}
    if (CellTemp_ConfigureADCChannel(adc_channel) != HAL_OK) {
 80098a6:	f7ff ff3f 	bl	8009728 <CellTemp_ConfigureADCChannel>
 80098aa:	b110      	cbz	r0, 80098b2 <CellTemp_ReadADC+0xe>
        return 0;
 80098ac:	2400      	movs	r4, #0
}
 80098ae:	4620      	mov	r0, r4
 80098b0:	bd10      	pop	{r4, pc}
    if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 80098b2:	480b      	ldr	r0, [pc, #44]	@ (80098e0 <CellTemp_ReadADC+0x3c>)
 80098b4:	f003 f868 	bl	800c988 <HAL_ADC_Start>
 80098b8:	b108      	cbz	r0, 80098be <CellTemp_ReadADC+0x1a>
    uint16_t adc_value = 0;
 80098ba:	2400      	movs	r4, #0
 80098bc:	e7f7      	b.n	80098ae <CellTemp_ReadADC+0xa>
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80098be:	f04f 31ff 	mov.w	r1, #4294967295
 80098c2:	4807      	ldr	r0, [pc, #28]	@ (80098e0 <CellTemp_ReadADC+0x3c>)
 80098c4:	f002 fcfc 	bl	800c2c0 <HAL_ADC_PollForConversion>
 80098c8:	b120      	cbz	r0, 80098d4 <CellTemp_ReadADC+0x30>
    uint16_t adc_value = 0;
 80098ca:	2400      	movs	r4, #0
        HAL_ADC_Stop(&hadc1);
 80098cc:	4804      	ldr	r0, [pc, #16]	@ (80098e0 <CellTemp_ReadADC+0x3c>)
 80098ce:	f003 f8eb 	bl	800caa8 <HAL_ADC_Stop>
 80098d2:	e7ec      	b.n	80098ae <CellTemp_ReadADC+0xa>
            adc_value = HAL_ADC_GetValue(&hadc1);
 80098d4:	4802      	ldr	r0, [pc, #8]	@ (80098e0 <CellTemp_ReadADC+0x3c>)
 80098d6:	f002 fd4d 	bl	800c374 <HAL_ADC_GetValue>
 80098da:	b284      	uxth	r4, r0
 80098dc:	e7f6      	b.n	80098cc <CellTemp_ReadADC+0x28>
 80098de:	bf00      	nop
 80098e0:	20003dc0 	.word	0x20003dc0

080098e4 <CellTemp_SetMuxChannel>:
    if (channel > 7) {
 80098e4:	2807      	cmp	r0, #7
 80098e6:	d833      	bhi.n	8009950 <CellTemp_SetMuxChannel+0x6c>
{
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4604      	mov	r4, r0
    if (channel & 0x01) {
 80098ec:	f010 0f01 	tst.w	r0, #1
 80098f0:	d01a      	beq.n	8009928 <CellTemp_SetMuxChannel+0x44>
        HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_SET);
 80098f2:	2201      	movs	r2, #1
 80098f4:	2102      	movs	r1, #2
 80098f6:	4817      	ldr	r0, [pc, #92]	@ (8009954 <CellTemp_SetMuxChannel+0x70>)
 80098f8:	f004 f868 	bl	800d9cc <HAL_GPIO_WritePin>
    if (channel & 0x02) {
 80098fc:	f014 0f02 	tst.w	r4, #2
 8009900:	d018      	beq.n	8009934 <CellTemp_SetMuxChannel+0x50>
        HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_SET);
 8009902:	2201      	movs	r2, #1
 8009904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800990c:	f004 f85e 	bl	800d9cc <HAL_GPIO_WritePin>
    if (channel & 0x04) {
 8009910:	f014 0f04 	tst.w	r4, #4
 8009914:	d016      	beq.n	8009944 <CellTemp_SetMuxChannel+0x60>
        HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_SET);
 8009916:	2201      	movs	r2, #1
 8009918:	2120      	movs	r1, #32
 800991a:	480e      	ldr	r0, [pc, #56]	@ (8009954 <CellTemp_SetMuxChannel+0x70>)
 800991c:	f004 f856 	bl	800d9cc <HAL_GPIO_WritePin>
    osDelay(2);
 8009920:	2002      	movs	r0, #2
 8009922:	f000 fa91 	bl	8009e48 <osDelay>
}
 8009926:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
 8009928:	2200      	movs	r2, #0
 800992a:	2102      	movs	r1, #2
 800992c:	4809      	ldr	r0, [pc, #36]	@ (8009954 <CellTemp_SetMuxChannel+0x70>)
 800992e:	f004 f84d 	bl	800d9cc <HAL_GPIO_WritePin>
 8009932:	e7e3      	b.n	80098fc <CellTemp_SetMuxChannel+0x18>
        HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 8009934:	2200      	movs	r2, #0
 8009936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800993a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800993e:	f004 f845 	bl	800d9cc <HAL_GPIO_WritePin>
 8009942:	e7e5      	b.n	8009910 <CellTemp_SetMuxChannel+0x2c>
        HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 8009944:	2200      	movs	r2, #0
 8009946:	2120      	movs	r1, #32
 8009948:	4802      	ldr	r0, [pc, #8]	@ (8009954 <CellTemp_SetMuxChannel+0x70>)
 800994a:	f004 f83f 	bl	800d9cc <HAL_GPIO_WritePin>
 800994e:	e7e7      	b.n	8009920 <CellTemp_SetMuxChannel+0x3c>
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	48000400 	.word	0x48000400

08009958 <CellTemp_CalculateTemperature>:
    float voltage = ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 8009958:	ee07 0a90 	vmov	s15, r0
 800995c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009960:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8009a08 <CellTemp_CalculateTemperature+0xb0>
 8009964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009968:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8009a0c <CellTemp_CalculateTemperature+0xb4>
 800996c:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (adc_value < 10) {  // Less than ~8mV indicates disconnected sensor
 8009970:	2809      	cmp	r0, #9
 8009972:	d940      	bls.n	80099f6 <CellTemp_CalculateTemperature+0x9e>
    if (voltage >= 3.29f) {  // Close to 3.3V limit, very high resistance (cold)
 8009974:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8009a10 <CellTemp_CalculateTemperature+0xb8>
 8009978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800997c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009980:	da36      	bge.n	80099f0 <CellTemp_CalculateTemperature+0x98>
        r_thermistor = (voltage * PULLUP_RESISTOR) / (ADC_VREF - voltage);
 8009982:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8009a14 <CellTemp_CalculateTemperature+0xbc>
 8009986:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800998a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8009a0c <CellTemp_CalculateTemperature+0xb4>
 800998e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    if (r_thermistor <= 0) {
 8009996:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800999a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999e:	d92d      	bls.n	80099fc <CellTemp_CalculateTemperature+0xa4>
{
 80099a0:	b508      	push	{r3, lr}
    float ln_ratio = logf(r_thermistor / THERMISTOR_R25);
 80099a2:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8009a14 <CellTemp_CalculateTemperature+0xbc>
 80099a6:	ee87 0a00 	vdiv.f32	s0, s14, s0
 80099aa:	f006 ffd5 	bl	8010958 <logf>
    float temp_kelvin = 1.0f / ((1.0f / REFERENCE_TEMP_K) + (ln_ratio / THERMISTOR_B_VALUE));
 80099ae:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8009a18 <CellTemp_CalculateTemperature+0xc0>
 80099b2:	eec0 7a07 	vdiv.f32	s15, s0, s14
 80099b6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009a1c <CellTemp_CalculateTemperature+0xc4>
 80099ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80099be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099c2:	ee87 0a27 	vdiv.f32	s0, s14, s15
    float temp_celsius = temp_kelvin - 273.15f;
 80099c6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8009a20 <CellTemp_CalculateTemperature+0xc8>
 80099ca:	ee30 0a67 	vsub.f32	s0, s0, s15
    if (temp_celsius < -40.0f) {
 80099ce:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009a24 <CellTemp_CalculateTemperature+0xcc>
 80099d2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80099d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099da:	d412      	bmi.n	8009a02 <CellTemp_CalculateTemperature+0xaa>
    } else if (temp_celsius > 125.0f) {
 80099dc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009a28 <CellTemp_CalculateTemperature+0xd0>
 80099e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80099e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e8:	dd0d      	ble.n	8009a06 <CellTemp_CalculateTemperature+0xae>
        temp_celsius = 125.0f;
 80099ea:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8009a28 <CellTemp_CalculateTemperature+0xd0>
 80099ee:	e00a      	b.n	8009a06 <CellTemp_CalculateTemperature+0xae>
        r_thermistor = PULLUP_RESISTOR * 100.0f;  // Assume very high resistance
 80099f0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009a2c <CellTemp_CalculateTemperature+0xd4>
 80099f4:	e7d4      	b.n	80099a0 <CellTemp_CalculateTemperature+0x48>
        return -127.0f;  // Return obvious error value
 80099f6:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8009a30 <CellTemp_CalculateTemperature+0xd8>
 80099fa:	4770      	bx	lr
        return 125.0f; // Return maximum temperature for very low resistance
 80099fc:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8009a28 <CellTemp_CalculateTemperature+0xd0>
}
 8009a00:	4770      	bx	lr
        temp_celsius = -40.0f;
 8009a02:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009a24 <CellTemp_CalculateTemperature+0xcc>
}
 8009a06:	bd08      	pop	{r3, pc}
 8009a08:	457ff000 	.word	0x457ff000
 8009a0c:	40533333 	.word	0x40533333
 8009a10:	40528f5c 	.word	0x40528f5c
 8009a14:	461c4000 	.word	0x461c4000
 8009a18:	4556b000 	.word	0x4556b000
 8009a1c:	3b5bcf0f 	.word	0x3b5bcf0f
 8009a20:	43889333 	.word	0x43889333
 8009a24:	c2200000 	.word	0xc2200000
 8009a28:	42fa0000 	.word	0x42fa0000
 8009a2c:	49742400 	.word	0x49742400
 8009a30:	c2fe0000 	.word	0xc2fe0000

08009a34 <CellTemp_MonitorTask>:
{
 8009a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	ed2d 8b02 	vpush	{d8}
    if (CellTemp_Init() != HAL_OK) {
 8009a3c:	f7ff fef2 	bl	8009824 <CellTemp_Init>
 8009a40:	4607      	mov	r7, r0
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f000 80d4 	beq.w	8009bf0 <CellTemp_MonitorTask+0x1bc>
            osDelay(1000);  // Wait 1 second (1000 ticks at 1ms tick rate)
 8009a48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009a4c:	f000 f9fc 	bl	8009e48 <osDelay>
        while(1) {
 8009a50:	e7fa      	b.n	8009a48 <CellTemp_MonitorTask+0x14>
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009a52:	3401      	adds	r4, #1
 8009a54:	b2e4      	uxtb	r4, r4
 8009a56:	2c06      	cmp	r4, #6
 8009a58:	d813      	bhi.n	8009a82 <CellTemp_MonitorTask+0x4e>
            if (CellTemp_IsADCEnabled(adc)) {
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f7ff fe3e 	bl	80096dc <CellTemp_IsADCEnabled>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d0f6      	beq.n	8009a52 <CellTemp_MonitorTask+0x1e>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009a64:	00e3      	lsls	r3, r4, #3
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	4aa3      	ldr	r2, [pc, #652]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009a6a:	f892 1541 	ldrb.w	r1, [r2, #1345]	@ 0x541
 8009a6e:	440b      	add	r3, r1
 8009a70:	b2db      	uxtb	r3, r3
                temp_state.thermistors[therm_idx].adc_accumulator = 0;
 8009a72:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009a76:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	6108      	str	r0, [r1, #16]
                temp_state.thermistors[therm_idx].sample_count = 0;
 8009a7e:	8288      	strh	r0, [r1, #20]
 8009a80:	e7e7      	b.n	8009a52 <CellTemp_MonitorTask+0x1e>
        for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 8009a82:	2600      	movs	r6, #0
 8009a84:	e02b      	b.n	8009ade <CellTemp_MonitorTask+0xaa>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009a86:	3401      	adds	r4, #1
 8009a88:	b2e4      	uxtb	r4, r4
 8009a8a:	2c06      	cmp	r4, #6
 8009a8c:	d822      	bhi.n	8009ad4 <CellTemp_MonitorTask+0xa0>
                if (CellTemp_IsADCEnabled(adc)) {
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f7ff fe24 	bl	80096dc <CellTemp_IsADCEnabled>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d0f6      	beq.n	8009a86 <CellTemp_MonitorTask+0x52>
                    uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009a98:	00e5      	lsls	r5, r4, #3
 8009a9a:	b2ed      	uxtb	r5, r5
 8009a9c:	4b96      	ldr	r3, [pc, #600]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009a9e:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8009aa2:	441d      	add	r5, r3
 8009aa4:	b2ed      	uxtb	r5, r5
                    uint16_t adc_value = CellTemp_ReadADC(adc_channels[adc]);
 8009aa6:	4b95      	ldr	r3, [pc, #596]	@ (8009cfc <CellTemp_MonitorTask+0x2c8>)
 8009aa8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009aac:	f7ff fefa 	bl	80098a4 <CellTemp_ReadADC>
                    if (adc_value >= 10) {  // Valid reading threshold
 8009ab0:	2809      	cmp	r0, #9
 8009ab2:	d9e8      	bls.n	8009a86 <CellTemp_MonitorTask+0x52>
                        therm->adc_accumulator += adc_value;
 8009ab4:	4a90      	ldr	r2, [pc, #576]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009ab6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009aba:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009abe:	6919      	ldr	r1, [r3, #16]
 8009ac0:	4408      	add	r0, r1
 8009ac2:	6118      	str	r0, [r3, #16]
                        therm->sample_count++;
 8009ac4:	8a9b      	ldrh	r3, [r3, #20]
 8009ac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aca:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8009ace:	3301      	adds	r3, #1
 8009ad0:	8293      	strh	r3, [r2, #20]
 8009ad2:	e7d8      	b.n	8009a86 <CellTemp_MonitorTask+0x52>
            osDelay(TEMP_SAMPLE_INTERVAL_MS);
 8009ad4:	200a      	movs	r0, #10
 8009ad6:	f000 f9b7 	bl	8009e48 <osDelay>
        for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 8009ada:	3601      	adds	r6, #1
 8009adc:	b2b6      	uxth	r6, r6
 8009ade:	2e0b      	cmp	r6, #11
 8009ae0:	d801      	bhi.n	8009ae6 <CellTemp_MonitorTask+0xb2>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009ae2:	463c      	mov	r4, r7
 8009ae4:	e7d1      	b.n	8009a8a <CellTemp_MonitorTask+0x56>
        uint32_t current_time = osKernelGetTickCount();
 8009ae6:	f000 f94b 	bl	8009d80 <osKernelGetTickCount>
 8009aea:	4606      	mov	r6, r0
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009aec:	463c      	mov	r4, r7
 8009aee:	e044      	b.n	8009b7a <CellTemp_MonitorTask+0x146>
                    therm->raw_adc = (uint16_t)(therm->adc_accumulator / therm->sample_count);
 8009af0:	4698      	mov	r8, r3
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009af8:	b298      	uxth	r0, r3
 8009afa:	f8a8 0008 	strh.w	r0, [r8, #8]
                    therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 8009afe:	f7ff ff2b 	bl	8009958 <CellTemp_CalculateTemperature>
 8009b02:	eeb0 8a40 	vmov.f32	s16, s0
 8009b06:	ed88 0a01 	vstr	s0, [r8, #4]
                    therm->last_read_time = current_time;
 8009b0a:	f8c8 600c 	str.w	r6, [r8, #12]
                    if (CellTemp_IsFaultDetectionEnabled(therm_idx)) {
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f7ff fdee 	bl	80096f0 <CellTemp_IsFaultDetectionEnabled>
 8009b14:	b378      	cbz	r0, 8009b76 <CellTemp_MonitorTask+0x142>
                        if (therm->temperature > -126.0f) {  // Valid temperature reading
 8009b16:	eddf 7a7a 	vldr	s15, [pc, #488]	@ 8009d00 <CellTemp_MonitorTask+0x2cc>
 8009b1a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b22:	dd15      	ble.n	8009b50 <CellTemp_MonitorTask+0x11c>
                            if (therm->temperature > TEMP_MAX_CELSIUS) {
 8009b24:	eddf 7a77 	vldr	s15, [pc, #476]	@ 8009d04 <CellTemp_MonitorTask+0x2d0>
 8009b28:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b30:	dc0a      	bgt.n	8009b48 <CellTemp_MonitorTask+0x114>
                            } else if (therm->temperature < TEMP_MIN_CELSIUS) {
 8009b32:	eefb 7a04 	vmov.f32	s15, #180	@ 0xc1a00000 -20.0
 8009b36:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3e:	d51a      	bpl.n	8009b76 <CellTemp_MonitorTask+0x142>
                                ErrorMgr_SetError(ERROR_UNDER_TEMP);
 8009b40:	2002      	movs	r0, #2
 8009b42:	f000 fdef 	bl	800a724 <ErrorMgr_SetError>
 8009b46:	e016      	b.n	8009b76 <CellTemp_MonitorTask+0x142>
                                ErrorMgr_SetError(ERROR_OVER_TEMP);
 8009b48:	2001      	movs	r0, #1
 8009b4a:	f000 fdeb 	bl	800a724 <ErrorMgr_SetError>
 8009b4e:	e012      	b.n	8009b76 <CellTemp_MonitorTask+0x142>
                            ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 8009b50:	2004      	movs	r0, #4
 8009b52:	f000 fde7 	bl	800a724 <ErrorMgr_SetError>
 8009b56:	e00e      	b.n	8009b76 <CellTemp_MonitorTask+0x142>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009b58:	00e3      	lsls	r3, r4, #3
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	4a66      	ldr	r2, [pc, #408]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009b5e:	f892 1541 	ldrb.w	r1, [r2, #1345]	@ 0x541
 8009b62:	440b      	add	r3, r1
 8009b64:	b2db      	uxtb	r3, r3
                temp_state.thermistors[therm_idx].temperature = -127.0f;
 8009b66:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009b6a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009b6e:	4866      	ldr	r0, [pc, #408]	@ (8009d08 <CellTemp_MonitorTask+0x2d4>)
 8009b70:	6048      	str	r0, [r1, #4]
                temp_state.thermistors[therm_idx].raw_adc = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	810b      	strh	r3, [r1, #8]
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009b76:	3401      	adds	r4, #1
 8009b78:	b2e4      	uxtb	r4, r4
 8009b7a:	2c06      	cmp	r4, #6
 8009b7c:	d828      	bhi.n	8009bd0 <CellTemp_MonitorTask+0x19c>
            if (CellTemp_IsADCEnabled(adc)) {
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff fdac 	bl	80096dc <CellTemp_IsADCEnabled>
 8009b84:	2800      	cmp	r0, #0
 8009b86:	d0e7      	beq.n	8009b58 <CellTemp_MonitorTask+0x124>
                uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 8009b88:	00e5      	lsls	r5, r4, #3
 8009b8a:	b2ed      	uxtb	r5, r5
 8009b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009b8e:	f893 2541 	ldrb.w	r2, [r3, #1345]	@ 0x541
 8009b92:	4415      	add	r5, r2
 8009b94:	b2ed      	uxtb	r5, r5
                if (therm->sample_count > 0) {
 8009b96:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8009b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b9e:	8a9a      	ldrh	r2, [r3, #20]
 8009ba0:	2a00      	cmp	r2, #0
 8009ba2:	d1a5      	bne.n	8009af0 <CellTemp_MonitorTask+0xbc>
                    therm->raw_adc = 0;
 8009ba4:	4b54      	ldr	r3, [pc, #336]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009ba6:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8009baa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8009bae:	2100      	movs	r1, #0
 8009bb0:	8111      	strh	r1, [r2, #8]
                    therm->temperature = -127.0f;
 8009bb2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8009bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bba:	4a53      	ldr	r2, [pc, #332]	@ (8009d08 <CellTemp_MonitorTask+0x2d4>)
 8009bbc:	605a      	str	r2, [r3, #4]
                    if (CellTemp_IsFaultDetectionEnabled(therm_idx)) {
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f7ff fd96 	bl	80096f0 <CellTemp_IsFaultDetectionEnabled>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d0d6      	beq.n	8009b76 <CellTemp_MonitorTask+0x142>
                        ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 8009bc8:	2004      	movs	r0, #4
 8009bca:	f000 fdab 	bl	800a724 <ErrorMgr_SetError>
 8009bce:	e7d2      	b.n	8009b76 <CellTemp_MonitorTask+0x142>
        if (temp_state.current_mux == 3 || temp_state.current_mux == 7) {
 8009bd0:	4b49      	ldr	r3, [pc, #292]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009bd2:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d039      	beq.n	8009c4e <CellTemp_MonitorTask+0x21a>
 8009bda:	2b07      	cmp	r3, #7
 8009bdc:	d039      	beq.n	8009c52 <CellTemp_MonitorTask+0x21e>
        temp_state.current_mux++;
 8009bde:	4a46      	ldr	r2, [pc, #280]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009be0:	f892 3541 	ldrb.w	r3, [r2, #1345]	@ 0x541
 8009be4:	3301      	adds	r3, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	f882 3541 	strb.w	r3, [r2, #1345]	@ 0x541
        if (temp_state.current_mux >= MUX_CHANNELS) {
 8009bec:	2b07      	cmp	r3, #7
 8009bee:	d832      	bhi.n	8009c56 <CellTemp_MonitorTask+0x222>
        CellTemp_SetMuxChannel(temp_state.current_mux);
 8009bf0:	4b41      	ldr	r3, [pc, #260]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009bf2:	f893 0541 	ldrb.w	r0, [r3, #1345]	@ 0x541
 8009bf6:	f7ff fe75 	bl	80098e4 <CellTemp_SetMuxChannel>
        for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009bfa:	463c      	mov	r4, r7
 8009bfc:	e72b      	b.n	8009a56 <CellTemp_MonitorTask+0x22>
                        uint8_t msg_idx = adc * 2;
 8009bfe:	0060      	lsls	r0, r4, #1
                        uint8_t start_therm_idx = adc * MUX_CHANNELS;
 8009c00:	00e1      	lsls	r1, r4, #3
                        CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 8009c02:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8009c06:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
 8009c0a:	f7ff fda9 	bl	8009760 <CellTemp_SendTemperatureMessage>
                        osDelay(2); // Small delay between messages
 8009c0e:	2002      	movs	r0, #2
 8009c10:	f000 f91a 	bl	8009e48 <osDelay>
            for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 8009c14:	3401      	adds	r4, #1
 8009c16:	b2e4      	uxtb	r4, r4
 8009c18:	2c06      	cmp	r4, #6
 8009c1a:	d8e0      	bhi.n	8009bde <CellTemp_MonitorTask+0x1aa>
                if (CellTemp_IsADCEnabled(adc)) {
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f7ff fd5d 	bl	80096dc <CellTemp_IsADCEnabled>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d0f6      	beq.n	8009c14 <CellTemp_MonitorTask+0x1e0>
                    if (temp_state.current_mux == 3) {
 8009c26:	4b34      	ldr	r3, [pc, #208]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009c28:	f893 3541 	ldrb.w	r3, [r3, #1345]	@ 0x541
 8009c2c:	2b03      	cmp	r3, #3
 8009c2e:	d0e6      	beq.n	8009bfe <CellTemp_MonitorTask+0x1ca>
                        uint8_t msg_idx = adc * 2 + 1;
 8009c30:	0060      	lsls	r0, r4, #1
 8009c32:	b2c0      	uxtb	r0, r0
 8009c34:	3001      	adds	r0, #1
                        uint8_t start_therm_idx = adc * MUX_CHANNELS + 4;
 8009c36:	00e1      	lsls	r1, r4, #3
 8009c38:	b2c9      	uxtb	r1, r1
 8009c3a:	3104      	adds	r1, #4
                        CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 8009c3c:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8009c40:	b2c0      	uxtb	r0, r0
 8009c42:	f7ff fd8d 	bl	8009760 <CellTemp_SendTemperatureMessage>
                        osDelay(2); // Small delay between messages
 8009c46:	2002      	movs	r0, #2
 8009c48:	f000 f8fe 	bl	8009e48 <osDelay>
 8009c4c:	e7e2      	b.n	8009c14 <CellTemp_MonitorTask+0x1e0>
 8009c4e:	463c      	mov	r4, r7
 8009c50:	e7e2      	b.n	8009c18 <CellTemp_MonitorTask+0x1e4>
 8009c52:	463c      	mov	r4, r7
 8009c54:	e7e0      	b.n	8009c18 <CellTemp_MonitorTask+0x1e4>
            temp_state.current_mux = 0;
 8009c56:	4613      	mov	r3, r2
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2541 	strb.w	r2, [r3, #1345]	@ 0x541
            temp_state.cycle_count++;
 8009c5e:	f8d3 2544 	ldr.w	r2, [r3, #1348]	@ 0x544
 8009c62:	3201      	adds	r2, #1
 8009c64:	f8c3 2544 	str.w	r2, [r3, #1348]	@ 0x544
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8009c68:	463c      	mov	r4, r7
            uint8_t any_sensor_fault = 0;
 8009c6a:	463d      	mov	r5, r7
            uint8_t any_under_temp = 0;
 8009c6c:	46b8      	mov	r8, r7
            uint8_t any_over_temp = 0;
 8009c6e:	463e      	mov	r6, r7
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8009c70:	e002      	b.n	8009c78 <CellTemp_MonitorTask+0x244>
                        any_sensor_fault = 1;
 8009c72:	2501      	movs	r5, #1
            for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 8009c74:	3401      	adds	r4, #1
 8009c76:	b2e4      	uxtb	r4, r4
 8009c78:	2c37      	cmp	r4, #55	@ 0x37
 8009c7a:	d82b      	bhi.n	8009cd4 <CellTemp_MonitorTask+0x2a0>
                if (CellTemp_IsADCEnabled(therm_adc) && CellTemp_IsFaultDetectionEnabled(i)) {
 8009c7c:	f3c4 00c7 	ubfx	r0, r4, #3, #8
 8009c80:	f7ff fd2c 	bl	80096dc <CellTemp_IsADCEnabled>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d0f5      	beq.n	8009c74 <CellTemp_MonitorTask+0x240>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7ff fd31 	bl	80096f0 <CellTemp_IsFaultDetectionEnabled>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d0f0      	beq.n	8009c74 <CellTemp_MonitorTask+0x240>
                    float temp = temp_state.thermistors[i].temperature;
 8009c92:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8009c96:	4b18      	ldr	r3, [pc, #96]	@ (8009cf8 <CellTemp_MonitorTask+0x2c4>)
 8009c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c9c:	edd3 7a01 	vldr	s15, [r3, #4]
                    if (temp <= -126.0f) {
 8009ca0:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8009d00 <CellTemp_MonitorTask+0x2cc>
 8009ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cac:	d9e1      	bls.n	8009c72 <CellTemp_MonitorTask+0x23e>
                    } else if (temp > TEMP_MAX_CELSIUS) {
 8009cae:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8009d04 <CellTemp_MonitorTask+0x2d0>
 8009cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cba:	dc09      	bgt.n	8009cd0 <CellTemp_MonitorTask+0x29c>
                    } else if (temp < TEMP_MIN_CELSIUS) {
 8009cbc:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 8009cc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc8:	d5d4      	bpl.n	8009c74 <CellTemp_MonitorTask+0x240>
                        any_under_temp = 1;
 8009cca:	f04f 0801 	mov.w	r8, #1
 8009cce:	e7d1      	b.n	8009c74 <CellTemp_MonitorTask+0x240>
                        any_over_temp = 1;
 8009cd0:	2601      	movs	r6, #1
 8009cd2:	e7cf      	b.n	8009c74 <CellTemp_MonitorTask+0x240>
            if (!any_over_temp) {
 8009cd4:	b146      	cbz	r6, 8009ce8 <CellTemp_MonitorTask+0x2b4>
            if (!any_under_temp) {
 8009cd6:	f1b8 0f00 	cmp.w	r8, #0
 8009cda:	d009      	beq.n	8009cf0 <CellTemp_MonitorTask+0x2bc>
            if (!any_sensor_fault) {
 8009cdc:	2d00      	cmp	r5, #0
 8009cde:	d187      	bne.n	8009bf0 <CellTemp_MonitorTask+0x1bc>
                ErrorMgr_ClearError(ERROR_TEMP_SENSOR_FAULT);
 8009ce0:	2004      	movs	r0, #4
 8009ce2:	f000 fd45 	bl	800a770 <ErrorMgr_ClearError>
 8009ce6:	e783      	b.n	8009bf0 <CellTemp_MonitorTask+0x1bc>
                ErrorMgr_ClearError(ERROR_OVER_TEMP);
 8009ce8:	2001      	movs	r0, #1
 8009cea:	f000 fd41 	bl	800a770 <ErrorMgr_ClearError>
 8009cee:	e7f2      	b.n	8009cd6 <CellTemp_MonitorTask+0x2a2>
                ErrorMgr_ClearError(ERROR_UNDER_TEMP);
 8009cf0:	2002      	movs	r0, #2
 8009cf2:	f000 fd3d 	bl	800a770 <ErrorMgr_ClearError>
 8009cf6:	e7f1      	b.n	8009cdc <CellTemp_MonitorTask+0x2a8>
 8009cf8:	20000124 	.word	0x20000124
 8009cfc:	08010cf4 	.word	0x08010cf4
 8009d00:	c2fc0000 	.word	0xc2fc0000
 8009d04:	42700000 	.word	0x42700000
 8009d08:	c2fe0000 	.word	0xc2fe0000

08009d0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009d0c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8009d0e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8009d12:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009d14:	f006 fa8a 	bl	801022c <xTaskGetSchedulerState>
 8009d18:	2801      	cmp	r0, #1
 8009d1a:	d100      	bne.n	8009d1e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8009d1c:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8009d1e:	f001 fae1 	bl	800b2e4 <xPortSysTickHandler>
}
 8009d22:	e7fb      	b.n	8009d1c <SysTick_Handler+0x10>

08009d24 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d24:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d28:	b92b      	cbnz	r3, 8009d36 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d2a:	4b06      	ldr	r3, [pc, #24]	@ (8009d44 <osKernelInitialize+0x20>)
 8009d2c:	6818      	ldr	r0, [r3, #0]
 8009d2e:	b928      	cbnz	r0, 8009d3c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d30:	2201      	movs	r2, #1
 8009d32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d34:	4770      	bx	lr
    stat = osErrorISR;
 8009d36:	f06f 0005 	mvn.w	r0, #5
 8009d3a:	4770      	bx	lr
    } else {
      stat = osError;
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20000d28 	.word	0x20000d28

08009d48 <osKernelStart>:
 8009d48:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d4c:	b973      	cbnz	r3, 8009d6c <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d78 <osKernelStart+0x30>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d10d      	bne.n	8009d72 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 8009d56:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d58:	2400      	movs	r4, #0
 8009d5a:	4b08      	ldr	r3, [pc, #32]	@ (8009d7c <osKernelStart+0x34>)
 8009d5c:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d5e:	4b06      	ldr	r3, [pc, #24]	@ (8009d78 <osKernelStart+0x30>)
 8009d60:	2202      	movs	r2, #2
 8009d62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d64:	f005 ffb0 	bl	800fcc8 <vTaskStartScheduler>
      stat = osOK;
 8009d68:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8009d6a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8009d6c:	f06f 0005 	mvn.w	r0, #5
 8009d70:	4770      	bx	lr
      stat = osError;
 8009d72:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009d76:	4770      	bx	lr
 8009d78:	20000d28 	.word	0x20000d28
 8009d7c:	e000ed00 	.word	0xe000ed00

08009d80 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009d80:	b508      	push	{r3, lr}
 8009d82:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 8009d86:	b113      	cbz	r3, 8009d8e <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 8009d88:	f005 fff8 	bl	800fd7c <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 8009d8c:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 8009d8e:	f005 ffef 	bl	800fd70 <xTaskGetTickCount>
  return (ticks);
 8009d92:	e7fb      	b.n	8009d8c <osKernelGetTickCount+0xc>

08009d94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d96:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d98:	2400      	movs	r4, #0
 8009d9a:	9405      	str	r4, [sp, #20]
 8009d9c:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009da0:	bb04      	cbnz	r4, 8009de4 <osThreadNew+0x50>
 8009da2:	b1f8      	cbz	r0, 8009de4 <osThreadNew+0x50>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009da4:	2a00      	cmp	r2, #0
 8009da6:	d034      	beq.n	8009e12 <osThreadNew+0x7e>
      if (attr->name != NULL) {
 8009da8:	6815      	ldr	r5, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009daa:	6993      	ldr	r3, [r2, #24]
 8009dac:	b12b      	cbz	r3, 8009dba <osThreadNew+0x26>
        prio = (UBaseType_t)attr->priority;
 8009dae:	461e      	mov	r6, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009db0:	3b01      	subs	r3, #1
 8009db2:	2b37      	cmp	r3, #55	@ 0x37
 8009db4:	d902      	bls.n	8009dbc <osThreadNew+0x28>
        return (NULL);
 8009db6:	2000      	movs	r0, #0
 8009db8:	e015      	b.n	8009de6 <osThreadNew+0x52>
    prio  = (UBaseType_t)osPriorityNormal;
 8009dba:	2618      	movs	r6, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009dbc:	6853      	ldr	r3, [r2, #4]
 8009dbe:	f013 0f01 	tst.w	r3, #1
 8009dc2:	d13f      	bne.n	8009e44 <osThreadNew+0xb0>
      }

      if (attr->stack_size > 0U) {
 8009dc4:	6954      	ldr	r4, [r2, #20]
 8009dc6:	b184      	cbz	r4, 8009dea <osThreadNew+0x56>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009dc8:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009dcc:	6893      	ldr	r3, [r2, #8]
 8009dce:	b12b      	cbz	r3, 8009ddc <osThreadNew+0x48>
 8009dd0:	68d7      	ldr	r7, [r2, #12]
 8009dd2:	2f5b      	cmp	r7, #91	@ 0x5b
 8009dd4:	d902      	bls.n	8009ddc <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009dd6:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009dd8:	b107      	cbz	r7, 8009ddc <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009dda:	b984      	cbnz	r4, 8009dfe <osThreadNew+0x6a>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ddc:	b143      	cbz	r3, 8009df0 <osThreadNew+0x5c>
    mem  = -1;
 8009dde:	f04f 33ff 	mov.w	r3, #4294967295
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8009de2:	b30b      	cbz	r3, 8009e28 <osThreadNew+0x94>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009de4:	9805      	ldr	r0, [sp, #20]
}
 8009de6:	b007      	add	sp, #28
 8009de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8009dea:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8009dee:	e7ed      	b.n	8009dcc <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009df0:	68d3      	ldr	r3, [r2, #12]
 8009df2:	b9a3      	cbnz	r3, 8009e1e <osThreadNew+0x8a>
 8009df4:	6913      	ldr	r3, [r2, #16]
 8009df6:	b1ab      	cbz	r3, 8009e24 <osThreadNew+0x90>
    mem  = -1;
 8009df8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dfc:	e7f1      	b.n	8009de2 <osThreadNew+0x4e>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dfe:	9302      	str	r3, [sp, #8]
 8009e00:	9701      	str	r7, [sp, #4]
 8009e02:	9600      	str	r6, [sp, #0]
 8009e04:	460b      	mov	r3, r1
 8009e06:	4662      	mov	r2, ip
 8009e08:	4629      	mov	r1, r5
 8009e0a:	f005 feef 	bl	800fbec <xTaskCreateStatic>
 8009e0e:	9005      	str	r0, [sp, #20]
 8009e10:	e7e8      	b.n	8009de4 <osThreadNew+0x50>
    name = NULL;
 8009e12:	4615      	mov	r5, r2
      mem = 0;
 8009e14:	2300      	movs	r3, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8009e16:	2618      	movs	r6, #24
    stack = configMINIMAL_STACK_SIZE;
 8009e18:	f04f 0c80 	mov.w	ip, #128	@ 0x80
 8009e1c:	e7e1      	b.n	8009de2 <osThreadNew+0x4e>
    mem  = -1;
 8009e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e22:	e7de      	b.n	8009de2 <osThreadNew+0x4e>
          mem = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e7dc      	b.n	8009de2 <osThreadNew+0x4e>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e28:	ab05      	add	r3, sp, #20
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	9600      	str	r6, [sp, #0]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	fa1f f28c 	uxth.w	r2, ip
 8009e34:	4629      	mov	r1, r5
 8009e36:	f005 ff14 	bl	800fc62 <xTaskCreate>
 8009e3a:	2801      	cmp	r0, #1
 8009e3c:	d0d2      	beq.n	8009de4 <osThreadNew+0x50>
            hTask = NULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9305      	str	r3, [sp, #20]
 8009e42:	e7cf      	b.n	8009de4 <osThreadNew+0x50>
        return (NULL);
 8009e44:	2000      	movs	r0, #0
 8009e46:	e7ce      	b.n	8009de6 <osThreadNew+0x52>

08009e48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009e48:	b508      	push	{r3, lr}
 8009e4a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e4e:	b933      	cbnz	r3, 8009e5e <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009e50:	b908      	cbnz	r0, 8009e56 <osDelay+0xe>
    stat = osOK;
 8009e52:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8009e54:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8009e56:	f006 f8a1 	bl	800ff9c <vTaskDelay>
    stat = osOK;
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	e7fa      	b.n	8009e54 <osDelay+0xc>
    stat = osErrorISR;
 8009e5e:	f06f 0005 	mvn.w	r0, #5
 8009e62:	e7f7      	b.n	8009e54 <osDelay+0xc>

08009e64 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8009e6a:	2e00      	cmp	r6, #0
 8009e6c:	d13e      	bne.n	8009eec <osMutexNew+0x88>
 8009e6e:	4604      	mov	r4, r0
    if (attr != NULL) {
 8009e70:	b308      	cbz	r0, 8009eb6 <osMutexNew+0x52>
      type = attr->attr_bits;
 8009e72:	6843      	ldr	r3, [r0, #4]
    } else {
      type = 0U;
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009e74:	f013 0601 	ands.w	r6, r3, #1
 8009e78:	d000      	beq.n	8009e7c <osMutexNew+0x18>
      rmtx = 1U;
 8009e7a:	2601      	movs	r6, #1
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009e7c:	f013 0f08 	tst.w	r3, #8
 8009e80:	d137      	bne.n	8009ef2 <osMutexNew+0x8e>
      mem = -1;

      if (attr != NULL) {
 8009e82:	b354      	cbz	r4, 8009eda <osMutexNew+0x76>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009e84:	68a1      	ldr	r1, [r4, #8]
 8009e86:	b111      	cbz	r1, 8009e8e <osMutexNew+0x2a>
 8009e88:	68e3      	ldr	r3, [r4, #12]
 8009e8a:	2b4f      	cmp	r3, #79	@ 0x4f
 8009e8c:	d81a      	bhi.n	8009ec4 <osMutexNew+0x60>
          mem = 1;
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009e8e:	b1a1      	cbz	r1, 8009eba <osMutexNew+0x56>
      mem = -1;
 8009e90:	f04f 33ff 	mov.w	r3, #4294967295
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009e94:	bb7b      	cbnz	r3, 8009ef6 <osMutexNew+0x92>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009e96:	b326      	cbz	r6, 8009ee2 <osMutexNew+0x7e>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009e98:	2004      	movs	r0, #4
 8009e9a:	f001 fd81 	bl	800b9a0 <xQueueCreateMutex>
 8009e9e:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009ea0:	b32d      	cbz	r5, 8009eee <osMutexNew+0x8a>
        if (attr != NULL) {
 8009ea2:	b104      	cbz	r4, 8009ea6 <osMutexNew+0x42>
          name = attr->name;
 8009ea4:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8009ea6:	4621      	mov	r1, r4
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	f002 f86d 	bl	800bf88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009eae:	b1f6      	cbz	r6, 8009eee <osMutexNew+0x8a>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009eb0:	f045 0501 	orr.w	r5, r5, #1
 8009eb4:	e01b      	b.n	8009eee <osMutexNew+0x8a>
      type = 0U;
 8009eb6:	4633      	mov	r3, r6
 8009eb8:	e7e0      	b.n	8009e7c <osMutexNew+0x18>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009eba:	68e3      	ldr	r3, [r4, #12]
 8009ebc:	b17b      	cbz	r3, 8009ede <osMutexNew+0x7a>
      mem = -1;
 8009ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec2:	e7e7      	b.n	8009e94 <osMutexNew+0x30>
          if (rmtx != 0U) {
 8009ec4:	b126      	cbz	r6, 8009ed0 <osMutexNew+0x6c>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009ec6:	2004      	movs	r0, #4
 8009ec8:	f001 fd75 	bl	800b9b6 <xQueueCreateMutexStatic>
 8009ecc:	4605      	mov	r5, r0
 8009ece:	e7e7      	b.n	8009ea0 <osMutexNew+0x3c>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	f001 fd70 	bl	800b9b6 <xQueueCreateMutexStatic>
 8009ed6:	4605      	mov	r5, r0
 8009ed8:	e7e2      	b.n	8009ea0 <osMutexNew+0x3c>
        mem = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	e7da      	b.n	8009e94 <osMutexNew+0x30>
            mem = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	e7d8      	b.n	8009e94 <osMutexNew+0x30>
              hMutex = xSemaphoreCreateMutex ();
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	f001 fd5c 	bl	800b9a0 <xQueueCreateMutex>
 8009ee8:	4605      	mov	r5, r0
 8009eea:	e7d9      	b.n	8009ea0 <osMutexNew+0x3c>
  hMutex = NULL;
 8009eec:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8009eee:	4628      	mov	r0, r5
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8009ef2:	2500      	movs	r5, #0
 8009ef4:	e7fb      	b.n	8009eee <osMutexNew+0x8a>
 8009ef6:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8009ef8:	e7f9      	b.n	8009eee <osMutexNew+0x8a>

08009efa <osMutexAcquire>:
 8009efa:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8009efe:	b9da      	cbnz	r2, 8009f38 <osMutexAcquire+0x3e>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009f00:	b510      	push	{r4, lr}
 8009f02:	4603      	mov	r3, r0
 8009f04:	460c      	mov	r4, r1
 8009f06:	f020 0001 	bic.w	r0, r0, #1
 8009f0a:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d915      	bls.n	8009f3e <osMutexAcquire+0x44>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8009f12:	b141      	cbz	r1, 8009f26 <osMutexAcquire+0x2c>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009f14:	4621      	mov	r1, r4
 8009f16:	f001 ffbf 	bl	800be98 <xQueueTakeMutexRecursive>
 8009f1a:	2801      	cmp	r0, #1
 8009f1c:	d012      	beq.n	8009f44 <osMutexAcquire+0x4a>
        if (timeout != 0U) {
 8009f1e:	b19c      	cbz	r4, 8009f48 <osMutexAcquire+0x4e>
          stat = osErrorTimeout;
 8009f20:	f06f 0001 	mvn.w	r0, #1
 8009f24:	e00f      	b.n	8009f46 <osMutexAcquire+0x4c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009f26:	4621      	mov	r1, r4
 8009f28:	f001 fee3 	bl	800bcf2 <xQueueSemaphoreTake>
 8009f2c:	2801      	cmp	r0, #1
 8009f2e:	d00e      	beq.n	8009f4e <osMutexAcquire+0x54>
        if (timeout != 0U) {
 8009f30:	b17c      	cbz	r4, 8009f52 <osMutexAcquire+0x58>
          stat = osErrorTimeout;
 8009f32:	f06f 0001 	mvn.w	r0, #1
 8009f36:	e006      	b.n	8009f46 <osMutexAcquire+0x4c>
    stat = osErrorISR;
 8009f38:	f06f 0005 	mvn.w	r0, #5
      }
    }
  }

  return (stat);
}
 8009f3c:	4770      	bx	lr
    stat = osErrorParameter;
 8009f3e:	f06f 0003 	mvn.w	r0, #3
 8009f42:	e000      	b.n	8009f46 <osMutexAcquire+0x4c>
  stat = osOK;
 8009f44:	2000      	movs	r0, #0
}
 8009f46:	bd10      	pop	{r4, pc}
          stat = osErrorResource;
 8009f48:	f06f 0002 	mvn.w	r0, #2
 8009f4c:	e7fb      	b.n	8009f46 <osMutexAcquire+0x4c>
  stat = osOK;
 8009f4e:	2000      	movs	r0, #0
 8009f50:	e7f9      	b.n	8009f46 <osMutexAcquire+0x4c>
          stat = osErrorResource;
 8009f52:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009f56:	e7f6      	b.n	8009f46 <osMutexAcquire+0x4c>

08009f58 <osMutexRelease>:
 8009f58:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8009f5c:	b9ba      	cbnz	r2, 8009f8e <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8009f5e:	b508      	push	{r3, lr}
 8009f60:	4603      	mov	r3, r0
 8009f62:	f020 0001 	bic.w	r0, r0, #1
 8009f66:	f003 0101 	and.w	r1, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d912      	bls.n	8009f94 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8009f6e:	b129      	cbz	r1, 8009f7c <osMutexRelease+0x24>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009f70:	f001 fd30 	bl	800b9d4 <xQueueGiveMutexRecursive>
 8009f74:	2801      	cmp	r0, #1
 8009f76:	d110      	bne.n	8009f9a <osMutexRelease+0x42>
  stat = osOK;
 8009f78:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009f7a:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4619      	mov	r1, r3
 8009f82:	f001 fc3d 	bl	800b800 <xQueueGenericSend>
 8009f86:	2801      	cmp	r0, #1
 8009f88:	d10a      	bne.n	8009fa0 <osMutexRelease+0x48>
  stat = osOK;
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e7f5      	b.n	8009f7a <osMutexRelease+0x22>
    stat = osErrorISR;
 8009f8e:	f06f 0005 	mvn.w	r0, #5
}
 8009f92:	4770      	bx	lr
    stat = osErrorParameter;
 8009f94:	f06f 0003 	mvn.w	r0, #3
 8009f98:	e7ef      	b.n	8009f7a <osMutexRelease+0x22>
        stat = osErrorResource;
 8009f9a:	f06f 0002 	mvn.w	r0, #2
 8009f9e:	e7ec      	b.n	8009f7a <osMutexRelease+0x22>
        stat = osErrorResource;
 8009fa0:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009fa4:	e7e9      	b.n	8009f7a <osMutexRelease+0x22>

08009fa6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009fa6:	b570      	push	{r4, r5, r6, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d148      	bne.n	800a044 <osSemaphoreNew+0x9e>
 8009fb2:	460e      	mov	r6, r1
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d048      	beq.n	800a04c <osSemaphoreNew+0xa6>
 8009fba:	4288      	cmp	r0, r1
 8009fbc:	d348      	bcc.n	800a050 <osSemaphoreNew+0xaa>
    mem = -1;

    if (attr != NULL) {
 8009fbe:	b14a      	cbz	r2, 8009fd4 <osSemaphoreNew+0x2e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009fc0:	6895      	ldr	r5, [r2, #8]
 8009fc2:	b115      	cbz	r5, 8009fca <osSemaphoreNew+0x24>
 8009fc4:	68d3      	ldr	r3, [r2, #12]
 8009fc6:	2b4f      	cmp	r3, #79	@ 0x4f
 8009fc8:	d814      	bhi.n	8009ff4 <osSemaphoreNew+0x4e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009fca:	2d00      	cmp	r5, #0
 8009fcc:	d142      	bne.n	800a054 <osSemaphoreNew+0xae>
 8009fce:	68e3      	ldr	r3, [r4, #12]
 8009fd0:	b10b      	cbz	r3, 8009fd6 <osSemaphoreNew+0x30>
 8009fd2:	e038      	b.n	800a046 <osSemaphoreNew+0xa0>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8009fd4:	2300      	movs	r3, #0
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8009fd6:	2801      	cmp	r0, #1
 8009fd8:	d00e      	beq.n	8009ff8 <osSemaphoreNew+0x52>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 8009fda:	bb6b      	cbnz	r3, 800a038 <osSemaphoreNew+0x92>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009fdc:	4631      	mov	r1, r6
 8009fde:	f001 fbf1 	bl	800b7c4 <xQueueCreateCountingSemaphore>
 8009fe2:	4605      	mov	r5, r0
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009fe4:	b37d      	cbz	r5, 800a046 <osSemaphoreNew+0xa0>
        if (attr != NULL) {
 8009fe6:	b104      	cbz	r4, 8009fea <osSemaphoreNew+0x44>
          name = attr->name;
 8009fe8:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009fea:	4621      	mov	r1, r4
 8009fec:	4628      	mov	r0, r5
 8009fee:	f001 ffcb 	bl	800bf88 <vQueueAddToRegistry>
 8009ff2:	e028      	b.n	800a046 <osSemaphoreNew+0xa0>
        mem = 1;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e7ee      	b.n	8009fd6 <osSemaphoreNew+0x30>
        if (mem == 1) {
 8009ff8:	b9ab      	cbnz	r3, 800a026 <osSemaphoreNew+0x80>
            hSemaphore = xSemaphoreCreateBinary();
 8009ffa:	2203      	movs	r2, #3
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	2001      	movs	r0, #1
 800a000:	f001 fb99 	bl	800b736 <xQueueGenericCreate>
 800a004:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a006:	b1f5      	cbz	r5, 800a046 <osSemaphoreNew+0xa0>
 800a008:	2e00      	cmp	r6, #0
 800a00a:	d0eb      	beq.n	8009fe4 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a00c:	2300      	movs	r3, #0
 800a00e:	461a      	mov	r2, r3
 800a010:	4619      	mov	r1, r3
 800a012:	4628      	mov	r0, r5
 800a014:	f001 fbf4 	bl	800b800 <xQueueGenericSend>
 800a018:	2801      	cmp	r0, #1
 800a01a:	d0e3      	beq.n	8009fe4 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800a01c:	4628      	mov	r0, r5
 800a01e:	f001 ffdd 	bl	800bfdc <vQueueDelete>
            hSemaphore = NULL;
 800a022:	2500      	movs	r5, #0
 800a024:	e00f      	b.n	800a046 <osSemaphoreNew+0xa0>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	2203      	movs	r2, #3
 800a02a:	9200      	str	r2, [sp, #0]
 800a02c:	2200      	movs	r2, #0
 800a02e:	4611      	mov	r1, r2
 800a030:	f001 fb37 	bl	800b6a2 <xQueueGenericCreateStatic>
 800a034:	4605      	mov	r5, r0
 800a036:	e7e6      	b.n	800a006 <osSemaphoreNew+0x60>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a038:	68a2      	ldr	r2, [r4, #8]
 800a03a:	4631      	mov	r1, r6
 800a03c:	f001 fb9f 	bl	800b77e <xQueueCreateCountingSemaphoreStatic>
 800a040:	4605      	mov	r5, r0
 800a042:	e7cf      	b.n	8009fe4 <osSemaphoreNew+0x3e>
  hSemaphore = NULL;
 800a044:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800a046:	4628      	mov	r0, r5
 800a048:	b002      	add	sp, #8
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800a04c:	2500      	movs	r5, #0
 800a04e:	e7fa      	b.n	800a046 <osSemaphoreNew+0xa0>
 800a050:	2500      	movs	r5, #0
 800a052:	e7f8      	b.n	800a046 <osSemaphoreNew+0xa0>
 800a054:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 800a056:	e7f6      	b.n	800a046 <osSemaphoreNew+0xa0>

0800a058 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a058:	b320      	cbz	r0, 800a0a4 <osSemaphoreAcquire+0x4c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a05a:	b510      	push	{r4, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	460c      	mov	r4, r1
 800a060:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a064:	b1b3      	cbz	r3, 800a094 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800a066:	bb01      	cbnz	r1, 800a0aa <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800a068:	2100      	movs	r1, #0
 800a06a:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a06c:	aa01      	add	r2, sp, #4
 800a06e:	f001 ff33 	bl	800bed8 <xQueueReceiveFromISR>
 800a072:	2801      	cmp	r0, #1
 800a074:	d11c      	bne.n	800a0b0 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a076:	9801      	ldr	r0, [sp, #4]
 800a078:	b150      	cbz	r0, 800a090 <osSemaphoreAcquire+0x38>
 800a07a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a07e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a082:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800a08e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a090:	b002      	add	sp, #8
 800a092:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a094:	f001 fe2d 	bl	800bcf2 <xQueueSemaphoreTake>
 800a098:	2801      	cmp	r0, #1
 800a09a:	d00c      	beq.n	800a0b6 <osSemaphoreAcquire+0x5e>
      if (timeout != 0U) {
 800a09c:	b16c      	cbz	r4, 800a0ba <osSemaphoreAcquire+0x62>
        stat = osErrorTimeout;
 800a09e:	f06f 0001 	mvn.w	r0, #1
 800a0a2:	e7f5      	b.n	800a090 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 800a0a4:	f06f 0003 	mvn.w	r0, #3
}
 800a0a8:	4770      	bx	lr
      stat = osErrorParameter;
 800a0aa:	f06f 0003 	mvn.w	r0, #3
 800a0ae:	e7ef      	b.n	800a090 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800a0b0:	f06f 0002 	mvn.w	r0, #2
 800a0b4:	e7ec      	b.n	800a090 <osSemaphoreAcquire+0x38>
  stat = osOK;
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e7ea      	b.n	800a090 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 800a0ba:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800a0be:	e7e7      	b.n	800a090 <osSemaphoreAcquire+0x38>

0800a0c0 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800a0c0:	b320      	cbz	r0, 800a10c <osSemaphoreRelease+0x4c>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a0c2:	b500      	push	{lr}
 800a0c4:	b083      	sub	sp, #12
 800a0c6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800a0ca:	b1a3      	cbz	r3, 800a0f6 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a0d0:	a901      	add	r1, sp, #4
 800a0d2:	f001 fd06 	bl	800bae2 <xQueueGiveFromISR>
 800a0d6:	2801      	cmp	r0, #1
 800a0d8:	d11b      	bne.n	800a112 <osSemaphoreRelease+0x52>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800a0da:	9801      	ldr	r0, [sp, #4]
 800a0dc:	b198      	cbz	r0, 800a106 <osSemaphoreRelease+0x46>
 800a0de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a0e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800a0f2:	2000      	movs	r0, #0
 800a0f4:	e007      	b.n	800a106 <osSemaphoreRelease+0x46>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	f001 fb80 	bl	800b800 <xQueueGenericSend>
 800a100:	2801      	cmp	r0, #1
 800a102:	d109      	bne.n	800a118 <osSemaphoreRelease+0x58>
  stat = osOK;
 800a104:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 800a106:	b003      	add	sp, #12
 800a108:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 800a10c:	f06f 0003 	mvn.w	r0, #3
}
 800a110:	4770      	bx	lr
      stat = osErrorResource;
 800a112:	f06f 0002 	mvn.w	r0, #2
 800a116:	e7f6      	b.n	800a106 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800a118:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800a11c:	e7f3      	b.n	800a106 <osSemaphoreRelease+0x46>

0800a11e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a11e:	b570      	push	{r4, r5, r6, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a126:	2b00      	cmp	r3, #0
 800a128:	d13a      	bne.n	800a1a0 <osMessageQueueNew+0x82>
 800a12a:	4614      	mov	r4, r2
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d03b      	beq.n	800a1a8 <osMessageQueueNew+0x8a>
 800a130:	2900      	cmp	r1, #0
 800a132:	d03b      	beq.n	800a1ac <osMessageQueueNew+0x8e>
    mem = -1;

    if (attr != NULL) {
 800a134:	b36a      	cbz	r2, 800a192 <osMessageQueueNew+0x74>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a136:	6893      	ldr	r3, [r2, #8]
 800a138:	b14b      	cbz	r3, 800a14e <osMessageQueueNew+0x30>
 800a13a:	68d2      	ldr	r2, [r2, #12]
 800a13c:	2a4f      	cmp	r2, #79	@ 0x4f
 800a13e:	d906      	bls.n	800a14e <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a140:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a142:	b122      	cbz	r2, 800a14e <osMessageQueueNew+0x30>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a144:	fb01 f500 	mul.w	r5, r1, r0
 800a148:	6966      	ldr	r6, [r4, #20]
 800a14a:	42ae      	cmp	r6, r5
 800a14c:	d21b      	bcs.n	800a186 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a14e:	b173      	cbz	r3, 800a16e <osMessageQueueNew+0x50>
    mem = -1;
 800a150:	f04f 33ff 	mov.w	r3, #4294967295
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 800a154:	bb63      	cbnz	r3, 800a1b0 <osMessageQueueNew+0x92>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a156:	2200      	movs	r2, #0
 800a158:	f001 faed 	bl	800b736 <xQueueGenericCreate>
 800a15c:	4605      	mov	r5, r0
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a15e:	b305      	cbz	r5, 800a1a2 <osMessageQueueNew+0x84>
      if (attr != NULL) {
 800a160:	b104      	cbz	r4, 800a164 <osMessageQueueNew+0x46>
        name = attr->name;
 800a162:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 800a164:	4621      	mov	r1, r4
 800a166:	4628      	mov	r0, r5
 800a168:	f001 ff0e 	bl	800bf88 <vQueueAddToRegistry>
 800a16c:	e019      	b.n	800a1a2 <osMessageQueueNew+0x84>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a16e:	68e3      	ldr	r3, [r4, #12]
 800a170:	b98b      	cbnz	r3, 800a196 <osMessageQueueNew+0x78>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a172:	6923      	ldr	r3, [r4, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a174:	b113      	cbz	r3, 800a17c <osMessageQueueNew+0x5e>
    mem = -1;
 800a176:	f04f 33ff 	mov.w	r3, #4294967295
 800a17a:	e7eb      	b.n	800a154 <osMessageQueueNew+0x36>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a17c:	6963      	ldr	r3, [r4, #20]
 800a17e:	b16b      	cbz	r3, 800a19c <osMessageQueueNew+0x7e>
    mem = -1;
 800a180:	f04f 33ff 	mov.w	r3, #4294967295
 800a184:	e7e6      	b.n	800a154 <osMessageQueueNew+0x36>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a186:	2500      	movs	r5, #0
 800a188:	9500      	str	r5, [sp, #0]
 800a18a:	f001 fa8a 	bl	800b6a2 <xQueueGenericCreateStatic>
 800a18e:	4605      	mov	r5, r0
 800a190:	e7e5      	b.n	800a15e <osMessageQueueNew+0x40>
      mem = 0;
 800a192:	2300      	movs	r3, #0
 800a194:	e7de      	b.n	800a154 <osMessageQueueNew+0x36>
    mem = -1;
 800a196:	f04f 33ff 	mov.w	r3, #4294967295
 800a19a:	e7db      	b.n	800a154 <osMessageQueueNew+0x36>
          mem = 0;
 800a19c:	2300      	movs	r3, #0
 800a19e:	e7d9      	b.n	800a154 <osMessageQueueNew+0x36>
  hQueue = NULL;
 800a1a0:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	b002      	add	sp, #8
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 800a1a8:	2500      	movs	r5, #0
 800a1aa:	e7fa      	b.n	800a1a2 <osMessageQueueNew+0x84>
 800a1ac:	2500      	movs	r5, #0
 800a1ae:	e7f8      	b.n	800a1a2 <osMessageQueueNew+0x84>
 800a1b0:	2500      	movs	r5, #0
  return ((osMessageQueueId_t)hQueue);
 800a1b2:	e7f6      	b.n	800a1a2 <osMessageQueueNew+0x84>

0800a1b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a1b4:	b510      	push	{r4, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	461c      	mov	r4, r3
 800a1ba:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a1be:	b1c3      	cbz	r3, 800a1f2 <osMessageQueuePut+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a1c0:	b318      	cbz	r0, 800a20a <osMessageQueuePut+0x56>
 800a1c2:	b329      	cbz	r1, 800a210 <osMessageQueuePut+0x5c>
 800a1c4:	bb3c      	cbnz	r4, 800a216 <osMessageQueuePut+0x62>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a1ca:	aa01      	add	r2, sp, #4
 800a1cc:	f001 fc22 	bl	800ba14 <xQueueGenericSendFromISR>
 800a1d0:	2801      	cmp	r0, #1
 800a1d2:	d123      	bne.n	800a21c <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a1d4:	9801      	ldr	r0, [sp, #4]
 800a1d6:	b150      	cbz	r0, 800a1ee <osMessageQueuePut+0x3a>
 800a1d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a1dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800a1ec:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a1ee:	b002      	add	sp, #8
 800a1f0:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a1f2:	b1b0      	cbz	r0, 800a222 <osMessageQueuePut+0x6e>
 800a1f4:	b1c1      	cbz	r1, 800a228 <osMessageQueuePut+0x74>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	f001 fb01 	bl	800b800 <xQueueGenericSend>
 800a1fe:	2801      	cmp	r0, #1
 800a200:	d015      	beq.n	800a22e <osMessageQueuePut+0x7a>
        if (timeout != 0U) {
 800a202:	b1b4      	cbz	r4, 800a232 <osMessageQueuePut+0x7e>
          stat = osErrorTimeout;
 800a204:	f06f 0001 	mvn.w	r0, #1
 800a208:	e7f1      	b.n	800a1ee <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 800a20a:	f06f 0003 	mvn.w	r0, #3
 800a20e:	e7ee      	b.n	800a1ee <osMessageQueuePut+0x3a>
 800a210:	f06f 0003 	mvn.w	r0, #3
 800a214:	e7eb      	b.n	800a1ee <osMessageQueuePut+0x3a>
 800a216:	f06f 0003 	mvn.w	r0, #3
 800a21a:	e7e8      	b.n	800a1ee <osMessageQueuePut+0x3a>
        stat = osErrorResource;
 800a21c:	f06f 0002 	mvn.w	r0, #2
 800a220:	e7e5      	b.n	800a1ee <osMessageQueuePut+0x3a>
      stat = osErrorParameter;
 800a222:	f06f 0003 	mvn.w	r0, #3
 800a226:	e7e2      	b.n	800a1ee <osMessageQueuePut+0x3a>
 800a228:	f06f 0003 	mvn.w	r0, #3
 800a22c:	e7df      	b.n	800a1ee <osMessageQueuePut+0x3a>
  stat = osOK;
 800a22e:	2000      	movs	r0, #0
 800a230:	e7dd      	b.n	800a1ee <osMessageQueuePut+0x3a>
          stat = osErrorResource;
 800a232:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800a236:	e7da      	b.n	800a1ee <osMessageQueuePut+0x3a>

0800a238 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a238:	b510      	push	{r4, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	461c      	mov	r4, r3
 800a23e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800a242:	b1c3      	cbz	r3, 800a276 <osMessageQueueGet+0x3e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a244:	b310      	cbz	r0, 800a28c <osMessageQueueGet+0x54>
 800a246:	b321      	cbz	r1, 800a292 <osMessageQueueGet+0x5a>
 800a248:	bb34      	cbnz	r4, 800a298 <osMessageQueueGet+0x60>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a24e:	aa01      	add	r2, sp, #4
 800a250:	f001 fe42 	bl	800bed8 <xQueueReceiveFromISR>
 800a254:	2801      	cmp	r0, #1
 800a256:	d122      	bne.n	800a29e <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800a258:	9801      	ldr	r0, [sp, #4]
 800a25a:	b150      	cbz	r0, 800a272 <osMessageQueueGet+0x3a>
 800a25c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800a260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a264:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800a270:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800a272:	b002      	add	sp, #8
 800a274:	bd10      	pop	{r4, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a276:	b1a8      	cbz	r0, 800a2a4 <osMessageQueueGet+0x6c>
 800a278:	b1b9      	cbz	r1, 800a2aa <osMessageQueueGet+0x72>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a27a:	4622      	mov	r2, r4
 800a27c:	f001 fc8a 	bl	800bb94 <xQueueReceive>
 800a280:	2801      	cmp	r0, #1
 800a282:	d015      	beq.n	800a2b0 <osMessageQueueGet+0x78>
        if (timeout != 0U) {
 800a284:	b1b4      	cbz	r4, 800a2b4 <osMessageQueueGet+0x7c>
          stat = osErrorTimeout;
 800a286:	f06f 0001 	mvn.w	r0, #1
 800a28a:	e7f2      	b.n	800a272 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800a28c:	f06f 0003 	mvn.w	r0, #3
 800a290:	e7ef      	b.n	800a272 <osMessageQueueGet+0x3a>
 800a292:	f06f 0003 	mvn.w	r0, #3
 800a296:	e7ec      	b.n	800a272 <osMessageQueueGet+0x3a>
 800a298:	f06f 0003 	mvn.w	r0, #3
 800a29c:	e7e9      	b.n	800a272 <osMessageQueueGet+0x3a>
        stat = osErrorResource;
 800a29e:	f06f 0002 	mvn.w	r0, #2
 800a2a2:	e7e6      	b.n	800a272 <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800a2a4:	f06f 0003 	mvn.w	r0, #3
 800a2a8:	e7e3      	b.n	800a272 <osMessageQueueGet+0x3a>
 800a2aa:	f06f 0003 	mvn.w	r0, #3
 800a2ae:	e7e0      	b.n	800a272 <osMessageQueueGet+0x3a>
  stat = osOK;
 800a2b0:	2000      	movs	r0, #0
 800a2b2:	e7de      	b.n	800a272 <osMessageQueueGet+0x3a>
          stat = osErrorResource;
 800a2b4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 800a2b8:	e7db      	b.n	800a272 <osMessageQueueGet+0x3a>
	...

0800a2bc <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2bc:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <vApplicationGetIdleTaskMemory+0x10>)
 800a2be:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2c0:	4b03      	ldr	r3, [pc, #12]	@ (800a2d0 <vApplicationGetIdleTaskMemory+0x14>)
 800a2c2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2c4:	2380      	movs	r3, #128	@ 0x80
 800a2c6:	6013      	str	r3, [r2, #0]
}
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	20000ccc 	.word	0x20000ccc
 800a2d0:	20000acc 	.word	0x20000acc

0800a2d4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2d4:	4b03      	ldr	r3, [pc, #12]	@ (800a2e4 <vApplicationGetTimerTaskMemory+0x10>)
 800a2d6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2d8:	4b03      	ldr	r3, [pc, #12]	@ (800a2e8 <vApplicationGetTimerTaskMemory+0x14>)
 800a2da:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2e0:	6013      	str	r3, [r2, #0]
}
 800a2e2:	4770      	bx	lr
 800a2e4:	20000a70 	.word	0x20000a70
 800a2e8:	20000670 	.word	0x20000670

0800a2ec <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800a2ec:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a2f0:	4905      	ldr	r1, [pc, #20]	@ (800a308 <__NVIC_SystemReset+0x1c>)
 800a2f2:	68ca      	ldr	r2, [r1, #12]
 800a2f4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a2f8:	4b04      	ldr	r3, [pc, #16]	@ (800a30c <__NVIC_SystemReset+0x20>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60cb      	str	r3, [r1, #12]
 800a2fe:	f3bf 8f4f 	dsb	sy
    __NOP();
 800a302:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800a304:	e7fd      	b.n	800a302 <__NVIC_SystemReset+0x16>
 800a306:	bf00      	nop
 800a308:	e000ed00 	.word	0xe000ed00
 800a30c:	05fa0004 	.word	0x05fa0004

0800a310 <Config_GetModuleID>:
/**
  * @brief  Get current module ID
  * @retval Current module ID (0-15)
  */
uint8_t Config_GetModuleID(void)
{
 800a310:	b510      	push	{r4, lr}
    uint8_t id;
    
    // Thread-safe read
    if (config_mutex != NULL) {
 800a312:	4b08      	ldr	r3, [pc, #32]	@ (800a334 <Config_GetModuleID+0x24>)
 800a314:	6818      	ldr	r0, [r3, #0]
 800a316:	b118      	cbz	r0, 800a320 <Config_GetModuleID+0x10>
        osMutexAcquire(config_mutex, osWaitForever);
 800a318:	f04f 31ff 	mov.w	r1, #4294967295
 800a31c:	f7ff fded 	bl	8009efa <osMutexAcquire>
    }
    
    id = module_id;
 800a320:	4b05      	ldr	r3, [pc, #20]	@ (800a338 <Config_GetModuleID+0x28>)
 800a322:	781c      	ldrb	r4, [r3, #0]
    
    if (config_mutex != NULL) {
 800a324:	4b03      	ldr	r3, [pc, #12]	@ (800a334 <Config_GetModuleID+0x24>)
 800a326:	6818      	ldr	r0, [r3, #0]
 800a328:	b108      	cbz	r0, 800a32e <Config_GetModuleID+0x1e>
        osMutexRelease(config_mutex);
 800a32a:	f7ff fe15 	bl	8009f58 <osMutexRelease>
    }
    
    return id;
}
 800a32e:	4620      	mov	r0, r4
 800a330:	bd10      	pop	{r4, pc}
 800a332:	bf00      	nop
 800a334:	20000d78 	.word	0x20000d78
 800a338:	20000d7c 	.word	0x20000d7c

0800a33c <Config_ReadModuleIDFromFlash>:
  * @retval Module ID from flash, or CONFIG_MODULE_ID_DEFAULT if uninitialized
  */
uint8_t Config_ReadModuleIDFromFlash(void)
{
    // Read 32-bit word from flash
    uint32_t flash_value = *(__IO uint32_t*)CONFIG_FLASH_MODULE_ADDR;
 800a33c:	4b05      	ldr	r3, [pc, #20]	@ (800a354 <Config_ReadModuleIDFromFlash+0x18>)
 800a33e:	6818      	ldr	r0, [r3, #0]
    
    // Check if magic value is present (upper 16 bits)
    if ((flash_value & CONFIG_FLASH_MAGIC_MASK) == CONFIG_FLASH_MAGIC) {
 800a340:	0c02      	lsrs	r2, r0, #16
 800a342:	0412      	lsls	r2, r2, #16
 800a344:	4b04      	ldr	r3, [pc, #16]	@ (800a358 <Config_ReadModuleIDFromFlash+0x1c>)
 800a346:	429a      	cmp	r2, r3
 800a348:	d001      	beq.n	800a34e <Config_ReadModuleIDFromFlash+0x12>
            return stored_module_id;
        }
    }
    
    // Flash uninitialized or invalid, return default
    return CONFIG_MODULE_ID_DEFAULT;
 800a34a:	2000      	movs	r0, #0
}
 800a34c:	4770      	bx	lr
        uint8_t stored_module_id = (uint8_t)(flash_value & CONFIG_FLASH_MODULE_MASK);
 800a34e:	f000 000f 	and.w	r0, r0, #15
            return stored_module_id;
 800a352:	4770      	bx	lr
 800a354:	0803c000 	.word	0x0803c000
 800a358:	beef0000 	.word	0xbeef0000

0800a35c <Config_WriteModuleIDToFlash>:
int8_t Config_WriteModuleIDToFlash(uint8_t module_id)
{
    HAL_StatusTypeDef status;
    
    // Validate module ID range
    if (module_id > CONFIG_MODULE_ID_MAX) {
 800a35c:	280f      	cmp	r0, #15
 800a35e:	d826      	bhi.n	800a3ae <Config_WriteModuleIDToFlash+0x52>
{
 800a360:	b510      	push	{r4, lr}
 800a362:	b086      	sub	sp, #24
        return -1;
    }
    
    // Prepare flash value: magic + module ID
    uint32_t flash_value = CONFIG_FLASH_MAGIC | (uint32_t)module_id;
 800a364:	f040 443e 	orr.w	r4, r0, #3187671040	@ 0xbe000000
 800a368:	f444 046f 	orr.w	r4, r4, #15663104	@ 0xef0000
    
    // Unlock flash
    status = HAL_FLASH_Unlock();
 800a36c:	f003 f8da 	bl	800d524 <HAL_FLASH_Unlock>
    if (status != HAL_OK) {
 800a370:	bb00      	cbnz	r0, 800a3b4 <Config_WriteModuleIDToFlash+0x58>
    }
    
    // Erase the page containing our address
    // STM32L432 has 2KB pages, need to erase page before writing
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	9301      	str	r3, [sp, #4]
    
    // Calculate page number (page size = 2048 bytes = 0x800)
    uint32_t page_address = CONFIG_FLASH_MODULE_ADDR;
    uint32_t page_number = (page_address - FLASH_BASE) / FLASH_PAGE_SIZE;
    
    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 800a376:	9302      	str	r3, [sp, #8]
    erase_init.Page = page_number;
 800a378:	2378      	movs	r3, #120	@ 0x78
 800a37a:	9304      	str	r3, [sp, #16]
    erase_init.NbPages = 1;
 800a37c:	2301      	movs	r3, #1
 800a37e:	9305      	str	r3, [sp, #20]
    
    status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 800a380:	a901      	add	r1, sp, #4
 800a382:	a802      	add	r0, sp, #8
 800a384:	f003 f9d2 	bl	800d72c <HAL_FLASHEx_Erase>
    if (status != HAL_OK) {
 800a388:	b960      	cbnz	r0, 800a3a4 <Config_WriteModuleIDToFlash+0x48>
    
    // Program the double-word (64-bit) - STM32L4 requires double-word programming
    // We'll write our 32-bit value twice to make 64 bits
    uint64_t data = ((uint64_t)flash_value << 32) | (uint64_t)flash_value;
    
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, CONFIG_FLASH_MODULE_ADDR, data);
 800a38a:	4622      	mov	r2, r4
 800a38c:	4623      	mov	r3, r4
 800a38e:	490c      	ldr	r1, [pc, #48]	@ (800a3c0 <Config_WriteModuleIDToFlash+0x64>)
 800a390:	2000      	movs	r0, #0
 800a392:	f003 f91d 	bl	800d5d0 <HAL_FLASH_Program>
 800a396:	4604      	mov	r4, r0
    
    // Lock flash
    HAL_FLASH_Lock();
 800a398:	f003 f8dc 	bl	800d554 <HAL_FLASH_Lock>
    
    return (status == HAL_OK) ? 0 : -1;
 800a39c:	b96c      	cbnz	r4, 800a3ba <Config_WriteModuleIDToFlash+0x5e>
 800a39e:	2000      	movs	r0, #0
}
 800a3a0:	b006      	add	sp, #24
 800a3a2:	bd10      	pop	{r4, pc}
        HAL_FLASH_Lock();
 800a3a4:	f003 f8d6 	bl	800d554 <HAL_FLASH_Lock>
        return -1;
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e7f8      	b.n	800a3a0 <Config_WriteModuleIDToFlash+0x44>
        return -1;
 800a3ae:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a3b2:	4770      	bx	lr
        return -1;
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b8:	e7f2      	b.n	800a3a0 <Config_WriteModuleIDToFlash+0x44>
    return (status == HAL_OK) ? 0 : -1;
 800a3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a3be:	e7ef      	b.n	800a3a0 <Config_WriteModuleIDToFlash+0x44>
 800a3c0:	0803c000 	.word	0x0803c000

0800a3c4 <Config_SetModuleID>:
    if (module_id_new > CONFIG_MODULE_ID_MAX) {
 800a3c4:	280f      	cmp	r0, #15
 800a3c6:	d803      	bhi.n	800a3d0 <Config_SetModuleID+0xc>
{
 800a3c8:	b508      	push	{r3, lr}
    int8_t result = Config_WriteModuleIDToFlash(module_id_new);
 800a3ca:	f7ff ffc7 	bl	800a35c <Config_WriteModuleIDToFlash>
}
 800a3ce:	bd08      	pop	{r3, pc}
        return -1;
 800a3d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a3d4:	4770      	bx	lr
	...

0800a3d8 <Config_InitCANIDs>:
  * @brief  Initialize all CAN IDs with module offset
  * @note   Called during Config_Init() after module ID is read
  * @retval None
  */
void Config_InitCANIDs(void)
{
 800a3d8:	b508      	push	{r3, lr}
    uint8_t mod_id = Config_GetModuleID();
 800a3da:	f7ff ff99 	bl	800a310 <Config_GetModuleID>
    
    // Initialize all CAN IDs with module offset
    CAN_TEMP_ID = CAN_ID(CAN_TEMP_BASE, mod_id);
 800a3de:	0300      	lsls	r0, r0, #12
 800a3e0:	f040 630f 	orr.w	r3, r0, #149946368	@ 0x8f00000
 800a3e4:	4a25      	ldr	r2, [pc, #148]	@ (800a47c <Config_InitCANIDs+0xa4>)
 800a3e6:	6013      	str	r3, [r2, #0]
    CAN_TEMP_RAW_ID = CAN_ID(CAN_TEMP_RAW_BASE, mod_id);
 800a3e8:	f443 7180 	orr.w	r1, r3, #256	@ 0x100
 800a3ec:	4a24      	ldr	r2, [pc, #144]	@ (800a480 <Config_InitCANIDs+0xa8>)
 800a3ee:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_0_ID = CAN_ID(CAN_VOLTAGE_0_BASE, mod_id);
 800a3f0:	f443 7100 	orr.w	r1, r3, #512	@ 0x200
 800a3f4:	4a23      	ldr	r2, [pc, #140]	@ (800a484 <Config_InitCANIDs+0xac>)
 800a3f6:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_1_ID = CAN_ID(CAN_VOLTAGE_1_BASE, mod_id);
 800a3f8:	4a23      	ldr	r2, [pc, #140]	@ (800a488 <Config_InitCANIDs+0xb0>)
 800a3fa:	4302      	orrs	r2, r0
 800a3fc:	4923      	ldr	r1, [pc, #140]	@ (800a48c <Config_InitCANIDs+0xb4>)
 800a3fe:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_2_ID = CAN_ID(CAN_VOLTAGE_2_BASE, mod_id);
 800a400:	4a23      	ldr	r2, [pc, #140]	@ (800a490 <Config_InitCANIDs+0xb8>)
 800a402:	4302      	orrs	r2, r0
 800a404:	4923      	ldr	r1, [pc, #140]	@ (800a494 <Config_InitCANIDs+0xbc>)
 800a406:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_3_ID = CAN_ID(CAN_VOLTAGE_3_BASE, mod_id);
 800a408:	4a23      	ldr	r2, [pc, #140]	@ (800a498 <Config_InitCANIDs+0xc0>)
 800a40a:	4302      	orrs	r2, r0
 800a40c:	4923      	ldr	r1, [pc, #140]	@ (800a49c <Config_InitCANIDs+0xc4>)
 800a40e:	600a      	str	r2, [r1, #0]
    CAN_VOLTAGE_4_ID = CAN_ID(CAN_VOLTAGE_4_BASE, mod_id);
 800a410:	f443 7101 	orr.w	r1, r3, #516	@ 0x204
 800a414:	4a22      	ldr	r2, [pc, #136]	@ (800a4a0 <Config_InitCANIDs+0xc8>)
 800a416:	6011      	str	r1, [r2, #0]
    CAN_VOLTAGE_5_ID = CAN_ID(CAN_VOLTAGE_5_BASE, mod_id);
 800a418:	4a22      	ldr	r2, [pc, #136]	@ (800a4a4 <Config_InitCANIDs+0xcc>)
 800a41a:	4302      	orrs	r2, r0
 800a41c:	4922      	ldr	r1, [pc, #136]	@ (800a4a8 <Config_InitCANIDs+0xd0>)
 800a41e:	600a      	str	r2, [r1, #0]
    CAN_BMS1_STATUS_ID = CAN_ID(CAN_BMS1_STATUS_BASE, mod_id);
 800a420:	4a22      	ldr	r2, [pc, #136]	@ (800a4ac <Config_InitCANIDs+0xd4>)
 800a422:	4302      	orrs	r2, r0
 800a424:	4922      	ldr	r1, [pc, #136]	@ (800a4b0 <Config_InitCANIDs+0xd8>)
 800a426:	600a      	str	r2, [r1, #0]
    CAN_BMS2_STATUS_ID = CAN_ID(CAN_BMS2_STATUS_BASE, mod_id);
 800a428:	4a22      	ldr	r2, [pc, #136]	@ (800a4b4 <Config_InitCANIDs+0xdc>)
 800a42a:	4302      	orrs	r2, r0
 800a42c:	4922      	ldr	r1, [pc, #136]	@ (800a4b8 <Config_InitCANIDs+0xe0>)
 800a42e:	600a      	str	r2, [r1, #0]
    CAN_BMS_HEARTBEAT_ID = CAN_ID(CAN_BMS_HEARTBEAT_BASE, mod_id);
 800a430:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a434:	4a21      	ldr	r2, [pc, #132]	@ (800a4bc <Config_InitCANIDs+0xe4>)
 800a436:	6013      	str	r3, [r2, #0]
    CAN_BMS_STATS_ID = CAN_ID(CAN_BMS_STATS_BASE, mod_id);
 800a438:	4b21      	ldr	r3, [pc, #132]	@ (800a4c0 <Config_InitCANIDs+0xe8>)
 800a43a:	4303      	orrs	r3, r0
 800a43c:	4a21      	ldr	r2, [pc, #132]	@ (800a4c4 <Config_InitCANIDs+0xec>)
 800a43e:	6013      	str	r3, [r2, #0]
    CAN_BMS_CONFIG_STATUS_ID = CAN_ID(CAN_BMS_CONFIG_STATUS_BASE, mod_id);
 800a440:	4b21      	ldr	r3, [pc, #132]	@ (800a4c8 <Config_InitCANIDs+0xf0>)
 800a442:	4303      	orrs	r3, r0
 800a444:	4a21      	ldr	r2, [pc, #132]	@ (800a4cc <Config_InitCANIDs+0xf4>)
 800a446:	6013      	str	r3, [r2, #0]
    CAN_CONFIG_ACK_ID = CAN_ID(CAN_CONFIG_ACK_BASE, mod_id);
 800a448:	4b21      	ldr	r3, [pc, #132]	@ (800a4d0 <Config_InitCANIDs+0xf8>)
 800a44a:	4303      	orrs	r3, r0
 800a44c:	4a21      	ldr	r2, [pc, #132]	@ (800a4d4 <Config_InitCANIDs+0xfc>)
 800a44e:	6013      	str	r3, [r2, #0]
    CAN_RESET_CMD_ID = CAN_ID(CAN_RESET_CMD_BASE, mod_id);
 800a450:	4b21      	ldr	r3, [pc, #132]	@ (800a4d8 <Config_InitCANIDs+0x100>)
 800a452:	4303      	orrs	r3, r0
 800a454:	4a21      	ldr	r2, [pc, #132]	@ (800a4dc <Config_InitCANIDs+0x104>)
 800a456:	6013      	str	r3, [r2, #0]
    CAN_BMS_RESET_CMD_ID = CAN_ID(CAN_BMS_RESET_CMD_BASE, mod_id);
 800a458:	4b21      	ldr	r3, [pc, #132]	@ (800a4e0 <Config_InitCANIDs+0x108>)
 800a45a:	4303      	orrs	r3, r0
 800a45c:	4a21      	ldr	r2, [pc, #132]	@ (800a4e4 <Config_InitCANIDs+0x10c>)
 800a45e:	6013      	str	r3, [r2, #0]
    CAN_BMS_RESET_ACK_ID = CAN_ID(CAN_BMS_RESET_ACK_BASE, mod_id);
 800a460:	4b21      	ldr	r3, [pc, #132]	@ (800a4e8 <Config_InitCANIDs+0x110>)
 800a462:	4303      	orrs	r3, r0
 800a464:	4a21      	ldr	r2, [pc, #132]	@ (800a4ec <Config_InitCANIDs+0x114>)
 800a466:	6013      	str	r3, [r2, #0]
    CAN_DEBUG_RESPONSE_ID = CAN_ID(CAN_DEBUG_RESPONSE_BASE, mod_id);
 800a468:	4b21      	ldr	r3, [pc, #132]	@ (800a4f0 <Config_InitCANIDs+0x118>)
 800a46a:	4303      	orrs	r3, r0
 800a46c:	4a21      	ldr	r2, [pc, #132]	@ (800a4f4 <Config_InitCANIDs+0x11c>)
 800a46e:	6013      	str	r3, [r2, #0]
    CAN_I2C_DIAG_ID = CAN_ID(CAN_I2C_DIAG_BASE, mod_id);
 800a470:	4b21      	ldr	r3, [pc, #132]	@ (800a4f8 <Config_InitCANIDs+0x120>)
 800a472:	4303      	orrs	r3, r0
 800a474:	4a21      	ldr	r2, [pc, #132]	@ (800a4fc <Config_InitCANIDs+0x124>)
 800a476:	6013      	str	r3, [r2, #0]
}
 800a478:	bd08      	pop	{r3, pc}
 800a47a:	bf00      	nop
 800a47c:	20000d74 	.word	0x20000d74
 800a480:	20000d70 	.word	0x20000d70
 800a484:	20000d6c 	.word	0x20000d6c
 800a488:	08f00201 	.word	0x08f00201
 800a48c:	20000d68 	.word	0x20000d68
 800a490:	08f00202 	.word	0x08f00202
 800a494:	20000d64 	.word	0x20000d64
 800a498:	08f00203 	.word	0x08f00203
 800a49c:	20000d60 	.word	0x20000d60
 800a4a0:	20000d5c 	.word	0x20000d5c
 800a4a4:	08f00205 	.word	0x08f00205
 800a4a8:	20000d58 	.word	0x20000d58
 800a4ac:	08f00206 	.word	0x08f00206
 800a4b0:	20000d54 	.word	0x20000d54
 800a4b4:	08f00207 	.word	0x08f00207
 800a4b8:	20000d50 	.word	0x20000d50
 800a4bc:	20000d4c 	.word	0x20000d4c
 800a4c0:	08f00301 	.word	0x08f00301
 800a4c4:	20000d48 	.word	0x20000d48
 800a4c8:	08f00302 	.word	0x08f00302
 800a4cc:	20000d44 	.word	0x20000d44
 800a4d0:	08f00f01 	.word	0x08f00f01
 800a4d4:	20000d40 	.word	0x20000d40
 800a4d8:	08f00f02 	.word	0x08f00f02
 800a4dc:	20000d3c 	.word	0x20000d3c
 800a4e0:	08f00f03 	.word	0x08f00f03
 800a4e4:	20000d38 	.word	0x20000d38
 800a4e8:	08f00f04 	.word	0x08f00f04
 800a4ec:	20000d34 	.word	0x20000d34
 800a4f0:	08f00f11 	.word	0x08f00f11
 800a4f4:	20000d30 	.word	0x20000d30
 800a4f8:	08f00f12 	.word	0x08f00f12
 800a4fc:	20000d2c 	.word	0x20000d2c

0800a500 <Config_Init>:
{
 800a500:	b500      	push	{lr}
 800a502:	b085      	sub	sp, #20
    const osMutexAttr_t mutex_attr = {
 800a504:	4b08      	ldr	r3, [pc, #32]	@ (800a528 <Config_Init+0x28>)
 800a506:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a508:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    config_mutex = osMutexNew(&mutex_attr);
 800a50c:	4668      	mov	r0, sp
 800a50e:	f7ff fca9 	bl	8009e64 <osMutexNew>
 800a512:	4b06      	ldr	r3, [pc, #24]	@ (800a52c <Config_Init+0x2c>)
 800a514:	6018      	str	r0, [r3, #0]
    module_id = Config_ReadModuleIDFromFlash();
 800a516:	f7ff ff11 	bl	800a33c <Config_ReadModuleIDFromFlash>
 800a51a:	4b05      	ldr	r3, [pc, #20]	@ (800a530 <Config_Init+0x30>)
 800a51c:	7018      	strb	r0, [r3, #0]
    Config_InitCANIDs();
 800a51e:	f7ff ff5b 	bl	800a3d8 <Config_InitCANIDs>
}
 800a522:	b005      	add	sp, #20
 800a524:	f85d fb04 	ldr.w	pc, [sp], #4
 800a528:	08010bf0 	.word	0x08010bf0
 800a52c:	20000d78 	.word	0x20000d78
 800a530:	20000d7c 	.word	0x20000d7c

0800a534 <Config_ProcessCANCommand>:
  * @retval None
  * @note   Sends acknowledgement message, then resets device if successful
  */
void Config_ProcessCANCommand(uint8_t *data, uint8_t length)
{
    if (data == NULL || length < 2) {
 800a534:	2800      	cmp	r0, #0
 800a536:	d036      	beq.n	800a5a6 <Config_ProcessCANCommand+0x72>
 800a538:	2901      	cmp	r1, #1
 800a53a:	d934      	bls.n	800a5a6 <Config_ProcessCANCommand+0x72>
{
 800a53c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a53e:	b083      	sub	sp, #12
        return;
    }
    
    uint8_t command = data[0];
 800a540:	7804      	ldrb	r4, [r0, #0]
    uint8_t value = data[1];
 800a542:	7845      	ldrb	r5, [r0, #1]
    uint8_t ack_data[8] = {0};
 800a544:	2300      	movs	r3, #0
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	9301      	str	r3, [sp, #4]
    uint8_t status = CONFIG_STATUS_FAIL;
    
    switch (command) {
 800a54a:	2c01      	cmp	r4, #1
 800a54c:	d001      	beq.n	800a552 <Config_ProcessCANCommand+0x1e>
            
        default:
            // Unknown command, ignore (no ACK sent)
            break;
    }
}
 800a54e:	b003      	add	sp, #12
 800a550:	bdf0      	pop	{r4, r5, r6, r7, pc}
            uint8_t old_module_id = Config_GetModuleID();
 800a552:	f7ff fedd 	bl	800a310 <Config_GetModuleID>
 800a556:	4606      	mov	r6, r0
            int8_t result = Config_SetModuleID(value);
 800a558:	4628      	mov	r0, r5
 800a55a:	f7ff ff33 	bl	800a3c4 <Config_SetModuleID>
            if (result == 0) {
 800a55e:	4607      	mov	r7, r0
 800a560:	b9f8      	cbnz	r0, 800a5a2 <Config_ProcessCANCommand+0x6e>
                status = CONFIG_STATUS_RESET_REQUIRED; // Success - reset needed
 800a562:	2302      	movs	r3, #2
            ack_data[0] = command;
 800a564:	f88d 4000 	strb.w	r4, [sp]
            ack_data[1] = status;
 800a568:	f88d 3001 	strb.w	r3, [sp, #1]
            ack_data[2] = old_module_id;
 800a56c:	f88d 6002 	strb.w	r6, [sp, #2]
            ack_data[3] = value;
 800a570:	f88d 5003 	strb.w	r5, [sp, #3]
            ack_data[4] = 0x00;
 800a574:	2300      	movs	r3, #0
 800a576:	f88d 3004 	strb.w	r3, [sp, #4]
            ack_data[5] = 0x00;
 800a57a:	f88d 3005 	strb.w	r3, [sp, #5]
            ack_data[6] = 0x00;
 800a57e:	f88d 3006 	strb.w	r3, [sp, #6]
            ack_data[7] = 0x00;
 800a582:	f88d 3007 	strb.w	r3, [sp, #7]
            CAN_SendMessage(CAN_CONFIG_ACK_ID, ack_data, 8, 1);
 800a586:	2301      	movs	r3, #1
 800a588:	2208      	movs	r2, #8
 800a58a:	4669      	mov	r1, sp
 800a58c:	4806      	ldr	r0, [pc, #24]	@ (800a5a8 <Config_ProcessCANCommand+0x74>)
 800a58e:	6800      	ldr	r0, [r0, #0]
 800a590:	f7fe fe50 	bl	8009234 <CAN_SendMessage>
            if (result == 0) {
 800a594:	2f00      	cmp	r7, #0
 800a596:	d1da      	bne.n	800a54e <Config_ProcessCANCommand+0x1a>
                osDelay(100); // Give time for CAN message to transmit
 800a598:	2064      	movs	r0, #100	@ 0x64
 800a59a:	f7ff fc55 	bl	8009e48 <osDelay>
                NVIC_SystemReset(); // Reset the microcontroller
 800a59e:	f7ff fea5 	bl	800a2ec <__NVIC_SystemReset>
                status = CONFIG_STATUS_FAIL;
 800a5a2:	4623      	mov	r3, r4
 800a5a4:	e7de      	b.n	800a564 <Config_ProcessCANCommand+0x30>
 800a5a6:	4770      	bx	lr
 800a5a8:	20000d40 	.word	0x20000d40

0800a5ac <RotateByteBits>:
  * @param  rotation_index: Pointer to rotation index for this byte
  * @retval Rotated byte with only one bit set
  */
static uint8_t RotateByteBits(uint8_t byte_value, uint8_t *rotation_index)
{
    if (byte_value == 0) {
 800a5ac:	4684      	mov	ip, r0
 800a5ae:	b110      	cbz	r0, 800a5b6 <RotateByteBits+0xa>
        return 0;
    }
    
    // Count active bits in this byte
    uint8_t active_bit_count = 0;
    for (uint8_t bit = 0; bit < 8; bit++) {
 800a5b0:	2300      	movs	r3, #0
    uint8_t active_bit_count = 0;
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	e004      	b.n	800a5c0 <RotateByteBits+0x14>
        *rotation_index = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	700b      	strb	r3, [r1, #0]
        return 0;
 800a5ba:	4770      	bx	lr
    for (uint8_t bit = 0; bit < 8; bit++) {
 800a5bc:	3301      	adds	r3, #1
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b07      	cmp	r3, #7
 800a5c2:	d807      	bhi.n	800a5d4 <RotateByteBits+0x28>
        if (byte_value & (1 << bit)) {
 800a5c4:	fa4c f203 	asr.w	r2, ip, r3
 800a5c8:	f012 0f01 	tst.w	r2, #1
 800a5cc:	d0f6      	beq.n	800a5bc <RotateByteBits+0x10>
            active_bit_count++;
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	b2c0      	uxtb	r0, r0
 800a5d2:	e7f3      	b.n	800a5bc <RotateByteBits+0x10>
        }
    }
    
    // Find the Nth active bit
    if (active_bit_count > 0) {
 800a5d4:	b9f0      	cbnz	r0, 800a614 <RotateByteBits+0x68>
 800a5d6:	4770      	bx	lr
                if (current_index == *rotation_index) {
                    // Update rotation for next call
                    *rotation_index = (*rotation_index + 1) % active_bit_count;
                    return (1 << bit);
                }
                current_index++;
 800a5d8:	3201      	adds	r2, #1
 800a5da:	b2d2      	uxtb	r2, r2
        for (uint8_t bit = 0; bit < 8; bit++) {
 800a5dc:	3301      	adds	r3, #1
 800a5de:	b2db      	uxtb	r3, r3
 800a5e0:	2b07      	cmp	r3, #7
 800a5e2:	d815      	bhi.n	800a610 <RotateByteBits+0x64>
            if (byte_value & (1 << bit)) {
 800a5e4:	461c      	mov	r4, r3
 800a5e6:	fa4c fe03 	asr.w	lr, ip, r3
 800a5ea:	f01e 0f01 	tst.w	lr, #1
 800a5ee:	d0f5      	beq.n	800a5dc <RotateByteBits+0x30>
                if (current_index == *rotation_index) {
 800a5f0:	f891 e000 	ldrb.w	lr, [r1]
 800a5f4:	4596      	cmp	lr, r2
 800a5f6:	d1ef      	bne.n	800a5d8 <RotateByteBits+0x2c>
                    *rotation_index = (*rotation_index + 1) % active_bit_count;
 800a5f8:	f10e 0e01 	add.w	lr, lr, #1
 800a5fc:	fb9e f3f0 	sdiv	r3, lr, r0
 800a600:	fb00 ee13 	mls	lr, r0, r3, lr
 800a604:	f881 e000 	strb.w	lr, [r1]
                    return (1 << bit);
 800a608:	2001      	movs	r0, #1
 800a60a:	40a0      	lsls	r0, r4
 800a60c:	b2c0      	uxtb	r0, r0
 800a60e:	e000      	b.n	800a612 <RotateByteBits+0x66>
            }
        }
    }
    
    return 0;
 800a610:	2000      	movs	r0, #0
}
 800a612:	bd10      	pop	{r4, pc}
        for (uint8_t bit = 0; bit < 8; bit++) {
 800a614:	2300      	movs	r3, #0
        uint8_t current_index = 0;
 800a616:	461a      	mov	r2, r3
        for (uint8_t bit = 0; bit < 8; bit++) {
 800a618:	2b07      	cmp	r3, #7
 800a61a:	d801      	bhi.n	800a620 <RotateByteBits+0x74>
{
 800a61c:	b510      	push	{r4, lr}
 800a61e:	e7e1      	b.n	800a5e4 <RotateByteBits+0x38>
    return 0;
 800a620:	2000      	movs	r0, #0
}
 800a622:	4770      	bx	lr

0800a624 <HandleStateExit>:
  * @retval None
  */
static void HandleStateExit(BMS_State_t old_state)
{
    // Perform state-specific exit actions
    switch (old_state) {
 800a624:	2805      	cmp	r0, #5
 800a626:	d000      	beq.n	800a62a <HandleStateExit+0x6>
        case BMS_STATE_SHUTDOWN:
        default:
            // No special exit actions
            break;
    }
}
 800a628:	4770      	bx	lr
            fault_timestamp = 0;
 800a62a:	4b02      	ldr	r3, [pc, #8]	@ (800a634 <HandleStateExit+0x10>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	601a      	str	r2, [r3, #0]
}
 800a630:	e7fa      	b.n	800a628 <HandleStateExit+0x4>
 800a632:	bf00      	nop
 800a634:	20000d84 	.word	0x20000d84

0800a638 <HandleStateEntry>:
    switch (new_state) {
 800a638:	2805      	cmp	r0, #5
 800a63a:	d000      	beq.n	800a63e <HandleStateEntry+0x6>
 800a63c:	4770      	bx	lr
{
 800a63e:	b508      	push	{r3, lr}
            if (error_mgr.error_flags != 0) {
 800a640:	4b04      	ldr	r3, [pc, #16]	@ (800a654 <HandleStateEntry+0x1c>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	b903      	cbnz	r3, 800a648 <HandleStateEntry+0x10>
}
 800a646:	bd08      	pop	{r3, pc}
                fault_timestamp = osKernelGetTickCount();
 800a648:	f7ff fb9a 	bl	8009d80 <osKernelGetTickCount>
 800a64c:	4b02      	ldr	r3, [pc, #8]	@ (800a658 <HandleStateEntry+0x20>)
 800a64e:	6018      	str	r0, [r3, #0]
}
 800a650:	e7f9      	b.n	800a646 <HandleStateEntry+0xe>
 800a652:	bf00      	nop
 800a654:	20000d8c 	.word	0x20000d8c
 800a658:	20000d84 	.word	0x20000d84

0800a65c <CheckFaultConditions>:
/**
  * @brief  Check for fault conditions and manage automatic state transitions
  * @retval None
  */
static void CheckFaultConditions(void)
{
 800a65c:	b510      	push	{r4, lr}
    BMS_State_t current_state = error_mgr.state;
 800a65e:	4b16      	ldr	r3, [pc, #88]	@ (800a6b8 <CheckFaultConditions+0x5c>)
 800a660:	7a1c      	ldrb	r4, [r3, #8]
    uint32_t current_errors = error_mgr.error_flags;
 800a662:	681b      	ldr	r3, [r3, #0]
    
    // Check for critical faults
    if (current_errors & CRITICAL_FAULTS) {
 800a664:	4a15      	ldr	r2, [pc, #84]	@ (800a6bc <CheckFaultConditions+0x60>)
 800a666:	4213      	tst	r3, r2
 800a668:	d00e      	beq.n	800a688 <CheckFaultConditions+0x2c>
        // Critical faults force FAULT state
        if (current_state != BMS_STATE_FAULT && current_state != BMS_STATE_SHUTDOWN) {
 800a66a:	1f63      	subs	r3, r4, #5
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d90c      	bls.n	800a68c <CheckFaultConditions+0x30>
            HandleStateExit(current_state);
 800a672:	4620      	mov	r0, r4
 800a674:	f7ff ffd6 	bl	800a624 <HandleStateExit>
            previous_state = current_state;
 800a678:	4b11      	ldr	r3, [pc, #68]	@ (800a6c0 <CheckFaultConditions+0x64>)
 800a67a:	701c      	strb	r4, [r3, #0]
            error_mgr.state = BMS_STATE_FAULT;
 800a67c:	2005      	movs	r0, #5
 800a67e:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b8 <CheckFaultConditions+0x5c>)
 800a680:	7218      	strb	r0, [r3, #8]
            HandleStateEntry(BMS_STATE_FAULT);
 800a682:	f7ff ffd9 	bl	800a638 <HandleStateEntry>
 800a686:	e001      	b.n	800a68c <CheckFaultConditions+0x30>
        }
    }
    // Check for fault recovery
    else if (current_state == BMS_STATE_FAULT && current_errors == 0) {
 800a688:	2c05      	cmp	r4, #5
 800a68a:	d000      	beq.n	800a68e <CheckFaultConditions+0x32>
            HandleStateExit(BMS_STATE_FAULT);
            error_mgr.state = BMS_STATE_IDLE;
            HandleStateEntry(BMS_STATE_IDLE);
        }
    }
}
 800a68c:	bd10      	pop	{r4, pc}
    else if (current_state == BMS_STATE_FAULT && current_errors == 0) {
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1fc      	bne.n	800a68c <CheckFaultConditions+0x30>
        uint32_t current_time = osKernelGetTickCount();
 800a692:	f7ff fb75 	bl	8009d80 <osKernelGetTickCount>
        if ((current_time - fault_timestamp) >= FAULT_RECOVERY_DELAY_MS) {
 800a696:	4b0b      	ldr	r3, [pc, #44]	@ (800a6c4 <CheckFaultConditions+0x68>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	1ac0      	subs	r0, r0, r3
 800a69c:	f241 3387 	movw	r3, #4999	@ 0x1387
 800a6a0:	4298      	cmp	r0, r3
 800a6a2:	d9f3      	bls.n	800a68c <CheckFaultConditions+0x30>
            HandleStateExit(BMS_STATE_FAULT);
 800a6a4:	2005      	movs	r0, #5
 800a6a6:	f7ff ffbd 	bl	800a624 <HandleStateExit>
            error_mgr.state = BMS_STATE_IDLE;
 800a6aa:	2001      	movs	r0, #1
 800a6ac:	4b02      	ldr	r3, [pc, #8]	@ (800a6b8 <CheckFaultConditions+0x5c>)
 800a6ae:	7218      	strb	r0, [r3, #8]
            HandleStateEntry(BMS_STATE_IDLE);
 800a6b0:	f7ff ffc2 	bl	800a638 <HandleStateEntry>
}
 800a6b4:	e7ea      	b.n	800a68c <CheckFaultConditions+0x30>
 800a6b6:	bf00      	nop
 800a6b8:	20000d8c 	.word	0x20000d8c
 800a6bc:	000b0301 	.word	0x000b0301
 800a6c0:	20000d81 	.word	0x20000d81
 800a6c4:	20000d84 	.word	0x20000d84

0800a6c8 <ProcessStateMachine>:
/**
  * @brief  Process the state machine logic
  * @retval None
  */
static void ProcessStateMachine(void)
{
 800a6c8:	b508      	push	{r3, lr}
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 800a6ca:	f04f 31ff 	mov.w	r1, #4294967295
 800a6ce:	4b06      	ldr	r3, [pc, #24]	@ (800a6e8 <ProcessStateMachine+0x20>)
 800a6d0:	6818      	ldr	r0, [r3, #0]
 800a6d2:	f7ff fc12 	bl	8009efa <osMutexAcquire>
 800a6d6:	b100      	cbz	r0, 800a6da <ProcessStateMachine+0x12>
        CheckFaultConditions();
        osMutexRelease(error_mutex);
    }
}
 800a6d8:	bd08      	pop	{r3, pc}
        CheckFaultConditions();
 800a6da:	f7ff ffbf 	bl	800a65c <CheckFaultConditions>
        osMutexRelease(error_mutex);
 800a6de:	4b02      	ldr	r3, [pc, #8]	@ (800a6e8 <ProcessStateMachine+0x20>)
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	f7ff fc39 	bl	8009f58 <osMutexRelease>
}
 800a6e6:	e7f7      	b.n	800a6d8 <ProcessStateMachine+0x10>
 800a6e8:	20000d88 	.word	0x20000d88

0800a6ec <ErrorMgr_Init>:
{
 800a6ec:	b510      	push	{r4, lr}
    memset(&error_mgr, 0, sizeof(Error_Manager_t));
 800a6ee:	4c0a      	ldr	r4, [pc, #40]	@ (800a718 <ErrorMgr_Init+0x2c>)
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	6023      	str	r3, [r4, #0]
 800a6f4:	6063      	str	r3, [r4, #4]
 800a6f6:	60a3      	str	r3, [r4, #8]
 800a6f8:	60e3      	str	r3, [r4, #12]
 800a6fa:	6123      	str	r3, [r4, #16]
    error_mgr.last_heartbeat = osKernelGetTickCount();
 800a6fc:	f7ff fb40 	bl	8009d80 <osKernelGetTickCount>
 800a700:	6120      	str	r0, [r4, #16]
    error_mutex = osMutexNew(&error_mutex_attributes);
 800a702:	4806      	ldr	r0, [pc, #24]	@ (800a71c <ErrorMgr_Init+0x30>)
 800a704:	f7ff fbae 	bl	8009e64 <osMutexNew>
 800a708:	4b05      	ldr	r3, [pc, #20]	@ (800a720 <ErrorMgr_Init+0x34>)
 800a70a:	6018      	str	r0, [r3, #0]
    if (error_mutex == NULL) {
 800a70c:	b108      	cbz	r0, 800a712 <ErrorMgr_Init+0x26>
    return HAL_OK;
 800a70e:	2000      	movs	r0, #0
}
 800a710:	bd10      	pop	{r4, pc}
        return HAL_ERROR;
 800a712:	2001      	movs	r0, #1
 800a714:	e7fc      	b.n	800a710 <ErrorMgr_Init+0x24>
 800a716:	bf00      	nop
 800a718:	20000d8c 	.word	0x20000d8c
 800a71c:	08010d10 	.word	0x08010d10
 800a720:	20000d88 	.word	0x20000d88

0800a724 <ErrorMgr_SetError>:
{
 800a724:	b510      	push	{r4, lr}
 800a726:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 800a728:	f04f 31ff 	mov.w	r1, #4294967295
 800a72c:	4b0d      	ldr	r3, [pc, #52]	@ (800a764 <ErrorMgr_SetError+0x40>)
 800a72e:	6818      	ldr	r0, [r3, #0]
 800a730:	f7ff fbe3 	bl	8009efa <osMutexAcquire>
 800a734:	b980      	cbnz	r0, 800a758 <ErrorMgr_SetError+0x34>
        if (!(error_mgr.error_flags & error_flag)) {
 800a736:	4b0c      	ldr	r3, [pc, #48]	@ (800a768 <ErrorMgr_SetError+0x44>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4223      	tst	r3, r4
 800a73c:	d104      	bne.n	800a748 <ErrorMgr_SetError+0x24>
            error_mgr.fault_count++;
 800a73e:	490a      	ldr	r1, [pc, #40]	@ (800a768 <ErrorMgr_SetError+0x44>)
 800a740:	7a4a      	ldrb	r2, [r1, #9]
 800a742:	3201      	adds	r2, #1
 800a744:	724a      	strb	r2, [r1, #9]
            if (error_mgr.error_flags == 0) {
 800a746:	b143      	cbz	r3, 800a75a <ErrorMgr_SetError+0x36>
        error_mgr.error_flags |= error_flag;
 800a748:	4a07      	ldr	r2, [pc, #28]	@ (800a768 <ErrorMgr_SetError+0x44>)
 800a74a:	6813      	ldr	r3, [r2, #0]
 800a74c:	4323      	orrs	r3, r4
 800a74e:	6013      	str	r3, [r2, #0]
        osMutexRelease(error_mutex);
 800a750:	4b04      	ldr	r3, [pc, #16]	@ (800a764 <ErrorMgr_SetError+0x40>)
 800a752:	6818      	ldr	r0, [r3, #0]
 800a754:	f7ff fc00 	bl	8009f58 <osMutexRelease>
}
 800a758:	bd10      	pop	{r4, pc}
                fault_timestamp = osKernelGetTickCount();
 800a75a:	f7ff fb11 	bl	8009d80 <osKernelGetTickCount>
 800a75e:	4b03      	ldr	r3, [pc, #12]	@ (800a76c <ErrorMgr_SetError+0x48>)
 800a760:	6018      	str	r0, [r3, #0]
 800a762:	e7f1      	b.n	800a748 <ErrorMgr_SetError+0x24>
 800a764:	20000d88 	.word	0x20000d88
 800a768:	20000d8c 	.word	0x20000d8c
 800a76c:	20000d84 	.word	0x20000d84

0800a770 <ErrorMgr_ClearError>:
{
 800a770:	b510      	push	{r4, lr}
 800a772:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 800a774:	f04f 31ff 	mov.w	r1, #4294967295
 800a778:	4b16      	ldr	r3, [pc, #88]	@ (800a7d4 <ErrorMgr_ClearError+0x64>)
 800a77a:	6818      	ldr	r0, [r3, #0]
 800a77c:	f7ff fbbd 	bl	8009efa <osMutexAcquire>
 800a780:	b960      	cbnz	r0, 800a79c <ErrorMgr_ClearError+0x2c>
        if (error_mgr.error_flags & error_flag) {
 800a782:	4b15      	ldr	r3, [pc, #84]	@ (800a7d8 <ErrorMgr_ClearError+0x68>)
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	ea10 0c04 	ands.w	ip, r0, r4
 800a78a:	d114      	bne.n	800a7b6 <ErrorMgr_ClearError+0x46>
        error_mgr.error_flags &= ~error_flag;
 800a78c:	ea20 0004 	bic.w	r0, r0, r4
 800a790:	4b11      	ldr	r3, [pc, #68]	@ (800a7d8 <ErrorMgr_ClearError+0x68>)
 800a792:	6018      	str	r0, [r3, #0]
        osMutexRelease(error_mutex);
 800a794:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d4 <ErrorMgr_ClearError+0x64>)
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	f7ff fbde 	bl	8009f58 <osMutexRelease>
}
 800a79c:	bd10      	pop	{r4, pc}
            for (uint8_t bit = 0; bit < 32; bit++) {
 800a79e:	3301      	adds	r3, #1
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b1f      	cmp	r3, #31
 800a7a4:	d80a      	bhi.n	800a7bc <ErrorMgr_ClearError+0x4c>
                if (cleared_bits & (1 << bit)) {
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	409a      	lsls	r2, r3
 800a7aa:	ea1c 0f02 	tst.w	ip, r2
 800a7ae:	d0f6      	beq.n	800a79e <ErrorMgr_ClearError+0x2e>
                    cleared_count++;
 800a7b0:	3101      	adds	r1, #1
 800a7b2:	b2c9      	uxtb	r1, r1
 800a7b4:	e7f3      	b.n	800a79e <ErrorMgr_ClearError+0x2e>
            for (uint8_t bit = 0; bit < 32; bit++) {
 800a7b6:	2300      	movs	r3, #0
            uint8_t cleared_count = 0;
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	e7f2      	b.n	800a7a2 <ErrorMgr_ClearError+0x32>
            if (error_mgr.fault_count >= cleared_count) {
 800a7bc:	4b06      	ldr	r3, [pc, #24]	@ (800a7d8 <ErrorMgr_ClearError+0x68>)
 800a7be:	7a5b      	ldrb	r3, [r3, #9]
 800a7c0:	428b      	cmp	r3, r1
 800a7c2:	d303      	bcc.n	800a7cc <ErrorMgr_ClearError+0x5c>
                error_mgr.fault_count -= cleared_count;
 800a7c4:	1a5b      	subs	r3, r3, r1
 800a7c6:	4a04      	ldr	r2, [pc, #16]	@ (800a7d8 <ErrorMgr_ClearError+0x68>)
 800a7c8:	7253      	strb	r3, [r2, #9]
 800a7ca:	e7df      	b.n	800a78c <ErrorMgr_ClearError+0x1c>
                error_mgr.fault_count = 0;  // Safety check
 800a7cc:	4b02      	ldr	r3, [pc, #8]	@ (800a7d8 <ErrorMgr_ClearError+0x68>)
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	725a      	strb	r2, [r3, #9]
 800a7d2:	e7db      	b.n	800a78c <ErrorMgr_ClearError+0x1c>
 800a7d4:	20000d88 	.word	0x20000d88
 800a7d8:	20000d8c 	.word	0x20000d8c

0800a7dc <ErrorMgr_SetWarning>:
{
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 800a7e0:	f04f 31ff 	mov.w	r1, #4294967295
 800a7e4:	4b07      	ldr	r3, [pc, #28]	@ (800a804 <ErrorMgr_SetWarning+0x28>)
 800a7e6:	6818      	ldr	r0, [r3, #0]
 800a7e8:	f7ff fb87 	bl	8009efa <osMutexAcquire>
 800a7ec:	b100      	cbz	r0, 800a7f0 <ErrorMgr_SetWarning+0x14>
}
 800a7ee:	bd10      	pop	{r4, pc}
        error_mgr.warning_flags |= warning_flag;
 800a7f0:	4a05      	ldr	r2, [pc, #20]	@ (800a808 <ErrorMgr_SetWarning+0x2c>)
 800a7f2:	6853      	ldr	r3, [r2, #4]
 800a7f4:	4323      	orrs	r3, r4
 800a7f6:	6053      	str	r3, [r2, #4]
        osMutexRelease(error_mutex);
 800a7f8:	4b02      	ldr	r3, [pc, #8]	@ (800a804 <ErrorMgr_SetWarning+0x28>)
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	f7ff fbac 	bl	8009f58 <osMutexRelease>
}
 800a800:	e7f5      	b.n	800a7ee <ErrorMgr_SetWarning+0x12>
 800a802:	bf00      	nop
 800a804:	20000d88 	.word	0x20000d88
 800a808:	20000d8c 	.word	0x20000d8c

0800a80c <ErrorMgr_ClearWarning>:
{
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 800a810:	f04f 31ff 	mov.w	r1, #4294967295
 800a814:	4b07      	ldr	r3, [pc, #28]	@ (800a834 <ErrorMgr_ClearWarning+0x28>)
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	f7ff fb6f 	bl	8009efa <osMutexAcquire>
 800a81c:	b100      	cbz	r0, 800a820 <ErrorMgr_ClearWarning+0x14>
}
 800a81e:	bd10      	pop	{r4, pc}
        error_mgr.warning_flags &= ~warning_flag;
 800a820:	4a05      	ldr	r2, [pc, #20]	@ (800a838 <ErrorMgr_ClearWarning+0x2c>)
 800a822:	6853      	ldr	r3, [r2, #4]
 800a824:	ea23 0304 	bic.w	r3, r3, r4
 800a828:	6053      	str	r3, [r2, #4]
        osMutexRelease(error_mutex);
 800a82a:	4b02      	ldr	r3, [pc, #8]	@ (800a834 <ErrorMgr_ClearWarning+0x28>)
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f7ff fb93 	bl	8009f58 <osMutexRelease>
}
 800a832:	e7f4      	b.n	800a81e <ErrorMgr_ClearWarning+0x12>
 800a834:	20000d88 	.word	0x20000d88
 800a838:	20000d8c 	.word	0x20000d8c

0800a83c <ErrorMgr_SetState>:
{
 800a83c:	b510      	push	{r4, lr}
 800a83e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 800a840:	f04f 31ff 	mov.w	r1, #4294967295
 800a844:	4b0a      	ldr	r3, [pc, #40]	@ (800a870 <ErrorMgr_SetState+0x34>)
 800a846:	6818      	ldr	r0, [r3, #0]
 800a848:	f7ff fb57 	bl	8009efa <osMutexAcquire>
 800a84c:	b938      	cbnz	r0, 800a85e <ErrorMgr_SetState+0x22>
        if (error_mgr.state != state) {
 800a84e:	4b09      	ldr	r3, [pc, #36]	@ (800a874 <ErrorMgr_SetState+0x38>)
 800a850:	7a18      	ldrb	r0, [r3, #8]
 800a852:	42a0      	cmp	r0, r4
 800a854:	d104      	bne.n	800a860 <ErrorMgr_SetState+0x24>
        osMutexRelease(error_mutex);
 800a856:	4b06      	ldr	r3, [pc, #24]	@ (800a870 <ErrorMgr_SetState+0x34>)
 800a858:	6818      	ldr	r0, [r3, #0]
 800a85a:	f7ff fb7d 	bl	8009f58 <osMutexRelease>
}
 800a85e:	bd10      	pop	{r4, pc}
            HandleStateExit(error_mgr.state);
 800a860:	f7ff fee0 	bl	800a624 <HandleStateExit>
            error_mgr.state = state;
 800a864:	4b03      	ldr	r3, [pc, #12]	@ (800a874 <ErrorMgr_SetState+0x38>)
 800a866:	721c      	strb	r4, [r3, #8]
            HandleStateEntry(state);
 800a868:	4620      	mov	r0, r4
 800a86a:	f7ff fee5 	bl	800a638 <HandleStateEntry>
 800a86e:	e7f2      	b.n	800a856 <ErrorMgr_SetState+0x1a>
 800a870:	20000d88 	.word	0x20000d88
 800a874:	20000d8c 	.word	0x20000d8c

0800a878 <ErrorMgr_GetStatus>:
    if (mgr == NULL) {
 800a878:	2800      	cmp	r0, #0
 800a87a:	d032      	beq.n	800a8e2 <ErrorMgr_GetStatus+0x6a>
{
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4604      	mov	r4, r0
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 800a880:	f04f 31ff 	mov.w	r1, #4294967295
 800a884:	4b17      	ldr	r3, [pc, #92]	@ (800a8e4 <ErrorMgr_GetStatus+0x6c>)
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	f7ff fb37 	bl	8009efa <osMutexAcquire>
 800a88c:	b100      	cbz	r0, 800a890 <ErrorMgr_GetStatus+0x18>
}/**
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(mgr, &error_mgr, sizeof(Error_Manager_t));
 800a890:	4d15      	ldr	r5, [pc, #84]	@ (800a8e8 <ErrorMgr_GetStatus+0x70>)
 800a892:	46ac      	mov	ip, r5
 800a894:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a898:	6020      	str	r0, [r4, #0]
 800a89a:	6061      	str	r1, [r4, #4]
 800a89c:	60a2      	str	r2, [r4, #8]
 800a89e:	60e3      	str	r3, [r4, #12]
 800a8a0:	f8dc 0000 	ldr.w	r0, [ip]
 800a8a4:	6120      	str	r0, [r4, #16]
        if (error_mgr.fault_count > 0) {
 800a8a6:	7a6b      	ldrb	r3, [r5, #9]
 800a8a8:	b10b      	cbz	r3, 800a8ae <ErrorMgr_GetStatus+0x36>
            mgr->state = BMS_STATE_FAULT;
 800a8aa:	2305      	movs	r3, #5
 800a8ac:	7223      	strb	r3, [r4, #8]
        error_bytes[0] = RotateByteBits((uint8_t)(error_mgr.error_flags & 0xFF), &byte0_rotation);
 800a8ae:	4d0e      	ldr	r5, [pc, #56]	@ (800a8e8 <ErrorMgr_GetStatus+0x70>)
 800a8b0:	490e      	ldr	r1, [pc, #56]	@ (800a8ec <ErrorMgr_GetStatus+0x74>)
 800a8b2:	7828      	ldrb	r0, [r5, #0]
 800a8b4:	f7ff fe7a 	bl	800a5ac <RotateByteBits>
 800a8b8:	7020      	strb	r0, [r4, #0]
        error_bytes[1] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 8) & 0xFF), &byte1_rotation);
 800a8ba:	490d      	ldr	r1, [pc, #52]	@ (800a8f0 <ErrorMgr_GetStatus+0x78>)
 800a8bc:	7868      	ldrb	r0, [r5, #1]
 800a8be:	f7ff fe75 	bl	800a5ac <RotateByteBits>
 800a8c2:	7060      	strb	r0, [r4, #1]
        error_bytes[2] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 16) & 0xFF), &byte2_rotation);
 800a8c4:	490b      	ldr	r1, [pc, #44]	@ (800a8f4 <ErrorMgr_GetStatus+0x7c>)
 800a8c6:	78a8      	ldrb	r0, [r5, #2]
 800a8c8:	f7ff fe70 	bl	800a5ac <RotateByteBits>
 800a8cc:	70a0      	strb	r0, [r4, #2]
        error_bytes[3] = RotateByteBits((uint8_t)((error_mgr.error_flags >> 24) & 0xFF), &byte3_rotation);
 800a8ce:	490a      	ldr	r1, [pc, #40]	@ (800a8f8 <ErrorMgr_GetStatus+0x80>)
 800a8d0:	78e8      	ldrb	r0, [r5, #3]
 800a8d2:	f7ff fe6b 	bl	800a5ac <RotateByteBits>
 800a8d6:	70e0      	strb	r0, [r4, #3]
        osMutexRelease(error_mutex);
 800a8d8:	4b02      	ldr	r3, [pc, #8]	@ (800a8e4 <ErrorMgr_GetStatus+0x6c>)
 800a8da:	6818      	ldr	r0, [r3, #0]
 800a8dc:	f7ff fb3c 	bl	8009f58 <osMutexRelease>
 800a8e0:	e7d5      	b.n	800a88e <ErrorMgr_GetStatus+0x16>
 800a8e2:	4770      	bx	lr
 800a8e4:	20000d88 	.word	0x20000d88
 800a8e8:	20000d8c 	.word	0x20000d8c
 800a8ec:	20000d80 	.word	0x20000d80
 800a8f0:	20000d7f 	.word	0x20000d7f
 800a8f4:	20000d7e 	.word	0x20000d7e
 800a8f8:	20000d7d 	.word	0x20000d7d

0800a8fc <ErrorMgr_UpdateUptime>:
{
 800a8fc:	b508      	push	{r3, lr}
    if (osMutexAcquire(error_mutex, osWaitForever) == osOK) {
 800a8fe:	f04f 31ff 	mov.w	r1, #4294967295
 800a902:	4b07      	ldr	r3, [pc, #28]	@ (800a920 <ErrorMgr_UpdateUptime+0x24>)
 800a904:	6818      	ldr	r0, [r3, #0]
 800a906:	f7ff faf8 	bl	8009efa <osMutexAcquire>
 800a90a:	b100      	cbz	r0, 800a90e <ErrorMgr_UpdateUptime+0x12>
}
 800a90c:	bd08      	pop	{r3, pc}
        error_mgr.uptime_seconds++;
 800a90e:	4a05      	ldr	r2, [pc, #20]	@ (800a924 <ErrorMgr_UpdateUptime+0x28>)
 800a910:	68d3      	ldr	r3, [r2, #12]
 800a912:	3301      	adds	r3, #1
 800a914:	60d3      	str	r3, [r2, #12]
        osMutexRelease(error_mutex);
 800a916:	4b02      	ldr	r3, [pc, #8]	@ (800a920 <ErrorMgr_UpdateUptime+0x24>)
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	f7ff fb1d 	bl	8009f58 <osMutexRelease>
}
 800a91e:	e7f5      	b.n	800a90c <ErrorMgr_UpdateUptime+0x10>
 800a920:	20000d88 	.word	0x20000d88
 800a924:	20000d8c 	.word	0x20000d8c

0800a928 <MasterStateManagerTask>:
  * @brief  Master state manager task - monitors faults and manages state machine
  * @param  argument: Not used
  * @retval None
  */
void MasterStateManagerTask(void *argument)
{
 800a928:	b508      	push	{r3, lr}
    /* Infinite loop */
    for(;;)
    {
        // Process the state machine
        ProcessStateMachine();
 800a92a:	f7ff fecd 	bl	800a6c8 <ProcessStateMachine>
        
        // Run at configured period
        osDelay(MASTER_STATE_TASK_PERIOD_MS);
 800a92e:	2064      	movs	r0, #100	@ 0x64
 800a930:	f7ff fa8a 	bl	8009e48 <osDelay>
    for(;;)
 800a934:	e7f9      	b.n	800a92a <MasterStateManagerTask+0x2>
	...

0800a938 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a938:	4a13      	ldr	r2, [pc, #76]	@ (800a988 <prvHeapInit+0x50>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a93a:	f012 0f07 	tst.w	r2, #7
 800a93e:	d01f      	beq.n	800a980 <prvHeapInit+0x48>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a940:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a942:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a946:	f5c1 533b 	rsb	r3, r1, #11968	@ 0x2ec0
 800a94a:	3320      	adds	r3, #32
 800a94c:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a94e:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a950:	480e      	ldr	r0, [pc, #56]	@ (800a98c <prvHeapInit+0x54>)
 800a952:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a954:	2100      	movs	r1, #0
 800a956:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a958:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a95a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a95c:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a960:	480b      	ldr	r0, [pc, #44]	@ (800a990 <prvHeapInit+0x58>)
 800a962:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800a964:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a966:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a968:	1a99      	subs	r1, r3, r2
 800a96a:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a96c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a96e:	4b09      	ldr	r3, [pc, #36]	@ (800a994 <prvHeapInit+0x5c>)
 800a970:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a972:	4b09      	ldr	r3, [pc, #36]	@ (800a998 <prvHeapInit+0x60>)
 800a974:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a976:	4b09      	ldr	r3, [pc, #36]	@ (800a99c <prvHeapInit+0x64>)
 800a978:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a97c:	601a      	str	r2, [r3, #0]
}
 800a97e:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a980:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800a984:	e7e4      	b.n	800a950 <prvHeapInit+0x18>
 800a986:	bf00      	nop
 800a988:	20000dc0 	.word	0x20000dc0
 800a98c:	20000db8 	.word	0x20000db8
 800a990:	20000db4 	.word	0x20000db4
 800a994:	20000dac 	.word	0x20000dac
 800a998:	20000db0 	.word	0x20000db0
 800a99c:	20000da0 	.word	0x20000da0

0800a9a0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9a0:	4b16      	ldr	r3, [pc, #88]	@ (800a9fc <prvInsertBlockIntoFreeList+0x5c>)
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4283      	cmp	r3, r0
 800a9a8:	d3fb      	bcc.n	800a9a2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9aa:	6851      	ldr	r1, [r2, #4]
 800a9ac:	eb02 0c01 	add.w	ip, r2, r1
 800a9b0:	4584      	cmp	ip, r0
 800a9b2:	d009      	beq.n	800a9c8 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9b4:	6841      	ldr	r1, [r0, #4]
 800a9b6:	eb00 0c01 	add.w	ip, r0, r1
 800a9ba:	4563      	cmp	r3, ip
 800a9bc:	d009      	beq.n	800a9d2 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9be:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9c0:	4290      	cmp	r0, r2
 800a9c2:	d019      	beq.n	800a9f8 <prvInsertBlockIntoFreeList+0x58>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9c4:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800a9c6:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9c8:	6840      	ldr	r0, [r0, #4]
 800a9ca:	4401      	add	r1, r0
 800a9cc:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	e7f0      	b.n	800a9b4 <prvInsertBlockIntoFreeList+0x14>
{
 800a9d2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9d4:	4c0a      	ldr	r4, [pc, #40]	@ (800aa00 <prvInsertBlockIntoFreeList+0x60>)
 800a9d6:	6824      	ldr	r4, [r4, #0]
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d00b      	beq.n	800a9f4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	4419      	add	r1, r3
 800a9e0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9e2:	6813      	ldr	r3, [r2, #0]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 800a9e8:	4290      	cmp	r0, r2
 800a9ea:	d000      	beq.n	800a9ee <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9ec:	6010      	str	r0, [r2, #0]
	}
}
 800a9ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9f2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9f4:	6004      	str	r4, [r0, #0]
 800a9f6:	e7f7      	b.n	800a9e8 <prvInsertBlockIntoFreeList+0x48>
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	20000db8 	.word	0x20000db8
 800aa00:	20000db4 	.word	0x20000db4

0800aa04 <pvPortMalloc>:
{
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800aa08:	f005 f9aa 	bl	800fd60 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800aa0c:	4b3d      	ldr	r3, [pc, #244]	@ (800ab04 <pvPortMalloc+0x100>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	b1ab      	cbz	r3, 800aa3e <pvPortMalloc+0x3a>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa12:	4b3d      	ldr	r3, [pc, #244]	@ (800ab08 <pvPortMalloc+0x104>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	421c      	tst	r4, r3
 800aa18:	d114      	bne.n	800aa44 <pvPortMalloc+0x40>
			if( xWantedSize > 0 )
 800aa1a:	2c00      	cmp	r4, #0
 800aa1c:	d06a      	beq.n	800aaf4 <pvPortMalloc+0xf0>
				xWantedSize += xHeapStructSize;
 800aa1e:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa22:	f014 0f07 	tst.w	r4, #7
 800aa26:	d002      	beq.n	800aa2e <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa28:	f022 0207 	bic.w	r2, r2, #7
 800aa2c:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa2e:	b1d2      	cbz	r2, 800aa66 <pvPortMalloc+0x62>
 800aa30:	4b36      	ldr	r3, [pc, #216]	@ (800ab0c <pvPortMalloc+0x108>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d31a      	bcc.n	800aa6e <pvPortMalloc+0x6a>
				pxBlock = xStart.pxNextFreeBlock;
 800aa38:	4935      	ldr	r1, [pc, #212]	@ (800ab10 <pvPortMalloc+0x10c>)
 800aa3a:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa3c:	e01d      	b.n	800aa7a <pvPortMalloc+0x76>
			prvHeapInit();
 800aa3e:	f7ff ff7b 	bl	800a938 <prvHeapInit>
 800aa42:	e7e6      	b.n	800aa12 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
 800aa44:	f005 fa2e 	bl	800fea4 <xTaskResumeAll>
void *pvReturn = NULL;
 800aa48:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
 800aa4a:	f000 f965 	bl	800ad18 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa4e:	f015 0f07 	tst.w	r5, #7
 800aa52:	d055      	beq.n	800ab00 <pvPortMalloc+0xfc>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa58:	f383 8811 	msr	BASEPRI, r3
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	e7fe      	b.n	800aa64 <pvPortMalloc+0x60>
	( void ) xTaskResumeAll();
 800aa66:	f005 fa1d 	bl	800fea4 <xTaskResumeAll>
void *pvReturn = NULL;
 800aa6a:	2500      	movs	r5, #0
 800aa6c:	e7ed      	b.n	800aa4a <pvPortMalloc+0x46>
	( void ) xTaskResumeAll();
 800aa6e:	f005 fa19 	bl	800fea4 <xTaskResumeAll>
void *pvReturn = NULL;
 800aa72:	2500      	movs	r5, #0
 800aa74:	e7e9      	b.n	800aa4a <pvPortMalloc+0x46>
					pxPreviousBlock = pxBlock;
 800aa76:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa78:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa7a:	6863      	ldr	r3, [r4, #4]
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d202      	bcs.n	800aa86 <pvPortMalloc+0x82>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d1f7      	bne.n	800aa76 <pvPortMalloc+0x72>
				if( pxBlock != pxEnd )
 800aa86:	4b1f      	ldr	r3, [pc, #124]	@ (800ab04 <pvPortMalloc+0x100>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	42a3      	cmp	r3, r4
 800aa8c:	d014      	beq.n	800aab8 <pvPortMalloc+0xb4>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa8e:	680d      	ldr	r5, [r1, #0]
 800aa90:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa92:	6823      	ldr	r3, [r4, #0]
 800aa94:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa96:	6863      	ldr	r3, [r4, #4]
 800aa98:	1a9b      	subs	r3, r3, r2
 800aa9a:	2b10      	cmp	r3, #16
 800aa9c:	d914      	bls.n	800aac8 <pvPortMalloc+0xc4>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa9e:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaa0:	f010 0f07 	tst.w	r0, #7
 800aaa4:	d00c      	beq.n	800aac0 <pvPortMalloc+0xbc>
 800aaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	e7fe      	b.n	800aab6 <pvPortMalloc+0xb2>
	( void ) xTaskResumeAll();
 800aab8:	f005 f9f4 	bl	800fea4 <xTaskResumeAll>
void *pvReturn = NULL;
 800aabc:	2500      	movs	r5, #0
 800aabe:	e7c4      	b.n	800aa4a <pvPortMalloc+0x46>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aac0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aac2:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aac4:	f7ff ff6c 	bl	800a9a0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aac8:	6862      	ldr	r2, [r4, #4]
 800aaca:	4910      	ldr	r1, [pc, #64]	@ (800ab0c <pvPortMalloc+0x108>)
 800aacc:	680b      	ldr	r3, [r1, #0]
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aad2:	4910      	ldr	r1, [pc, #64]	@ (800ab14 <pvPortMalloc+0x110>)
 800aad4:	6809      	ldr	r1, [r1, #0]
 800aad6:	428b      	cmp	r3, r1
 800aad8:	d201      	bcs.n	800aade <pvPortMalloc+0xda>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aada:	490e      	ldr	r1, [pc, #56]	@ (800ab14 <pvPortMalloc+0x110>)
 800aadc:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aade:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <pvPortMalloc+0x104>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aae6:	2300      	movs	r3, #0
 800aae8:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800aaea:	4a0b      	ldr	r2, [pc, #44]	@ (800ab18 <pvPortMalloc+0x114>)
 800aaec:	6813      	ldr	r3, [r2, #0]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	e000      	b.n	800aaf6 <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 800aaf4:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800aaf6:	f005 f9d5 	bl	800fea4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800aafa:	2d00      	cmp	r5, #0
 800aafc:	d1a7      	bne.n	800aa4e <pvPortMalloc+0x4a>
 800aafe:	e7a4      	b.n	800aa4a <pvPortMalloc+0x46>
}
 800ab00:	4628      	mov	r0, r5
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	20000db4 	.word	0x20000db4
 800ab08:	20000da0 	.word	0x20000da0
 800ab0c:	20000db0 	.word	0x20000db0
 800ab10:	20000db8 	.word	0x20000db8
 800ab14:	20000dac 	.word	0x20000dac
 800ab18:	20000da8 	.word	0x20000da8

0800ab1c <vPortFree>:
	if( pv != NULL )
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d034      	beq.n	800ab8a <vPortFree+0x6e>
{
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800ab24:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab28:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ab2c:	4a17      	ldr	r2, [pc, #92]	@ (800ab8c <vPortFree+0x70>)
 800ab2e:	6812      	ldr	r2, [r2, #0]
 800ab30:	4213      	tst	r3, r2
 800ab32:	d108      	bne.n	800ab46 <vPortFree+0x2a>
 800ab34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	e7fe      	b.n	800ab44 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab46:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800ab4a:	b141      	cbz	r1, 800ab5e <vPortFree+0x42>
 800ab4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	e7fe      	b.n	800ab5c <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab5e:	ea23 0302 	bic.w	r3, r3, r2
 800ab62:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800ab66:	f005 f8fb 	bl	800fd60 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab6a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ab6e:	4a08      	ldr	r2, [pc, #32]	@ (800ab90 <vPortFree+0x74>)
 800ab70:	6813      	ldr	r3, [r2, #0]
 800ab72:	440b      	add	r3, r1
 800ab74:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab76:	4628      	mov	r0, r5
 800ab78:	f7ff ff12 	bl	800a9a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab7c:	4a05      	ldr	r2, [pc, #20]	@ (800ab94 <vPortFree+0x78>)
 800ab7e:	6813      	ldr	r3, [r2, #0]
 800ab80:	3301      	adds	r3, #1
 800ab82:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ab84:	f005 f98e 	bl	800fea4 <xTaskResumeAll>
}
 800ab88:	bd38      	pop	{r3, r4, r5, pc}
 800ab8a:	4770      	bx	lr
 800ab8c:	20000da0 	.word	0x20000da0
 800ab90:	20000db0 	.word	0x20000db0
 800ab94:	20000da4 	.word	0x20000da4

0800ab98 <xPortGetFreeHeapSize>:
}
 800ab98:	4b01      	ldr	r3, [pc, #4]	@ (800aba0 <xPortGetFreeHeapSize+0x8>)
 800ab9a:	6818      	ldr	r0, [r3, #0]
 800ab9c:	4770      	bx	lr
 800ab9e:	bf00      	nop
 800aba0:	20000db0 	.word	0x20000db0

0800aba4 <xPortGetMinimumEverFreeHeapSize>:
}
 800aba4:	4b01      	ldr	r3, [pc, #4]	@ (800abac <xPortGetMinimumEverFreeHeapSize+0x8>)
 800aba6:	6818      	ldr	r0, [r3, #0]
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000dac 	.word	0x20000dac

0800abb0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abb0:	f100 0308 	add.w	r3, r0, #8
 800abb4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abb6:	f04f 32ff 	mov.w	r2, #4294967295
 800abba:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abbc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abbe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800abc4:	4770      	bx	lr

0800abc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800abc6:	2300      	movs	r3, #0
 800abc8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800abca:	4770      	bx	lr

0800abcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800abcc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800abce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800abd0:	689a      	ldr	r2, [r3, #8]
 800abd2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800abd4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800abd6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800abd8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800abda:	6803      	ldr	r3, [r0, #0]
 800abdc:	3301      	adds	r3, #1
 800abde:	6003      	str	r3, [r0, #0]
}
 800abe0:	4770      	bx	lr

0800abe2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800abe2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800abe4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800abe6:	f1b5 3fff 	cmp.w	r5, #4294967295
 800abea:	d011      	beq.n	800ac10 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800abec:	f100 0308 	add.w	r3, r0, #8
 800abf0:	461c      	mov	r4, r3
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	42aa      	cmp	r2, r5
 800abf8:	d9fa      	bls.n	800abf0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800abfa:	6863      	ldr	r3, [r4, #4]
 800abfc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800abfe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ac00:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ac02:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ac04:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ac06:	6803      	ldr	r3, [r0, #0]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	6003      	str	r3, [r0, #0]
}
 800ac0c:	bc30      	pop	{r4, r5}
 800ac0e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac10:	6904      	ldr	r4, [r0, #16]
 800ac12:	e7f2      	b.n	800abfa <vListInsert+0x18>

0800ac14 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ac14:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ac16:	6841      	ldr	r1, [r0, #4]
 800ac18:	6882      	ldr	r2, [r0, #8]
 800ac1a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ac1c:	6841      	ldr	r1, [r0, #4]
 800ac1e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	4282      	cmp	r2, r0
 800ac24:	d006      	beq.n	800ac34 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ac26:	2200      	movs	r2, #0
 800ac28:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	3a01      	subs	r2, #1
 800ac2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ac30:	6818      	ldr	r0, [r3, #0]
}
 800ac32:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ac34:	6882      	ldr	r2, [r0, #8]
 800ac36:	605a      	str	r2, [r3, #4]
 800ac38:	e7f5      	b.n	800ac26 <uxListRemove+0x12>
	...

0800ac3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ac3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac3e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac40:	ad03      	add	r5, sp, #12
 800ac42:	2400      	movs	r4, #0
 800ac44:	9403      	str	r4, [sp, #12]
 800ac46:	9404      	str	r4, [sp, #16]
 800ac48:	9405      	str	r4, [sp, #20]
 800ac4a:	9406      	str	r4, [sp, #24]
 800ac4c:	9407      	str	r4, [sp, #28]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac4e:	4b20      	ldr	r3, [pc, #128]	@ (800acd0 <MX_GPIO_Init+0x94>)
 800ac50:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac52:	f042 0201 	orr.w	r2, r2, #1
 800ac56:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ac58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac5a:	f002 0201 	and.w	r2, r2, #1
 800ac5e:	9201      	str	r2, [sp, #4]
 800ac60:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac64:	f042 0202 	orr.w	r2, r2, #2
 800ac68:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ac6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac6c:	f003 0302 	and.w	r3, r3, #2
 800ac70:	9302      	str	r3, [sp, #8]
 800ac72:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUX_SIG1_Pin|MUX_SIG3_Pin|BMS_RESET_Pin, GPIO_PIN_RESET);
 800ac74:	4e17      	ldr	r6, [pc, #92]	@ (800acd4 <MX_GPIO_Init+0x98>)
 800ac76:	4622      	mov	r2, r4
 800ac78:	2162      	movs	r1, #98	@ 0x62
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f002 fea6 	bl	800d9cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SIG2_GPIO_Port, MUX_SIG2_Pin, GPIO_PIN_RESET);
 800ac80:	4622      	mov	r2, r4
 800ac82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ac86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ac8a:	f002 fe9f 	bl	800d9cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MUX_SIG1_Pin MUX_SIG3_Pin BMS_RESET_Pin */
  GPIO_InitStruct.Pin = MUX_SIG1_Pin|MUX_SIG3_Pin|BMS_RESET_Pin;
 800ac8e:	2362      	movs	r3, #98	@ 0x62
 800ac90:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ac92:	2701      	movs	r7, #1
 800ac94:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac96:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac98:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f002 fdbd 	bl	800d81c <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_SIG2_Pin */
  GPIO_InitStruct.Pin = MUX_SIG2_Pin;
 800aca2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aca6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aca8:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acaa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acac:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(MUX_SIG2_GPIO_Port, &GPIO_InitStruct);
 800acae:	4629      	mov	r1, r5
 800acb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800acb4:	f002 fdb2 	bl	800d81c <HAL_GPIO_Init>

  /*Configure GPIO pin : ALERT_IN_Pin */
  GPIO_InitStruct.Pin = ALERT_IN_Pin;
 800acb8:	2380      	movs	r3, #128	@ 0x80
 800acba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800acbc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800acc0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acc2:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(ALERT_IN_GPIO_Port, &GPIO_InitStruct);
 800acc4:	4629      	mov	r1, r5
 800acc6:	4630      	mov	r0, r6
 800acc8:	f002 fda8 	bl	800d81c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800accc:	b009      	add	sp, #36	@ 0x24
 800acce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd0:	40021000 	.word	0x40021000
 800acd4:	48000400 	.word	0x48000400

0800acd8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800acd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800acda:	2001      	movs	r0, #1
 800acdc:	f7ff f8b4 	bl	8009e48 <osDelay>
  for(;;)
 800ace0:	e7fb      	b.n	800acda <StartDefaultTask+0x2>

0800ace2 <ReadBQBMS1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellVoltageBMS1 */
void ReadBQBMS1(void *argument)
{
 800ace2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellVoltageBMS1 */
  /* Call the BMS1 cell voltage monitoring task */
  BQ_MonitorTask(argument);
 800ace4:	f7fe f858 	bl	8008d98 <BQ_MonitorTask>
  /* USER CODE END ReadCellVoltageBMS1 */
}
 800ace8:	bd08      	pop	{r3, pc}

0800acea <ReadBQBMS2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellVoltageBMS2 */
void ReadBQBMS2(void *argument)
{
 800acea:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellVoltageBMS2 */
  /* Call the BMS2 cell voltage monitoring task */
  BQ_MonitorTask_BMS2(argument);
 800acec:	f7fe f99e 	bl	800902c <BQ_MonitorTask_BMS2>
  /* USER CODE END ReadCellVoltageBMS2 */
}
 800acf0:	bd08      	pop	{r3, pc}

0800acf2 <ReadCellTemps>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadCellTemps */
void ReadCellTemps(void *argument)
{
 800acf2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ReadCellTemps */
  /* Call the cell temperature monitoring task */
  CellTemp_MonitorTask(argument);
 800acf4:	f7fe fe9e 	bl	8009a34 <CellTemp_MonitorTask>
  /* USER CODE END ReadCellTemps */
}
 800acf8:	bd08      	pop	{r3, pc}
	...

0800acfc <BMSResetHandlerTask>:
*        Using a dedicated task prevents blocking the CAN manager during
*        the 600ms reset sequence (500ms + 100ms delays).
*/
/* USER CODE END Header_BMSResetHandlerTask */
void BMSResetHandlerTask(void *argument)
{
 800acfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BMSResetHandlerTask */
  /* Infinite loop */
  for(;;)
  {
    // Wait indefinitely for reset semaphore signal
    if (osSemaphoreAcquire(BMSResetSemHandle, osWaitForever) == osOK)
 800acfe:	f04f 31ff 	mov.w	r1, #4294967295
 800ad02:	4b04      	ldr	r3, [pc, #16]	@ (800ad14 <BMSResetHandlerTask+0x18>)
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	f7ff f9a7 	bl	800a058 <osSemaphoreAcquire>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	d1f7      	bne.n	800acfe <BMSResetHandlerTask+0x2>
    {
      // Perform the chip reset (blocks for 600ms total)
      BQ_ResetChips();
 800ad0e:	f7fd fd67 	bl	80087e0 <BQ_ResetChips>
 800ad12:	e7f4      	b.n	800acfe <BMSResetHandlerTask+0x2>
 800ad14:	20003ca8 	.word	0x20003ca8

0800ad18 <vApplicationMallocFailedHook>:
{
 800ad18:	b500      	push	{lr}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
    HAL_GPIO_TogglePin(GPIOB, MUX_SIG1_Pin);
 800ad2c:	2102      	movs	r1, #2
 800ad2e:	4806      	ldr	r0, [pc, #24]	@ (800ad48 <vApplicationMallocFailedHook+0x30>)
 800ad30:	f002 fe51 	bl	800d9d6 <HAL_GPIO_TogglePin>
    for(volatile uint32_t i = 0; i < 100000; i++);  // Busy wait
 800ad34:	2300      	movs	r3, #0
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	9a01      	ldr	r2, [sp, #4]
 800ad3a:	4b04      	ldr	r3, [pc, #16]	@ (800ad4c <vApplicationMallocFailedHook+0x34>)
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d8f5      	bhi.n	800ad2c <vApplicationMallocFailedHook+0x14>
 800ad40:	9b01      	ldr	r3, [sp, #4]
 800ad42:	3301      	adds	r3, #1
 800ad44:	9301      	str	r3, [sp, #4]
 800ad46:	e7f7      	b.n	800ad38 <vApplicationMallocFailedHook+0x20>
 800ad48:	48000400 	.word	0x48000400
 800ad4c:	0001869f 	.word	0x0001869f

0800ad50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 800ad52:	6802      	ldr	r2, [r0, #0]
 800ad54:	4b03      	ldr	r3, [pc, #12]	@ (800ad64 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d000      	beq.n	800ad5c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800ad5a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800ad5c:	f001 f98c 	bl	800c078 <HAL_IncTick>
}
 800ad60:	e7fb      	b.n	800ad5a <HAL_TIM_PeriodElapsedCallback+0xa>
 800ad62:	bf00      	nop
 800ad64:	40001000 	.word	0x40001000

0800ad68 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800ad68:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800ad6a:	e7fe      	b.n	800ad6a <Error_Handler+0x2>

0800ad6c <MX_ADC1_Init>:
{
 800ad6c:	b500      	push	{lr}
 800ad6e:	b087      	sub	sp, #28
  ADC_ChannelConfTypeDef sConfig = {0};
 800ad70:	2300      	movs	r3, #0
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	9302      	str	r3, [sp, #8]
 800ad78:	9303      	str	r3, [sp, #12]
 800ad7a:	9304      	str	r3, [sp, #16]
 800ad7c:	9305      	str	r3, [sp, #20]
  hadc1.Instance = ADC1;
 800ad7e:	4818      	ldr	r0, [pc, #96]	@ (800ade0 <MX_ADC1_Init+0x74>)
 800ad80:	4a18      	ldr	r2, [pc, #96]	@ (800ade4 <MX_ADC1_Init+0x78>)
 800ad82:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800ad84:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ad86:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ad88:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800ad8a:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ad8c:	2204      	movs	r2, #4
 800ad8e:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800ad90:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800ad92:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 800ad94:	2201      	movs	r2, #1
 800ad96:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ad98:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ad9c:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ad9e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800ada0:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800ada4:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800ada6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800adaa:	f001 f9a5 	bl	800c0f8 <HAL_ADC_Init>
 800adae:	b998      	cbnz	r0, 800add8 <MX_ADC1_Init+0x6c>
  sConfig.Channel = ADC_CHANNEL_5;  // ADC1 (PA0) - first thermistor channel
 800adb0:	4b0d      	ldr	r3, [pc, #52]	@ (800ade8 <MX_ADC1_Init+0x7c>)
 800adb2:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800adb4:	2306      	movs	r3, #6
 800adb6:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;  // Longer sampling for high impedance thermistors
 800adb8:	2307      	movs	r3, #7
 800adba:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800adbc:	237f      	movs	r3, #127	@ 0x7f
 800adbe:	9303      	str	r3, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800adc0:	2304      	movs	r3, #4
 800adc2:	9304      	str	r3, [sp, #16]
  sConfig.Offset = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800adc8:	4669      	mov	r1, sp
 800adca:	4805      	ldr	r0, [pc, #20]	@ (800ade0 <MX_ADC1_Init+0x74>)
 800adcc:	f001 fad6 	bl	800c37c <HAL_ADC_ConfigChannel>
 800add0:	b920      	cbnz	r0, 800addc <MX_ADC1_Init+0x70>
}
 800add2:	b007      	add	sp, #28
 800add4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800add8:	f7ff ffc6 	bl	800ad68 <Error_Handler>
    Error_Handler();
 800addc:	f7ff ffc4 	bl	800ad68 <Error_Handler>
 800ade0:	20003dc0 	.word	0x20003dc0
 800ade4:	50040000 	.word	0x50040000
 800ade8:	14f00020 	.word	0x14f00020

0800adec <MX_CAN1_Init>:
{
 800adec:	b500      	push	{lr}
 800adee:	b08b      	sub	sp, #44	@ 0x2c
  hcan1.Instance = CAN1;
 800adf0:	4818      	ldr	r0, [pc, #96]	@ (800ae54 <MX_CAN1_Init+0x68>)
 800adf2:	4b19      	ldr	r3, [pc, #100]	@ (800ae58 <MX_CAN1_Init+0x6c>)
 800adf4:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 10;
 800adf6:	230a      	movs	r3, #10
 800adf8:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800adfa:	2300      	movs	r3, #0
 800adfc:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800adfe:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800ae00:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800ae04:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800ae06:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ae0a:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800ae0c:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800ae0e:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800ae10:	7683      	strb	r3, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800ae12:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800ae14:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800ae16:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800ae18:	f001 feb3 	bl	800cb82 <HAL_CAN_Init>
 800ae1c:	b9a8      	cbnz	r0, 800ae4a <MX_CAN1_Init+0x5e>
  filterConfig.FilterBank = 0;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	9305      	str	r3, [sp, #20]
  filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800ae22:	9306      	str	r3, [sp, #24]
  filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800ae24:	2201      	movs	r2, #1
 800ae26:	9207      	str	r2, [sp, #28]
  filterConfig.FilterIdHigh = 0x0000;
 800ae28:	9300      	str	r3, [sp, #0]
  filterConfig.FilterIdLow = 0x0004;   // Only IDE bit set (extended ID)
 800ae2a:	2104      	movs	r1, #4
 800ae2c:	9101      	str	r1, [sp, #4]
  filterConfig.FilterMaskIdHigh = 0x0000;  // Don't care about any ID bits
 800ae2e:	9302      	str	r3, [sp, #8]
  filterConfig.FilterMaskIdLow = 0x0004;   // But we DO care about IDE bit (only extended)
 800ae30:	9103      	str	r1, [sp, #12]
  filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800ae32:	9304      	str	r3, [sp, #16]
  filterConfig.FilterActivation = ENABLE;
 800ae34:	9208      	str	r2, [sp, #32]
  filterConfig.SlaveStartFilterBank = 14;
 800ae36:	230e      	movs	r3, #14
 800ae38:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &filterConfig) != HAL_OK)
 800ae3a:	4669      	mov	r1, sp
 800ae3c:	4805      	ldr	r0, [pc, #20]	@ (800ae54 <MX_CAN1_Init+0x68>)
 800ae3e:	f001 ff46 	bl	800ccce <HAL_CAN_ConfigFilter>
 800ae42:	b920      	cbnz	r0, 800ae4e <MX_CAN1_Init+0x62>
}
 800ae44:	b00b      	add	sp, #44	@ 0x2c
 800ae46:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800ae4a:	f7ff ff8d 	bl	800ad68 <Error_Handler>
    Error_Handler();
 800ae4e:	f7ff ff8b 	bl	800ad68 <Error_Handler>
 800ae52:	bf00      	nop
 800ae54:	20003d98 	.word	0x20003d98
 800ae58:	40006400 	.word	0x40006400

0800ae5c <MX_CRC_Init>:
{
 800ae5c:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800ae5e:	4808      	ldr	r0, [pc, #32]	@ (800ae80 <MX_CRC_Init+0x24>)
 800ae60:	4b08      	ldr	r3, [pc, #32]	@ (800ae84 <MX_CRC_Init+0x28>)
 800ae62:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800ae64:	2300      	movs	r3, #0
 800ae66:	7103      	strb	r3, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800ae68:	7143      	strb	r3, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800ae6a:	6143      	str	r3, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800ae6c:	6183      	str	r3, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	6203      	str	r3, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800ae72:	f002 fab5 	bl	800d3e0 <HAL_CRC_Init>
 800ae76:	b900      	cbnz	r0, 800ae7a <MX_CRC_Init+0x1e>
}
 800ae78:	bd08      	pop	{r3, pc}
    Error_Handler();
 800ae7a:	f7ff ff75 	bl	800ad68 <Error_Handler>
 800ae7e:	bf00      	nop
 800ae80:	20003d74 	.word	0x20003d74
 800ae84:	40023000 	.word	0x40023000

0800ae88 <MX_I2C1_Init>:
{
 800ae88:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800ae8a:	4811      	ldr	r0, [pc, #68]	@ (800aed0 <MX_I2C1_Init+0x48>)
 800ae8c:	4b11      	ldr	r3, [pc, #68]	@ (800aed4 <MX_I2C1_Init+0x4c>)
 800ae8e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800ae90:	4b11      	ldr	r3, [pc, #68]	@ (800aed8 <MX_I2C1_Init+0x50>)
 800ae92:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ae98:	2201      	movs	r2, #1
 800ae9a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ae9c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800ae9e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800aea0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aea2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aea4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800aea6:	f002 ff4a 	bl	800dd3e <HAL_I2C_Init>
 800aeaa:	b950      	cbnz	r0, 800aec2 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800aeac:	2100      	movs	r1, #0
 800aeae:	4808      	ldr	r0, [pc, #32]	@ (800aed0 <MX_I2C1_Init+0x48>)
 800aeb0:	f003 f9dd 	bl	800e26e <HAL_I2CEx_ConfigAnalogFilter>
 800aeb4:	b938      	cbnz	r0, 800aec6 <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	4805      	ldr	r0, [pc, #20]	@ (800aed0 <MX_I2C1_Init+0x48>)
 800aeba:	f003 fa05 	bl	800e2c8 <HAL_I2CEx_ConfigDigitalFilter>
 800aebe:	b920      	cbnz	r0, 800aeca <MX_I2C1_Init+0x42>
}
 800aec0:	bd08      	pop	{r3, pc}
    Error_Handler();
 800aec2:	f7ff ff51 	bl	800ad68 <Error_Handler>
    Error_Handler();
 800aec6:	f7ff ff4f 	bl	800ad68 <Error_Handler>
    Error_Handler();
 800aeca:	f7ff ff4d 	bl	800ad68 <Error_Handler>
 800aece:	bf00      	nop
 800aed0:	20003d20 	.word	0x20003d20
 800aed4:	40005400 	.word	0x40005400
 800aed8:	00503d58 	.word	0x00503d58

0800aedc <MX_I2C3_Init>:
{
 800aedc:	b508      	push	{r3, lr}
  hi2c3.Instance = I2C3;
 800aede:	4811      	ldr	r0, [pc, #68]	@ (800af24 <MX_I2C3_Init+0x48>)
 800aee0:	4b11      	ldr	r3, [pc, #68]	@ (800af28 <MX_I2C3_Init+0x4c>)
 800aee2:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x00503D58;
 800aee4:	4b11      	ldr	r3, [pc, #68]	@ (800af2c <MX_I2C3_Init+0x50>)
 800aee6:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aeec:	2201      	movs	r2, #1
 800aeee:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aef0:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800aef2:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800aef4:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aef6:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aef8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800aefa:	f002 ff20 	bl	800dd3e <HAL_I2C_Init>
 800aefe:	b950      	cbnz	r0, 800af16 <MX_I2C3_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800af00:	2100      	movs	r1, #0
 800af02:	4808      	ldr	r0, [pc, #32]	@ (800af24 <MX_I2C3_Init+0x48>)
 800af04:	f003 f9b3 	bl	800e26e <HAL_I2CEx_ConfigAnalogFilter>
 800af08:	b938      	cbnz	r0, 800af1a <MX_I2C3_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800af0a:	2100      	movs	r1, #0
 800af0c:	4805      	ldr	r0, [pc, #20]	@ (800af24 <MX_I2C3_Init+0x48>)
 800af0e:	f003 f9db 	bl	800e2c8 <HAL_I2CEx_ConfigDigitalFilter>
 800af12:	b920      	cbnz	r0, 800af1e <MX_I2C3_Init+0x42>
}
 800af14:	bd08      	pop	{r3, pc}
    Error_Handler();
 800af16:	f7ff ff27 	bl	800ad68 <Error_Handler>
    Error_Handler();
 800af1a:	f7ff ff25 	bl	800ad68 <Error_Handler>
    Error_Handler();
 800af1e:	f7ff ff23 	bl	800ad68 <Error_Handler>
 800af22:	bf00      	nop
 800af24:	20003ccc 	.word	0x20003ccc
 800af28:	40005c00 	.word	0x40005c00
 800af2c:	00503d58 	.word	0x00503d58

0800af30 <SystemClock_Config>:
{
 800af30:	b500      	push	{lr}
 800af32:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800af34:	2244      	movs	r2, #68	@ 0x44
 800af36:	2100      	movs	r1, #0
 800af38:	a805      	add	r0, sp, #20
 800af3a:	f005 fccc 	bl	80108d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800af3e:	2300      	movs	r3, #0
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	9302      	str	r3, [sp, #8]
 800af46:	9303      	str	r3, [sp, #12]
 800af48:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800af4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800af4e:	f003 fb75 	bl	800e63c <HAL_PWREx_ControlVoltageScaling>
 800af52:	bb18      	cbnz	r0, 800af9c <SystemClock_Config+0x6c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800af54:	2302      	movs	r3, #2
 800af56:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800af58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af5c:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800af5e:	2210      	movs	r2, #16
 800af60:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af62:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800af64:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800af66:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800af68:	2214      	movs	r2, #20
 800af6a:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800af6c:	2207      	movs	r2, #7
 800af6e:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800af70:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800af72:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800af74:	a805      	add	r0, sp, #20
 800af76:	f003 fc45 	bl	800e804 <HAL_RCC_OscConfig>
 800af7a:	b988      	cbnz	r0, 800afa0 <SystemClock_Config+0x70>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800af7c:	230f      	movs	r3, #15
 800af7e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800af80:	2303      	movs	r3, #3
 800af82:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800af84:	2300      	movs	r3, #0
 800af86:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800af88:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800af8a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800af8c:	2104      	movs	r1, #4
 800af8e:	4668      	mov	r0, sp
 800af90:	f003 ff6e 	bl	800ee70 <HAL_RCC_ClockConfig>
 800af94:	b930      	cbnz	r0, 800afa4 <SystemClock_Config+0x74>
}
 800af96:	b017      	add	sp, #92	@ 0x5c
 800af98:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800af9c:	f7ff fee4 	bl	800ad68 <Error_Handler>
    Error_Handler();
 800afa0:	f7ff fee2 	bl	800ad68 <Error_Handler>
    Error_Handler();  
 800afa4:	f7ff fee0 	bl	800ad68 <Error_Handler>

0800afa8 <main>:
{
 800afa8:	b508      	push	{r3, lr}
 800afaa:	b672      	cpsid	i
  SysTick->CTRL = 0;
 800afac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800afb0:	2200      	movs	r2, #0
 800afb2:	611a      	str	r2, [r3, #16]
  SysTick->LOAD = 0;
 800afb4:	615a      	str	r2, [r3, #20]
  SysTick->VAL = 0;
 800afb6:	619a      	str	r2, [r3, #24]
  HAL_Init();
 800afb8:	f001 f84f 	bl	800c05a <HAL_Init>
  SystemClock_Config();
 800afbc:	f7ff ffb8 	bl	800af30 <SystemClock_Config>
  MX_GPIO_Init();
 800afc0:	f7ff fe3c 	bl	800ac3c <MX_GPIO_Init>
  MX_ADC1_Init();
 800afc4:	f7ff fed2 	bl	800ad6c <MX_ADC1_Init>
  MX_CAN1_Init();
 800afc8:	f7ff ff10 	bl	800adec <MX_CAN1_Init>
  MX_CRC_Init();
 800afcc:	f7ff ff46 	bl	800ae5c <MX_CRC_Init>
  MX_I2C1_Init();
 800afd0:	f7ff ff5a 	bl	800ae88 <MX_I2C1_Init>
  MX_I2C3_Init();
 800afd4:	f7ff ff82 	bl	800aedc <MX_I2C3_Init>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800afd8:	217f      	movs	r1, #127	@ 0x7f
 800afda:	4835      	ldr	r0, [pc, #212]	@ (800b0b0 <main+0x108>)
 800afdc:	f001 fd85 	bl	800caea <HAL_ADCEx_Calibration_Start>
 800afe0:	b108      	cbz	r0, 800afe6 <main+0x3e>
    Error_Handler();
 800afe2:	f7ff fec1 	bl	800ad68 <Error_Handler>
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800afe6:	4833      	ldr	r0, [pc, #204]	@ (800b0b4 <main+0x10c>)
 800afe8:	f001 fef4 	bl	800cdd4 <HAL_CAN_Start>
 800afec:	b108      	cbz	r0, 800aff2 <main+0x4a>
    Error_Handler();
 800afee:	f7ff febb 	bl	800ad68 <Error_Handler>
  osKernelInitialize();
 800aff2:	f7fe fe97 	bl	8009d24 <osKernelInitialize>
  I2C1Handle = osMutexNew(&I2C1_attributes);
 800aff6:	4830      	ldr	r0, [pc, #192]	@ (800b0b8 <main+0x110>)
 800aff8:	f7fe ff34 	bl	8009e64 <osMutexNew>
 800affc:	4b2f      	ldr	r3, [pc, #188]	@ (800b0bc <main+0x114>)
 800affe:	6018      	str	r0, [r3, #0]
  I2C3Handle = osMutexNew(&I2C3_attributes);
 800b000:	482f      	ldr	r0, [pc, #188]	@ (800b0c0 <main+0x118>)
 800b002:	f7fe ff2f 	bl	8009e64 <osMutexNew>
 800b006:	4b2f      	ldr	r3, [pc, #188]	@ (800b0c4 <main+0x11c>)
 800b008:	6018      	str	r0, [r3, #0]
  CANHandle = osMutexNew(&CAN_attributes);
 800b00a:	482f      	ldr	r0, [pc, #188]	@ (800b0c8 <main+0x120>)
 800b00c:	f7fe ff2a 	bl	8009e64 <osMutexNew>
 800b010:	4b2e      	ldr	r3, [pc, #184]	@ (800b0cc <main+0x124>)
 800b012:	6018      	str	r0, [r3, #0]
  BMSResetSemHandle = osSemaphoreNew(1, 0, &BMSResetSem_attributes);
 800b014:	4a2e      	ldr	r2, [pc, #184]	@ (800b0d0 <main+0x128>)
 800b016:	2100      	movs	r1, #0
 800b018:	2001      	movs	r0, #1
 800b01a:	f7fe ffc4 	bl	8009fa6 <osSemaphoreNew>
 800b01e:	4b2d      	ldr	r3, [pc, #180]	@ (800b0d4 <main+0x12c>)
 800b020:	6018      	str	r0, [r3, #0]
  if (BMSResetSemHandle == NULL)
 800b022:	b130      	cbz	r0, 800b032 <main+0x8a>
  Config_Init();
 800b024:	f7ff fa6c 	bl	800a500 <Config_Init>
  if (ErrorMgr_Init() != HAL_OK)
 800b028:	f7ff fb60 	bl	800a6ec <ErrorMgr_Init>
 800b02c:	b118      	cbz	r0, 800b036 <main+0x8e>
    Error_Handler();
 800b02e:	f7ff fe9b 	bl	800ad68 <Error_Handler>
    Error_Handler();
 800b032:	f7ff fe99 	bl	800ad68 <Error_Handler>
  if (CAN_Manager_Init() != HAL_OK)
 800b036:	f7fe f93d 	bl	80092b4 <CAN_Manager_Init>
 800b03a:	b108      	cbz	r0, 800b040 <main+0x98>
    Error_Handler();
 800b03c:	f7ff fe94 	bl	800ad68 <Error_Handler>
  ErrorMgr_SetState(BMS_STATE_IDLE);
 800b040:	2001      	movs	r0, #1
 800b042:	f7ff fbfb 	bl	800a83c <ErrorMgr_SetState>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800b046:	4a24      	ldr	r2, [pc, #144]	@ (800b0d8 <main+0x130>)
 800b048:	2100      	movs	r1, #0
 800b04a:	4824      	ldr	r0, [pc, #144]	@ (800b0dc <main+0x134>)
 800b04c:	f7fe fea2 	bl	8009d94 <osThreadNew>
 800b050:	4b23      	ldr	r3, [pc, #140]	@ (800b0e0 <main+0x138>)
 800b052:	6018      	str	r0, [r3, #0]
  CellVoltageBMS1Handle = osThreadNew(ReadBQBMS1, NULL, &CellVoltageBMS1_attributes);
 800b054:	4a23      	ldr	r2, [pc, #140]	@ (800b0e4 <main+0x13c>)
 800b056:	2100      	movs	r1, #0
 800b058:	4823      	ldr	r0, [pc, #140]	@ (800b0e8 <main+0x140>)
 800b05a:	f7fe fe9b 	bl	8009d94 <osThreadNew>
 800b05e:	4b23      	ldr	r3, [pc, #140]	@ (800b0ec <main+0x144>)
 800b060:	6018      	str	r0, [r3, #0]
  CellVoltageBMS2Handle = osThreadNew(ReadBQBMS2, NULL, &CellVoltageBMS2_attributes);
 800b062:	4a23      	ldr	r2, [pc, #140]	@ (800b0f0 <main+0x148>)
 800b064:	2100      	movs	r1, #0
 800b066:	4823      	ldr	r0, [pc, #140]	@ (800b0f4 <main+0x14c>)
 800b068:	f7fe fe94 	bl	8009d94 <osThreadNew>
 800b06c:	4b22      	ldr	r3, [pc, #136]	@ (800b0f8 <main+0x150>)
 800b06e:	6018      	str	r0, [r3, #0]
  CellTemperatureHandle = osThreadNew(ReadCellTemps, NULL, &CellTemperature_attributes);
 800b070:	4a22      	ldr	r2, [pc, #136]	@ (800b0fc <main+0x154>)
 800b072:	2100      	movs	r1, #0
 800b074:	4822      	ldr	r0, [pc, #136]	@ (800b100 <main+0x158>)
 800b076:	f7fe fe8d 	bl	8009d94 <osThreadNew>
 800b07a:	4b22      	ldr	r3, [pc, #136]	@ (800b104 <main+0x15c>)
 800b07c:	6018      	str	r0, [r3, #0]
  CANManagerHandle = osThreadNew(CAN_ManagerTask, NULL, &CANManager_attributes);
 800b07e:	4a22      	ldr	r2, [pc, #136]	@ (800b108 <main+0x160>)
 800b080:	2100      	movs	r1, #0
 800b082:	4822      	ldr	r0, [pc, #136]	@ (800b10c <main+0x164>)
 800b084:	f7fe fe86 	bl	8009d94 <osThreadNew>
 800b088:	4b21      	ldr	r3, [pc, #132]	@ (800b110 <main+0x168>)
 800b08a:	6018      	str	r0, [r3, #0]
  BMSResetHandlerHandle = osThreadNew(BMSResetHandlerTask, NULL, &BMSResetHandler_attributes);
 800b08c:	4a21      	ldr	r2, [pc, #132]	@ (800b114 <main+0x16c>)
 800b08e:	2100      	movs	r1, #0
 800b090:	4821      	ldr	r0, [pc, #132]	@ (800b118 <main+0x170>)
 800b092:	f7fe fe7f 	bl	8009d94 <osThreadNew>
 800b096:	4b21      	ldr	r3, [pc, #132]	@ (800b11c <main+0x174>)
 800b098:	6018      	str	r0, [r3, #0]
  MasterStateManagerHandle = osThreadNew(MasterStateManagerTask, NULL, &MasterStateManager_attributes);
 800b09a:	4a21      	ldr	r2, [pc, #132]	@ (800b120 <main+0x178>)
 800b09c:	2100      	movs	r1, #0
 800b09e:	4821      	ldr	r0, [pc, #132]	@ (800b124 <main+0x17c>)
 800b0a0:	f7fe fe78 	bl	8009d94 <osThreadNew>
 800b0a4:	4b20      	ldr	r3, [pc, #128]	@ (800b128 <main+0x180>)
 800b0a6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800b0a8:	f7fe fe4e 	bl	8009d48 <osKernelStart>
  while (1)
 800b0ac:	e7fe      	b.n	800b0ac <main+0x104>
 800b0ae:	bf00      	nop
 800b0b0:	20003dc0 	.word	0x20003dc0
 800b0b4:	20003d98 	.word	0x20003d98
 800b0b8:	08010d98 	.word	0x08010d98
 800b0bc:	20003cb4 	.word	0x20003cb4
 800b0c0:	08010d88 	.word	0x08010d88
 800b0c4:	20003cb0 	.word	0x20003cb0
 800b0c8:	08010d78 	.word	0x08010d78
 800b0cc:	20003cac 	.word	0x20003cac
 800b0d0:	08010d68 	.word	0x08010d68
 800b0d4:	20003ca8 	.word	0x20003ca8
 800b0d8:	08010e38 	.word	0x08010e38
 800b0dc:	0800acd9 	.word	0x0800acd9
 800b0e0:	20003cc8 	.word	0x20003cc8
 800b0e4:	08010e14 	.word	0x08010e14
 800b0e8:	0800ace3 	.word	0x0800ace3
 800b0ec:	20003cc4 	.word	0x20003cc4
 800b0f0:	08010df0 	.word	0x08010df0
 800b0f4:	0800aceb 	.word	0x0800aceb
 800b0f8:	20003cc0 	.word	0x20003cc0
 800b0fc:	08010dcc 	.word	0x08010dcc
 800b100:	0800acf3 	.word	0x0800acf3
 800b104:	20003cbc 	.word	0x20003cbc
 800b108:	08010da8 	.word	0x08010da8
 800b10c:	0800965d 	.word	0x0800965d
 800b110:	20003cb8 	.word	0x20003cb8
 800b114:	08010d44 	.word	0x08010d44
 800b118:	0800acfd 	.word	0x0800acfd
 800b11c:	20003ca4 	.word	0x20003ca4
 800b120:	08010d20 	.word	0x08010d20
 800b124:	0800a929 	.word	0x0800a929
 800b128:	20003ca0 	.word	0x20003ca0

0800b12c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b12c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b12e:	2300      	movs	r3, #0
 800b130:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b132:	4b0d      	ldr	r3, [pc, #52]	@ (800b168 <prvTaskExitError+0x3c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b13a:	d008      	beq.n	800b14e <prvTaskExitError+0x22>
 800b13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	e7fe      	b.n	800b14c <prvTaskExitError+0x20>
 800b14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0fc      	beq.n	800b15e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b164:	b002      	add	sp, #8
 800b166:	4770      	bx	lr
 800b168:	20000008 	.word	0x20000008

0800b16c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b16c:	4808      	ldr	r0, [pc, #32]	@ (800b190 <prvPortStartFirstTask+0x24>)
 800b16e:	6800      	ldr	r0, [r0, #0]
 800b170:	6800      	ldr	r0, [r0, #0]
 800b172:	f380 8808 	msr	MSP, r0
 800b176:	f04f 0000 	mov.w	r0, #0
 800b17a:	f380 8814 	msr	CONTROL, r0
 800b17e:	b662      	cpsie	i
 800b180:	b661      	cpsie	f
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	df00      	svc	0
 800b18c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b18e:	0000      	.short	0x0000
 800b190:	e000ed08 	.word	0xe000ed08

0800b194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b1a4 <vPortEnableVFP+0x10>
 800b198:	6801      	ldr	r1, [r0, #0]
 800b19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b19e:	6001      	str	r1, [r0, #0]
 800b1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b1a2:	0000      	.short	0x0000
 800b1a4:	e000ed88 	.word	0xe000ed88

0800b1a8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b1ac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1b0:	f021 0101 	bic.w	r1, r1, #1
 800b1b4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1b8:	4b05      	ldr	r3, [pc, #20]	@ (800b1d0 <pxPortInitialiseStack+0x28>)
 800b1ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1be:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1c2:	f06f 0302 	mvn.w	r3, #2
 800b1c6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800b1ca:	3844      	subs	r0, #68	@ 0x44
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	0800b12d 	.word	0x0800b12d
	...

0800b1e0 <SVC_Handler>:
	__asm volatile (
 800b1e0:	4b07      	ldr	r3, [pc, #28]	@ (800b200 <pxCurrentTCBConst2>)
 800b1e2:	6819      	ldr	r1, [r3, #0]
 800b1e4:	6808      	ldr	r0, [r1, #0]
 800b1e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ea:	f380 8809 	msr	PSP, r0
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f04f 0000 	mov.w	r0, #0
 800b1f6:	f380 8811 	msr	BASEPRI, r0
 800b1fa:	4770      	bx	lr
 800b1fc:	f3af 8000 	nop.w

0800b200 <pxCurrentTCBConst2>:
 800b200:	200043b8 	.word	0x200043b8

0800b204 <vPortEnterCritical>:
 800b204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b214:	4a0b      	ldr	r2, [pc, #44]	@ (800b244 <vPortEnterCritical+0x40>)
 800b216:	6813      	ldr	r3, [r2, #0]
 800b218:	3301      	adds	r3, #1
 800b21a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d000      	beq.n	800b222 <vPortEnterCritical+0x1e>
}
 800b220:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b222:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b226:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b22a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800b22e:	d0f7      	beq.n	800b220 <vPortEnterCritical+0x1c>
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	e7fe      	b.n	800b240 <vPortEnterCritical+0x3c>
 800b242:	bf00      	nop
 800b244:	20000008 	.word	0x20000008

0800b248 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b248:	4b09      	ldr	r3, [pc, #36]	@ (800b270 <vPortExitCritical+0x28>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	b943      	cbnz	r3, 800b260 <vPortExitCritical+0x18>
 800b24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	e7fe      	b.n	800b25e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b260:	3b01      	subs	r3, #1
 800b262:	4a03      	ldr	r2, [pc, #12]	@ (800b270 <vPortExitCritical+0x28>)
 800b264:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b266:	b90b      	cbnz	r3, 800b26c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b268:	f383 8811 	msr	BASEPRI, r3
}
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	20000008 	.word	0x20000008
	...

0800b280 <PendSV_Handler>:
	__asm volatile
 800b280:	f3ef 8009 	mrs	r0, PSP
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	4b15      	ldr	r3, [pc, #84]	@ (800b2e0 <pxCurrentTCBConst>)
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	f01e 0f10 	tst.w	lr, #16
 800b290:	bf08      	it	eq
 800b292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b29a:	6010      	str	r0, [r2, #0]
 800b29c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b2a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b2a4:	f380 8811 	msr	BASEPRI, r0
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f004 fe9a 	bl	800ffe8 <vTaskSwitchContext>
 800b2b4:	f04f 0000 	mov.w	r0, #0
 800b2b8:	f380 8811 	msr	BASEPRI, r0
 800b2bc:	bc09      	pop	{r0, r3}
 800b2be:	6819      	ldr	r1, [r3, #0]
 800b2c0:	6808      	ldr	r0, [r1, #0]
 800b2c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c6:	f01e 0f10 	tst.w	lr, #16
 800b2ca:	bf08      	it	eq
 800b2cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2d0:	f380 8809 	msr	PSP, r0
 800b2d4:	f3bf 8f6f 	isb	sy
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	f3af 8000 	nop.w

0800b2e0 <pxCurrentTCBConst>:
 800b2e0:	200043b8 	.word	0x200043b8

0800b2e4 <xPortSysTickHandler>:
{
 800b2e4:	b508      	push	{r3, lr}
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b2f6:	f004 fd49 	bl	800fd8c <xTaskIncrementTick>
 800b2fa:	b128      	cbz	r0, 800b308 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b304:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800b308:	2300      	movs	r3, #0
 800b30a:	f383 8811 	msr	BASEPRI, r3
}
 800b30e:	bd08      	pop	{r3, pc}

0800b310 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b310:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b314:	2300      	movs	r3, #0
 800b316:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b318:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b31a:	4b05      	ldr	r3, [pc, #20]	@ (800b330 <vPortSetupTimerInterrupt+0x20>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4905      	ldr	r1, [pc, #20]	@ (800b334 <vPortSetupTimerInterrupt+0x24>)
 800b320:	fba1 1303 	umull	r1, r3, r1, r3
 800b324:	099b      	lsrs	r3, r3, #6
 800b326:	3b01      	subs	r3, #1
 800b328:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b32a:	2307      	movs	r3, #7
 800b32c:	6113      	str	r3, [r2, #16]
}
 800b32e:	4770      	bx	lr
 800b330:	20000034 	.word	0x20000034
 800b334:	10624dd3 	.word	0x10624dd3

0800b338 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b338:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b33c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800b340:	4b3d      	ldr	r3, [pc, #244]	@ (800b438 <xPortStartScheduler+0x100>)
 800b342:	429a      	cmp	r2, r3
 800b344:	d01c      	beq.n	800b380 <xPortStartScheduler+0x48>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b346:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b34a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800b34e:	4b3b      	ldr	r3, [pc, #236]	@ (800b43c <xPortStartScheduler+0x104>)
 800b350:	429a      	cmp	r2, r3
 800b352:	d01e      	beq.n	800b392 <xPortStartScheduler+0x5a>
{
 800b354:	b530      	push	{r4, r5, lr}
 800b356:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b358:	4b39      	ldr	r3, [pc, #228]	@ (800b440 <xPortStartScheduler+0x108>)
 800b35a:	781a      	ldrb	r2, [r3, #0]
 800b35c:	b2d2      	uxtb	r2, r2
 800b35e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b360:	22ff      	movs	r2, #255	@ 0xff
 800b362:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	b2db      	uxtb	r3, r3
 800b368:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b36c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b370:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b374:	4a33      	ldr	r2, [pc, #204]	@ (800b444 <xPortStartScheduler+0x10c>)
 800b376:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b378:	4b33      	ldr	r3, [pc, #204]	@ (800b448 <xPortStartScheduler+0x110>)
 800b37a:	2207      	movs	r2, #7
 800b37c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b37e:	e01b      	b.n	800b3b8 <xPortStartScheduler+0x80>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b390:	e7fe      	b.n	800b390 <xPortStartScheduler+0x58>
 800b392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3a2:	e7fe      	b.n	800b3a2 <xPortStartScheduler+0x6a>
			ulMaxPRIGROUPValue--;
 800b3a4:	4a28      	ldr	r2, [pc, #160]	@ (800b448 <xPortStartScheduler+0x110>)
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b3ac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	b2db      	uxtb	r3, r3
 800b3b4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b3b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b3bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3c0:	d1f0      	bne.n	800b3a4 <xPortStartScheduler+0x6c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b3c2:	4b21      	ldr	r3, [pc, #132]	@ (800b448 <xPortStartScheduler+0x110>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b03      	cmp	r3, #3
 800b3c8:	d008      	beq.n	800b3dc <xPortStartScheduler+0xa4>
 800b3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	e7fe      	b.n	800b3da <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3dc:	021b      	lsls	r3, r3, #8
 800b3de:	4a1a      	ldr	r2, [pc, #104]	@ (800b448 <xPortStartScheduler+0x110>)
 800b3e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b3e6:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3e8:	9b01      	ldr	r3, [sp, #4]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	4a14      	ldr	r2, [pc, #80]	@ (800b440 <xPortStartScheduler+0x108>)
 800b3ee:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3f0:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 800b3f4:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b3f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b3fc:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b400:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b404:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b408:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800b40c:	f7ff ff80 	bl	800b310 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b410:	2500      	movs	r5, #0
 800b412:	4b0e      	ldr	r3, [pc, #56]	@ (800b44c <xPortStartScheduler+0x114>)
 800b414:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b416:	f7ff febd 	bl	800b194 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b41a:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800b41e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b422:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800b426:	f7ff fea1 	bl	800b16c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b42a:	f004 fddd 	bl	800ffe8 <vTaskSwitchContext>
	prvTaskExitError();
 800b42e:	f7ff fe7d 	bl	800b12c <prvTaskExitError>
}
 800b432:	4628      	mov	r0, r5
 800b434:	b003      	add	sp, #12
 800b436:	bd30      	pop	{r4, r5, pc}
 800b438:	410fc271 	.word	0x410fc271
 800b43c:	410fc270 	.word	0x410fc270
 800b440:	e000e400 	.word	0xe000e400
 800b444:	20003e28 	.word	0x20003e28
 800b448:	20003e24 	.word	0x20003e24
 800b44c:	20000008 	.word	0x20000008

0800b450 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b450:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b454:	2b0f      	cmp	r3, #15
 800b456:	d90e      	bls.n	800b476 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b458:	4a11      	ldr	r2, [pc, #68]	@ (800b4a0 <vPortValidateInterruptPriority+0x50>)
 800b45a:	5c9a      	ldrb	r2, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b45c:	4b11      	ldr	r3, [pc, #68]	@ (800b4a4 <vPortValidateInterruptPriority+0x54>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d208      	bcs.n	800b476 <vPortValidateInterruptPriority+0x26>
 800b464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	e7fe      	b.n	800b474 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b476:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b47a:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800b47e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b482:	4a09      	ldr	r2, [pc, #36]	@ (800b4a8 <vPortValidateInterruptPriority+0x58>)
 800b484:	6812      	ldr	r2, [r2, #0]
 800b486:	4293      	cmp	r3, r2
 800b488:	d908      	bls.n	800b49c <vPortValidateInterruptPriority+0x4c>
 800b48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	e7fe      	b.n	800b49a <vPortValidateInterruptPriority+0x4a>
	}
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	e000e3f0 	.word	0xe000e3f0
 800b4a4:	20003e28 	.word	0x20003e28
 800b4a8:	20003e24 	.word	0x20003e24

0800b4ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b4ac:	4603      	mov	r3, r0
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b4ae:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800b4b0:	b118      	cbz	r0, 800b4ba <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b4b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	f1c0 0038 	rsb	r0, r0, #56	@ 0x38
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800b4ba:	4770      	bx	lr

0800b4bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b4c0:	f7ff fea0 	bl	800b204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b4c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b4c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d004      	beq.n	800b4d6 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800b4cc:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800b4ce:	f7ff febb 	bl	800b248 <vPortExitCritical>

	return xReturn;
}
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800b4d6:	2401      	movs	r4, #1
 800b4d8:	e7f9      	b.n	800b4ce <prvIsQueueFull+0x12>

0800b4da <prvIsQueueEmpty>:
{
 800b4da:	b510      	push	{r4, lr}
 800b4dc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b4de:	f7ff fe91 	bl	800b204 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b4e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800b4e4:	b923      	cbnz	r3, 800b4f0 <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 800b4e6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800b4e8:	f7ff feae 	bl	800b248 <vPortExitCritical>
}
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800b4f0:	2400      	movs	r4, #0
 800b4f2:	e7f9      	b.n	800b4e8 <prvIsQueueEmpty+0xe>

0800b4f4 <prvCopyDataToQueue>:
{
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4fa:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b4fc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800b4fe:	b95a      	cbnz	r2, 800b518 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b500:	6803      	ldr	r3, [r0, #0]
 800b502:	b11b      	cbz	r3, 800b50c <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800b504:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b506:	3601      	adds	r6, #1
 800b508:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800b50a:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b50c:	6880      	ldr	r0, [r0, #8]
 800b50e:	f004 fee9 	bl	80102e4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b512:	2300      	movs	r3, #0
 800b514:	60a3      	str	r3, [r4, #8]
 800b516:	e7f6      	b.n	800b506 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800b518:	b96d      	cbnz	r5, 800b536 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b51a:	6840      	ldr	r0, [r0, #4]
 800b51c:	f005 fa0e 	bl	801093c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b520:	6863      	ldr	r3, [r4, #4]
 800b522:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b524:	4413      	add	r3, r2
 800b526:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b528:	68a2      	ldr	r2, [r4, #8]
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d319      	bcc.n	800b562 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800b532:	4628      	mov	r0, r5
 800b534:	e7e7      	b.n	800b506 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b536:	68c0      	ldr	r0, [r0, #12]
 800b538:	f005 fa00 	bl	801093c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b53c:	68e3      	ldr	r3, [r4, #12]
 800b53e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b540:	4251      	negs	r1, r2
 800b542:	1a9b      	subs	r3, r3, r2
 800b544:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b546:	6822      	ldr	r2, [r4, #0]
 800b548:	4293      	cmp	r3, r2
 800b54a:	d202      	bcs.n	800b552 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b54c:	68a3      	ldr	r3, [r4, #8]
 800b54e:	440b      	add	r3, r1
 800b550:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b552:	2d02      	cmp	r5, #2
 800b554:	d001      	beq.n	800b55a <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800b556:	2000      	movs	r0, #0
 800b558:	e7d5      	b.n	800b506 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b55a:	b126      	cbz	r6, 800b566 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800b55c:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800b55e:	2000      	movs	r0, #0
 800b560:	e7d1      	b.n	800b506 <prvCopyDataToQueue+0x12>
 800b562:	4628      	mov	r0, r5
 800b564:	e7cf      	b.n	800b506 <prvCopyDataToQueue+0x12>
 800b566:	2000      	movs	r0, #0
 800b568:	e7cd      	b.n	800b506 <prvCopyDataToQueue+0x12>

0800b56a <prvCopyDataFromQueue>:
{
 800b56a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b56c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800b56e:	b16a      	cbz	r2, 800b58c <prvCopyDataFromQueue+0x22>
{
 800b570:	b510      	push	{r4, lr}
 800b572:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b574:	68d9      	ldr	r1, [r3, #12]
 800b576:	4411      	add	r1, r2
 800b578:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b57a:	689c      	ldr	r4, [r3, #8]
 800b57c:	42a1      	cmp	r1, r4
 800b57e:	d301      	bcc.n	800b584 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b580:	6819      	ldr	r1, [r3, #0]
 800b582:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b584:	68d9      	ldr	r1, [r3, #12]
 800b586:	f005 f9d9 	bl	801093c <memcpy>
}
 800b58a:	bd10      	pop	{r4, pc}
 800b58c:	4770      	bx	lr

0800b58e <prvUnlockQueue>:
{
 800b58e:	b538      	push	{r3, r4, r5, lr}
 800b590:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800b592:	f7ff fe37 	bl	800b204 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b596:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 800b59a:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b59c:	e001      	b.n	800b5a2 <prvUnlockQueue+0x14>
			--cTxLock;
 800b59e:	3c01      	subs	r4, #1
 800b5a0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b5a2:	2c00      	cmp	r4, #0
 800b5a4:	dd0a      	ble.n	800b5bc <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b5a6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800b5a8:	b143      	cbz	r3, 800b5bc <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b5aa:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800b5ae:	f004 fd9b 	bl	80100e8 <xTaskRemoveFromEventList>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d0f3      	beq.n	800b59e <prvUnlockQueue+0x10>
						vTaskMissedYield();
 800b5b6:	f004 fe2d 	bl	8010214 <vTaskMissedYield>
 800b5ba:	e7f0      	b.n	800b59e <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800b5bc:	23ff      	movs	r3, #255	@ 0xff
 800b5be:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800b5c2:	f7ff fe41 	bl	800b248 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b5c6:	f7ff fe1d 	bl	800b204 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b5ca:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 800b5ce:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5d0:	e001      	b.n	800b5d6 <prvUnlockQueue+0x48>
				--cRxLock;
 800b5d2:	3c01      	subs	r4, #1
 800b5d4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5d6:	2c00      	cmp	r4, #0
 800b5d8:	dd0a      	ble.n	800b5f0 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5da:	692b      	ldr	r3, [r5, #16]
 800b5dc:	b143      	cbz	r3, 800b5f0 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5de:	f105 0010 	add.w	r0, r5, #16
 800b5e2:	f004 fd81 	bl	80100e8 <xTaskRemoveFromEventList>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	d0f3      	beq.n	800b5d2 <prvUnlockQueue+0x44>
					vTaskMissedYield();
 800b5ea:	f004 fe13 	bl	8010214 <vTaskMissedYield>
 800b5ee:	e7f0      	b.n	800b5d2 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800b5f0:	23ff      	movs	r3, #255	@ 0xff
 800b5f2:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 800b5f6:	f7ff fe27 	bl	800b248 <vPortExitCritical>
}
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}

0800b5fc <xQueueGenericReset>:
{
 800b5fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800b5fe:	b1e0      	cbz	r0, 800b63a <xQueueGenericReset+0x3e>
 800b600:	460d      	mov	r5, r1
 800b602:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b604:	f7ff fdfe 	bl	800b204 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b608:	6823      	ldr	r3, [r4, #0]
 800b60a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b60c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800b60e:	fb01 3002 	mla	r0, r1, r2, r3
 800b612:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b614:	2000      	movs	r0, #0
 800b616:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b618:	6063      	str	r3, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b61a:	3a01      	subs	r2, #1
 800b61c:	fb02 3301 	mla	r3, r2, r1, r3
 800b620:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b622:	23ff      	movs	r3, #255	@ 0xff
 800b624:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b628:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800b62c:	b9fd      	cbnz	r5, 800b66e <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b62e:	6923      	ldr	r3, [r4, #16]
 800b630:	b963      	cbnz	r3, 800b64c <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800b632:	f7ff fe09 	bl	800b248 <vPortExitCritical>
}
 800b636:	2001      	movs	r0, #1
 800b638:	bd38      	pop	{r3, r4, r5, pc}
 800b63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800b64a:	e7fe      	b.n	800b64a <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b64c:	f104 0010 	add.w	r0, r4, #16
 800b650:	f004 fd4a 	bl	80100e8 <xTaskRemoveFromEventList>
 800b654:	2800      	cmp	r0, #0
 800b656:	d0ec      	beq.n	800b632 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800b658:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b65c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b660:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	f3bf 8f6f 	isb	sy
 800b66c:	e7e1      	b.n	800b632 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b66e:	f104 0010 	add.w	r0, r4, #16
 800b672:	f7ff fa9d 	bl	800abb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b676:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800b67a:	f7ff fa99 	bl	800abb0 <vListInitialise>
 800b67e:	e7d8      	b.n	800b632 <xQueueGenericReset+0x36>

0800b680 <prvInitialiseNewQueue>:
{
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	461d      	mov	r5, r3
 800b684:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800b686:	460b      	mov	r3, r1
 800b688:	b949      	cbnz	r1, 800b69e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b68a:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800b68c:	63e0      	str	r0, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b68e:	6423      	str	r3, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b690:	2101      	movs	r1, #1
 800b692:	4620      	mov	r0, r4
 800b694:	f7ff ffb2 	bl	800b5fc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800b698:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
}
 800b69c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b69e:	6022      	str	r2, [r4, #0]
 800b6a0:	e7f4      	b.n	800b68c <prvInitialiseNewQueue+0xc>

0800b6a2 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6a2:	b940      	cbnz	r0, 800b6b6 <xQueueGenericCreateStatic+0x14>
 800b6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericCreateStatic+0x12>
	{
 800b6b6:	b510      	push	{r4, lr}
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	461c      	mov	r4, r3
 800b6bc:	4684      	mov	ip, r0
		configASSERT( pxStaticQueue != NULL );
 800b6be:	b153      	cbz	r3, 800b6d6 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b6c0:	b192      	cbz	r2, 800b6e8 <xQueueGenericCreateStatic+0x46>
 800b6c2:	b989      	cbnz	r1, 800b6e8 <xQueueGenericCreateStatic+0x46>
 800b6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	e7fe      	b.n	800b6d4 <xQueueGenericCreateStatic+0x32>
 800b6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800b6e6:	e7fe      	b.n	800b6e6 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b6e8:	b16a      	cbz	r2, 800b706 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b6ea:	2350      	movs	r3, #80	@ 0x50
 800b6ec:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b6ee:	9b03      	ldr	r3, [sp, #12]
 800b6f0:	2b50      	cmp	r3, #80	@ 0x50
 800b6f2:	d013      	beq.n	800b71c <xQueueGenericCreateStatic+0x7a>
 800b6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f8:	f383 8811 	msr	BASEPRI, r3
 800b6fc:	f3bf 8f6f 	isb	sy
 800b700:	f3bf 8f4f 	dsb	sy
 800b704:	e7fe      	b.n	800b704 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b706:	2900      	cmp	r1, #0
 800b708:	d0ef      	beq.n	800b6ea <xQueueGenericCreateStatic+0x48>
 800b70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	e7fe      	b.n	800b71a <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b71c:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b71e:	2301      	movs	r3, #1
 800b720:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b724:	9400      	str	r4, [sp, #0]
 800b726:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800b72a:	4660      	mov	r0, ip
 800b72c:	f7ff ffa8 	bl	800b680 <prvInitialiseNewQueue>
	}
 800b730:	4620      	mov	r0, r4
 800b732:	b004      	add	sp, #16
 800b734:	bd10      	pop	{r4, pc}

0800b736 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b736:	b940      	cbnz	r0, 800b74a <xQueueGenericCreate+0x14>
 800b738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	e7fe      	b.n	800b748 <xQueueGenericCreate+0x12>
	{
 800b74a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74c:	b083      	sub	sp, #12
 800b74e:	460d      	mov	r5, r1
 800b750:	4614      	mov	r4, r2
 800b752:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b754:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b758:	3050      	adds	r0, #80	@ 0x50
 800b75a:	f7ff f953 	bl	800aa04 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800b75e:	4607      	mov	r7, r0
 800b760:	b150      	cbz	r0, 800b778 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b762:	2300      	movs	r3, #0
 800b764:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b768:	9000      	str	r0, [sp, #0]
 800b76a:	4623      	mov	r3, r4
 800b76c:	f100 0250 	add.w	r2, r0, #80	@ 0x50
 800b770:	4629      	mov	r1, r5
 800b772:	4630      	mov	r0, r6
 800b774:	f7ff ff84 	bl	800b680 <prvInitialiseNewQueue>
	}
 800b778:	4638      	mov	r0, r7
 800b77a:	b003      	add	sp, #12
 800b77c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b77e <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800b77e:	b940      	cbnz	r0, 800b792 <xQueueCreateCountingSemaphoreStatic+0x14>
 800b780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	e7fe      	b.n	800b790 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 800b792:	b510      	push	{r4, lr}
 800b794:	b082      	sub	sp, #8
 800b796:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800b798:	4288      	cmp	r0, r1
 800b79a:	d208      	bcs.n	800b7ae <xQueueCreateCountingSemaphoreStatic+0x30>
 800b79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	e7fe      	b.n	800b7ac <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	4611      	mov	r1, r2
 800b7b8:	f7ff ff73 	bl	800b6a2 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800b7bc:	b100      	cbz	r0, 800b7c0 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b7be:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800b7c0:	b002      	add	sp, #8
 800b7c2:	bd10      	pop	{r4, pc}

0800b7c4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800b7c4:	b940      	cbnz	r0, 800b7d8 <xQueueCreateCountingSemaphore+0x14>
 800b7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	e7fe      	b.n	800b7d6 <xQueueCreateCountingSemaphore+0x12>
	{
 800b7d8:	b510      	push	{r4, lr}
 800b7da:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800b7dc:	4288      	cmp	r0, r1
 800b7de:	d208      	bcs.n	800b7f2 <xQueueCreateCountingSemaphore+0x2e>
 800b7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	e7fe      	b.n	800b7f0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	f7ff ff9e 	bl	800b736 <xQueueGenericCreate>
		if( xHandle != NULL )
 800b7fa:	b100      	cbz	r0, 800b7fe <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b7fc:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800b7fe:	bd10      	pop	{r4, pc}

0800b800 <xQueueGenericSend>:
{
 800b800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b802:	b085      	sub	sp, #20
 800b804:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800b806:	b188      	cbz	r0, 800b82c <xQueueGenericSend+0x2c>
 800b808:	460f      	mov	r7, r1
 800b80a:	461d      	mov	r5, r3
 800b80c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b80e:	b1b1      	cbz	r1, 800b83e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b810:	2d02      	cmp	r5, #2
 800b812:	d120      	bne.n	800b856 <xQueueGenericSend+0x56>
 800b814:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b816:	2b01      	cmp	r3, #1
 800b818:	d01d      	beq.n	800b856 <xQueueGenericSend+0x56>
 800b81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	e7fe      	b.n	800b82a <xQueueGenericSend+0x2a>
 800b82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b830:	f383 8811 	msr	BASEPRI, r3
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800b83c:	e7fe      	b.n	800b83c <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b83e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800b840:	2b00      	cmp	r3, #0
 800b842:	d0e5      	beq.n	800b810 <xQueueGenericSend+0x10>
 800b844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b848:	f383 8811 	msr	BASEPRI, r3
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	e7fe      	b.n	800b854 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b856:	f004 fce9 	bl	801022c <xTaskGetSchedulerState>
 800b85a:	4606      	mov	r6, r0
 800b85c:	b958      	cbnz	r0, 800b876 <xQueueGenericSend+0x76>
 800b85e:	9b01      	ldr	r3, [sp, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d048      	beq.n	800b8f6 <xQueueGenericSend+0xf6>
 800b864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	e7fe      	b.n	800b874 <xQueueGenericSend+0x74>
 800b876:	2600      	movs	r6, #0
 800b878:	e03d      	b.n	800b8f6 <xQueueGenericSend+0xf6>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b87a:	462a      	mov	r2, r5
 800b87c:	4639      	mov	r1, r7
 800b87e:	4620      	mov	r0, r4
 800b880:	f7ff fe38 	bl	800b4f4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b884:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b886:	b97b      	cbnz	r3, 800b8a8 <xQueueGenericSend+0xa8>
					else if( xYieldRequired != pdFALSE )
 800b888:	b148      	cbz	r0, 800b89e <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800b88a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b892:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b896:	f3bf 8f4f 	dsb	sy
 800b89a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800b89e:	f7ff fcd3 	bl	800b248 <vPortExitCritical>
				return pdPASS;
 800b8a2:	2001      	movs	r0, #1
}
 800b8a4:	b005      	add	sp, #20
 800b8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8a8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800b8ac:	f004 fc1c 	bl	80100e8 <xTaskRemoveFromEventList>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d0f4      	beq.n	800b89e <xQueueGenericSend+0x9e>
							queueYIELD_IF_USING_PREEMPTION();
 800b8b4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b8b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8bc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	e7e9      	b.n	800b89e <xQueueGenericSend+0x9e>
					taskEXIT_CRITICAL();
 800b8ca:	f7ff fcbd 	bl	800b248 <vPortExitCritical>
					return errQUEUE_FULL;
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	e7e8      	b.n	800b8a4 <xQueueGenericSend+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8d2:	a802      	add	r0, sp, #8
 800b8d4:	f004 fc4e 	bl	8010174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8d8:	2601      	movs	r6, #1
 800b8da:	e019      	b.n	800b910 <xQueueGenericSend+0x110>
		prvLockQueue( pxQueue );
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b8e2:	e021      	b.n	800b928 <xQueueGenericSend+0x128>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b8ea:	e023      	b.n	800b934 <xQueueGenericSend+0x134>
				prvUnlockQueue( pxQueue );
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f7ff fe4e 	bl	800b58e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8f2:	f004 fad7 	bl	800fea4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800b8f6:	f7ff fc85 	bl	800b204 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b8fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d3bb      	bcc.n	800b87a <xQueueGenericSend+0x7a>
 800b902:	2d02      	cmp	r5, #2
 800b904:	d0b9      	beq.n	800b87a <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d0de      	beq.n	800b8ca <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800b90c:	2e00      	cmp	r6, #0
 800b90e:	d0e0      	beq.n	800b8d2 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 800b910:	f7ff fc9a 	bl	800b248 <vPortExitCritical>
		vTaskSuspendAll();
 800b914:	f004 fa24 	bl	800fd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b918:	f7ff fc74 	bl	800b204 <vPortEnterCritical>
 800b91c:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 800b920:	b252      	sxtb	r2, r2
 800b922:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b926:	d0d9      	beq.n	800b8dc <xQueueGenericSend+0xdc>
 800b928:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 800b92c:	b252      	sxtb	r2, r2
 800b92e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b932:	d0d7      	beq.n	800b8e4 <xQueueGenericSend+0xe4>
 800b934:	f7ff fc88 	bl	800b248 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b938:	a901      	add	r1, sp, #4
 800b93a:	a802      	add	r0, sp, #8
 800b93c:	f004 fc26 	bl	801018c <xTaskCheckForTimeOut>
 800b940:	b9d8      	cbnz	r0, 800b97a <xQueueGenericSend+0x17a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b942:	4620      	mov	r0, r4
 800b944:	f7ff fdba 	bl	800b4bc <prvIsQueueFull>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d0cf      	beq.n	800b8ec <xQueueGenericSend+0xec>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b94c:	9901      	ldr	r1, [sp, #4]
 800b94e:	f104 0010 	add.w	r0, r4, #16
 800b952:	f004 fb95 	bl	8010080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b956:	4620      	mov	r0, r4
 800b958:	f7ff fe19 	bl	800b58e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b95c:	f004 faa2 	bl	800fea4 <xTaskResumeAll>
 800b960:	2800      	cmp	r0, #0
 800b962:	d1c8      	bne.n	800b8f6 <xQueueGenericSend+0xf6>
					portYIELD_WITHIN_API();
 800b964:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b968:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b96c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	e7bd      	b.n	800b8f6 <xQueueGenericSend+0xf6>
			prvUnlockQueue( pxQueue );
 800b97a:	4620      	mov	r0, r4
 800b97c:	f7ff fe07 	bl	800b58e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b980:	f004 fa90 	bl	800fea4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800b984:	2000      	movs	r0, #0
 800b986:	e78d      	b.n	800b8a4 <xQueueGenericSend+0xa4>

0800b988 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800b988:	b148      	cbz	r0, 800b99e <prvInitialiseMutex+0x16>
	{
 800b98a:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b98c:	2100      	movs	r1, #0
 800b98e:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b990:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b992:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b994:	460b      	mov	r3, r1
 800b996:	460a      	mov	r2, r1
 800b998:	f7ff ff32 	bl	800b800 <xQueueGenericSend>
	}
 800b99c:	bd08      	pop	{r3, pc}
 800b99e:	4770      	bx	lr

0800b9a0 <xQueueCreateMutex>:
	{
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	f7ff fec5 	bl	800b736 <xQueueGenericCreate>
 800b9ac:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9ae:	f7ff ffeb 	bl	800b988 <prvInitialiseMutex>
	}
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	bd10      	pop	{r4, pc}

0800b9b6 <xQueueCreateMutexStatic>:
	{
 800b9b6:	b510      	push	{r4, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b9bc:	9000      	str	r0, [sp, #0]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	2001      	movs	r0, #1
 800b9c4:	f7ff fe6d 	bl	800b6a2 <xQueueGenericCreateStatic>
 800b9c8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b9ca:	f7ff ffdd 	bl	800b988 <prvInitialiseMutex>
	}
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	b002      	add	sp, #8
 800b9d2:	bd10      	pop	{r4, pc}

0800b9d4 <xQueueGiveMutexRecursive>:
	{
 800b9d4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800b9d6:	b138      	cbz	r0, 800b9e8 <xQueueGiveMutexRecursive+0x14>
 800b9d8:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b9da:	6885      	ldr	r5, [r0, #8]
 800b9dc:	f004 fc20 	bl	8010220 <xTaskGetCurrentTaskHandle>
 800b9e0:	4285      	cmp	r5, r0
 800b9e2:	d00a      	beq.n	800b9fa <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 800b9e4:	2000      	movs	r0, #0
	}
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9ec:	f383 8811 	msr	BASEPRI, r3
 800b9f0:	f3bf 8f6f 	isb	sy
 800b9f4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800b9f8:	e7fe      	b.n	800b9f8 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b9fa:	68e3      	ldr	r3, [r4, #12]
 800b9fc:	3b01      	subs	r3, #1
 800b9fe:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ba00:	b10b      	cbz	r3, 800ba06 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 800ba02:	2001      	movs	r0, #1
		return xReturn;
 800ba04:	e7ef      	b.n	800b9e6 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ba06:	461a      	mov	r2, r3
 800ba08:	4619      	mov	r1, r3
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f7ff fef8 	bl	800b800 <xQueueGenericSend>
			xReturn = pdPASS;
 800ba10:	2001      	movs	r0, #1
 800ba12:	e7e8      	b.n	800b9e6 <xQueueGiveMutexRecursive+0x12>

0800ba14 <xQueueGenericSendFromISR>:
{
 800ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800ba18:	b190      	cbz	r0, 800ba40 <xQueueGenericSendFromISR+0x2c>
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	461c      	mov	r4, r3
 800ba20:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba22:	b1b1      	cbz	r1, 800ba52 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba24:	2c02      	cmp	r4, #2
 800ba26:	d120      	bne.n	800ba6a <xQueueGenericSendFromISR+0x56>
 800ba28:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d01d      	beq.n	800ba6a <xQueueGenericSendFromISR+0x56>
 800ba2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	e7fe      	b.n	800ba3e <xQueueGenericSendFromISR+0x2a>
 800ba40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba44:	f383 8811 	msr	BASEPRI, r3
 800ba48:	f3bf 8f6f 	isb	sy
 800ba4c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800ba50:	e7fe      	b.n	800ba50 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba52:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d0e5      	beq.n	800ba24 <xQueueGenericSendFromISR+0x10>
 800ba58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	e7fe      	b.n	800ba68 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba6a:	f7ff fcf1 	bl	800b450 <vPortValidateInterruptPriority>
	__asm volatile
 800ba6e:	f3ef 8811 	mrs	r8, BASEPRI
 800ba72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba82:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 800ba84:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d306      	bcc.n	800ba98 <xQueueGenericSendFromISR+0x84>
 800ba8a:	2c02      	cmp	r4, #2
 800ba8c:	d004      	beq.n	800ba98 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800ba8e:	2000      	movs	r0, #0
	__asm volatile
 800ba90:	f388 8811 	msr	BASEPRI, r8
}
 800ba94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba98:	f895 9045 	ldrb.w	r9, [r5, #69]	@ 0x45
 800ba9c:	fa4f f989 	sxtb.w	r9, r9
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baa0:	6bab      	ldr	r3, [r5, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800baa2:	4622      	mov	r2, r4
 800baa4:	4639      	mov	r1, r7
 800baa6:	4628      	mov	r0, r5
 800baa8:	f7ff fd24 	bl	800b4f4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800baac:	f1b9 3fff 	cmp.w	r9, #4294967295
 800bab0:	d006      	beq.n	800bac0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bab2:	f109 0301 	add.w	r3, r9, #1
 800bab6:	b25b      	sxtb	r3, r3
 800bab8:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800babc:	2001      	movs	r0, #1
 800babe:	e7e7      	b.n	800ba90 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bac0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800bac2:	b90b      	cbnz	r3, 800bac8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 800bac4:	2001      	movs	r0, #1
 800bac6:	e7e3      	b.n	800ba90 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bac8:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800bacc:	f004 fb0c 	bl	80100e8 <xTaskRemoveFromEventList>
 800bad0:	b118      	cbz	r0, 800bada <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 800bad2:	b126      	cbz	r6, 800bade <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bad4:	2001      	movs	r0, #1
 800bad6:	6030      	str	r0, [r6, #0]
 800bad8:	e7da      	b.n	800ba90 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800bada:	2001      	movs	r0, #1
 800badc:	e7d8      	b.n	800ba90 <xQueueGenericSendFromISR+0x7c>
 800bade:	2001      	movs	r0, #1
 800bae0:	e7d6      	b.n	800ba90 <xQueueGenericSendFromISR+0x7c>

0800bae2 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800bae2:	b168      	cbz	r0, 800bb00 <xQueueGiveFromISR+0x1e>
{
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	460c      	mov	r4, r1
 800bae8:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800baea:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800baec:	b18b      	cbz	r3, 800bb12 <xQueueGiveFromISR+0x30>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	e7fe      	b.n	800bafe <xQueueGiveFromISR+0x1c>
 800bb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800bb10:	e7fe      	b.n	800bb10 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb12:	6803      	ldr	r3, [r0, #0]
 800bb14:	b1eb      	cbz	r3, 800bb52 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb16:	f7ff fc9b 	bl	800b450 <vPortValidateInterruptPriority>
	__asm volatile
 800bb1a:	f3ef 8611 	mrs	r6, BASEPRI
 800bb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb2e:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb30:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d926      	bls.n	800bb84 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb36:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 800bb3a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb3c:	3201      	adds	r2, #1
 800bb3e:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb44:	d011      	beq.n	800bb6a <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb46:	3301      	adds	r3, #1
 800bb48:	b25b      	sxtb	r3, r3
 800bb4a:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 800bb4e:	2001      	movs	r0, #1
 800bb50:	e019      	b.n	800bb86 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb52:	6883      	ldr	r3, [r0, #8]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d0de      	beq.n	800bb16 <xQueueGiveFromISR+0x34>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	e7fe      	b.n	800bb68 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb6a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800bb6c:	b90b      	cbnz	r3, 800bb72 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800bb6e:	2001      	movs	r0, #1
 800bb70:	e009      	b.n	800bb86 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb72:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800bb76:	f004 fab7 	bl	80100e8 <xTaskRemoveFromEventList>
 800bb7a:	b138      	cbz	r0, 800bb8c <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800bb7c:	b144      	cbz	r4, 800bb90 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb7e:	2001      	movs	r0, #1
 800bb80:	6020      	str	r0, [r4, #0]
 800bb82:	e000      	b.n	800bb86 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800bb84:	2000      	movs	r0, #0
	__asm volatile
 800bb86:	f386 8811 	msr	BASEPRI, r6
}
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 800bb8c:	2001      	movs	r0, #1
 800bb8e:	e7fa      	b.n	800bb86 <xQueueGiveFromISR+0xa4>
 800bb90:	2001      	movs	r0, #1
 800bb92:	e7f8      	b.n	800bb86 <xQueueGiveFromISR+0xa4>

0800bb94 <xQueueReceive>:
{
 800bb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb96:	b085      	sub	sp, #20
 800bb98:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800bb9a:	b190      	cbz	r0, 800bbc2 <xQueueReceive+0x2e>
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bba0:	b1c1      	cbz	r1, 800bbd4 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bba2:	f004 fb43 	bl	801022c <xTaskGetSchedulerState>
 800bba6:	4606      	mov	r6, r0
 800bba8:	bb00      	cbnz	r0, 800bbec <xQueueReceive+0x58>
 800bbaa:	9b01      	ldr	r3, [sp, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d05e      	beq.n	800bc6e <xQueueReceive+0xda>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	e7fe      	b.n	800bbc0 <xQueueReceive+0x2c>
 800bbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800bbd2:	e7fe      	b.n	800bbd2 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbd4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d0e3      	beq.n	800bba2 <xQueueReceive+0xe>
 800bbda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	e7fe      	b.n	800bbea <xQueueReceive+0x56>
 800bbec:	2600      	movs	r6, #0
 800bbee:	e03e      	b.n	800bc6e <xQueueReceive+0xda>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bbf0:	4639      	mov	r1, r7
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f7ff fcb9 	bl	800b56a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bbf8:	3d01      	subs	r5, #1
 800bbfa:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	b923      	cbnz	r3, 800bc0a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 800bc00:	f7ff fb22 	bl	800b248 <vPortExitCritical>
				return pdPASS;
 800bc04:	2001      	movs	r0, #1
}
 800bc06:	b005      	add	sp, #20
 800bc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc0a:	f104 0010 	add.w	r0, r4, #16
 800bc0e:	f004 fa6b 	bl	80100e8 <xTaskRemoveFromEventList>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d0f4      	beq.n	800bc00 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 800bc16:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bc1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc1e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bc22:	f3bf 8f4f 	dsb	sy
 800bc26:	f3bf 8f6f 	isb	sy
 800bc2a:	e7e9      	b.n	800bc00 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800bc2c:	f7ff fb0c 	bl	800b248 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800bc30:	2000      	movs	r0, #0
 800bc32:	e7e8      	b.n	800bc06 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc34:	a802      	add	r0, sp, #8
 800bc36:	f004 fa9d 	bl	8010174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc3a:	2601      	movs	r6, #1
 800bc3c:	e021      	b.n	800bc82 <xQueueReceive+0xee>
		prvLockQueue( pxQueue );
 800bc3e:	2300      	movs	r3, #0
 800bc40:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800bc44:	e029      	b.n	800bc9a <xQueueReceive+0x106>
 800bc46:	2300      	movs	r3, #0
 800bc48:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800bc4c:	e02b      	b.n	800bca6 <xQueueReceive+0x112>
				prvUnlockQueue( pxQueue );
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f7ff fc9d 	bl	800b58e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc54:	f004 f926 	bl	800fea4 <xTaskResumeAll>
 800bc58:	e009      	b.n	800bc6e <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f7ff fc97 	bl	800b58e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc60:	f004 f920 	bl	800fea4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc64:	4620      	mov	r0, r4
 800bc66:	f7ff fc38 	bl	800b4da <prvIsQueueEmpty>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d13f      	bne.n	800bcee <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 800bc6e:	f7ff fac9 	bl	800b204 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc72:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc74:	2d00      	cmp	r5, #0
 800bc76:	d1bb      	bne.n	800bbf0 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0d6      	beq.n	800bc2c <xQueueReceive+0x98>
				else if( xEntryTimeSet == pdFALSE )
 800bc7e:	2e00      	cmp	r6, #0
 800bc80:	d0d8      	beq.n	800bc34 <xQueueReceive+0xa0>
		taskEXIT_CRITICAL();
 800bc82:	f7ff fae1 	bl	800b248 <vPortExitCritical>
		vTaskSuspendAll();
 800bc86:	f004 f86b 	bl	800fd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc8a:	f7ff fabb 	bl	800b204 <vPortEnterCritical>
 800bc8e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bc92:	b25b      	sxtb	r3, r3
 800bc94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc98:	d0d1      	beq.n	800bc3e <xQueueReceive+0xaa>
 800bc9a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bc9e:	b25b      	sxtb	r3, r3
 800bca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca4:	d0cf      	beq.n	800bc46 <xQueueReceive+0xb2>
 800bca6:	f7ff facf 	bl	800b248 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcaa:	a901      	add	r1, sp, #4
 800bcac:	a802      	add	r0, sp, #8
 800bcae:	f004 fa6d 	bl	801018c <xTaskCheckForTimeOut>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d1d1      	bne.n	800bc5a <xQueueReceive+0xc6>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f7ff fc0f 	bl	800b4da <prvIsQueueEmpty>
 800bcbc:	2800      	cmp	r0, #0
 800bcbe:	d0c6      	beq.n	800bc4e <xQueueReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcc0:	9901      	ldr	r1, [sp, #4]
 800bcc2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bcc6:	f004 f9db 	bl	8010080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcca:	4620      	mov	r0, r4
 800bccc:	f7ff fc5f 	bl	800b58e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcd0:	f004 f8e8 	bl	800fea4 <xTaskResumeAll>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d1ca      	bne.n	800bc6e <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 800bcd8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bcdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bce0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	e7bf      	b.n	800bc6e <xQueueReceive+0xda>
				return errQUEUE_EMPTY;
 800bcee:	2000      	movs	r0, #0
 800bcf0:	e789      	b.n	800bc06 <xQueueReceive+0x72>

0800bcf2 <xQueueSemaphoreTake>:
{
 800bcf2:	b570      	push	{r4, r5, r6, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800bcf8:	b158      	cbz	r0, 800bd12 <xQueueSemaphoreTake+0x20>
 800bcfa:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcfc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bcfe:	b18b      	cbz	r3, 800bd24 <xQueueSemaphoreTake+0x32>
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	e7fe      	b.n	800bd10 <xQueueSemaphoreTake+0x1e>
 800bd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800bd22:	e7fe      	b.n	800bd22 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd24:	f004 fa82 	bl	801022c <xTaskGetSchedulerState>
 800bd28:	4605      	mov	r5, r0
 800bd2a:	b950      	cbnz	r0, 800bd42 <xQueueSemaphoreTake+0x50>
 800bd2c:	9b01      	ldr	r3, [sp, #4]
 800bd2e:	b15b      	cbz	r3, 800bd48 <xQueueSemaphoreTake+0x56>
 800bd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	e7fe      	b.n	800bd40 <xQueueSemaphoreTake+0x4e>
 800bd42:	2600      	movs	r6, #0
 800bd44:	4635      	mov	r5, r6
 800bd46:	e055      	b.n	800bdf4 <xQueueSemaphoreTake+0x102>
 800bd48:	4606      	mov	r6, r0
 800bd4a:	e053      	b.n	800bdf4 <xQueueSemaphoreTake+0x102>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd50:	6823      	ldr	r3, [r4, #0]
 800bd52:	b13b      	cbz	r3, 800bd64 <xQueueSemaphoreTake+0x72>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd54:	6923      	ldr	r3, [r4, #16]
 800bd56:	b94b      	cbnz	r3, 800bd6c <xQueueSemaphoreTake+0x7a>
				taskEXIT_CRITICAL();
 800bd58:	f7ff fa76 	bl	800b248 <vPortExitCritical>
				return pdPASS;
 800bd5c:	2601      	movs	r6, #1
}
 800bd5e:	4630      	mov	r0, r6
 800bd60:	b004      	add	sp, #16
 800bd62:	bd70      	pop	{r4, r5, r6, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd64:	f004 fb56 	bl	8010414 <pvTaskIncrementMutexHeldCount>
 800bd68:	60a0      	str	r0, [r4, #8]
 800bd6a:	e7f3      	b.n	800bd54 <xQueueSemaphoreTake+0x62>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd6c:	f104 0010 	add.w	r0, r4, #16
 800bd70:	f004 f9ba 	bl	80100e8 <xTaskRemoveFromEventList>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d0ef      	beq.n	800bd58 <xQueueSemaphoreTake+0x66>
						queueYIELD_IF_USING_PREEMPTION();
 800bd78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bd7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	e7e4      	b.n	800bd58 <xQueueSemaphoreTake+0x66>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bd8e:	b146      	cbz	r6, 800bda2 <xQueueSemaphoreTake+0xb0>
 800bd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	e7fe      	b.n	800bda0 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 800bda2:	f7ff fa51 	bl	800b248 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800bda6:	e7da      	b.n	800bd5e <xQueueSemaphoreTake+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bda8:	a802      	add	r0, sp, #8
 800bdaa:	f004 f9e3 	bl	8010174 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdae:	2501      	movs	r5, #1
 800bdb0:	e02a      	b.n	800be08 <xQueueSemaphoreTake+0x116>
		prvLockQueue( pxQueue );
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800bdb8:	e032      	b.n	800be20 <xQueueSemaphoreTake+0x12e>
 800bdba:	2300      	movs	r3, #0
 800bdbc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800bdc0:	e034      	b.n	800be2c <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 800bdc2:	f7ff fa1f 	bl	800b204 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bdc6:	68a0      	ldr	r0, [r4, #8]
 800bdc8:	f004 fa40 	bl	801024c <xTaskPriorityInherit>
 800bdcc:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 800bdce:	f7ff fa3b 	bl	800b248 <vPortExitCritical>
 800bdd2:	e03b      	b.n	800be4c <xQueueSemaphoreTake+0x15a>
				prvUnlockQueue( pxQueue );
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f7ff fbda 	bl	800b58e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bdda:	f004 f863 	bl	800fea4 <xTaskResumeAll>
 800bdde:	e009      	b.n	800bdf4 <xQueueSemaphoreTake+0x102>
			prvUnlockQueue( pxQueue );
 800bde0:	4620      	mov	r0, r4
 800bde2:	f7ff fbd4 	bl	800b58e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bde6:	f004 f85d 	bl	800fea4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdea:	4620      	mov	r0, r4
 800bdec:	f7ff fb75 	bl	800b4da <prvIsQueueEmpty>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	d142      	bne.n	800be7a <xQueueSemaphoreTake+0x188>
		taskENTER_CRITICAL();
 800bdf4:	f7ff fa06 	bl	800b204 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bdf8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d1a6      	bne.n	800bd4c <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdfe:	9b01      	ldr	r3, [sp, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d0c4      	beq.n	800bd8e <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 800be04:	2d00      	cmp	r5, #0
 800be06:	d0cf      	beq.n	800bda8 <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 800be08:	f7ff fa1e 	bl	800b248 <vPortExitCritical>
		vTaskSuspendAll();
 800be0c:	f003 ffa8 	bl	800fd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be10:	f7ff f9f8 	bl	800b204 <vPortEnterCritical>
 800be14:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800be18:	b25b      	sxtb	r3, r3
 800be1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1e:	d0c8      	beq.n	800bdb2 <xQueueSemaphoreTake+0xc0>
 800be20:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800be24:	b25b      	sxtb	r3, r3
 800be26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2a:	d0c6      	beq.n	800bdba <xQueueSemaphoreTake+0xc8>
 800be2c:	f7ff fa0c 	bl	800b248 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be30:	a901      	add	r1, sp, #4
 800be32:	a802      	add	r0, sp, #8
 800be34:	f004 f9aa 	bl	801018c <xTaskCheckForTimeOut>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d1d1      	bne.n	800bde0 <xQueueSemaphoreTake+0xee>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be3c:	4620      	mov	r0, r4
 800be3e:	f7ff fb4c 	bl	800b4da <prvIsQueueEmpty>
 800be42:	2800      	cmp	r0, #0
 800be44:	d0c6      	beq.n	800bdd4 <xQueueSemaphoreTake+0xe2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be46:	6823      	ldr	r3, [r4, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d0ba      	beq.n	800bdc2 <xQueueSemaphoreTake+0xd0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be4c:	9901      	ldr	r1, [sp, #4]
 800be4e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800be52:	f004 f915 	bl	8010080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be56:	4620      	mov	r0, r4
 800be58:	f7ff fb99 	bl	800b58e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be5c:	f004 f822 	bl	800fea4 <xTaskResumeAll>
 800be60:	2800      	cmp	r0, #0
 800be62:	d1c7      	bne.n	800bdf4 <xQueueSemaphoreTake+0x102>
					portYIELD_WITHIN_API();
 800be64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800be68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	e7bc      	b.n	800bdf4 <xQueueSemaphoreTake+0x102>
					if( xInheritanceOccurred != pdFALSE )
 800be7a:	b90e      	cbnz	r6, 800be80 <xQueueSemaphoreTake+0x18e>
				return errQUEUE_EMPTY;
 800be7c:	2600      	movs	r6, #0
 800be7e:	e76e      	b.n	800bd5e <xQueueSemaphoreTake+0x6c>
						taskENTER_CRITICAL();
 800be80:	f7ff f9c0 	bl	800b204 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be84:	4620      	mov	r0, r4
 800be86:	f7ff fb11 	bl	800b4ac <prvGetDisinheritPriorityAfterTimeout>
 800be8a:	4601      	mov	r1, r0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800be8c:	68a0      	ldr	r0, [r4, #8]
 800be8e:	f004 fa71 	bl	8010374 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800be92:	f7ff f9d9 	bl	800b248 <vPortExitCritical>
 800be96:	e7f1      	b.n	800be7c <xQueueSemaphoreTake+0x18a>

0800be98 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800be98:	b180      	cbz	r0, 800bebc <xQueueTakeMutexRecursive+0x24>
	{
 800be9a:	b570      	push	{r4, r5, r6, lr}
 800be9c:	460c      	mov	r4, r1
 800be9e:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bea0:	6886      	ldr	r6, [r0, #8]
 800bea2:	f004 f9bd 	bl	8010220 <xTaskGetCurrentTaskHandle>
 800bea6:	4286      	cmp	r6, r0
 800bea8:	d011      	beq.n	800bece <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800beaa:	4621      	mov	r1, r4
 800beac:	4628      	mov	r0, r5
 800beae:	f7ff ff20 	bl	800bcf2 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800beb2:	b180      	cbz	r0, 800bed6 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800beb4:	68eb      	ldr	r3, [r5, #12]
 800beb6:	3301      	adds	r3, #1
 800beb8:	60eb      	str	r3, [r5, #12]
		return xReturn;
 800beba:	e00c      	b.n	800bed6 <xQueueTakeMutexRecursive+0x3e>
 800bebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800becc:	e7fe      	b.n	800becc <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bece:	68eb      	ldr	r3, [r5, #12]
 800bed0:	3301      	adds	r3, #1
 800bed2:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 800bed4:	2001      	movs	r0, #1
	}
 800bed6:	bd70      	pop	{r4, r5, r6, pc}

0800bed8 <xQueueReceiveFromISR>:
{
 800bed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800bedc:	b1b0      	cbz	r0, 800bf0c <xQueueReceiveFromISR+0x34>
 800bede:	460d      	mov	r5, r1
 800bee0:	4690      	mov	r8, r2
 800bee2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bee4:	b1d9      	cbz	r1, 800bf1e <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bee6:	f7ff fab3 	bl	800b450 <vPortValidateInterruptPriority>
	__asm volatile
 800beea:	f3ef 8711 	mrs	r7, BASEPRI
 800beee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800befe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf00:	b9ce      	cbnz	r6, 800bf36 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800bf02:	2000      	movs	r0, #0
	__asm volatile
 800bf04:	f387 8811 	msr	BASEPRI, r7
}
 800bf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800bf1c:	e7fe      	b.n	800bf1c <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf1e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d0e0      	beq.n	800bee6 <xQueueReceiveFromISR+0xe>
 800bf24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	e7fe      	b.n	800bf34 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf36:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 800bf3a:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf3e:	4629      	mov	r1, r5
 800bf40:	4620      	mov	r0, r4
 800bf42:	f7ff fb12 	bl	800b56a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf46:	1e73      	subs	r3, r6, #1
 800bf48:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800bf4a:	f1b9 3fff 	cmp.w	r9, #4294967295
 800bf4e:	d006      	beq.n	800bf5e <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bf50:	f109 0301 	add.w	r3, r9, #1
 800bf54:	b25b      	sxtb	r3, r3
 800bf56:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800bf5a:	2001      	movs	r0, #1
 800bf5c:	e7d2      	b.n	800bf04 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf5e:	6923      	ldr	r3, [r4, #16]
 800bf60:	b90b      	cbnz	r3, 800bf66 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800bf62:	2001      	movs	r0, #1
 800bf64:	e7ce      	b.n	800bf04 <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf66:	f104 0010 	add.w	r0, r4, #16
 800bf6a:	f004 f8bd 	bl	80100e8 <xTaskRemoveFromEventList>
 800bf6e:	b130      	cbz	r0, 800bf7e <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 800bf70:	f1b8 0f00 	cmp.w	r8, #0
 800bf74:	d005      	beq.n	800bf82 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bf76:	2001      	movs	r0, #1
 800bf78:	f8c8 0000 	str.w	r0, [r8]
 800bf7c:	e7c2      	b.n	800bf04 <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800bf7e:	2001      	movs	r0, #1
 800bf80:	e7c0      	b.n	800bf04 <xQueueReceiveFromISR+0x2c>
 800bf82:	2001      	movs	r0, #1
 800bf84:	e7be      	b.n	800bf04 <xQueueReceiveFromISR+0x2c>
	...

0800bf88 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf88:	2300      	movs	r3, #0
 800bf8a:	2b07      	cmp	r3, #7
 800bf8c:	d80c      	bhi.n	800bfa8 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bf8e:	4a07      	ldr	r2, [pc, #28]	@ (800bfac <vQueueAddToRegistry+0x24>)
 800bf90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bf94:	b10a      	cbz	r2, 800bf9a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf96:	3301      	adds	r3, #1
 800bf98:	e7f7      	b.n	800bf8a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf9a:	4a04      	ldr	r2, [pc, #16]	@ (800bfac <vQueueAddToRegistry+0x24>)
 800bf9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bfa0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bfa4:	6050      	str	r0, [r2, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bfa6:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bfa8:	4770      	bx	lr
 800bfaa:	bf00      	nop
 800bfac:	20003e2c 	.word	0x20003e2c

0800bfb0 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	2b07      	cmp	r3, #7
 800bfb4:	d80f      	bhi.n	800bfd6 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bfb6:	4a08      	ldr	r2, [pc, #32]	@ (800bfd8 <vQueueUnregisterQueue+0x28>)
 800bfb8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bfbc:	6852      	ldr	r2, [r2, #4]
 800bfbe:	4282      	cmp	r2, r0
 800bfc0:	d001      	beq.n	800bfc6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bfc2:	3301      	adds	r3, #1
 800bfc4:	e7f5      	b.n	800bfb2 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bfc6:	4a04      	ldr	r2, [pc, #16]	@ (800bfd8 <vQueueUnregisterQueue+0x28>)
 800bfc8:	2100      	movs	r1, #0
 800bfca:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bfce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800bfd2:	6051      	str	r1, [r2, #4]
				break;
 800bfd4:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bfd6:	4770      	bx	lr
 800bfd8:	20003e2c 	.word	0x20003e2c

0800bfdc <vQueueDelete>:
	configASSERT( pxQueue );
 800bfdc:	b138      	cbz	r0, 800bfee <vQueueDelete+0x12>
{
 800bfde:	b510      	push	{r4, lr}
 800bfe0:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800bfe2:	f7ff ffe5 	bl	800bfb0 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bfe6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800bfea:	b14b      	cbz	r3, 800c000 <vQueueDelete+0x24>
}
 800bfec:	bd10      	pop	{r4, pc}
 800bfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800bffe:	e7fe      	b.n	800bffe <vQueueDelete+0x22>
			vPortFree( pxQueue );
 800c000:	4620      	mov	r0, r4
 800c002:	f7fe fd8b 	bl	800ab1c <vPortFree>
}
 800c006:	e7f1      	b.n	800bfec <vQueueDelete+0x10>

0800c008 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	4604      	mov	r4, r0
 800c00c:	460d      	mov	r5, r1
 800c00e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c010:	f7ff f8f8 	bl	800b204 <vPortEnterCritical>
 800c014:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c018:	b25b      	sxtb	r3, r3
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c01e:	d00d      	beq.n	800c03c <vQueueWaitForMessageRestricted+0x34>
 800c020:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c024:	b25b      	sxtb	r3, r3
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02a:	d00b      	beq.n	800c044 <vQueueWaitForMessageRestricted+0x3c>
 800c02c:	f7ff f90c 	bl	800b248 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c030:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c032:	b15b      	cbz	r3, 800c04c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c034:	4620      	mov	r0, r4
 800c036:	f7ff faaa 	bl	800b58e <prvUnlockQueue>
	}
 800c03a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800c03c:	2300      	movs	r3, #0
 800c03e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c042:	e7ed      	b.n	800c020 <vQueueWaitForMessageRestricted+0x18>
 800c044:	2300      	movs	r3, #0
 800c046:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c04a:	e7ef      	b.n	800c02c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c04c:	4632      	mov	r2, r6
 800c04e:	4629      	mov	r1, r5
 800c050:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c054:	f004 f82c 	bl	80100b0 <vTaskPlaceOnEventListRestricted>
 800c058:	e7ec      	b.n	800c034 <vQueueWaitForMessageRestricted+0x2c>

0800c05a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c05a:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c05c:	2003      	movs	r0, #3
 800c05e:	f001 f999 	bl	800d394 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c062:	200f      	movs	r0, #15
 800c064:	f003 fb98 	bl	800f798 <HAL_InitTick>
 800c068:	b110      	cbz	r0, 800c070 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 800c06a:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 800c06c:	4620      	mov	r0, r4
 800c06e:	bd10      	pop	{r4, pc}
 800c070:	4604      	mov	r4, r0
    HAL_MspInit();
 800c072:	f002 f955 	bl	800e320 <HAL_MspInit>
 800c076:	e7f9      	b.n	800c06c <HAL_Init+0x12>

0800c078 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800c078:	4b03      	ldr	r3, [pc, #12]	@ (800c088 <HAL_IncTick+0x10>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	4a03      	ldr	r2, [pc, #12]	@ (800c08c <HAL_IncTick+0x14>)
 800c07e:	6811      	ldr	r1, [r2, #0]
 800c080:	440b      	add	r3, r1
 800c082:	6013      	str	r3, [r2, #0]
}
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	2000000c 	.word	0x2000000c
 800c08c:	20003e6c 	.word	0x20003e6c

0800c090 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800c090:	4b01      	ldr	r3, [pc, #4]	@ (800c098 <HAL_GetTick+0x8>)
 800c092:	6818      	ldr	r0, [r3, #0]
}
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	20003e6c 	.word	0x20003e6c

0800c09c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800c09c:	b410      	push	{r4}
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800c09e:	3030      	adds	r0, #48	@ 0x30
 800c0a0:	0a0b      	lsrs	r3, r1, #8
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	f003 030c 	and.w	r3, r3, #12
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800c0a8:	58c4      	ldr	r4, [r0, r3]
 800c0aa:	f001 011f 	and.w	r1, r1, #31
 800c0ae:	f04f 0c1f 	mov.w	ip, #31
 800c0b2:	fa0c fc01 	lsl.w	ip, ip, r1
 800c0b6:	ea24 0c0c 	bic.w	ip, r4, ip
 800c0ba:	f3c2 6284 	ubfx	r2, r2, #26, #5
 800c0be:	408a      	lsls	r2, r1
 800c0c0:	ea4c 0202 	orr.w	r2, ip, r2
 800c0c4:	50c2      	str	r2, [r0, r3]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800c0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800c0cc:	b410      	push	{r4}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800c0ce:	3014      	adds	r0, #20
 800c0d0:	0e4b      	lsrs	r3, r1, #25
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	f003 0304 	and.w	r3, r3, #4
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800c0d8:	58c4      	ldr	r4, [r0, r3]
 800c0da:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800c0de:	f04f 0c07 	mov.w	ip, #7
 800c0e2:	fa0c fc01 	lsl.w	ip, ip, r1
 800c0e6:	ea24 0c0c 	bic.w	ip, r4, ip
 800c0ea:	408a      	lsls	r2, r1
 800c0ec:	ea4c 0202 	orr.w	r2, ip, r2
 800c0f0:	50c2      	str	r2, [r0, r3]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800c0f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c0f8:	b530      	push	{r4, r5, lr}
 800c0fa:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800c100:	2800      	cmp	r0, #0
 800c102:	f000 80d0 	beq.w	800c2a6 <HAL_ADC_Init+0x1ae>
 800c106:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c108:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c10a:	b313      	cbz	r3, 800c152 <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800c10c:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 800c114:	d005      	beq.n	800c122 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800c116:	689a      	ldr	r2, [r3, #8]
 800c118:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 800c11c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800c120:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c122:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c124:	6893      	ldr	r3, [r2, #8]
 800c126:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c12a:	d11f      	bne.n	800c16c <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 800c12c:	6893      	ldr	r3, [r2, #8]
 800c12e:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800c132:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c13a:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c13c:	4b5b      	ldr	r3, [pc, #364]	@ (800c2ac <HAL_ADC_Init+0x1b4>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	099b      	lsrs	r3, r3, #6
 800c142:	4a5b      	ldr	r2, [pc, #364]	@ (800c2b0 <HAL_ADC_Init+0x1b8>)
 800c144:	fba2 2303 	umull	r2, r3, r2, r3
 800c148:	099b      	lsrs	r3, r3, #6
 800c14a:	3301      	adds	r3, #1
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800c150:	e009      	b.n	800c166 <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 800c152:	f002 f905 	bl	800e360 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800c156:	2300      	movs	r3, #0
 800c158:	65a3      	str	r3, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 800c15a:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800c15e:	e7d5      	b.n	800c10c <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 800c160:	9b01      	ldr	r3, [sp, #4]
 800c162:	3b01      	subs	r3, #1
 800c164:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f9      	bne.n	800c160 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c16c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800c16e:	6893      	ldr	r3, [r2, #8]
 800c170:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800c174:	d170      	bne.n	800c258 <HAL_ADC_Init+0x160>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c176:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c178:	f043 0310 	orr.w	r3, r3, #16
 800c17c:	6563      	str	r3, [r4, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c17e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c180:	f043 0301 	orr.w	r3, r3, #1
 800c184:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800c186:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c188:	6893      	ldr	r3, [r2, #8]
 800c18a:	f013 0304 	ands.w	r3, r3, #4
 800c18e:	d000      	beq.n	800c192 <HAL_ADC_Init+0x9a>
 800c190:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c192:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800c194:	f011 0f10 	tst.w	r1, #16
 800c198:	d17e      	bne.n	800c298 <HAL_ADC_Init+0x1a0>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d17c      	bne.n	800c298 <HAL_ADC_Init+0x1a0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c19e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c1a0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800c1a4:	f043 0302 	orr.w	r3, r3, #2
 800c1a8:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c1aa:	6893      	ldr	r3, [r2, #8]
 800c1ac:	f013 0f01 	tst.w	r3, #1
 800c1b0:	d10b      	bne.n	800c1ca <HAL_ADC_Init+0xd2>
 800c1b2:	4b40      	ldr	r3, [pc, #256]	@ (800c2b4 <HAL_ADC_Init+0x1bc>)
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	f013 0f01 	tst.w	r3, #1
 800c1ba:	d106      	bne.n	800c1ca <HAL_ADC_Init+0xd2>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800c1bc:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800c1be:	493e      	ldr	r1, [pc, #248]	@ (800c2b8 <HAL_ADC_Init+0x1c0>)
 800c1c0:	688a      	ldr	r2, [r1, #8]
 800c1c2:	f422 127c 	bic.w	r2, r2, #4128768	@ 0x3f0000
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c1ca:	7e62      	ldrb	r2, [r4, #25]
                 hadc->Init.Overrun                                                     |
 800c1cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c1ce:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                 hadc->Init.DataAlign                                                   |
 800c1d2:	68e2      	ldr	r2, [r4, #12]
                 hadc->Init.Overrun                                                     |
 800c1d4:	4313      	orrs	r3, r2
                 hadc->Init.Resolution                                                  |
 800c1d6:	68a2      	ldr	r2, [r4, #8]
                 hadc->Init.DataAlign                                                   |
 800c1d8:	4313      	orrs	r3, r2
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800c1da:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c1e2:	2a01      	cmp	r2, #1
 800c1e4:	d03a      	beq.n	800c25c <HAL_ADC_Init+0x164>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c1e6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c1e8:	b122      	cbz	r2, 800c1f4 <HAL_ADC_Init+0xfc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c1ea:	f402 7270 	and.w	r2, r2, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800c1ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c1f0:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c1f2:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800c1f4:	6821      	ldr	r1, [r4, #0]
 800c1f6:	68cd      	ldr	r5, [r1, #12]
 800c1f8:	4a30      	ldr	r2, [pc, #192]	@ (800c2bc <HAL_ADC_Init+0x1c4>)
 800c1fa:	402a      	ands	r2, r5
 800c1fc:	431a      	orrs	r2, r3
 800c1fe:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c200:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c202:	6893      	ldr	r3, [r2, #8]
 800c204:	f013 0308 	ands.w	r3, r3, #8
 800c208:	d000      	beq.n	800c20c <HAL_ADC_Init+0x114>
 800c20a:	2301      	movs	r3, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c20c:	b9ab      	cbnz	r3, 800c23a <HAL_ADC_Init+0x142>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800c20e:	7e23      	ldrb	r3, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800c210:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800c214:	0049      	lsls	r1, r1, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800c216:	ea41 3183 	orr.w	r1, r1, r3, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800c21a:	68d3      	ldr	r3, [r2, #12]
 800c21c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c220:	f023 0302 	bic.w	r3, r3, #2
 800c224:	430b      	orrs	r3, r1
 800c226:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800c228:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d01a      	beq.n	800c266 <HAL_ADC_Init+0x16e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800c230:	6822      	ldr	r2, [r4, #0]
 800c232:	6913      	ldr	r3, [r2, #16]
 800c234:	f023 0301 	bic.w	r3, r3, #1
 800c238:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800c23a:	6923      	ldr	r3, [r4, #16]
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	d022      	beq.n	800c286 <HAL_ADC_Init+0x18e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800c240:	6822      	ldr	r2, [r4, #0]
 800c242:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800c244:	f023 030f 	bic.w	r3, r3, #15
 800c248:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800c24a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c24c:	f023 0303 	bic.w	r3, r3, #3
 800c250:	f043 0301 	orr.w	r3, r3, #1
 800c254:	6563      	str	r3, [r4, #84]	@ 0x54
 800c256:	e024      	b.n	800c2a2 <HAL_ADC_Init+0x1aa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c258:	2000      	movs	r0, #0
 800c25a:	e795      	b.n	800c188 <HAL_ADC_Init+0x90>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800c25c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c25e:	3a01      	subs	r2, #1
 800c260:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800c264:	e7bf      	b.n	800c1e6 <HAL_ADC_Init+0xee>
        MODIFY_REG(hadc->Instance->CFGR2,
 800c266:	6821      	ldr	r1, [r4, #0]
 800c268:	690b      	ldr	r3, [r1, #16]
 800c26a:	f36f 038a 	bfc	r3, #2, #9
 800c26e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800c270:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800c272:	432a      	orrs	r2, r5
 800c274:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 800c276:	432a      	orrs	r2, r5
 800c278:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 800c27a:	432a      	orrs	r2, r5
 800c27c:	4313      	orrs	r3, r2
 800c27e:	f043 0301 	orr.w	r3, r3, #1
 800c282:	610b      	str	r3, [r1, #16]
 800c284:	e7d9      	b.n	800c23a <HAL_ADC_Init+0x142>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800c286:	6821      	ldr	r1, [r4, #0]
 800c288:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800c28a:	f023 030f 	bic.w	r3, r3, #15
 800c28e:	69e2      	ldr	r2, [r4, #28]
 800c290:	3a01      	subs	r2, #1
 800c292:	4313      	orrs	r3, r2
 800c294:	630b      	str	r3, [r1, #48]	@ 0x30
 800c296:	e7d8      	b.n	800c24a <HAL_ADC_Init+0x152>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c298:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c29a:	f043 0310 	orr.w	r3, r3, #16
 800c29e:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c2a0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 800c2a2:	b003      	add	sp, #12
 800c2a4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800c2a6:	2001      	movs	r0, #1
 800c2a8:	e7fb      	b.n	800c2a2 <HAL_ADC_Init+0x1aa>
 800c2aa:	bf00      	nop
 800c2ac:	20000034 	.word	0x20000034
 800c2b0:	053e2d63 	.word	0x053e2d63
 800c2b4:	50040000 	.word	0x50040000
 800c2b8:	50040300 	.word	0x50040300
 800c2bc:	fff0c007 	.word	0xfff0c007

0800c2c0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	460e      	mov	r6, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c2c6:	6945      	ldr	r5, [r0, #20]
 800c2c8:	2d08      	cmp	r5, #8
 800c2ca:	d005      	beq.n	800c2d8 <HAL_ADC_PollForConversion+0x18>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c2cc:	6803      	ldr	r3, [r0, #0]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	f013 0f01 	tst.w	r3, #1
 800c2d4:	d11e      	bne.n	800c314 <HAL_ADC_PollForConversion+0x54>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
      return HAL_ERROR;
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800c2d6:	2504      	movs	r5, #4
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c2d8:	f7ff feda 	bl	800c090 <HAL_GetTick>
 800c2dc:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	422a      	tst	r2, r5
 800c2e4:	d11c      	bne.n	800c320 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c2e6:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c2ea:	d0f8      	beq.n	800c2de <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800c2ec:	f7ff fed0 	bl	800c090 <HAL_GetTick>
 800c2f0:	1bc3      	subs	r3, r0, r7
 800c2f2:	42b3      	cmp	r3, r6
 800c2f4:	d801      	bhi.n	800c2fa <HAL_ADC_PollForConversion+0x3a>
 800c2f6:	2e00      	cmp	r6, #0
 800c2f8:	d1f1      	bne.n	800c2de <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	422b      	tst	r3, r5
 800c300:	d1ed      	bne.n	800c2de <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c302:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c304:	f043 0304 	orr.w	r3, r3, #4
 800c308:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c30a:	2300      	movs	r3, #0
 800c30c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

          return HAL_TIMEOUT;
 800c310:	2003      	movs	r0, #3
 800c312:	e004      	b.n	800c31e <HAL_ADC_PollForConversion+0x5e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c314:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c316:	f043 0320 	orr.w	r3, r3, #32
 800c31a:	6543      	str	r3, [r0, #84]	@ 0x54
      return HAL_ERROR;
 800c31c:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800c31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c326:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800c328:	68da      	ldr	r2, [r3, #12]
 800c32a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800c32e:	d111      	bne.n	800c354 <HAL_ADC_PollForConversion+0x94>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800c330:	7e62      	ldrb	r2, [r4, #25]
 800c332:	b97a      	cbnz	r2, 800c354 <HAL_ADC_PollForConversion+0x94>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	f012 0f08 	tst.w	r2, #8
 800c33a:	d00b      	beq.n	800c354 <HAL_ADC_PollForConversion+0x94>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c33c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c33e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c342:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c344:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c346:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800c34a:	d103      	bne.n	800c354 <HAL_ADC_PollForConversion+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c34c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c34e:	f042 0201 	orr.w	r2, r2, #1
 800c352:	6562      	str	r2, [r4, #84]	@ 0x54
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800c354:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800c356:	2d08      	cmp	r5, #8
 800c358:	d006      	beq.n	800c368 <HAL_ADC_PollForConversion+0xa8>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800c35a:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
 800c35e:	d107      	bne.n	800c370 <HAL_ADC_PollForConversion+0xb0>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c360:	220c      	movs	r2, #12
 800c362:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c364:	2000      	movs	r0, #0
 800c366:	e7da      	b.n	800c31e <HAL_ADC_PollForConversion+0x5e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800c368:	2208      	movs	r2, #8
 800c36a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800c36c:	2000      	movs	r0, #0
 800c36e:	e7d6      	b.n	800c31e <HAL_ADC_PollForConversion+0x5e>
 800c370:	2000      	movs	r0, #0
 800c372:	e7d4      	b.n	800c31e <HAL_ADC_PollForConversion+0x5e>

0800c374 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800c374:	6803      	ldr	r3, [r0, #0]
 800c376:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 800c378:	4770      	bx	lr
	...

0800c37c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800c37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c37e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800c380:	2300      	movs	r3, #0
 800c382:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c384:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800c388:	2b01      	cmp	r3, #1
 800c38a:	f000 8203 	beq.w	800c794 <HAL_ADC_ConfigChannel+0x418>
 800c38e:	4604      	mov	r4, r0
 800c390:	460d      	mov	r5, r1
 800c392:	2301      	movs	r3, #1
 800c394:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c398:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c39a:	6883      	ldr	r3, [r0, #8]
 800c39c:	f013 0f04 	tst.w	r3, #4
 800c3a0:	d009      	beq.n	800c3b6 <HAL_ADC_ConfigChannel+0x3a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c3a2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c3a4:	f043 0320 	orr.w	r3, r3, #32
 800c3a8:	6563      	str	r3, [r4, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800c3aa:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800c3b2:	b003      	add	sp, #12
 800c3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t config_rank = pConfig->Rank;
 800c3b6:	6849      	ldr	r1, [r1, #4]
    if (pConfig->Rank <= 5U)
 800c3b8:	2905      	cmp	r1, #5
 800c3ba:	d807      	bhi.n	800c3cc <HAL_ADC_ConfigChannel+0x50>
      switch (pConfig->Rank)
 800c3bc:	3902      	subs	r1, #2
 800c3be:	2903      	cmp	r1, #3
 800c3c0:	d84e      	bhi.n	800c460 <HAL_ADC_ConfigChannel+0xe4>
 800c3c2:	e8df f001 	tbb	[pc, r1]
 800c3c6:	4f02      	.short	0x4f02
 800c3c8:	4a48      	.short	0x4a48
 800c3ca:	210c      	movs	r1, #12
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800c3cc:	682a      	ldr	r2, [r5, #0]
 800c3ce:	f7ff fe65 	bl	800c09c <LL_ADC_REG_SetSequencerRanks>
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c3d2:	6820      	ldr	r0, [r4, #0]
 800c3d4:	6883      	ldr	r3, [r0, #8]
 800c3d6:	f013 0304 	ands.w	r3, r3, #4
 800c3da:	d000      	beq.n	800c3de <HAL_ADC_ConfigChannel+0x62>
 800c3dc:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c3de:	6882      	ldr	r2, [r0, #8]
 800c3e0:	f012 0208 	ands.w	r2, r2, #8
 800c3e4:	d000      	beq.n	800c3e8 <HAL_ADC_ConfigChannel+0x6c>
 800c3e6:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c3e8:	b90b      	cbnz	r3, 800c3ee <HAL_ADC_ConfigChannel+0x72>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c3ea:	2a00      	cmp	r2, #0
 800c3ec:	d03c      	beq.n	800c468 <HAL_ADC_ConfigChannel+0xec>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c3ee:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c3f0:	6893      	ldr	r3, [r2, #8]
 800c3f2:	f013 0f01 	tst.w	r3, #1
 800c3f6:	d117      	bne.n	800c428 <HAL_ADC_ConfigChannel+0xac>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	68e8      	ldr	r0, [r5, #12]
  MODIFY_REG(ADCx->DIFSEL,
 800c3fc:	f8d2 10b0 	ldr.w	r1, [r2, #176]	@ 0xb0
 800c400:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800c404:	ea21 0106 	bic.w	r1, r1, r6
 800c408:	f000 0c18 	and.w	ip, r0, #24
 800c40c:	48a8      	ldr	r0, [pc, #672]	@ (800c6b0 <HAL_ADC_ConfigChannel+0x334>)
 800c40e:	fa20 f00c 	lsr.w	r0, r0, ip
 800c412:	4003      	ands	r3, r0
 800c414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c418:	430b      	orrs	r3, r1
 800c41a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c41e:	68ea      	ldr	r2, [r5, #12]
 800c420:	4ba4      	ldr	r3, [pc, #656]	@ (800c6b4 <HAL_ADC_ConfigChannel+0x338>)
 800c422:	429a      	cmp	r2, r3
 800c424:	f000 80a5 	beq.w	800c572 <HAL_ADC_ConfigChannel+0x1f6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c428:	682b      	ldr	r3, [r5, #0]
 800c42a:	4aa3      	ldr	r2, [pc, #652]	@ (800c6b8 <HAL_ADC_ConfigChannel+0x33c>)
 800c42c:	4213      	tst	r3, r2
 800c42e:	f000 81ad 	beq.w	800c78c <HAL_ADC_ConfigChannel+0x410>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800c432:	4aa2      	ldr	r2, [pc, #648]	@ (800c6bc <HAL_ADC_ConfigChannel+0x340>)
 800c434:	6892      	ldr	r2, [r2, #8]
 800c436:	f002 70e0 	and.w	r0, r2, #29360128	@ 0x1c00000
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800c43a:	49a1      	ldr	r1, [pc, #644]	@ (800c6c0 <HAL_ADC_ConfigChannel+0x344>)
 800c43c:	428b      	cmp	r3, r1
 800c43e:	f000 8158 	beq.w	800c6f2 <HAL_ADC_ConfigChannel+0x376>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c442:	49a0      	ldr	r1, [pc, #640]	@ (800c6c4 <HAL_ADC_ConfigChannel+0x348>)
 800c444:	428b      	cmp	r3, r1
 800c446:	f000 817a 	beq.w	800c73e <HAL_ADC_ConfigChannel+0x3c2>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c44a:	499f      	ldr	r1, [pc, #636]	@ (800c6c8 <HAL_ADC_ConfigChannel+0x34c>)
 800c44c:	428b      	cmp	r3, r1
 800c44e:	f000 818a 	beq.w	800c766 <HAL_ADC_ConfigChannel+0x3ea>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c452:	2000      	movs	r0, #0
 800c454:	e7aa      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
          config_rank = ADC_REGULAR_RANK_4;
 800c456:	2118      	movs	r1, #24
          break;
 800c458:	e7b8      	b.n	800c3cc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_5;
 800c45a:	f44f 7180 	mov.w	r1, #256	@ 0x100
          break;
 800c45e:	e7b5      	b.n	800c3cc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_1;
 800c460:	2106      	movs	r1, #6
          break;
 800c462:	e7b3      	b.n	800c3cc <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_3;
 800c464:	2112      	movs	r1, #18
 800c466:	e7b1      	b.n	800c3cc <HAL_ADC_ConfigChannel+0x50>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800c468:	68aa      	ldr	r2, [r5, #8]
 800c46a:	6829      	ldr	r1, [r5, #0]
 800c46c:	f7ff fe2e 	bl	800c0cc <LL_ADC_SetChannelSamplingTime>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800c470:	6969      	ldr	r1, [r5, #20]
 800c472:	6822      	ldr	r2, [r4, #0]
 800c474:	68d3      	ldr	r3, [r2, #12]
 800c476:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	4099      	lsls	r1, r3
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c47e:	6928      	ldr	r0, [r5, #16]
 800c480:	2804      	cmp	r0, #4
 800c482:	d00e      	beq.n	800c4a2 <HAL_ADC_ConfigChannel+0x126>
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800c484:	682e      	ldr	r6, [r5, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800c486:	3260      	adds	r2, #96	@ 0x60
  MODIFY_REG(*preg,
 800c488:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 800c48c:	4b8f      	ldr	r3, [pc, #572]	@ (800c6cc <HAL_ADC_ConfigChannel+0x350>)
 800c48e:	403b      	ands	r3, r7
 800c490:	f006 46f8 	and.w	r6, r6, #2080374784	@ 0x7c000000
 800c494:	4331      	orrs	r1, r6
 800c496:	430b      	orrs	r3, r1
 800c498:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c49c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800c4a0:	e7a5      	b.n	800c3ee <HAL_ADC_ConfigChannel+0x72>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800c4a2:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800c4a4:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c4a6:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c4aa:	682b      	ldr	r3, [r5, #0]
 800c4ac:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800c4b0:	bb80      	cbnz	r0, 800c514 <HAL_ADC_ConfigChannel+0x198>
 800c4b2:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c4b6:	4299      	cmp	r1, r3
 800c4b8:	d034      	beq.n	800c524 <HAL_ADC_ConfigChannel+0x1a8>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c4ba:	6821      	ldr	r1, [r4, #0]
 800c4bc:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800c4be:	6e4a      	ldr	r2, [r1, #100]	@ 0x64
 800c4c0:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800c4ca:	bb80      	cbnz	r0, 800c52e <HAL_ADC_ConfigChannel+0x1b2>
 800c4cc:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d034      	beq.n	800c53e <HAL_ADC_ConfigChannel+0x1c2>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c4d4:	6821      	ldr	r1, [r4, #0]
 800c4d6:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 800c4d8:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
 800c4da:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c4de:	682b      	ldr	r3, [r5, #0]
 800c4e0:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800c4e4:	bb80      	cbnz	r0, 800c548 <HAL_ADC_ConfigChannel+0x1cc>
 800c4e6:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d034      	beq.n	800c558 <HAL_ADC_ConfigChannel+0x1dc>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c4ee:	6821      	ldr	r1, [r4, #0]
 800c4f0:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800c4f2:	6eca      	ldr	r2, [r1, #108]	@ 0x6c
 800c4f4:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	f3c3 0012 	ubfx	r0, r3, #0, #19
 800c4fe:	bb80      	cbnz	r0, 800c562 <HAL_ADC_ConfigChannel+0x1e6>
 800c500:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c504:	429a      	cmp	r2, r3
 800c506:	f47f af72 	bne.w	800c3ee <HAL_ADC_ConfigChannel+0x72>
  MODIFY_REG(*preg,
 800c50a:	6ecb      	ldr	r3, [r1, #108]	@ 0x6c
 800c50c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c510:	66cb      	str	r3, [r1, #108]	@ 0x6c
}
 800c512:	e76c      	b.n	800c3ee <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c514:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800c518:	b113      	cbz	r3, 800c520 <HAL_ADC_ConfigChannel+0x1a4>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800c51a:	fab3 f383 	clz	r3, r3
 800c51e:	e7ca      	b.n	800c4b6 <HAL_ADC_ConfigChannel+0x13a>
    return 32U;
 800c520:	2320      	movs	r3, #32
 800c522:	e7c8      	b.n	800c4b6 <HAL_ADC_ConfigChannel+0x13a>
  MODIFY_REG(*preg,
 800c524:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800c526:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c52a:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800c52c:	e7c5      	b.n	800c4ba <HAL_ADC_ConfigChannel+0x13e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c52e:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800c532:	b113      	cbz	r3, 800c53a <HAL_ADC_ConfigChannel+0x1be>
  return __builtin_clz(value);
 800c534:	fab3 f383 	clz	r3, r3
 800c538:	e7ca      	b.n	800c4d0 <HAL_ADC_ConfigChannel+0x154>
    return 32U;
 800c53a:	2320      	movs	r3, #32
 800c53c:	e7c8      	b.n	800c4d0 <HAL_ADC_ConfigChannel+0x154>
  MODIFY_REG(*preg,
 800c53e:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800c540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c544:	664b      	str	r3, [r1, #100]	@ 0x64
}
 800c546:	e7c5      	b.n	800c4d4 <HAL_ADC_ConfigChannel+0x158>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c548:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800c54c:	b113      	cbz	r3, 800c554 <HAL_ADC_ConfigChannel+0x1d8>
  return __builtin_clz(value);
 800c54e:	fab3 f383 	clz	r3, r3
 800c552:	e7ca      	b.n	800c4ea <HAL_ADC_ConfigChannel+0x16e>
    return 32U;
 800c554:	2320      	movs	r3, #32
 800c556:	e7c8      	b.n	800c4ea <HAL_ADC_ConfigChannel+0x16e>
  MODIFY_REG(*preg,
 800c558:	6e8b      	ldr	r3, [r1, #104]	@ 0x68
 800c55a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c55e:	668b      	str	r3, [r1, #104]	@ 0x68
}
 800c560:	e7c5      	b.n	800c4ee <HAL_ADC_ConfigChannel+0x172>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c562:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800c566:	b113      	cbz	r3, 800c56e <HAL_ADC_ConfigChannel+0x1f2>
  return __builtin_clz(value);
 800c568:	fab3 f383 	clz	r3, r3
 800c56c:	e7ca      	b.n	800c504 <HAL_ADC_ConfigChannel+0x188>
    return 32U;
 800c56e:	2320      	movs	r3, #32
 800c570:	e7c8      	b.n	800c504 <HAL_ADC_ConfigChannel+0x188>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c572:	6820      	ldr	r0, [r4, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c574:	682b      	ldr	r3, [r5, #0]
 800c576:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800c57a:	bb3e      	cbnz	r6, 800c5cc <HAL_ADC_ConfigChannel+0x250>
 800c57c:	0e9a      	lsrs	r2, r3, #26
 800c57e:	3201      	adds	r2, #1
 800c580:	f002 021f 	and.w	r2, r2, #31
 800c584:	2a09      	cmp	r2, #9
 800c586:	bf8c      	ite	hi
 800c588:	2200      	movhi	r2, #0
 800c58a:	2201      	movls	r2, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c58c:	2a00      	cmp	r2, #0
 800c58e:	d055      	beq.n	800c63c <HAL_ADC_ConfigChannel+0x2c0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c590:	bb5e      	cbnz	r6, 800c5ea <HAL_ADC_ConfigChannel+0x26e>
 800c592:	0e99      	lsrs	r1, r3, #26
 800c594:	3101      	adds	r1, #1
 800c596:	0689      	lsls	r1, r1, #26
 800c598:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800c59c:	bb8e      	cbnz	r6, 800c602 <HAL_ADC_ConfigChannel+0x286>
 800c59e:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800c5a2:	f10c 0c01 	add.w	ip, ip, #1
 800c5a6:	f00c 0c1f 	and.w	ip, ip, #31
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	fa02 f20c 	lsl.w	r2, r2, ip
 800c5b0:	4311      	orrs	r1, r2
 800c5b2:	bbae      	cbnz	r6, 800c620 <HAL_ADC_ConfigChannel+0x2a4>
 800c5b4:	0e9b      	lsrs	r3, r3, #26
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	f003 031f 	and.w	r3, r3, #31
 800c5bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c5c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c5c2:	4319      	orrs	r1, r3
 800c5c4:	68aa      	ldr	r2, [r5, #8]
 800c5c6:	f7ff fd81 	bl	800c0cc <LL_ADC_SetChannelSamplingTime>
 800c5ca:	e72d      	b.n	800c428 <HAL_ADC_ConfigChannel+0xac>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5cc:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800c5d0:	b14a      	cbz	r2, 800c5e6 <HAL_ADC_ConfigChannel+0x26a>
  return __builtin_clz(value);
 800c5d2:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c5d6:	3201      	adds	r2, #1
 800c5d8:	f002 021f 	and.w	r2, r2, #31
 800c5dc:	2a09      	cmp	r2, #9
 800c5de:	bf8c      	ite	hi
 800c5e0:	2200      	movhi	r2, #0
 800c5e2:	2201      	movls	r2, #1
 800c5e4:	e7d2      	b.n	800c58c <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 800c5e6:	2220      	movs	r2, #32
 800c5e8:	e7f5      	b.n	800c5d6 <HAL_ADC_ConfigChannel+0x25a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5ea:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800c5ee:	b131      	cbz	r1, 800c5fe <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 800c5f0:	fab1 f181 	clz	r1, r1
 800c5f4:	3101      	adds	r1, #1
 800c5f6:	0689      	lsls	r1, r1, #26
 800c5f8:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800c5fc:	e7ce      	b.n	800c59c <HAL_ADC_ConfigChannel+0x220>
    return 32U;
 800c5fe:	2120      	movs	r1, #32
 800c600:	e7f8      	b.n	800c5f4 <HAL_ADC_ConfigChannel+0x278>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c602:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800c606:	b14a      	cbz	r2, 800c61c <HAL_ADC_ConfigChannel+0x2a0>
  return __builtin_clz(value);
 800c608:	fab2 f282 	clz	r2, r2
 800c60c:	3201      	adds	r2, #1
 800c60e:	f002 021f 	and.w	r2, r2, #31
 800c612:	f04f 0c01 	mov.w	ip, #1
 800c616:	fa0c f202 	lsl.w	r2, ip, r2
 800c61a:	e7c9      	b.n	800c5b0 <HAL_ADC_ConfigChannel+0x234>
    return 32U;
 800c61c:	2220      	movs	r2, #32
 800c61e:	e7f5      	b.n	800c60c <HAL_ADC_ConfigChannel+0x290>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c620:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800c624:	b143      	cbz	r3, 800c638 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800c626:	fab3 f383 	clz	r3, r3
 800c62a:	3301      	adds	r3, #1
 800c62c:	f003 031f 	and.w	r3, r3, #31
 800c630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c634:	051b      	lsls	r3, r3, #20
 800c636:	e7c4      	b.n	800c5c2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800c638:	2320      	movs	r3, #32
 800c63a:	e7f6      	b.n	800c62a <HAL_ADC_ConfigChannel+0x2ae>
 800c63c:	b9e6      	cbnz	r6, 800c678 <HAL_ADC_ConfigChannel+0x2fc>
 800c63e:	0e99      	lsrs	r1, r3, #26
 800c640:	3101      	adds	r1, #1
 800c642:	0689      	lsls	r1, r1, #26
 800c644:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800c648:	bb16      	cbnz	r6, 800c690 <HAL_ADC_ConfigChannel+0x314>
 800c64a:	ea4f 6c93 	mov.w	ip, r3, lsr #26
 800c64e:	f10c 0c01 	add.w	ip, ip, #1
 800c652:	f00c 0c1f 	and.w	ip, ip, #31
 800c656:	2201      	movs	r2, #1
 800c658:	fa02 f20c 	lsl.w	r2, r2, ip
 800c65c:	4311      	orrs	r1, r2
 800c65e:	bbbe      	cbnz	r6, 800c6d0 <HAL_ADC_ConfigChannel+0x354>
 800c660:	0e9b      	lsrs	r3, r3, #26
 800c662:	3301      	adds	r3, #1
 800c664:	f003 031f 	and.w	r3, r3, #31
 800c668:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c66c:	3b1e      	subs	r3, #30
 800c66e:	051b      	lsls	r3, r3, #20
 800c670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c674:	4319      	orrs	r1, r3
 800c676:	e7a5      	b.n	800c5c4 <HAL_ADC_ConfigChannel+0x248>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c678:	fa93 f1a3 	rbit	r1, r3
  if (value == 0U)
 800c67c:	b131      	cbz	r1, 800c68c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800c67e:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800c682:	3101      	adds	r1, #1
 800c684:	0689      	lsls	r1, r1, #26
 800c686:	f001 41f8 	and.w	r1, r1, #2080374784	@ 0x7c000000
 800c68a:	e7dd      	b.n	800c648 <HAL_ADC_ConfigChannel+0x2cc>
    return 32U;
 800c68c:	2120      	movs	r1, #32
 800c68e:	e7f8      	b.n	800c682 <HAL_ADC_ConfigChannel+0x306>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c690:	fa93 f2a3 	rbit	r2, r3
  if (value == 0U)
 800c694:	b14a      	cbz	r2, 800c6aa <HAL_ADC_ConfigChannel+0x32e>
  return __builtin_clz(value);
 800c696:	fab2 f282 	clz	r2, r2
 800c69a:	3201      	adds	r2, #1
 800c69c:	f002 021f 	and.w	r2, r2, #31
 800c6a0:	f04f 0c01 	mov.w	ip, #1
 800c6a4:	fa0c f202 	lsl.w	r2, ip, r2
 800c6a8:	e7d8      	b.n	800c65c <HAL_ADC_ConfigChannel+0x2e0>
    return 32U;
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	e7f5      	b.n	800c69a <HAL_ADC_ConfigChannel+0x31e>
 800c6ae:	bf00      	nop
 800c6b0:	0007ffff 	.word	0x0007ffff
 800c6b4:	407f0000 	.word	0x407f0000
 800c6b8:	80080000 	.word	0x80080000
 800c6bc:	50040300 	.word	0x50040300
 800c6c0:	c7520000 	.word	0xc7520000
 800c6c4:	cb840000 	.word	0xcb840000
 800c6c8:	80000001 	.word	0x80000001
 800c6cc:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6d0:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 800c6d4:	b15b      	cbz	r3, 800c6ee <HAL_ADC_ConfigChannel+0x372>
  return __builtin_clz(value);
 800c6d6:	fab3 f383 	clz	r3, r3
 800c6da:	3301      	adds	r3, #1
 800c6dc:	f003 031f 	and.w	r3, r3, #31
 800c6e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c6e4:	3b1e      	subs	r3, #30
 800c6e6:	051b      	lsls	r3, r3, #20
 800c6e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c6ec:	e7c2      	b.n	800c674 <HAL_ADC_ConfigChannel+0x2f8>
    return 32U;
 800c6ee:	2320      	movs	r3, #32
 800c6f0:	e7f3      	b.n	800c6da <HAL_ADC_ConfigChannel+0x35e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c6f2:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 800c6f6:	f47f aea4 	bne.w	800c442 <HAL_ADC_ConfigChannel+0xc6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c6fa:	6822      	ldr	r2, [r4, #0]
 800c6fc:	4b26      	ldr	r3, [pc, #152]	@ (800c798 <HAL_ADC_ConfigChannel+0x41c>)
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d001      	beq.n	800c706 <HAL_ADC_ConfigChannel+0x38a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c702:	2000      	movs	r0, #0
 800c704:	e652      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c706:	f440 0300 	orr.w	r3, r0, #8388608	@ 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800c70a:	4924      	ldr	r1, [pc, #144]	@ (800c79c <HAL_ADC_ConfigChannel+0x420>)
 800c70c:	688a      	ldr	r2, [r1, #8]
 800c70e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800c712:	4313      	orrs	r3, r2
 800c714:	608b      	str	r3, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c716:	4b22      	ldr	r3, [pc, #136]	@ (800c7a0 <HAL_ADC_ConfigChannel+0x424>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	099b      	lsrs	r3, r3, #6
 800c71c:	4a21      	ldr	r2, [pc, #132]	@ (800c7a4 <HAL_ADC_ConfigChannel+0x428>)
 800c71e:	fba2 2303 	umull	r2, r3, r2, r3
 800c722:	099b      	lsrs	r3, r3, #6
 800c724:	3301      	adds	r3, #1
 800c726:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	b11b      	cbz	r3, 800c73a <HAL_ADC_ConfigChannel+0x3be>
            wait_loop_index--;
 800c732:	9b01      	ldr	r3, [sp, #4]
 800c734:	3b01      	subs	r3, #1
 800c736:	9301      	str	r3, [sp, #4]
 800c738:	e7f9      	b.n	800c72e <HAL_ADC_ConfigChannel+0x3b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c73a:	2000      	movs	r0, #0
 800c73c:	e636      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c73e:	f012 7f80 	tst.w	r2, #16777216	@ 0x1000000
 800c742:	f47f ae82 	bne.w	800c44a <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c746:	6822      	ldr	r2, [r4, #0]
 800c748:	4b13      	ldr	r3, [pc, #76]	@ (800c798 <HAL_ADC_ConfigChannel+0x41c>)
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d001      	beq.n	800c752 <HAL_ADC_ConfigChannel+0x3d6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c74e:	2000      	movs	r0, #0
 800c750:	e62c      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c752:	f040 7380 	orr.w	r3, r0, #16777216	@ 0x1000000
 800c756:	4911      	ldr	r1, [pc, #68]	@ (800c79c <HAL_ADC_ConfigChannel+0x420>)
 800c758:	688a      	ldr	r2, [r1, #8]
 800c75a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800c75e:	4313      	orrs	r3, r2
 800c760:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c762:	2000      	movs	r0, #0
}
 800c764:	e622      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c766:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800c76a:	d111      	bne.n	800c790 <HAL_ADC_ConfigChannel+0x414>
        if (ADC_VREFINT_INSTANCE(hadc))
 800c76c:	6822      	ldr	r2, [r4, #0]
 800c76e:	4b0a      	ldr	r3, [pc, #40]	@ (800c798 <HAL_ADC_ConfigChannel+0x41c>)
 800c770:	429a      	cmp	r2, r3
 800c772:	d001      	beq.n	800c778 <HAL_ADC_ConfigChannel+0x3fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c774:	2000      	movs	r0, #0
 800c776:	e619      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c778:	f440 0380 	orr.w	r3, r0, #4194304	@ 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800c77c:	4907      	ldr	r1, [pc, #28]	@ (800c79c <HAL_ADC_ConfigChannel+0x420>)
 800c77e:	688a      	ldr	r2, [r1, #8]
 800c780:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800c784:	4313      	orrs	r3, r2
 800c786:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c788:	2000      	movs	r0, #0
}
 800c78a:	e60f      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
 800c78c:	2000      	movs	r0, #0
 800c78e:	e60d      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
 800c790:	2000      	movs	r0, #0
 800c792:	e60b      	b.n	800c3ac <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 800c794:	2002      	movs	r0, #2
 800c796:	e60c      	b.n	800c3b2 <HAL_ADC_ConfigChannel+0x36>
 800c798:	50040000 	.word	0x50040000
 800c79c:	50040300 	.word	0x50040300
 800c7a0:	20000034 	.word	0x20000034
 800c7a4:	053e2d63 	.word	0x053e2d63

0800c7a8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800c7a8:	b570      	push	{r4, r5, r6, lr}
 800c7aa:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c7ac:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c7ae:	689a      	ldr	r2, [r3, #8]
 800c7b0:	f012 0204 	ands.w	r2, r2, #4
 800c7b4:	d000      	beq.n	800c7b8 <ADC_ConversionStop+0x10>
 800c7b6:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c7b8:	6898      	ldr	r0, [r3, #8]
 800c7ba:	f010 0008 	ands.w	r0, r0, #8
 800c7be:	d000      	beq.n	800c7c2 <ADC_ConversionStop+0x1a>
 800c7c0:	2001      	movs	r0, #1
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800c7c2:	b90a      	cbnz	r2, 800c7c8 <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	d06d      	beq.n	800c8a4 <ADC_ConversionStop+0xfc>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800c7c8:	68da      	ldr	r2, [r3, #12]
 800c7ca:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800c7ce:	d004      	beq.n	800c7da <ADC_ConversionStop+0x32>
        && (hadc->Init.ContinuousConvMode == ENABLE)
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800c7d0:	8b20      	ldrh	r0, [r4, #24]
 800c7d2:	f240 1201 	movw	r2, #257	@ 0x101
 800c7d6:	4290      	cmp	r0, r2
 800c7d8:	d04e      	beq.n	800c878 <ADC_ConversionStop+0xd0>
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800c7da:	2902      	cmp	r1, #2
 800c7dc:	d012      	beq.n	800c804 <ADC_ConversionStop+0x5c>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800c7de:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c7e0:	689a      	ldr	r2, [r3, #8]
 800c7e2:	f012 0f04 	tst.w	r2, #4
 800c7e6:	d00b      	beq.n	800c800 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800c7e8:	689a      	ldr	r2, [r3, #8]
 800c7ea:	f012 0f02 	tst.w	r2, #2
 800c7ee:	d107      	bne.n	800c800 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 800c7f0:	689a      	ldr	r2, [r3, #8]
 800c7f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c7f6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800c7fa:	f042 0210 	orr.w	r2, r2, #16
 800c7fe:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800c800:	2901      	cmp	r1, #1
 800c802:	d047      	beq.n	800c894 <ADC_ConversionStop+0xec>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800c804:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c806:	689a      	ldr	r2, [r3, #8]
 800c808:	f012 0f08 	tst.w	r2, #8
 800c80c:	d00b      	beq.n	800c826 <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800c80e:	689a      	ldr	r2, [r3, #8]
 800c810:	f012 0f02 	tst.w	r2, #2
 800c814:	d107      	bne.n	800c826 <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 800c816:	689a      	ldr	r2, [r3, #8]
 800c818:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c81c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800c820:	f042 0220 	orr.w	r2, r2, #32
 800c824:	609a      	str	r2, [r3, #8]
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800c826:	2902      	cmp	r1, #2
 800c828:	d036      	beq.n	800c898 <ADC_ConversionStop+0xf0>
 800c82a:	2903      	cmp	r1, #3
 800c82c:	d136      	bne.n	800c89c <ADC_ConversionStop+0xf4>
 800c82e:	250c      	movs	r5, #12
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
        break;
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800c830:	f7ff fc2e 	bl	800c090 <HAL_GetTick>
 800c834:	4606      	mov	r6, r0

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c836:	6823      	ldr	r3, [r4, #0]
 800c838:	689b      	ldr	r3, [r3, #8]
 800c83a:	422b      	tst	r3, r5
 800c83c:	d030      	beq.n	800c8a0 <ADC_ConversionStop+0xf8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c83e:	f7ff fc27 	bl	800c090 <HAL_GetTick>
 800c842:	1b80      	subs	r0, r0, r6
 800c844:	2805      	cmp	r0, #5
 800c846:	d9f6      	bls.n	800c836 <ADC_ConversionStop+0x8e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c848:	6823      	ldr	r3, [r4, #0]
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	422b      	tst	r3, r5
 800c84e:	d0f2      	beq.n	800c836 <ADC_ConversionStop+0x8e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c850:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c852:	f043 0310 	orr.w	r3, r3, #16
 800c856:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c858:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c85a:	f043 0301 	orr.w	r3, r3, #1
 800c85e:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800c860:	2001      	movs	r0, #1
 800c862:	e01e      	b.n	800c8a2 <ADC_ConversionStop+0xfa>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c864:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c866:	f043 0310 	orr.w	r3, r3, #16
 800c86a:	6563      	str	r3, [r4, #84]	@ 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c86c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c86e:	f043 0301 	orr.w	r3, r3, #1
 800c872:	65a3      	str	r3, [r4, #88]	@ 0x58
          return HAL_ERROR;
 800c874:	2001      	movs	r0, #1
 800c876:	e014      	b.n	800c8a2 <ADC_ConversionStop+0xfa>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800c878:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c87a:	6819      	ldr	r1, [r3, #0]
 800c87c:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800c880:	d104      	bne.n	800c88c <ADC_ConversionStop+0xe4>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800c882:	4909      	ldr	r1, [pc, #36]	@ (800c8a8 <ADC_ConversionStop+0x100>)
 800c884:	428a      	cmp	r2, r1
 800c886:	d8ed      	bhi.n	800c864 <ADC_ConversionStop+0xbc>
        Conversion_Timeout_CPU_cycles ++;
 800c888:	3201      	adds	r2, #1
 800c88a:	e7f6      	b.n	800c87a <ADC_ConversionStop+0xd2>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800c88c:	2240      	movs	r2, #64	@ 0x40
 800c88e:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800c890:	2101      	movs	r1, #1
 800c892:	e7a4      	b.n	800c7de <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800c894:	2504      	movs	r5, #4
 800c896:	e7cb      	b.n	800c830 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800c898:	2508      	movs	r5, #8
 800c89a:	e7c9      	b.n	800c830 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800c89c:	2504      	movs	r5, #4
 800c89e:	e7c7      	b.n	800c830 <ADC_ConversionStop+0x88>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800c8a0:	2000      	movs	r0, #0
}
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800c8a4:	2000      	movs	r0, #0
 800c8a6:	e7fc      	b.n	800c8a2 <ADC_ConversionStop+0xfa>
 800c8a8:	a33fffff 	.word	0xa33fffff

0800c8ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c8ac:	b530      	push	{r4, r5, lr}
 800c8ae:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c8b4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c8b6:	689a      	ldr	r2, [r3, #8]
 800c8b8:	f012 0f01 	tst.w	r2, #1
 800c8bc:	d158      	bne.n	800c970 <ADC_Enable+0xc4>
 800c8be:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c8c0:	6899      	ldr	r1, [r3, #8]
 800c8c2:	4a2d      	ldr	r2, [pc, #180]	@ (800c978 <ADC_Enable+0xcc>)
 800c8c4:	4211      	tst	r1, r2
 800c8c6:	d119      	bne.n	800c8fc <ADC_Enable+0x50>
  MODIFY_REG(ADCx->CR,
 800c8c8:	689a      	ldr	r2, [r3, #8]
 800c8ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c8ce:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800c8d2:	f042 0201 	orr.w	r2, r2, #1
 800c8d6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800c8d8:	4b28      	ldr	r3, [pc, #160]	@ (800c97c <ADC_Enable+0xd0>)
 800c8da:	689b      	ldr	r3, [r3, #8]
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c8dc:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 800c8e0:	d01c      	beq.n	800c91c <ADC_Enable+0x70>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c8e2:	4b27      	ldr	r3, [pc, #156]	@ (800c980 <ADC_Enable+0xd4>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	099b      	lsrs	r3, r3, #6
 800c8e8:	4a26      	ldr	r2, [pc, #152]	@ (800c984 <ADC_Enable+0xd8>)
 800c8ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ee:	099b      	lsrs	r3, r3, #6
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800c8fa:	e00c      	b.n	800c916 <ADC_Enable+0x6a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c8fc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c8fe:	f043 0310 	orr.w	r3, r3, #16
 800c902:	6543      	str	r3, [r0, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c904:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800c906:	f043 0301 	orr.w	r3, r3, #1
 800c90a:	6583      	str	r3, [r0, #88]	@ 0x58
      return HAL_ERROR;
 800c90c:	2001      	movs	r0, #1
 800c90e:	e030      	b.n	800c972 <ADC_Enable+0xc6>
      {
        wait_loop_index--;
 800c910:	9b01      	ldr	r3, [sp, #4]
 800c912:	3b01      	subs	r3, #1
 800c914:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800c916:	9b01      	ldr	r3, [sp, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1f9      	bne.n	800c910 <ADC_Enable+0x64>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c91c:	f7ff fbb8 	bl	800c090 <HAL_GetTick>
 800c920:	4605      	mov	r5, r0

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c922:	6823      	ldr	r3, [r4, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	f012 0f01 	tst.w	r2, #1
 800c92a:	d11f      	bne.n	800c96c <ADC_Enable+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c92c:	689a      	ldr	r2, [r3, #8]
 800c92e:	f012 0f01 	tst.w	r2, #1
 800c932:	d107      	bne.n	800c944 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 800c934:	689a      	ldr	r2, [r3, #8]
 800c936:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c93a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800c93e:	f042 0201 	orr.w	r2, r2, #1
 800c942:	609a      	str	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
      {
        LL_ADC_Enable(hadc->Instance);
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c944:	f7ff fba4 	bl	800c090 <HAL_GetTick>
 800c948:	1b43      	subs	r3, r0, r5
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d9e9      	bls.n	800c922 <ADC_Enable+0x76>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f013 0f01 	tst.w	r3, #1
 800c956:	d1e4      	bne.n	800c922 <ADC_Enable+0x76>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c958:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c95a:	f043 0310 	orr.w	r3, r3, #16
 800c95e:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c960:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c962:	f043 0301 	orr.w	r3, r3, #1
 800c966:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800c968:	2001      	movs	r0, #1
 800c96a:	e002      	b.n	800c972 <ADC_Enable+0xc6>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c96c:	2000      	movs	r0, #0
 800c96e:	e000      	b.n	800c972 <ADC_Enable+0xc6>
 800c970:	2000      	movs	r0, #0
}
 800c972:	b003      	add	sp, #12
 800c974:	bd30      	pop	{r4, r5, pc}
 800c976:	bf00      	nop
 800c978:	8000003f 	.word	0x8000003f
 800c97c:	50040300 	.word	0x50040300
 800c980:	20000034 	.word	0x20000034
 800c984:	053e2d63 	.word	0x053e2d63

0800c988 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c988:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	f013 0f04 	tst.w	r3, #4
 800c990:	d13c      	bne.n	800ca0c <HAL_ADC_Start+0x84>
{
 800c992:	b510      	push	{r4, lr}
 800c994:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800c996:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d038      	beq.n	800ca10 <HAL_ADC_Start+0x88>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 800c9a4:	f7ff ff82 	bl	800c8ac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800c9a8:	bb60      	cbnz	r0, 800ca04 <HAL_ADC_Start+0x7c>
      ADC_STATE_CLR_SET(hadc->State,
 800c9aa:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c9ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800c9b0:	f023 0301 	bic.w	r3, r3, #1
 800c9b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9b8:	6563      	str	r3, [r4, #84]	@ 0x54
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c9ba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c9bc:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800c9c0:	d01d      	beq.n	800c9fe <HAL_ADC_Start+0x76>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c9c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c9c4:	f023 0306 	bic.w	r3, r3, #6
 800c9c8:	65a3      	str	r3, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	221c      	movs	r2, #28
 800c9ce:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800c9d6:	6822      	ldr	r2, [r4, #0]
 800c9d8:	68d3      	ldr	r3, [r2, #12]
 800c9da:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800c9de:	d005      	beq.n	800c9ec <HAL_ADC_Start+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c9e0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800c9e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c9e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c9ea:	6563      	str	r3, [r4, #84]	@ 0x54
  MODIFY_REG(ADCx->CR,
 800c9ec:	6893      	ldr	r3, [r2, #8]
 800c9ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c9f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c9f6:	f043 0304 	orr.w	r3, r3, #4
 800c9fa:	6093      	str	r3, [r2, #8]
}
 800c9fc:	bd10      	pop	{r4, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 800c9fe:	2300      	movs	r3, #0
 800ca00:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ca02:	e7e2      	b.n	800c9ca <HAL_ADC_Start+0x42>
      __HAL_UNLOCK(hadc);
 800ca04:	2300      	movs	r3, #0
 800ca06:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
 800ca0a:	e7f7      	b.n	800c9fc <HAL_ADC_Start+0x74>
    tmp_hal_status = HAL_BUSY;
 800ca0c:	2002      	movs	r0, #2
}
 800ca0e:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800ca10:	2002      	movs	r0, #2
 800ca12:	e7f3      	b.n	800c9fc <HAL_ADC_Start+0x74>

0800ca14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800ca18:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800ca1a:	6893      	ldr	r3, [r2, #8]
 800ca1c:	f013 0302 	ands.w	r3, r3, #2
 800ca20:	d000      	beq.n	800ca24 <ADC_Disable+0x10>
 800ca22:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ca24:	6891      	ldr	r1, [r2, #8]
 800ca26:	f011 0f01 	tst.w	r1, #1
 800ca2a:	d039      	beq.n	800caa0 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d139      	bne.n	800caa4 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800ca30:	6893      	ldr	r3, [r2, #8]
 800ca32:	f003 030d 	and.w	r3, r3, #13
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	d009      	beq.n	800ca4e <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ca3a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ca3c:	f043 0310 	orr.w	r3, r3, #16
 800ca40:	6563      	str	r3, [r4, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca44:	f043 0301 	orr.w	r3, r3, #1
 800ca48:	65a3      	str	r3, [r4, #88]	@ 0x58

      return HAL_ERROR;
 800ca4a:	2001      	movs	r0, #1
 800ca4c:	e029      	b.n	800caa2 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800ca4e:	6893      	ldr	r3, [r2, #8]
 800ca50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ca58:	f043 0302 	orr.w	r3, r3, #2
 800ca5c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	2203      	movs	r2, #3
 800ca62:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800ca64:	f7ff fb14 	bl	800c090 <HAL_GetTick>
 800ca68:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	f013 0f01 	tst.w	r3, #1
 800ca72:	d013      	beq.n	800ca9c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800ca74:	f7ff fb0c 	bl	800c090 <HAL_GetTick>
 800ca78:	1b40      	subs	r0, r0, r5
 800ca7a:	2802      	cmp	r0, #2
 800ca7c:	d9f5      	bls.n	800ca6a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800ca7e:	6823      	ldr	r3, [r4, #0]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	f013 0f01 	tst.w	r3, #1
 800ca86:	d0f0      	beq.n	800ca6a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ca88:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ca8a:	f043 0310 	orr.w	r3, r3, #16
 800ca8e:	6563      	str	r3, [r4, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca92:	f043 0301 	orr.w	r3, r3, #1
 800ca96:	65a3      	str	r3, [r4, #88]	@ 0x58

          return HAL_ERROR;
 800ca98:	2001      	movs	r0, #1
 800ca9a:	e002      	b.n	800caa2 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800ca9c:	2000      	movs	r0, #0
 800ca9e:	e000      	b.n	800caa2 <ADC_Disable+0x8e>
 800caa0:	2000      	movs	r0, #0
}
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800caa4:	2000      	movs	r0, #0
 800caa6:	e7fc      	b.n	800caa2 <ADC_Disable+0x8e>

0800caa8 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800caa8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800caac:	2b01      	cmp	r3, #1
 800caae:	d01a      	beq.n	800cae6 <HAL_ADC_Stop+0x3e>
{
 800cab0:	b510      	push	{r4, lr}
 800cab2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800cab4:	2301      	movs	r3, #1
 800cab6:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800caba:	2103      	movs	r1, #3
 800cabc:	f7ff fe74 	bl	800c7a8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800cac0:	b118      	cbz	r0, 800caca <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800cac2:	2300      	movs	r3, #0
 800cac4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800cac8:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 800caca:	4620      	mov	r0, r4
 800cacc:	f7ff ffa2 	bl	800ca14 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d1f6      	bne.n	800cac2 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800cad4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cad6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800cada:	f023 0301 	bic.w	r3, r3, #1
 800cade:	f043 0301 	orr.w	r3, r3, #1
 800cae2:	6563      	str	r3, [r4, #84]	@ 0x54
 800cae4:	e7ed      	b.n	800cac2 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800cae6:	2002      	movs	r0, #2
}
 800cae8:	4770      	bx	lr

0800caea <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800caea:	b530      	push	{r4, r5, lr}
 800caec:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800caee:	2300      	movs	r3, #0
 800caf0:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800caf2:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d041      	beq.n	800cb7e <HAL_ADCEx_Calibration_Start+0x94>
 800cafa:	4604      	mov	r4, r0
 800cafc:	460d      	mov	r5, r1
 800cafe:	2301      	movs	r3, #1
 800cb00:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800cb04:	f7ff ff86 	bl	800ca14 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800cb08:	bb80      	cbnz	r0, 800cb6c <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cb0a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cb0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800cb10:	f023 0302 	bic.w	r3, r3, #2
 800cb14:	f043 0302 	orr.w	r3, r3, #2
 800cb18:	6563      	str	r3, [r4, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800cb1a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800cb1c:	6893      	ldr	r3, [r2, #8]
 800cb1e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800cb22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800cb26:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 800cb2a:	432b      	orrs	r3, r5
 800cb2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cb30:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800cb32:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	db06      	blt.n	800cb48 <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cb3a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cb3c:	f023 0303 	bic.w	r3, r3, #3
 800cb40:	f043 0301 	orr.w	r3, r3, #1
 800cb44:	6563      	str	r3, [r4, #84]	@ 0x54
 800cb46:	e015      	b.n	800cb74 <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 800cb48:	9b01      	ldr	r3, [sp, #4]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800cb4e:	9b01      	ldr	r3, [sp, #4]
 800cb50:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800cb54:	d3ed      	bcc.n	800cb32 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 800cb56:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cb58:	f023 0312 	bic.w	r3, r3, #18
 800cb5c:	f043 0310 	orr.w	r3, r3, #16
 800cb60:	6563      	str	r3, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hadc);
 800cb62:	2300      	movs	r3, #0
 800cb64:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
        return HAL_ERROR;
 800cb68:	2001      	movs	r0, #1
 800cb6a:	e006      	b.n	800cb7a <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cb6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800cb6e:	f043 0310 	orr.w	r3, r3, #16
 800cb72:	6563      	str	r3, [r4, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800cb74:	2300      	movs	r3, #0
 800cb76:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800cb7a:	b003      	add	sp, #12
 800cb7c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 800cb7e:	2002      	movs	r0, #2
 800cb80:	e7fb      	b.n	800cb7a <HAL_ADCEx_Calibration_Start+0x90>

0800cb82 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800cb82:	2800      	cmp	r0, #0
 800cb84:	f000 80a1 	beq.w	800ccca <HAL_CAN_Init+0x148>
{
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800cb8c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cb90:	b1d3      	cbz	r3, 800cbc8 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	6813      	ldr	r3, [r2, #0]
 800cb96:	f043 0301 	orr.w	r3, r3, #1
 800cb9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb9c:	f7ff fa78 	bl	800c090 <HAL_GetTick>
 800cba0:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	685a      	ldr	r2, [r3, #4]
 800cba6:	f012 0f01 	tst.w	r2, #1
 800cbaa:	d110      	bne.n	800cbce <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cbac:	f7ff fa70 	bl	800c090 <HAL_GetTick>
 800cbb0:	1b40      	subs	r0, r0, r5
 800cbb2:	280a      	cmp	r0, #10
 800cbb4:	d9f5      	bls.n	800cba2 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cbb6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cbb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbbc:	6263      	str	r3, [r4, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800cbbe:	2305      	movs	r3, #5
 800cbc0:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 800cbc4:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800cbc8:	f001 fc2e 	bl	800e428 <HAL_CAN_MspInit>
 800cbcc:	e7e1      	b.n	800cb92 <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800cbce:	681a      	ldr	r2, [r3, #0]
 800cbd0:	f022 0202 	bic.w	r2, r2, #2
 800cbd4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800cbd6:	f7ff fa5b 	bl	800c090 <HAL_GetTick>
 800cbda:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800cbdc:	6823      	ldr	r3, [r4, #0]
 800cbde:	685a      	ldr	r2, [r3, #4]
 800cbe0:	f012 0f02 	tst.w	r2, #2
 800cbe4:	d00d      	beq.n	800cc02 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800cbe6:	f7ff fa53 	bl	800c090 <HAL_GetTick>
 800cbea:	1b40      	subs	r0, r0, r5
 800cbec:	280a      	cmp	r0, #10
 800cbee:	d9f5      	bls.n	800cbdc <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800cbf0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cbf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cbf6:	6263      	str	r3, [r4, #36]	@ 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800cbf8:	2305      	movs	r3, #5
 800cbfa:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 800cbfe:	2001      	movs	r0, #1
 800cc00:	e7e1      	b.n	800cbc6 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800cc02:	7e22      	ldrb	r2, [r4, #24]
 800cc04:	2a01      	cmp	r2, #1
 800cc06:	d03d      	beq.n	800cc84 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc0e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800cc10:	7e63      	ldrb	r3, [r4, #25]
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d03b      	beq.n	800cc8e <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cc16:	6822      	ldr	r2, [r4, #0]
 800cc18:	6813      	ldr	r3, [r2, #0]
 800cc1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc1e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800cc20:	7ea3      	ldrb	r3, [r4, #26]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d039      	beq.n	800cc9a <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800cc26:	6822      	ldr	r2, [r4, #0]
 800cc28:	6813      	ldr	r3, [r2, #0]
 800cc2a:	f023 0320 	bic.w	r3, r3, #32
 800cc2e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800cc30:	7ee3      	ldrb	r3, [r4, #27]
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d037      	beq.n	800cca6 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800cc36:	6822      	ldr	r2, [r4, #0]
 800cc38:	6813      	ldr	r3, [r2, #0]
 800cc3a:	f043 0310 	orr.w	r3, r3, #16
 800cc3e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800cc40:	7f23      	ldrb	r3, [r4, #28]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d035      	beq.n	800ccb2 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800cc46:	6822      	ldr	r2, [r4, #0]
 800cc48:	6813      	ldr	r3, [r2, #0]
 800cc4a:	f023 0308 	bic.w	r3, r3, #8
 800cc4e:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800cc50:	7f63      	ldrb	r3, [r4, #29]
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d033      	beq.n	800ccbe <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800cc56:	6822      	ldr	r2, [r4, #0]
 800cc58:	6813      	ldr	r3, [r2, #0]
 800cc5a:	f023 0304 	bic.w	r3, r3, #4
 800cc5e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800cc60:	68a3      	ldr	r3, [r4, #8]
 800cc62:	68e2      	ldr	r2, [r4, #12]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	6922      	ldr	r2, [r4, #16]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	6962      	ldr	r2, [r4, #20]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	6862      	ldr	r2, [r4, #4]
 800cc70:	3a01      	subs	r2, #1
 800cc72:	6821      	ldr	r1, [r4, #0]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800cc78:	2000      	movs	r0, #0
 800cc7a:	6260      	str	r0, [r4, #36]	@ 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800cc82:	e7a0      	b.n	800cbc6 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cc8a:	601a      	str	r2, [r3, #0]
 800cc8c:	e7c0      	b.n	800cc10 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800cc8e:	6822      	ldr	r2, [r4, #0]
 800cc90:	6813      	ldr	r3, [r2, #0]
 800cc92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	e7c2      	b.n	800cc20 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800cc9a:	6822      	ldr	r2, [r4, #0]
 800cc9c:	6813      	ldr	r3, [r2, #0]
 800cc9e:	f043 0320 	orr.w	r3, r3, #32
 800cca2:	6013      	str	r3, [r2, #0]
 800cca4:	e7c4      	b.n	800cc30 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800cca6:	6822      	ldr	r2, [r4, #0]
 800cca8:	6813      	ldr	r3, [r2, #0]
 800ccaa:	f023 0310 	bic.w	r3, r3, #16
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	e7c6      	b.n	800cc40 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ccb2:	6822      	ldr	r2, [r4, #0]
 800ccb4:	6813      	ldr	r3, [r2, #0]
 800ccb6:	f043 0308 	orr.w	r3, r3, #8
 800ccba:	6013      	str	r3, [r2, #0]
 800ccbc:	e7c8      	b.n	800cc50 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ccbe:	6822      	ldr	r2, [r4, #0]
 800ccc0:	6813      	ldr	r3, [r2, #0]
 800ccc2:	f043 0304 	orr.w	r3, r3, #4
 800ccc6:	6013      	str	r3, [r2, #0]
 800ccc8:	e7ca      	b.n	800cc60 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800ccca:	2001      	movs	r0, #1
}
 800cccc:	4770      	bx	lr

0800ccce <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800ccce:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ccd0:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800ccd4:	3b01      	subs	r3, #1
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d905      	bls.n	800cce8 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ccdc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800ccde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cce2:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800cce4:	2001      	movs	r0, #1
  }
}
 800cce6:	4770      	bx	lr
{
 800cce8:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ccea:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800ccee:	f043 0301 	orr.w	r3, r3, #1
 800ccf2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800ccf6:	694b      	ldr	r3, [r1, #20]
 800ccf8:	f003 031f 	and.w	r3, r3, #31
 800ccfc:	2001      	movs	r0, #1
 800ccfe:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800cd02:	f8d2 021c 	ldr.w	r0, [r2, #540]	@ 0x21c
 800cd06:	ea6f 0c03 	mvn.w	ip, r3
 800cd0a:	ea20 0003 	bic.w	r0, r0, r3
 800cd0e:	f8c2 021c 	str.w	r0, [r2, #540]	@ 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800cd12:	69c8      	ldr	r0, [r1, #28]
 800cd14:	b9b0      	cbnz	r0, 800cd44 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800cd16:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800cd1a:	ea0c 0000 	and.w	r0, ip, r0
 800cd1e:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800cd22:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cd24:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800cd26:	68cd      	ldr	r5, [r1, #12]
 800cd28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cd2c:	3048      	adds	r0, #72	@ 0x48
 800cd2e:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800cd32:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cd34:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cd36:	688d      	ldr	r5, [r1, #8]
 800cd38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cd3c:	3048      	adds	r0, #72	@ 0x48
 800cd3e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800cd42:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800cd44:	69c8      	ldr	r0, [r1, #28]
 800cd46:	2801      	cmp	r0, #1
 800cd48:	d01b      	beq.n	800cd82 <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800cd4a:	6988      	ldr	r0, [r1, #24]
 800cd4c:	bb80      	cbnz	r0, 800cdb0 <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800cd4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cd52:	ea0c 0000 	and.w	r0, ip, r0
 800cd56:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800cd5a:	6908      	ldr	r0, [r1, #16]
 800cd5c:	bb70      	cbnz	r0, 800cdbc <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800cd5e:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800cd62:	ea0c 0000 	and.w	r0, ip, r0
 800cd66:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800cd6a:	6a09      	ldr	r1, [r1, #32]
 800cd6c:	2901      	cmp	r1, #1
 800cd6e:	d02b      	beq.n	800cdc8 <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800cd70:	f8d2 3200 	ldr.w	r3, [r2, #512]	@ 0x200
 800cd74:	f023 0301 	bic.w	r3, r3, #1
 800cd78:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    return HAL_OK;
 800cd7c:	2000      	movs	r0, #0
}
 800cd7e:	bc30      	pop	{r4, r5}
 800cd80:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800cd82:	f8d2 020c 	ldr.w	r0, [r2, #524]	@ 0x20c
 800cd86:	4318      	orrs	r0, r3
 800cd88:	f8c2 020c 	str.w	r0, [r2, #524]	@ 0x20c
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800cd8c:	888c      	ldrh	r4, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cd8e:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800cd90:	680d      	ldr	r5, [r1, #0]
 800cd92:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800cd96:	3048      	adds	r0, #72	@ 0x48
 800cd98:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800cd9c:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cd9e:	6948      	ldr	r0, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800cda0:	688d      	ldr	r5, [r1, #8]
 800cda2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800cda6:	3048      	adds	r0, #72	@ 0x48
 800cda8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800cdac:	6044      	str	r4, [r0, #4]
 800cdae:	e7cc      	b.n	800cd4a <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800cdb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cdb4:	4318      	orrs	r0, r3
 800cdb6:	f8c2 0204 	str.w	r0, [r2, #516]	@ 0x204
 800cdba:	e7ce      	b.n	800cd5a <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800cdbc:	f8d2 0214 	ldr.w	r0, [r2, #532]	@ 0x214
 800cdc0:	4318      	orrs	r0, r3
 800cdc2:	f8c2 0214 	str.w	r0, [r2, #532]	@ 0x214
 800cdc6:	e7d0      	b.n	800cd6a <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800cdc8:	f8d2 121c 	ldr.w	r1, [r2, #540]	@ 0x21c
 800cdcc:	430b      	orrs	r3, r1
 800cdce:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
 800cdd2:	e7cd      	b.n	800cd70 <HAL_CAN_ConfigFilter+0xa2>

0800cdd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800cdd4:	b570      	push	{r4, r5, r6, lr}
 800cdd6:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800cdd8:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d006      	beq.n	800cdee <HAL_CAN_Start+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800cde0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cde2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cde6:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800cde8:	2601      	movs	r6, #1
  }
}
 800cdea:	4630      	mov	r0, r6
 800cdec:	bd70      	pop	{r4, r5, r6, pc}
 800cdee:	b2de      	uxtb	r6, r3
    hcan->State = HAL_CAN_STATE_LISTENING;
 800cdf0:	2302      	movs	r3, #2
 800cdf2:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800cdf6:	6802      	ldr	r2, [r0, #0]
 800cdf8:	6813      	ldr	r3, [r2, #0]
 800cdfa:	f023 0301 	bic.w	r3, r3, #1
 800cdfe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800ce00:	f7ff f946 	bl	800c090 <HAL_GetTick>
 800ce04:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	f013 0f01 	tst.w	r3, #1
 800ce0e:	d00c      	beq.n	800ce2a <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ce10:	f7ff f93e 	bl	800c090 <HAL_GetTick>
 800ce14:	1b43      	subs	r3, r0, r5
 800ce16:	2b0a      	cmp	r3, #10
 800ce18:	d9f5      	bls.n	800ce06 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ce1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ce1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce20:	6263      	str	r3, [r4, #36]	@ 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800ce22:	2305      	movs	r3, #5
 800ce24:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800ce28:	e7df      	b.n	800cdea <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ce2a:	2600      	movs	r6, #0
 800ce2c:	6266      	str	r6, [r4, #36]	@ 0x24
    return HAL_OK;
 800ce2e:	e7dc      	b.n	800cdea <HAL_CAN_Start+0x16>

0800ce30 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800ce30:	b530      	push	{r4, r5, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ce32:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800ce36:	6804      	ldr	r4, [r0, #0]
 800ce38:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800ce3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ce3e:	fa5f fc8c 	uxtb.w	ip, ip
 800ce42:	f1bc 0f01 	cmp.w	ip, #1
 800ce46:	d862      	bhi.n	800cf0e <HAL_CAN_AddTxMessage+0xde>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ce48:	f014 5fe0 	tst.w	r4, #469762048	@ 0x1c000000
 800ce4c:	d059      	beq.n	800cf02 <HAL_CAN_AddTxMessage+0xd2>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800ce4e:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800ce52:	2401      	movs	r4, #1
 800ce54:	fa04 f40c 	lsl.w	r4, r4, ip
 800ce58:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800ce5a:	688b      	ldr	r3, [r1, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d13d      	bne.n	800cedc <HAL_CAN_AddTxMessage+0xac>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ce60:	680d      	ldr	r5, [r1, #0]
                                                           pHeader->RTR);
 800ce62:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ce64:	6804      	ldr	r4, [r0, #0]
 800ce66:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 800ce6a:	f10c 0318 	add.w	r3, ip, #24
 800ce6e:	011b      	lsls	r3, r3, #4
 800ce70:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800ce72:	6803      	ldr	r3, [r0, #0]
 800ce74:	690c      	ldr	r4, [r1, #16]
 800ce76:	f10c 0e18 	add.w	lr, ip, #24
 800ce7a:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800ce7e:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800ce80:	7d0b      	ldrb	r3, [r1, #20]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d035      	beq.n	800cef2 <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800ce86:	79d1      	ldrb	r1, [r2, #7]
 800ce88:	7993      	ldrb	r3, [r2, #6]
 800ce8a:	041b      	lsls	r3, r3, #16
 800ce8c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ce90:	7951      	ldrb	r1, [r2, #5]
 800ce92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ce96:	7914      	ldrb	r4, [r2, #4]
 800ce98:	6801      	ldr	r1, [r0, #0]
 800ce9a:	4323      	orrs	r3, r4
 800ce9c:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 800cea0:	f8c1 318c 	str.w	r3, [r1, #396]	@ 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800cea4:	78d1      	ldrb	r1, [r2, #3]
 800cea6:	7893      	ldrb	r3, [r2, #2]
 800cea8:	041b      	lsls	r3, r3, #16
 800ceaa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800ceae:	7851      	ldrb	r1, [r2, #1]
 800ceb0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ceb4:	7811      	ldrb	r1, [r2, #0]
 800ceb6:	6802      	ldr	r2, [r0, #0]
 800ceb8:	430b      	orrs	r3, r1
 800ceba:	eb02 120c 	add.w	r2, r2, ip, lsl #4
 800cebe:	f8c2 3188 	str.w	r3, [r2, #392]	@ 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800cec2:	6802      	ldr	r2, [r0, #0]
 800cec4:	f10c 0c18 	add.w	ip, ip, #24
 800cec8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800cecc:	f852 300c 	ldr.w	r3, [r2, ip]
 800ced0:	f043 0301 	orr.w	r3, r3, #1
 800ced4:	f842 300c 	str.w	r3, [r2, ip]

      /* Return function status */
      return HAL_OK;
 800ced8:	2000      	movs	r0, #0
 800ceda:	e01d      	b.n	800cf18 <HAL_CAN_AddTxMessage+0xe8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800cedc:	684c      	ldr	r4, [r1, #4]
 800cede:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 800cee2:	68cc      	ldr	r4, [r1, #12]
                                                           pHeader->IDE |
 800cee4:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800cee6:	f10c 0418 	add.w	r4, ip, #24
 800ceea:	0124      	lsls	r4, r4, #4
 800ceec:	6805      	ldr	r5, [r0, #0]
 800ceee:	512b      	str	r3, [r5, r4]
 800cef0:	e7bf      	b.n	800ce72 <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800cef2:	6803      	ldr	r3, [r0, #0]
 800cef4:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800cef8:	6859      	ldr	r1, [r3, #4]
 800cefa:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800cefe:	6059      	str	r1, [r3, #4]
 800cf00:	e7c1      	b.n	800ce86 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800cf02:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cf04:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cf08:	6243      	str	r3, [r0, #36]	@ 0x24

      return HAL_ERROR;
 800cf0a:	2001      	movs	r0, #1
 800cf0c:	e004      	b.n	800cf18 <HAL_CAN_AddTxMessage+0xe8>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800cf0e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cf10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cf14:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800cf16:	2001      	movs	r0, #1
  }
}
 800cf18:	bd30      	pop	{r4, r5, pc}

0800cf1a <HAL_CAN_GetRxMessage>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800cf1a:	f890 c020 	ldrb.w	ip, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800cf1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cf22:	fa5f fc8c 	uxtb.w	ip, ip
 800cf26:	f1bc 0f01 	cmp.w	ip, #1
 800cf2a:	f200 80a5 	bhi.w	800d078 <HAL_CAN_GetRxMessage+0x15e>
{
 800cf2e:	b430      	push	{r4, r5}
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800cf30:	b951      	cbnz	r1, 800cf48 <HAL_CAN_GetRxMessage+0x2e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800cf32:	6804      	ldr	r4, [r0, #0]
 800cf34:	68e4      	ldr	r4, [r4, #12]
 800cf36:	f014 0f03 	tst.w	r4, #3
 800cf3a:	d110      	bne.n	800cf5e <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800cf3c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cf3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cf42:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 800cf44:	2001      	movs	r0, #1
 800cf46:	e07e      	b.n	800d046 <HAL_CAN_GetRxMessage+0x12c>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800cf48:	6804      	ldr	r4, [r0, #0]
 800cf4a:	6924      	ldr	r4, [r4, #16]
 800cf4c:	f014 0f03 	tst.w	r4, #3
 800cf50:	d105      	bne.n	800cf5e <HAL_CAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800cf52:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800cf54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800cf58:	6243      	str	r3, [r0, #36]	@ 0x24

        return HAL_ERROR;
 800cf5a:	2001      	movs	r0, #1
 800cf5c:	e073      	b.n	800d046 <HAL_CAN_GetRxMessage+0x12c>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800cf5e:	6805      	ldr	r5, [r0, #0]
 800cf60:	f101 041b 	add.w	r4, r1, #27
 800cf64:	0124      	lsls	r4, r4, #4
 800cf66:	592c      	ldr	r4, [r5, r4]
 800cf68:	f004 0404 	and.w	r4, r4, #4
 800cf6c:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800cf6e:	2c00      	cmp	r4, #0
 800cf70:	d16b      	bne.n	800d04a <HAL_CAN_GetRxMessage+0x130>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800cf72:	6805      	ldr	r5, [r0, #0]
 800cf74:	f101 041b 	add.w	r4, r1, #27
 800cf78:	0124      	lsls	r4, r4, #4
 800cf7a:	592c      	ldr	r4, [r5, r4]
 800cf7c:	0d64      	lsrs	r4, r4, #21
 800cf7e:	6014      	str	r4, [r2, #0]
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800cf80:	6804      	ldr	r4, [r0, #0]
 800cf82:	f101 0c1b 	add.w	ip, r1, #27
 800cf86:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800cf8a:	f854 400c 	ldr.w	r4, [r4, ip]
 800cf8e:	f004 0402 	and.w	r4, r4, #2
 800cf92:	60d4      	str	r4, [r2, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800cf94:	6804      	ldr	r4, [r0, #0]
 800cf96:	44a4      	add	ip, r4
 800cf98:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800cf9c:	f015 0f08 	tst.w	r5, #8
 800cfa0:	d05b      	beq.n	800d05a <HAL_CAN_GetRxMessage+0x140>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800cfa2:	2408      	movs	r4, #8
 800cfa4:	6114      	str	r4, [r2, #16]
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800cfa6:	6804      	ldr	r4, [r0, #0]
 800cfa8:	f101 0c1b 	add.w	ip, r1, #27
 800cfac:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 800cfb0:	6864      	ldr	r4, [r4, #4]
 800cfb2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800cfb6:	6194      	str	r4, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800cfb8:	6804      	ldr	r4, [r0, #0]
 800cfba:	eb04 140c 	add.w	r4, r4, ip, lsl #4
 800cfbe:	6864      	ldr	r4, [r4, #4]
 800cfc0:	0c24      	lsrs	r4, r4, #16
 800cfc2:	6154      	str	r4, [r2, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800cfc4:	6802      	ldr	r2, [r0, #0]
 800cfc6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800cfca:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800cfce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800cfd0:	6802      	ldr	r2, [r0, #0]
 800cfd2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800cfd6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800cfda:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800cfde:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800cfe0:	6802      	ldr	r2, [r0, #0]
 800cfe2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800cfe6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800cfea:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800cfee:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800cff0:	6802      	ldr	r2, [r0, #0]
 800cff2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800cff6:	f8d2 21b8 	ldr.w	r2, [r2, #440]	@ 0x1b8
 800cffa:	0e12      	lsrs	r2, r2, #24
 800cffc:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800cffe:	6802      	ldr	r2, [r0, #0]
 800d000:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d004:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800d008:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800d00a:	6802      	ldr	r2, [r0, #0]
 800d00c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d010:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800d014:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800d018:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800d01a:	6802      	ldr	r2, [r0, #0]
 800d01c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d020:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800d024:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800d028:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800d02a:	6802      	ldr	r2, [r0, #0]
 800d02c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800d030:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800d034:	0e12      	lsrs	r2, r2, #24
 800d036:	71da      	strb	r2, [r3, #7]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800d038:	b9c1      	cbnz	r1, 800d06c <HAL_CAN_GetRxMessage+0x152>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800d03a:	6802      	ldr	r2, [r0, #0]
 800d03c:	68d3      	ldr	r3, [r2, #12]
 800d03e:	f043 0320 	orr.w	r3, r3, #32
 800d042:	60d3      	str	r3, [r2, #12]
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
    }

    /* Return function status */
    return HAL_OK;
 800d044:	2000      	movs	r0, #0
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;

    return HAL_ERROR;
  }
}
 800d046:	bc30      	pop	{r4, r5}
 800d048:	4770      	bx	lr
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800d04a:	6805      	ldr	r5, [r0, #0]
 800d04c:	f101 041b 	add.w	r4, r1, #27
 800d050:	0124      	lsls	r4, r4, #4
 800d052:	592c      	ldr	r4, [r5, r4]
 800d054:	08e4      	lsrs	r4, r4, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800d056:	6054      	str	r4, [r2, #4]
 800d058:	e792      	b.n	800cf80 <HAL_CAN_GetRxMessage+0x66>
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800d05a:	f101 051b 	add.w	r5, r1, #27
 800d05e:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 800d062:	6864      	ldr	r4, [r4, #4]
 800d064:	f004 040f 	and.w	r4, r4, #15
 800d068:	6114      	str	r4, [r2, #16]
 800d06a:	e79c      	b.n	800cfa6 <HAL_CAN_GetRxMessage+0x8c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800d06c:	6802      	ldr	r2, [r0, #0]
 800d06e:	6913      	ldr	r3, [r2, #16]
 800d070:	f043 0320 	orr.w	r3, r3, #32
 800d074:	6113      	str	r3, [r2, #16]
 800d076:	e7e5      	b.n	800d044 <HAL_CAN_GetRxMessage+0x12a>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d078:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d07a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d07e:	6243      	str	r3, [r0, #36]	@ 0x24
    return HAL_ERROR;
 800d080:	2001      	movs	r0, #1
}
 800d082:	4770      	bx	lr

0800d084 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 800d084:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800d088:	3b01      	subs	r3, #1
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d905      	bls.n	800d09c <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800d090:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d092:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d096:	6243      	str	r3, [r0, #36]	@ 0x24

    return HAL_ERROR;
 800d098:	2001      	movs	r0, #1
  }
}
 800d09a:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800d09c:	6802      	ldr	r2, [r0, #0]
 800d09e:	6953      	ldr	r3, [r2, #20]
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	4770      	bx	lr

0800d0a8 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800d0a8:	4770      	bx	lr

0800d0aa <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800d0aa:	4770      	bx	lr

0800d0ac <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800d0ac:	4770      	bx	lr

0800d0ae <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800d0ae:	4770      	bx	lr

0800d0b0 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800d0b0:	4770      	bx	lr

0800d0b2 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800d0b2:	4770      	bx	lr

0800d0b4 <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800d0b4:	4770      	bx	lr

0800d0b6 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800d0b6:	4770      	bx	lr

0800d0b8 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800d0b8:	4770      	bx	lr

0800d0ba <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800d0ba:	4770      	bx	lr

0800d0bc <HAL_CAN_IRQHandler>:
{
 800d0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800d0c2:	6803      	ldr	r3, [r0, #0]
 800d0c4:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800d0c6:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800d0ca:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800d0cc:	f8d3 a00c 	ldr.w	sl, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800d0d0:	f8d3 9010 	ldr.w	r9, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800d0d4:	f8d3 b018 	ldr.w	fp, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800d0d8:	f014 0601 	ands.w	r6, r4, #1
 800d0dc:	d03b      	beq.n	800d156 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800d0de:	f017 0601 	ands.w	r6, r7, #1
 800d0e2:	d016      	beq.n	800d112 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800d0e8:	f017 0f02 	tst.w	r7, #2
 800d0ec:	d108      	bne.n	800d100 <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800d0ee:	f017 0f04 	tst.w	r7, #4
 800d0f2:	d10c      	bne.n	800d10e <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800d0f4:	f017 0608 	ands.w	r6, r7, #8
 800d0f8:	d006      	beq.n	800d108 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800d0fa:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800d0fe:	e008      	b.n	800d112 <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800d100:	f7ff ffd2 	bl	800d0a8 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800d104:	2600      	movs	r6, #0
 800d106:	e004      	b.n	800d112 <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800d108:	f7ff ffd1 	bl	800d0ae <HAL_CAN_TxMailbox0AbortCallback>
 800d10c:	e001      	b.n	800d112 <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800d10e:	f44f 6600 	mov.w	r6, #2048	@ 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800d112:	f417 7f80 	tst.w	r7, #256	@ 0x100
 800d116:	d00d      	beq.n	800d134 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800d118:	682b      	ldr	r3, [r5, #0]
 800d11a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d11e:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800d120:	f417 7f00 	tst.w	r7, #512	@ 0x200
 800d124:	f040 8096 	bne.w	800d254 <HAL_CAN_IRQHandler+0x198>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800d128:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 800d12c:	f000 8096 	beq.w	800d25c <HAL_CAN_IRQHandler+0x1a0>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800d130:	f446 5600 	orr.w	r6, r6, #8192	@ 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800d134:	f417 3f80 	tst.w	r7, #65536	@ 0x10000
 800d138:	d00d      	beq.n	800d156 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800d13a:	682b      	ldr	r3, [r5, #0]
 800d13c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d140:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800d142:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800d146:	f040 8093 	bne.w	800d270 <HAL_CAN_IRQHandler+0x1b4>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800d14a:	f417 2f80 	tst.w	r7, #262144	@ 0x40000
 800d14e:	f000 8093 	beq.w	800d278 <HAL_CAN_IRQHandler+0x1bc>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800d152:	f446 4600 	orr.w	r6, r6, #32768	@ 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800d156:	f014 0f08 	tst.w	r4, #8
 800d15a:	d007      	beq.n	800d16c <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800d15c:	f01a 0f10 	tst.w	sl, #16
 800d160:	d004      	beq.n	800d16c <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800d162:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800d166:	682b      	ldr	r3, [r5, #0]
 800d168:	2210      	movs	r2, #16
 800d16a:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800d16c:	f014 0f04 	tst.w	r4, #4
 800d170:	d003      	beq.n	800d17a <HAL_CAN_IRQHandler+0xbe>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800d172:	f01a 0f08 	tst.w	sl, #8
 800d176:	f040 8089 	bne.w	800d28c <HAL_CAN_IRQHandler+0x1d0>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800d17a:	f014 0f02 	tst.w	r4, #2
 800d17e:	d005      	beq.n	800d18c <HAL_CAN_IRQHandler+0xd0>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	68db      	ldr	r3, [r3, #12]
 800d184:	f013 0f03 	tst.w	r3, #3
 800d188:	f040 8087 	bne.w	800d29a <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800d18c:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800d190:	d007      	beq.n	800d1a2 <HAL_CAN_IRQHandler+0xe6>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800d192:	f019 0f10 	tst.w	r9, #16
 800d196:	d004      	beq.n	800d1a2 <HAL_CAN_IRQHandler+0xe6>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800d198:	f446 6680 	orr.w	r6, r6, #1024	@ 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800d19c:	682b      	ldr	r3, [r5, #0]
 800d19e:	2210      	movs	r2, #16
 800d1a0:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800d1a2:	f014 0f20 	tst.w	r4, #32
 800d1a6:	d002      	beq.n	800d1ae <HAL_CAN_IRQHandler+0xf2>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800d1a8:	f019 0f08 	tst.w	r9, #8
 800d1ac:	d179      	bne.n	800d2a2 <HAL_CAN_IRQHandler+0x1e6>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800d1ae:	f014 0f10 	tst.w	r4, #16
 800d1b2:	d004      	beq.n	800d1be <HAL_CAN_IRQHandler+0x102>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	f013 0f03 	tst.w	r3, #3
 800d1bc:	d178      	bne.n	800d2b0 <HAL_CAN_IRQHandler+0x1f4>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800d1be:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
 800d1c2:	d002      	beq.n	800d1ca <HAL_CAN_IRQHandler+0x10e>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800d1c4:	f018 0f10 	tst.w	r8, #16
 800d1c8:	d176      	bne.n	800d2b8 <HAL_CAN_IRQHandler+0x1fc>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800d1ca:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
 800d1ce:	d002      	beq.n	800d1d6 <HAL_CAN_IRQHandler+0x11a>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800d1d0:	f018 0f08 	tst.w	r8, #8
 800d1d4:	d177      	bne.n	800d2c6 <HAL_CAN_IRQHandler+0x20a>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800d1d6:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 800d1da:	d037      	beq.n	800d24c <HAL_CAN_IRQHandler+0x190>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800d1dc:	f018 0f04 	tst.w	r8, #4
 800d1e0:	d031      	beq.n	800d246 <HAL_CAN_IRQHandler+0x18a>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800d1e2:	f414 7f80 	tst.w	r4, #256	@ 0x100
 800d1e6:	d004      	beq.n	800d1f2 <HAL_CAN_IRQHandler+0x136>
 800d1e8:	f01b 0f01 	tst.w	fp, #1
 800d1ec:	d001      	beq.n	800d1f2 <HAL_CAN_IRQHandler+0x136>
        errorcode |= HAL_CAN_ERROR_EWG;
 800d1ee:	f046 0601 	orr.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800d1f2:	f414 7f00 	tst.w	r4, #512	@ 0x200
 800d1f6:	d004      	beq.n	800d202 <HAL_CAN_IRQHandler+0x146>
 800d1f8:	f01b 0f02 	tst.w	fp, #2
 800d1fc:	d001      	beq.n	800d202 <HAL_CAN_IRQHandler+0x146>
        errorcode |= HAL_CAN_ERROR_EPV;
 800d1fe:	f046 0602 	orr.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800d202:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 800d206:	d004      	beq.n	800d212 <HAL_CAN_IRQHandler+0x156>
 800d208:	f01b 0f04 	tst.w	fp, #4
 800d20c:	d001      	beq.n	800d212 <HAL_CAN_IRQHandler+0x156>
        errorcode |= HAL_CAN_ERROR_BOF;
 800d20e:	f046 0604 	orr.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800d212:	f414 6f00 	tst.w	r4, #2048	@ 0x800
 800d216:	d016      	beq.n	800d246 <HAL_CAN_IRQHandler+0x18a>
 800d218:	f01b 0b70 	ands.w	fp, fp, #112	@ 0x70
 800d21c:	d013      	beq.n	800d246 <HAL_CAN_IRQHandler+0x18a>
        switch (esrflags & CAN_ESR_LEC)
 800d21e:	f1bb 0f40 	cmp.w	fp, #64	@ 0x40
 800d222:	d066      	beq.n	800d2f2 <HAL_CAN_IRQHandler+0x236>
 800d224:	d856      	bhi.n	800d2d4 <HAL_CAN_IRQHandler+0x218>
 800d226:	f1bb 0f20 	cmp.w	fp, #32
 800d22a:	d05c      	beq.n	800d2e6 <HAL_CAN_IRQHandler+0x22a>
 800d22c:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
 800d230:	d05c      	beq.n	800d2ec <HAL_CAN_IRQHandler+0x230>
 800d232:	f1bb 0f10 	cmp.w	fp, #16
 800d236:	d101      	bne.n	800d23c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_STF;
 800d238:	f046 0608 	orr.w	r6, r6, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800d23c:	682a      	ldr	r2, [r5, #0]
 800d23e:	6993      	ldr	r3, [r2, #24]
 800d240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d244:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800d246:	682b      	ldr	r3, [r5, #0]
 800d248:	2204      	movs	r2, #4
 800d24a:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800d24c:	2e00      	cmp	r6, #0
 800d24e:	d156      	bne.n	800d2fe <HAL_CAN_IRQHandler+0x242>
}
 800d250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800d254:	4628      	mov	r0, r5
 800d256:	f7ff ff28 	bl	800d0aa <HAL_CAN_TxMailbox1CompleteCallback>
 800d25a:	e76b      	b.n	800d134 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800d25c:	f417 6f00 	tst.w	r7, #2048	@ 0x800
 800d260:	d002      	beq.n	800d268 <HAL_CAN_IRQHandler+0x1ac>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800d262:	f446 4680 	orr.w	r6, r6, #16384	@ 0x4000
 800d266:	e765      	b.n	800d134 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800d268:	4628      	mov	r0, r5
 800d26a:	f7ff ff21 	bl	800d0b0 <HAL_CAN_TxMailbox1AbortCallback>
 800d26e:	e761      	b.n	800d134 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800d270:	4628      	mov	r0, r5
 800d272:	f7ff ff1b 	bl	800d0ac <HAL_CAN_TxMailbox2CompleteCallback>
 800d276:	e76e      	b.n	800d156 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800d278:	f417 2f00 	tst.w	r7, #524288	@ 0x80000
 800d27c:	d002      	beq.n	800d284 <HAL_CAN_IRQHandler+0x1c8>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800d27e:	f446 3680 	orr.w	r6, r6, #65536	@ 0x10000
 800d282:	e768      	b.n	800d156 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800d284:	4628      	mov	r0, r5
 800d286:	f7ff ff14 	bl	800d0b2 <HAL_CAN_TxMailbox2AbortCallback>
 800d28a:	e764      	b.n	800d156 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800d28c:	682b      	ldr	r3, [r5, #0]
 800d28e:	2208      	movs	r2, #8
 800d290:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800d292:	4628      	mov	r0, r5
 800d294:	f7ff ff0e 	bl	800d0b4 <HAL_CAN_RxFifo0FullCallback>
 800d298:	e76f      	b.n	800d17a <HAL_CAN_IRQHandler+0xbe>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800d29a:	4628      	mov	r0, r5
 800d29c:	f7fc f846 	bl	800932c <HAL_CAN_RxFifo0MsgPendingCallback>
 800d2a0:	e774      	b.n	800d18c <HAL_CAN_IRQHandler+0xd0>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	2208      	movs	r2, #8
 800d2a6:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	f7ff ff04 	bl	800d0b6 <HAL_CAN_RxFifo1FullCallback>
 800d2ae:	e77e      	b.n	800d1ae <HAL_CAN_IRQHandler+0xf2>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f7fc f869 	bl	8009388 <HAL_CAN_RxFifo1MsgPendingCallback>
 800d2b6:	e782      	b.n	800d1be <HAL_CAN_IRQHandler+0x102>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800d2b8:	682b      	ldr	r3, [r5, #0]
 800d2ba:	2210      	movs	r2, #16
 800d2bc:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800d2be:	4628      	mov	r0, r5
 800d2c0:	f7ff fefa 	bl	800d0b8 <HAL_CAN_SleepCallback>
 800d2c4:	e781      	b.n	800d1ca <HAL_CAN_IRQHandler+0x10e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800d2c6:	682b      	ldr	r3, [r5, #0]
 800d2c8:	2208      	movs	r2, #8
 800d2ca:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	f7ff fef4 	bl	800d0ba <HAL_CAN_WakeUpFromRxMsgCallback>
 800d2d2:	e780      	b.n	800d1d6 <HAL_CAN_IRQHandler+0x11a>
        switch (esrflags & CAN_ESR_LEC)
 800d2d4:	f1bb 0f50 	cmp.w	fp, #80	@ 0x50
 800d2d8:	d00e      	beq.n	800d2f8 <HAL_CAN_IRQHandler+0x23c>
 800d2da:	f1bb 0f60 	cmp.w	fp, #96	@ 0x60
 800d2de:	d1ad      	bne.n	800d23c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_CRC;
 800d2e0:	f446 7680 	orr.w	r6, r6, #256	@ 0x100
            break;
 800d2e4:	e7aa      	b.n	800d23c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_FOR;
 800d2e6:	f046 0610 	orr.w	r6, r6, #16
            break;
 800d2ea:	e7a7      	b.n	800d23c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_ACK;
 800d2ec:	f046 0620 	orr.w	r6, r6, #32
            break;
 800d2f0:	e7a4      	b.n	800d23c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BR;
 800d2f2:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
            break;
 800d2f6:	e7a1      	b.n	800d23c <HAL_CAN_IRQHandler+0x180>
            errorcode |= HAL_CAN_ERROR_BD;
 800d2f8:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
            break;
 800d2fc:	e79e      	b.n	800d23c <HAL_CAN_IRQHandler+0x180>
    hcan->ErrorCode |= errorcode;
 800d2fe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d300:	4333      	orrs	r3, r6
 800d302:	626b      	str	r3, [r5, #36]	@ 0x24
    HAL_CAN_ErrorCallback(hcan);
 800d304:	4628      	mov	r0, r5
 800d306:	f7fc f86d 	bl	80093e4 <HAL_CAN_ErrorCallback>
}
 800d30a:	e7a1      	b.n	800d250 <HAL_CAN_IRQHandler+0x194>

0800d30c <HAL_CAN_GetError>:
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
  /* Return CAN error code */
  return hcan->ErrorCode;
 800d30c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
}
 800d30e:	4770      	bx	lr

0800d310 <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800d310:	2800      	cmp	r0, #0
 800d312:	db07      	blt.n	800d324 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d314:	f000 021f 	and.w	r2, r0, #31
 800d318:	0940      	lsrs	r0, r0, #5
 800d31a:	2301      	movs	r3, #1
 800d31c:	4093      	lsls	r3, r2
 800d31e:	4a02      	ldr	r2, [pc, #8]	@ (800d328 <__NVIC_EnableIRQ+0x18>)
 800d320:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	e000e100 	.word	0xe000e100

0800d32c <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 800d32c:	2800      	cmp	r0, #0
 800d32e:	db08      	blt.n	800d342 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d330:	0109      	lsls	r1, r1, #4
 800d332:	b2c9      	uxtb	r1, r1
 800d334:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800d338:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800d33c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800d340:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d342:	f000 000f 	and.w	r0, r0, #15
 800d346:	0109      	lsls	r1, r1, #4
 800d348:	b2c9      	uxtb	r1, r1
 800d34a:	4b01      	ldr	r3, [pc, #4]	@ (800d350 <__NVIC_SetPriority+0x24>)
 800d34c:	5419      	strb	r1, [r3, r0]
}
 800d34e:	4770      	bx	lr
 800d350:	e000ed14 	.word	0xe000ed14

0800d354 <NVIC_EncodePriority>:
{
 800d354:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d356:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d35a:	f1c0 0c07 	rsb	ip, r0, #7
 800d35e:	f1bc 0f04 	cmp.w	ip, #4
 800d362:	bf28      	it	cs
 800d364:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d368:	1d03      	adds	r3, r0, #4
 800d36a:	2b06      	cmp	r3, #6
 800d36c:	d90f      	bls.n	800d38e <NVIC_EncodePriority+0x3a>
 800d36e:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d370:	f04f 3eff 	mov.w	lr, #4294967295
 800d374:	fa0e f00c 	lsl.w	r0, lr, ip
 800d378:	ea21 0100 	bic.w	r1, r1, r0
 800d37c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d37e:	fa0e fe03 	lsl.w	lr, lr, r3
 800d382:	ea22 020e 	bic.w	r2, r2, lr
}
 800d386:	ea41 0002 	orr.w	r0, r1, r2
 800d38a:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d38e:	2300      	movs	r3, #0
 800d390:	e7ee      	b.n	800d370 <NVIC_EncodePriority+0x1c>
	...

0800d394 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d394:	4a07      	ldr	r2, [pc, #28]	@ (800d3b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800d396:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d398:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800d39c:	041b      	lsls	r3, r3, #16
 800d39e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d3a0:	0200      	lsls	r0, r0, #8
 800d3a2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d3a6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800d3a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800d3ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800d3b0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800d3b2:	4770      	bx	lr
 800d3b4:	e000ed00 	.word	0xe000ed00

0800d3b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d3b8:	b510      	push	{r4, lr}
 800d3ba:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d3bc:	4b05      	ldr	r3, [pc, #20]	@ (800d3d4 <HAL_NVIC_SetPriority+0x1c>)
 800d3be:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d3c0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 800d3c4:	f7ff ffc6 	bl	800d354 <NVIC_EncodePriority>
 800d3c8:	4601      	mov	r1, r0
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f7ff ffae 	bl	800d32c <__NVIC_SetPriority>
}
 800d3d0:	bd10      	pop	{r4, pc}
 800d3d2:	bf00      	nop
 800d3d4:	e000ed00 	.word	0xe000ed00

0800d3d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d3d8:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d3da:	f7ff ff99 	bl	800d310 <__NVIC_EnableIRQ>
}
 800d3de:	bd08      	pop	{r3, pc}

0800d3e0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800d3e0:	2800      	cmp	r0, #0
 800d3e2:	d038      	beq.n	800d456 <HAL_CRC_Init+0x76>
{
 800d3e4:	b510      	push	{r4, lr}
 800d3e6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800d3e8:	7f43      	ldrb	r3, [r0, #29]
 800d3ea:	b31b      	cbz	r3, 800d434 <HAL_CRC_Init+0x54>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	7763      	strb	r3, [r4, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800d3f0:	7923      	ldrb	r3, [r4, #4]
 800d3f2:	bb1b      	cbnz	r3, 800d43c <HAL_CRC_Init+0x5c>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800d3f4:	6823      	ldr	r3, [r4, #0]
 800d3f6:	4a19      	ldr	r2, [pc, #100]	@ (800d45c <HAL_CRC_Init+0x7c>)
 800d3f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800d3fa:	6822      	ldr	r2, [r4, #0]
 800d3fc:	6893      	ldr	r3, [r2, #8]
 800d3fe:	f023 0318 	bic.w	r3, r3, #24
 800d402:	6093      	str	r3, [r2, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800d404:	7963      	ldrb	r3, [r4, #5]
 800d406:	bb13      	cbnz	r3, 800d44e <HAL_CRC_Init+0x6e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800d408:	6823      	ldr	r3, [r4, #0]
 800d40a:	f04f 32ff 	mov.w	r2, #4294967295
 800d40e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800d410:	6822      	ldr	r2, [r4, #0]
 800d412:	6893      	ldr	r3, [r2, #8]
 800d414:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800d418:	6961      	ldr	r1, [r4, #20]
 800d41a:	430b      	orrs	r3, r1
 800d41c:	6093      	str	r3, [r2, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800d41e:	6822      	ldr	r2, [r4, #0]
 800d420:	6893      	ldr	r3, [r2, #8]
 800d422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d426:	69a1      	ldr	r1, [r4, #24]
 800d428:	430b      	orrs	r3, r1
 800d42a:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800d42c:	2301      	movs	r3, #1
 800d42e:	7763      	strb	r3, [r4, #29]

  /* Return function status */
  return HAL_OK;
 800d430:	2000      	movs	r0, #0
}
 800d432:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800d434:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800d436:	f001 f84b 	bl	800e4d0 <HAL_CRC_MspInit>
 800d43a:	e7d7      	b.n	800d3ec <HAL_CRC_Init+0xc>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800d43c:	68e2      	ldr	r2, [r4, #12]
 800d43e:	68a1      	ldr	r1, [r4, #8]
 800d440:	4620      	mov	r0, r4
 800d442:	f000 f80d 	bl	800d460 <HAL_CRCEx_Polynomial_Set>
 800d446:	2800      	cmp	r0, #0
 800d448:	d0dc      	beq.n	800d404 <HAL_CRC_Init+0x24>
      return HAL_ERROR;
 800d44a:	2001      	movs	r0, #1
 800d44c:	e7f1      	b.n	800d432 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800d44e:	6823      	ldr	r3, [r4, #0]
 800d450:	6922      	ldr	r2, [r4, #16]
 800d452:	611a      	str	r2, [r3, #16]
 800d454:	e7dc      	b.n	800d410 <HAL_CRC_Init+0x30>
    return HAL_ERROR;
 800d456:	2001      	movs	r0, #1
}
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	04c11db7 	.word	0x04c11db7

0800d460 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800d460:	f011 0f01 	tst.w	r1, #1
 800d464:	d030      	beq.n	800d4c8 <HAL_CRCEx_Polynomial_Set+0x68>
{
 800d466:	b410      	push	{r4}
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800d468:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800d46a:	461c      	mov	r4, r3
 800d46c:	3b01      	subs	r3, #1
 800d46e:	b134      	cbz	r4, 800d47e <HAL_CRCEx_Polynomial_Set+0x1e>
 800d470:	f003 0c1f 	and.w	ip, r3, #31
 800d474:	fa21 fc0c 	lsr.w	ip, r1, ip
 800d478:	f01c 0f01 	tst.w	ip, #1
 800d47c:	d0f5      	beq.n	800d46a <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
 800d47e:	2a18      	cmp	r2, #24
 800d480:	d824      	bhi.n	800d4cc <HAL_CRCEx_Polynomial_Set+0x6c>
 800d482:	e8df f002 	tbb	[pc, r2]
 800d486:	230f      	.short	0x230f
 800d488:	23232323 	.word	0x23232323
 800d48c:	231d2323 	.word	0x231d2323
 800d490:	23232323 	.word	0x23232323
 800d494:	23192323 	.word	0x23192323
 800d498:	23232323 	.word	0x23232323
 800d49c:	2323      	.short	0x2323
 800d49e:	0d          	.byte	0x0d
 800d49f:	00          	.byte	0x00
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800d4a0:	2b06      	cmp	r3, #6
 800d4a2:	d817      	bhi.n	800d4d4 <HAL_CRCEx_Polynomial_Set+0x74>
    }
  }
  if (status == HAL_OK)
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800d4a4:	6803      	ldr	r3, [r0, #0]
 800d4a6:	6159      	str	r1, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800d4a8:	6801      	ldr	r1, [r0, #0]
 800d4aa:	688b      	ldr	r3, [r1, #8]
 800d4ac:	f023 0318 	bic.w	r3, r3, #24
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	608b      	str	r3, [r1, #8]
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e00a      	b.n	800d4ce <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_8B)
 800d4b8:	2b07      	cmp	r3, #7
 800d4ba:	d9f3      	bls.n	800d4a4 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800d4bc:	2001      	movs	r0, #1
 800d4be:	e006      	b.n	800d4ce <HAL_CRCEx_Polynomial_Set+0x6e>
        if (msb >= HAL_CRC_LENGTH_16B)
 800d4c0:	2b0f      	cmp	r3, #15
 800d4c2:	d9ef      	bls.n	800d4a4 <HAL_CRCEx_Polynomial_Set+0x44>
          status =   HAL_ERROR;
 800d4c4:	2001      	movs	r0, #1
 800d4c6:	e002      	b.n	800d4ce <HAL_CRCEx_Polynomial_Set+0x6e>
    status =  HAL_ERROR;
 800d4c8:	2001      	movs	r0, #1
  }
  /* Return function status */
  return status;
}
 800d4ca:	4770      	bx	lr
    switch (PolyLength)
 800d4cc:	2001      	movs	r0, #1
}
 800d4ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4d2:	4770      	bx	lr
          status =   HAL_ERROR;
 800d4d4:	2001      	movs	r0, #1
 800d4d6:	e7fa      	b.n	800d4ce <HAL_CRCEx_Polynomial_Set+0x6e>

0800d4d8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800d4d8:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800d4da:	4c06      	ldr	r4, [pc, #24]	@ (800d4f4 <FLASH_Program_DoubleWord+0x1c>)
 800d4dc:	6961      	ldr	r1, [r4, #20]
 800d4de:	f041 0101 	orr.w	r1, r1, #1
 800d4e2:	6161      	str	r1, [r4, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800d4e4:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800d4e6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800d4ea:	6043      	str	r3, [r0, #4]
}
 800d4ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	40022000 	.word	0x40022000

0800d4f8 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800d4f8:	4a09      	ldr	r2, [pc, #36]	@ (800d520 <FLASH_Program_Fast+0x28>)
 800d4fa:	6953      	ldr	r3, [r2, #20]
 800d4fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d500:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d502:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d506:	b672      	cpsid	i
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800d508:	2340      	movs	r3, #64	@ 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800d50a:	f851 2b04 	ldr.w	r2, [r1], #4
 800d50e:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 800d512:	3b01      	subs	r3, #1
  } while (row_index != 0U);
 800d514:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 800d518:	d1f7      	bne.n	800d50a <FLASH_Program_Fast+0x12>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d51a:	f38c 8810 	msr	PRIMASK, ip

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800d51e:	4770      	bx	lr
 800d520:	40022000 	.word	0x40022000

0800d524 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d524:	4b09      	ldr	r3, [pc, #36]	@ (800d54c <HAL_FLASH_Unlock+0x28>)
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	db01      	blt.n	800d530 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800d52c:	2000      	movs	r0, #0
 800d52e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d530:	4b06      	ldr	r3, [pc, #24]	@ (800d54c <HAL_FLASH_Unlock+0x28>)
 800d532:	4a07      	ldr	r2, [pc, #28]	@ (800d550 <HAL_FLASH_Unlock+0x2c>)
 800d534:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d536:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800d53a:	609a      	str	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d53c:	695b      	ldr	r3, [r3, #20]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	db01      	blt.n	800d546 <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800d542:	2000      	movs	r0, #0
 800d544:	4770      	bx	lr
      status = HAL_ERROR;
 800d546:	2001      	movs	r0, #1
}
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	40022000 	.word	0x40022000
 800d550:	45670123 	.word	0x45670123

0800d554 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d554:	4a03      	ldr	r2, [pc, #12]	@ (800d564 <HAL_FLASH_Lock+0x10>)
 800d556:	6953      	ldr	r3, [r2, #20]
 800d558:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800d55c:	6153      	str	r3, [r2, #20]
}
 800d55e:	2000      	movs	r0, #0
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop
 800d564:	40022000 	.word	0x40022000

0800d568 <FLASH_WaitForLastOperation>:
{
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800d56c:	f7fe fd90 	bl	800c090 <HAL_GetTick>
 800d570:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d572:	4b14      	ldr	r3, [pc, #80]	@ (800d5c4 <FLASH_WaitForLastOperation+0x5c>)
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800d57a:	d009      	beq.n	800d590 <FLASH_WaitForLastOperation+0x28>
    if(Timeout != HAL_MAX_DELAY)
 800d57c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d580:	d0f7      	beq.n	800d572 <FLASH_WaitForLastOperation+0xa>
      if((HAL_GetTick() - tickstart) >= Timeout)
 800d582:	f7fe fd85 	bl	800c090 <HAL_GetTick>
 800d586:	1b40      	subs	r0, r0, r5
 800d588:	42a0      	cmp	r0, r4
 800d58a:	d3f2      	bcc.n	800d572 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 800d58c:	2003      	movs	r0, #3
 800d58e:	e015      	b.n	800d5bc <FLASH_WaitForLastOperation+0x54>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800d590:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c4 <FLASH_WaitForLastOperation+0x5c>)
 800d592:	691b      	ldr	r3, [r3, #16]
 800d594:	4a0c      	ldr	r2, [pc, #48]	@ (800d5c8 <FLASH_WaitForLastOperation+0x60>)
  if(error != 0u)
 800d596:	4013      	ands	r3, r2
 800d598:	d109      	bne.n	800d5ae <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800d59a:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c4 <FLASH_WaitForLastOperation+0x5c>)
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	f013 0f01 	tst.w	r3, #1
 800d5a2:	d00c      	beq.n	800d5be <FLASH_WaitForLastOperation+0x56>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d5a4:	4b07      	ldr	r3, [pc, #28]	@ (800d5c4 <FLASH_WaitForLastOperation+0x5c>)
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	e006      	b.n	800d5bc <FLASH_WaitForLastOperation+0x54>
    pFlash.ErrorCode |= error;
 800d5ae:	4907      	ldr	r1, [pc, #28]	@ (800d5cc <FLASH_WaitForLastOperation+0x64>)
 800d5b0:	684a      	ldr	r2, [r1, #4]
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	604a      	str	r2, [r1, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 800d5b6:	4a03      	ldr	r2, [pc, #12]	@ (800d5c4 <FLASH_WaitForLastOperation+0x5c>)
 800d5b8:	6113      	str	r3, [r2, #16]
    return HAL_ERROR;
 800d5ba:	2001      	movs	r0, #1
}
 800d5bc:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800d5be:	2000      	movs	r0, #0
 800d5c0:	e7fc      	b.n	800d5bc <FLASH_WaitForLastOperation+0x54>
 800d5c2:	bf00      	nop
 800d5c4:	40022000 	.word	0x40022000
 800d5c8:	0002c3fa 	.word	0x0002c3fa
 800d5cc:	20000014 	.word	0x20000014

0800d5d0 <HAL_FLASH_Program>:
{
 800d5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d4:	4616      	mov	r6, r2
  __HAL_LOCK(&pFlash);
 800d5d6:	4a28      	ldr	r2, [pc, #160]	@ (800d678 <HAL_FLASH_Program+0xa8>)
 800d5d8:	7812      	ldrb	r2, [r2, #0]
 800d5da:	2a01      	cmp	r2, #1
 800d5dc:	d049      	beq.n	800d672 <HAL_FLASH_Program+0xa2>
 800d5de:	4604      	mov	r4, r0
 800d5e0:	460d      	mov	r5, r1
 800d5e2:	4698      	mov	r8, r3
 800d5e4:	4b24      	ldr	r3, [pc, #144]	@ (800d678 <HAL_FLASH_Program+0xa8>)
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d5ea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d5ee:	f7ff ffbb 	bl	800d568 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800d5f2:	4607      	mov	r7, r0
 800d5f4:	bb08      	cbnz	r0, 800d63a <HAL_FLASH_Program+0x6a>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d5f6:	4b20      	ldr	r3, [pc, #128]	@ (800d678 <HAL_FLASH_Program+0xa8>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d5fc:	4b1f      	ldr	r3, [pc, #124]	@ (800d67c <HAL_FLASH_Program+0xac>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800d604:	d01f      	beq.n	800d646 <HAL_FLASH_Program+0x76>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d606:	4a1d      	ldr	r2, [pc, #116]	@ (800d67c <HAL_FLASH_Program+0xac>)
 800d608:	6813      	ldr	r3, [r2, #0]
 800d60a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d60e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d610:	4b19      	ldr	r3, [pc, #100]	@ (800d678 <HAL_FLASH_Program+0xa8>)
 800d612:	2202      	movs	r2, #2
 800d614:	771a      	strb	r2, [r3, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d616:	b1d4      	cbz	r4, 800d64e <HAL_FLASH_Program+0x7e>
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800d618:	1e63      	subs	r3, r4, #1
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d91e      	bls.n	800d65c <HAL_FLASH_Program+0x8c>
  uint32_t prog_bit = 0;
 800d61e:	2400      	movs	r4, #0
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d620:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d624:	f7ff ffa0 	bl	800d568 <FLASH_WaitForLastOperation>
 800d628:	4607      	mov	r7, r0
    if (prog_bit != 0U)
 800d62a:	b124      	cbz	r4, 800d636 <HAL_FLASH_Program+0x66>
      CLEAR_BIT(FLASH->CR, prog_bit);
 800d62c:	4a13      	ldr	r2, [pc, #76]	@ (800d67c <HAL_FLASH_Program+0xac>)
 800d62e:	6953      	ldr	r3, [r2, #20]
 800d630:	ea23 0304 	bic.w	r3, r3, r4
 800d634:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800d636:	f000 f847 	bl	800d6c8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800d63a:	4b0f      	ldr	r3, [pc, #60]	@ (800d678 <HAL_FLASH_Program+0xa8>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	701a      	strb	r2, [r3, #0]
}
 800d640:	4638      	mov	r0, r7
 800d642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d646:	4b0c      	ldr	r3, [pc, #48]	@ (800d678 <HAL_FLASH_Program+0xa8>)
 800d648:	2200      	movs	r2, #0
 800d64a:	771a      	strb	r2, [r3, #28]
 800d64c:	e7e3      	b.n	800d616 <HAL_FLASH_Program+0x46>
      FLASH_Program_DoubleWord(Address, Data);
 800d64e:	4632      	mov	r2, r6
 800d650:	4643      	mov	r3, r8
 800d652:	4628      	mov	r0, r5
 800d654:	f7ff ff40 	bl	800d4d8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800d658:	2401      	movs	r4, #1
 800d65a:	e7e1      	b.n	800d620 <HAL_FLASH_Program+0x50>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d65c:	4631      	mov	r1, r6
 800d65e:	4628      	mov	r0, r5
 800d660:	f7ff ff4a 	bl	800d4f8 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800d664:	2c02      	cmp	r4, #2
 800d666:	d001      	beq.n	800d66c <HAL_FLASH_Program+0x9c>
  uint32_t prog_bit = 0;
 800d668:	2400      	movs	r4, #0
 800d66a:	e7d9      	b.n	800d620 <HAL_FLASH_Program+0x50>
        prog_bit = FLASH_CR_FSTPG;
 800d66c:	f44f 2480 	mov.w	r4, #262144	@ 0x40000
 800d670:	e7d6      	b.n	800d620 <HAL_FLASH_Program+0x50>
  __HAL_LOCK(&pFlash);
 800d672:	2702      	movs	r7, #2
 800d674:	e7e4      	b.n	800d640 <HAL_FLASH_Program+0x70>
 800d676:	bf00      	nop
 800d678:	20000014 	.word	0x20000014
 800d67c:	40022000 	.word	0x40022000

0800d680 <FLASH_MassErase>:
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800d680:	f010 0f01 	tst.w	r0, #1
 800d684:	d004      	beq.n	800d690 <FLASH_MassErase+0x10>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800d686:	4a05      	ldr	r2, [pc, #20]	@ (800d69c <FLASH_MassErase+0x1c>)
 800d688:	6953      	ldr	r3, [r2, #20]
 800d68a:	f043 0304 	orr.w	r3, r3, #4
 800d68e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d690:	4a02      	ldr	r2, [pc, #8]	@ (800d69c <FLASH_MassErase+0x1c>)
 800d692:	6953      	ldr	r3, [r2, #20]
 800d694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d698:	6153      	str	r3, [r2, #20]
}
 800d69a:	4770      	bx	lr
 800d69c:	40022000 	.word	0x40022000

0800d6a0 <FLASH_PageErase>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800d6a0:	4b08      	ldr	r3, [pc, #32]	@ (800d6c4 <FLASH_PageErase+0x24>)
 800d6a2:	695a      	ldr	r2, [r3, #20]
 800d6a4:	f422 727e 	bic.w	r2, r2, #1016	@ 0x3f8
 800d6a8:	00c0      	lsls	r0, r0, #3
 800d6aa:	f400 60ff 	and.w	r0, r0, #2040	@ 0x7f8
 800d6ae:	4302      	orrs	r2, r0
 800d6b0:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800d6b2:	695a      	ldr	r2, [r3, #20]
 800d6b4:	f042 0202 	orr.w	r2, r2, #2
 800d6b8:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800d6ba:	695a      	ldr	r2, [r3, #20]
 800d6bc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d6c0:	615a      	str	r2, [r3, #20]
}
 800d6c2:	4770      	bx	lr
 800d6c4:	40022000 	.word	0x40022000

0800d6c8 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800d6c8:	4b16      	ldr	r3, [pc, #88]	@ (800d724 <FLASH_FlushCaches+0x5c>)
 800d6ca:	7f1a      	ldrb	r2, [r3, #28]
 800d6cc:	b2d3      	uxtb	r3, r2

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800d6ce:	2a01      	cmp	r2, #1
 800d6d0:	d001      	beq.n	800d6d6 <FLASH_FlushCaches+0xe>
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d110      	bne.n	800d6f8 <FLASH_FlushCaches+0x30>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800d6d6:	4a14      	ldr	r2, [pc, #80]	@ (800d728 <FLASH_FlushCaches+0x60>)
 800d6d8:	6811      	ldr	r1, [r2, #0]
 800d6da:	f421 7100 	bic.w	r1, r1, #512	@ 0x200
 800d6de:	6011      	str	r1, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800d6e0:	6811      	ldr	r1, [r2, #0]
 800d6e2:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 800d6e6:	6011      	str	r1, [r2, #0]
 800d6e8:	6811      	ldr	r1, [r2, #0]
 800d6ea:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 800d6ee:	6011      	str	r1, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d6f0:	6811      	ldr	r1, [r2, #0]
 800d6f2:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800d6f6:	6011      	str	r1, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800d6f8:	3b02      	subs	r3, #2
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d903      	bls.n	800d708 <FLASH_FlushCaches+0x40>
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d700:	4b08      	ldr	r3, [pc, #32]	@ (800d724 <FLASH_FlushCaches+0x5c>)
 800d702:	2200      	movs	r2, #0
 800d704:	771a      	strb	r2, [r3, #28]
}
 800d706:	4770      	bx	lr
    __HAL_FLASH_DATA_CACHE_RESET();
 800d708:	4b07      	ldr	r3, [pc, #28]	@ (800d728 <FLASH_FlushCaches+0x60>)
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d710:	601a      	str	r2, [r3, #0]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d718:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800d71a:	681a      	ldr	r2, [r3, #0]
 800d71c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d720:	601a      	str	r2, [r3, #0]
 800d722:	e7ed      	b.n	800d700 <FLASH_FlushCaches+0x38>
 800d724:	20000014 	.word	0x20000014
 800d728:	40022000 	.word	0x40022000

0800d72c <HAL_FLASHEx_Erase>:
{
 800d72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800d72e:	4b39      	ldr	r3, [pc, #228]	@ (800d814 <HAL_FLASHEx_Erase+0xe8>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d06b      	beq.n	800d80e <HAL_FLASHEx_Erase+0xe2>
 800d736:	4604      	mov	r4, r0
 800d738:	460e      	mov	r6, r1
 800d73a:	4b36      	ldr	r3, [pc, #216]	@ (800d814 <HAL_FLASHEx_Erase+0xe8>)
 800d73c:	2201      	movs	r2, #1
 800d73e:	701a      	strb	r2, [r3, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d740:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d744:	f7ff ff10 	bl	800d568 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800d748:	4607      	mov	r7, r0
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d15a      	bne.n	800d804 <HAL_FLASHEx_Erase+0xd8>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d74e:	4b31      	ldr	r3, [pc, #196]	@ (800d814 <HAL_FLASHEx_Erase+0xe8>)
 800d750:	2200      	movs	r2, #0
 800d752:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800d754:	4b30      	ldr	r3, [pc, #192]	@ (800d818 <HAL_FLASHEx_Erase+0xec>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800d75c:	d02f      	beq.n	800d7be <HAL_FLASHEx_Erase+0x92>
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d75e:	4b2e      	ldr	r3, [pc, #184]	@ (800d818 <HAL_FLASHEx_Erase+0xec>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800d766:	d026      	beq.n	800d7b6 <HAL_FLASHEx_Erase+0x8a>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800d768:	4a2b      	ldr	r2, [pc, #172]	@ (800d818 <HAL_FLASHEx_Erase+0xec>)
 800d76a:	6813      	ldr	r3, [r2, #0]
 800d76c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d770:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800d772:	4b28      	ldr	r3, [pc, #160]	@ (800d814 <HAL_FLASHEx_Erase+0xe8>)
 800d774:	2203      	movs	r2, #3
 800d776:	771a      	strb	r2, [r3, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d031      	beq.n	800d7e2 <HAL_FLASHEx_Erase+0xb6>
      *PageError = 0xFFFFFFFFU;
 800d77e:	f04f 33ff 	mov.w	r3, #4294967295
 800d782:	6033      	str	r3, [r6, #0]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d784:	68a5      	ldr	r5, [r4, #8]
 800d786:	68a3      	ldr	r3, [r4, #8]
 800d788:	68e2      	ldr	r2, [r4, #12]
 800d78a:	4413      	add	r3, r2
 800d78c:	42ab      	cmp	r3, r5
 800d78e:	d937      	bls.n	800d800 <HAL_FLASHEx_Erase+0xd4>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800d790:	6861      	ldr	r1, [r4, #4]
 800d792:	4628      	mov	r0, r5
 800d794:	f7ff ff84 	bl	800d6a0 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d798:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d79c:	f7ff fee4 	bl	800d568 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800d7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d818 <HAL_FLASHEx_Erase+0xec>)
 800d7a2:	6953      	ldr	r3, [r2, #20]
 800d7a4:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800d7a8:	f023 0302 	bic.w	r3, r3, #2
 800d7ac:	6153      	str	r3, [r2, #20]
        if (status != HAL_OK)
 800d7ae:	4607      	mov	r7, r0
 800d7b0:	bb28      	cbnz	r0, 800d7fe <HAL_FLASHEx_Erase+0xd2>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800d7b2:	3501      	adds	r5, #1
 800d7b4:	e7e7      	b.n	800d786 <HAL_FLASHEx_Erase+0x5a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800d7b6:	4b17      	ldr	r3, [pc, #92]	@ (800d814 <HAL_FLASHEx_Erase+0xe8>)
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	771a      	strb	r2, [r3, #28]
 800d7bc:	e7dc      	b.n	800d778 <HAL_FLASHEx_Erase+0x4c>
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800d7be:	4b16      	ldr	r3, [pc, #88]	@ (800d818 <HAL_FLASHEx_Erase+0xec>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800d7c6:	d008      	beq.n	800d7da <HAL_FLASHEx_Erase+0xae>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800d7c8:	4a13      	ldr	r2, [pc, #76]	@ (800d818 <HAL_FLASHEx_Erase+0xec>)
 800d7ca:	6813      	ldr	r3, [r2, #0]
 800d7cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d7d0:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800d7d2:	4b10      	ldr	r3, [pc, #64]	@ (800d814 <HAL_FLASHEx_Erase+0xe8>)
 800d7d4:	2202      	movs	r2, #2
 800d7d6:	771a      	strb	r2, [r3, #28]
 800d7d8:	e7ce      	b.n	800d778 <HAL_FLASHEx_Erase+0x4c>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800d7da:	4b0e      	ldr	r3, [pc, #56]	@ (800d814 <HAL_FLASHEx_Erase+0xe8>)
 800d7dc:	2200      	movs	r2, #0
 800d7de:	771a      	strb	r2, [r3, #28]
 800d7e0:	e7ca      	b.n	800d778 <HAL_FLASHEx_Erase+0x4c>
      FLASH_MassErase(pEraseInit->Banks);
 800d7e2:	6860      	ldr	r0, [r4, #4]
 800d7e4:	f7ff ff4c 	bl	800d680 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800d7e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800d7ec:	f7ff febc 	bl	800d568 <FLASH_WaitForLastOperation>
 800d7f0:	4607      	mov	r7, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800d7f2:	4a09      	ldr	r2, [pc, #36]	@ (800d818 <HAL_FLASHEx_Erase+0xec>)
 800d7f4:	6953      	ldr	r3, [r2, #20]
 800d7f6:	f023 0304 	bic.w	r3, r3, #4
 800d7fa:	6153      	str	r3, [r2, #20]
 800d7fc:	e000      	b.n	800d800 <HAL_FLASHEx_Erase+0xd4>
          *PageError = page_index;
 800d7fe:	6035      	str	r5, [r6, #0]
    FLASH_FlushCaches();
 800d800:	f7ff ff62 	bl	800d6c8 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800d804:	4b03      	ldr	r3, [pc, #12]	@ (800d814 <HAL_FLASHEx_Erase+0xe8>)
 800d806:	2200      	movs	r2, #0
 800d808:	701a      	strb	r2, [r3, #0]
}
 800d80a:	4638      	mov	r0, r7
 800d80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800d80e:	2702      	movs	r7, #2
 800d810:	e7fb      	b.n	800d80a <HAL_FLASHEx_Erase+0xde>
 800d812:	bf00      	nop
 800d814:	20000014 	.word	0x20000014
 800d818:	40022000 	.word	0x40022000

0800d81c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d81e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 800d820:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d822:	e062      	b.n	800d8ea <HAL_GPIO_Init+0xce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d824:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d826:	005e      	lsls	r6, r3, #1
 800d828:	2403      	movs	r4, #3
 800d82a:	40b4      	lsls	r4, r6
 800d82c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d830:	68cc      	ldr	r4, [r1, #12]
 800d832:	40b4      	lsls	r4, r6
 800d834:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800d836:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d838:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d83a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d83e:	684c      	ldr	r4, [r1, #4]
 800d840:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800d844:	409c      	lsls	r4, r3
 800d846:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800d848:	6044      	str	r4, [r0, #4]
 800d84a:	e05f      	b.n	800d90c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d84c:	08dd      	lsrs	r5, r3, #3
 800d84e:	3508      	adds	r5, #8
 800d850:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d854:	f003 0c07 	and.w	ip, r3, #7
 800d858:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800d85c:	f04f 0e0f 	mov.w	lr, #15
 800d860:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d864:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d868:	690c      	ldr	r4, [r1, #16]
 800d86a:	fa04 f40c 	lsl.w	r4, r4, ip
 800d86e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 800d872:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800d876:	e060      	b.n	800d93a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d878:	2402      	movs	r4, #2
 800d87a:	e000      	b.n	800d87e <HAL_GPIO_Init+0x62>
 800d87c:	2400      	movs	r4, #0
 800d87e:	fa04 f40e 	lsl.w	r4, r4, lr
 800d882:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d884:	f10c 0c02 	add.w	ip, ip, #2
 800d888:	4d4c      	ldr	r5, [pc, #304]	@ (800d9bc <HAL_GPIO_Init+0x1a0>)
 800d88a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d88e:	4c4c      	ldr	r4, [pc, #304]	@ (800d9c0 <HAL_GPIO_Init+0x1a4>)
 800d890:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 800d892:	43d4      	mvns	r4, r2
 800d894:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d898:	684f      	ldr	r7, [r1, #4]
 800d89a:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 800d89e:	d001      	beq.n	800d8a4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 800d8a0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800d8a4:	4d46      	ldr	r5, [pc, #280]	@ (800d9c0 <HAL_GPIO_Init+0x1a4>)
 800d8a6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 800d8a8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 800d8aa:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d8ae:	684f      	ldr	r7, [r1, #4]
 800d8b0:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 800d8b4:	d001      	beq.n	800d8ba <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800d8b6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800d8ba:	4d41      	ldr	r5, [pc, #260]	@ (800d9c0 <HAL_GPIO_Init+0x1a4>)
 800d8bc:	60ee      	str	r6, [r5, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800d8be:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800d8c0:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d8c4:	684f      	ldr	r7, [r1, #4]
 800d8c6:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 800d8ca:	d001      	beq.n	800d8d0 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 800d8cc:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 800d8d0:	4d3b      	ldr	r5, [pc, #236]	@ (800d9c0 <HAL_GPIO_Init+0x1a4>)
 800d8d2:	606e      	str	r6, [r5, #4]

        temp = EXTI->IMR1;
 800d8d4:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800d8d6:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d8d8:	684e      	ldr	r6, [r1, #4]
 800d8da:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 800d8de:	d001      	beq.n	800d8e4 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 800d8e0:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 800d8e4:	4a36      	ldr	r2, [pc, #216]	@ (800d9c0 <HAL_GPIO_Init+0x1a4>)
 800d8e6:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 800d8e8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d8ea:	680a      	ldr	r2, [r1, #0]
 800d8ec:	fa32 f403 	lsrs.w	r4, r2, r3
 800d8f0:	d062      	beq.n	800d9b8 <HAL_GPIO_Init+0x19c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d8f2:	f04f 0c01 	mov.w	ip, #1
 800d8f6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800d8fa:	ea1c 0202 	ands.w	r2, ip, r2
 800d8fe:	d0f3      	beq.n	800d8e8 <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d900:	684c      	ldr	r4, [r1, #4]
 800d902:	f004 0403 	and.w	r4, r4, #3
 800d906:	3c01      	subs	r4, #1
 800d908:	2c01      	cmp	r4, #1
 800d90a:	d98b      	bls.n	800d824 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d90c:	684c      	ldr	r4, [r1, #4]
 800d90e:	f004 0403 	and.w	r4, r4, #3
 800d912:	2c03      	cmp	r4, #3
 800d914:	d00c      	beq.n	800d930 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800d916:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d918:	005d      	lsls	r5, r3, #1
 800d91a:	f04f 0c03 	mov.w	ip, #3
 800d91e:	fa0c fc05 	lsl.w	ip, ip, r5
 800d922:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d926:	688c      	ldr	r4, [r1, #8]
 800d928:	40ac      	lsls	r4, r5
 800d92a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800d92e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d930:	684c      	ldr	r4, [r1, #4]
 800d932:	f004 0403 	and.w	r4, r4, #3
 800d936:	2c02      	cmp	r4, #2
 800d938:	d088      	beq.n	800d84c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800d93a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d93c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800d940:	f04f 0c03 	mov.w	ip, #3
 800d944:	fa0c fc0e 	lsl.w	ip, ip, lr
 800d948:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d94c:	684c      	ldr	r4, [r1, #4]
 800d94e:	f004 0403 	and.w	r4, r4, #3
 800d952:	fa04 f40e 	lsl.w	r4, r4, lr
 800d956:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800d95a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d95c:	684c      	ldr	r4, [r1, #4]
 800d95e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 800d962:	d0c1      	beq.n	800d8e8 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d964:	4c17      	ldr	r4, [pc, #92]	@ (800d9c4 <HAL_GPIO_Init+0x1a8>)
 800d966:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 800d968:	f045 0501 	orr.w	r5, r5, #1
 800d96c:	6625      	str	r5, [r4, #96]	@ 0x60
 800d96e:	6e24      	ldr	r4, [r4, #96]	@ 0x60
 800d970:	f004 0401 	and.w	r4, r4, #1
 800d974:	9401      	str	r4, [sp, #4]
 800d976:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800d978:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800d97c:	f10c 0502 	add.w	r5, ip, #2
 800d980:	4c0e      	ldr	r4, [pc, #56]	@ (800d9bc <HAL_GPIO_Init+0x1a0>)
 800d982:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d986:	f003 0e03 	and.w	lr, r3, #3
 800d98a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800d98e:	240f      	movs	r4, #15
 800d990:	fa04 f40e 	lsl.w	r4, r4, lr
 800d994:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d998:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800d99c:	f43f af6e 	beq.w	800d87c <HAL_GPIO_Init+0x60>
 800d9a0:	4c09      	ldr	r4, [pc, #36]	@ (800d9c8 <HAL_GPIO_Init+0x1ac>)
 800d9a2:	42a0      	cmp	r0, r4
 800d9a4:	d006      	beq.n	800d9b4 <HAL_GPIO_Init+0x198>
 800d9a6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800d9aa:	42a0      	cmp	r0, r4
 800d9ac:	f43f af64 	beq.w	800d878 <HAL_GPIO_Init+0x5c>
 800d9b0:	2407      	movs	r4, #7
 800d9b2:	e764      	b.n	800d87e <HAL_GPIO_Init+0x62>
 800d9b4:	2401      	movs	r4, #1
 800d9b6:	e762      	b.n	800d87e <HAL_GPIO_Init+0x62>
  }
}
 800d9b8:	b003      	add	sp, #12
 800d9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9bc:	40010000 	.word	0x40010000
 800d9c0:	40010400 	.word	0x40010400
 800d9c4:	40021000 	.word	0x40021000
 800d9c8:	48000400 	.word	0x48000400

0800d9cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800d9cc:	b10a      	cbz	r2, 800d9d2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d9ce:	6181      	str	r1, [r0, #24]
 800d9d0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d9d2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800d9d4:	4770      	bx	lr

0800d9d6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d9d6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d9d8:	ea01 0203 	and.w	r2, r1, r3
 800d9dc:	ea21 0103 	bic.w	r1, r1, r3
 800d9e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d9e4:	6181      	str	r1, [r0, #24]
}
 800d9e6:	4770      	bx	lr

0800d9e8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d9e8:	6803      	ldr	r3, [r0, #0]
 800d9ea:	699a      	ldr	r2, [r3, #24]
 800d9ec:	f012 0f02 	tst.w	r2, #2
 800d9f0:	d001      	beq.n	800d9f6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d9f6:	6803      	ldr	r3, [r0, #0]
 800d9f8:	699a      	ldr	r2, [r3, #24]
 800d9fa:	f012 0f01 	tst.w	r2, #1
 800d9fe:	d103      	bne.n	800da08 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800da00:	699a      	ldr	r2, [r3, #24]
 800da02:	f042 0201 	orr.w	r2, r2, #1
 800da06:	619a      	str	r2, [r3, #24]
  }
}
 800da08:	4770      	bx	lr

0800da0a <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800da0a:	b410      	push	{r4}
 800da0c:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800da0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800da12:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800da16:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800da18:	4321      	orrs	r1, r4
 800da1a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800da1e:	6802      	ldr	r2, [r0, #0]
 800da20:	6853      	ldr	r3, [r2, #4]
 800da22:	0d64      	lsrs	r4, r4, #21
 800da24:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 800da28:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 800da2c:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 800da30:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 800da34:	f044 0403 	orr.w	r4, r4, #3
 800da38:	ea23 0304 	bic.w	r3, r3, r4
 800da3c:	430b      	orrs	r3, r1
 800da3e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800da40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <I2C_IsErrorOccurred>:
{
 800da46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4a:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800da4c:	6803      	ldr	r3, [r0, #0]
 800da4e:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800da50:	f016 0610 	ands.w	r6, r6, #16
 800da54:	d07c      	beq.n	800db50 <I2C_IsErrorOccurred+0x10a>
 800da56:	460d      	mov	r5, r1
 800da58:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da5a:	2210      	movs	r2, #16
 800da5c:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800da5e:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800da60:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	6998      	ldr	r0, [r3, #24]
 800da66:	f010 0f20 	tst.w	r0, #32
 800da6a:	d130      	bne.n	800dace <I2C_IsErrorOccurred+0x88>
 800da6c:	bb7f      	cbnz	r7, 800dace <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 800da6e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800da72:	d0f6      	beq.n	800da62 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800da74:	f7fe fb0c 	bl	800c090 <HAL_GetTick>
 800da78:	eba0 0008 	sub.w	r0, r0, r8
 800da7c:	42a8      	cmp	r0, r5
 800da7e:	d801      	bhi.n	800da84 <I2C_IsErrorOccurred+0x3e>
 800da80:	2d00      	cmp	r5, #0
 800da82:	d1ee      	bne.n	800da62 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800da84:	6821      	ldr	r1, [r4, #0]
 800da86:	684b      	ldr	r3, [r1, #4]
 800da88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 800da8c:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800da90:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800da92:	6988      	ldr	r0, [r1, #24]
 800da94:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 800da98:	d002      	beq.n	800daa0 <I2C_IsErrorOccurred+0x5a>
 800da9a:	b90b      	cbnz	r3, 800daa0 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800da9c:	2a20      	cmp	r2, #32
 800da9e:	d10e      	bne.n	800dabe <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800daa0:	6823      	ldr	r3, [r4, #0]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	f013 0f20 	tst.w	r3, #32
 800daa8:	d1db      	bne.n	800da62 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800daaa:	f7fe faf1 	bl	800c090 <HAL_GetTick>
 800daae:	eba0 0008 	sub.w	r0, r0, r8
 800dab2:	2819      	cmp	r0, #25
 800dab4:	d9f4      	bls.n	800daa0 <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800dab6:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 800daba:	2701      	movs	r7, #1
              break;
 800dabc:	e7d1      	b.n	800da62 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dabe:	684b      	ldr	r3, [r1, #4]
 800dac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dac4:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 800dac6:	f7fe fae3 	bl	800c090 <HAL_GetTick>
 800daca:	4680      	mov	r8, r0
 800dacc:	e7e8      	b.n	800daa0 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 800dace:	b90f      	cbnz	r7, 800dad4 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dad0:	2220      	movs	r2, #32
 800dad2:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800dad4:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800dad8:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800dada:	6822      	ldr	r2, [r4, #0]
 800dadc:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800dade:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800dae2:	d005      	beq.n	800daf0 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 800dae4:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800dae8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800daec:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800daee:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800daf0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800daf4:	d006      	beq.n	800db04 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 800daf6:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800dafa:	6822      	ldr	r2, [r4, #0]
 800dafc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800db00:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800db02:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800db04:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800db08:	d024      	beq.n	800db54 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 800db0a:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db14:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 800db16:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800db18:	4620      	mov	r0, r4
 800db1a:	f7ff ff65 	bl	800d9e8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800db1e:	6822      	ldr	r2, [r4, #0]
 800db20:	6853      	ldr	r3, [r2, #4]
 800db22:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800db26:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800db2a:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800db2e:	f023 0301 	bic.w	r3, r3, #1
 800db32:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800db34:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800db36:	4333      	orrs	r3, r6
 800db38:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800db3a:	2320      	movs	r3, #32
 800db3c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800db40:	2300      	movs	r3, #0
 800db42:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800db46:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800db4a:	4628      	mov	r0, r5
 800db4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800db50:	2500      	movs	r5, #0
 800db52:	e7c2      	b.n	800dada <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 800db54:	2d00      	cmp	r5, #0
 800db56:	d0f8      	beq.n	800db4a <I2C_IsErrorOccurred+0x104>
 800db58:	e7de      	b.n	800db18 <I2C_IsErrorOccurred+0xd2>

0800db5a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800db5a:	b570      	push	{r4, r5, r6, lr}
 800db5c:	4604      	mov	r4, r0
 800db5e:	460d      	mov	r5, r1
 800db60:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	f013 0f02 	tst.w	r3, #2
 800db6a:	d122      	bne.n	800dbb2 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800db6c:	4632      	mov	r2, r6
 800db6e:	4629      	mov	r1, r5
 800db70:	4620      	mov	r0, r4
 800db72:	f7ff ff68 	bl	800da46 <I2C_IsErrorOccurred>
 800db76:	b9f0      	cbnz	r0, 800dbb6 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800db78:	f1b5 3fff 	cmp.w	r5, #4294967295
 800db7c:	d0f1      	beq.n	800db62 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db7e:	f7fe fa87 	bl	800c090 <HAL_GetTick>
 800db82:	1b80      	subs	r0, r0, r6
 800db84:	42a8      	cmp	r0, r5
 800db86:	d801      	bhi.n	800db8c <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800db88:	2d00      	cmp	r5, #0
 800db8a:	d1ea      	bne.n	800db62 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800db8c:	6823      	ldr	r3, [r4, #0]
 800db8e:	699b      	ldr	r3, [r3, #24]
 800db90:	f013 0f02 	tst.w	r3, #2
 800db94:	d1e5      	bne.n	800db62 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800db96:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800db98:	f043 0320 	orr.w	r3, r3, #32
 800db9c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800db9e:	2320      	movs	r3, #32
 800dba0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dba4:	2300      	movs	r3, #0
 800dba6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800dbaa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800dbae:	2001      	movs	r0, #1
 800dbb0:	e000      	b.n	800dbb4 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 800dbb2:	2000      	movs	r0, #0
}
 800dbb4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800dbb6:	2001      	movs	r0, #1
 800dbb8:	e7fc      	b.n	800dbb4 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

0800dbba <I2C_WaitOnFlagUntilTimeout>:
{
 800dbba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbbe:	4605      	mov	r5, r0
 800dbc0:	4688      	mov	r8, r1
 800dbc2:	4617      	mov	r7, r2
 800dbc4:	461e      	mov	r6, r3
 800dbc6:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dbca:	682b      	ldr	r3, [r5, #0]
 800dbcc:	699c      	ldr	r4, [r3, #24]
 800dbce:	ea38 0404 	bics.w	r4, r8, r4
 800dbd2:	bf0c      	ite	eq
 800dbd4:	2301      	moveq	r3, #1
 800dbd6:	2300      	movne	r3, #0
 800dbd8:	42bb      	cmp	r3, r7
 800dbda:	d127      	bne.n	800dc2c <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbdc:	464a      	mov	r2, r9
 800dbde:	4631      	mov	r1, r6
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	f7ff ff30 	bl	800da46 <I2C_IsErrorOccurred>
 800dbe6:	bb20      	cbnz	r0, 800dc32 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 800dbe8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800dbec:	d0ed      	beq.n	800dbca <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbee:	f7fe fa4f 	bl	800c090 <HAL_GetTick>
 800dbf2:	eba0 0009 	sub.w	r0, r0, r9
 800dbf6:	42b0      	cmp	r0, r6
 800dbf8:	d801      	bhi.n	800dbfe <I2C_WaitOnFlagUntilTimeout+0x44>
 800dbfa:	2e00      	cmp	r6, #0
 800dbfc:	d1e5      	bne.n	800dbca <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800dbfe:	682b      	ldr	r3, [r5, #0]
 800dc00:	699b      	ldr	r3, [r3, #24]
 800dc02:	ea38 0303 	bics.w	r3, r8, r3
 800dc06:	bf0c      	ite	eq
 800dc08:	2301      	moveq	r3, #1
 800dc0a:	2300      	movne	r3, #0
 800dc0c:	42bb      	cmp	r3, r7
 800dc0e:	d1dc      	bne.n	800dbca <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dc10:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800dc12:	f043 0320 	orr.w	r3, r3, #32
 800dc16:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800dc18:	2320      	movs	r3, #32
 800dc1a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800dc24:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 800dc28:	2001      	movs	r0, #1
 800dc2a:	e000      	b.n	800dc2e <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 800dc2c:	2000      	movs	r0, #0
}
 800dc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 800dc32:	2001      	movs	r0, #1
 800dc34:	e7fb      	b.n	800dc2e <I2C_WaitOnFlagUntilTimeout+0x74>

0800dc36 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800dc36:	b570      	push	{r4, r5, r6, lr}
 800dc38:	4604      	mov	r4, r0
 800dc3a:	460d      	mov	r5, r1
 800dc3c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dc3e:	e004      	b.n	800dc4a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800dc40:	6823      	ldr	r3, [r4, #0]
 800dc42:	699b      	ldr	r3, [r3, #24]
 800dc44:	f013 0f20 	tst.w	r3, #32
 800dc48:	d012      	beq.n	800dc70 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	f013 0f20 	tst.w	r3, #32
 800dc52:	d11b      	bne.n	800dc8c <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc54:	4632      	mov	r2, r6
 800dc56:	4629      	mov	r1, r5
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f7ff fef4 	bl	800da46 <I2C_IsErrorOccurred>
 800dc5e:	b9b8      	cbnz	r0, 800dc90 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc60:	f7fe fa16 	bl	800c090 <HAL_GetTick>
 800dc64:	1b80      	subs	r0, r0, r6
 800dc66:	42a8      	cmp	r0, r5
 800dc68:	d8ea      	bhi.n	800dc40 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800dc6a:	2d00      	cmp	r5, #0
 800dc6c:	d1ed      	bne.n	800dc4a <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 800dc6e:	e7e7      	b.n	800dc40 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dc70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800dc72:	f043 0320 	orr.w	r3, r3, #32
 800dc76:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dc78:	2320      	movs	r3, #32
 800dc7a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800dc84:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 800dc88:	2001      	movs	r0, #1
 800dc8a:	e000      	b.n	800dc8e <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 800dc8c:	2000      	movs	r0, #0
}
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800dc90:	2001      	movs	r0, #1
 800dc92:	e7fc      	b.n	800dc8e <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

0800dc94 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc96:	4604      	mov	r4, r0
 800dc98:	460e      	mov	r6, r1
 800dc9a:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800dc9c:	2500      	movs	r5, #0
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800dc9e:	e018      	b.n	800dcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dca0:	2300      	movs	r3, #0
 800dca2:	6463      	str	r3, [r4, #68]	@ 0x44
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800dca4:	f7fe f9f4 	bl	800c090 <HAL_GetTick>
 800dca8:	1bc0      	subs	r0, r0, r7
 800dcaa:	42b0      	cmp	r0, r6
 800dcac:	d800      	bhi.n	800dcb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x1c>
 800dcae:	b986      	cbnz	r6, 800dcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
 800dcb0:	b97d      	cbnz	r5, 800dcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800dcb2:	6823      	ldr	r3, [r4, #0]
 800dcb4:	699b      	ldr	r3, [r3, #24]
 800dcb6:	f013 0f04 	tst.w	r3, #4
 800dcba:	d10a      	bne.n	800dcd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dcbc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800dcbe:	f043 0320 	orr.w	r3, r3, #32
 800dcc2:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dcc4:	2320      	movs	r3, #32
 800dcc6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800dcca:	2300      	movs	r3, #0
 800dccc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        status = HAL_ERROR;
 800dcd0:	2501      	movs	r5, #1
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	699b      	ldr	r3, [r3, #24]
 800dcd6:	f013 0f04 	tst.w	r3, #4
 800dcda:	d12e      	bne.n	800dd3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
 800dcdc:	bb6d      	cbnz	r5, 800dd3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dcde:	463a      	mov	r2, r7
 800dce0:	4631      	mov	r1, r6
 800dce2:	4620      	mov	r0, r4
 800dce4:	f7ff feaf 	bl	800da46 <I2C_IsErrorOccurred>
 800dce8:	b100      	cbz	r0, 800dcec <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
      status = HAL_ERROR;
 800dcea:	2501      	movs	r5, #1
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	699a      	ldr	r2, [r3, #24]
 800dcf0:	f012 0f20 	tst.w	r2, #32
 800dcf4:	d0d6      	beq.n	800dca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
 800dcf6:	2d00      	cmp	r5, #0
 800dcf8:	d1d4      	bne.n	800dca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800dcfa:	699a      	ldr	r2, [r3, #24]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dcfc:	699a      	ldr	r2, [r3, #24]
 800dcfe:	f012 0f10 	tst.w	r2, #16
 800dd02:	d0cd      	beq.n	800dca0 <I2C_WaitOnRXNEFlagUntilTimeout+0xc>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd04:	2210      	movs	r2, #16
 800dd06:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800dd08:	2304      	movs	r3, #4
 800dd0a:	6463      	str	r3, [r4, #68]	@ 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd0c:	6823      	ldr	r3, [r4, #0]
 800dd0e:	2220      	movs	r2, #32
 800dd10:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800dd12:	6821      	ldr	r1, [r4, #0]
 800dd14:	684b      	ldr	r3, [r1, #4]
 800dd16:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800dd1a:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800dd1e:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800dd22:	f023 0301 	bic.w	r3, r3, #1
 800dd26:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800dd28:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800dd32:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        status = HAL_ERROR;
 800dd36:	2501      	movs	r5, #1
 800dd38:	e7b4      	b.n	800dca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x10>
}
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd3e <HAL_I2C_Init>:
  if (hi2c == NULL)
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d05f      	beq.n	800de02 <HAL_I2C_Init+0xc4>
{
 800dd42:	b510      	push	{r4, lr}
 800dd44:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dd46:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d048      	beq.n	800dde0 <HAL_I2C_Init+0xa2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800dd4e:	2324      	movs	r3, #36	@ 0x24
 800dd50:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 800dd54:	6822      	ldr	r2, [r4, #0]
 800dd56:	6813      	ldr	r3, [r2, #0]
 800dd58:	f023 0301 	bic.w	r3, r3, #1
 800dd5c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dd5e:	6863      	ldr	r3, [r4, #4]
 800dd60:	6822      	ldr	r2, [r4, #0]
 800dd62:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800dd66:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800dd68:	6822      	ldr	r2, [r4, #0]
 800dd6a:	6893      	ldr	r3, [r2, #8]
 800dd6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dd70:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dd72:	68e3      	ldr	r3, [r4, #12]
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d038      	beq.n	800ddea <HAL_I2C_Init+0xac>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800dd78:	68a3      	ldr	r3, [r4, #8]
 800dd7a:	6822      	ldr	r2, [r4, #0]
 800dd7c:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 800dd80:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dd82:	68e3      	ldr	r3, [r4, #12]
 800dd84:	2b02      	cmp	r3, #2
 800dd86:	d036      	beq.n	800ddf6 <HAL_I2C_Init+0xb8>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800dd88:	6822      	ldr	r2, [r4, #0]
 800dd8a:	6853      	ldr	r3, [r2, #4]
 800dd8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd90:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dd92:	6822      	ldr	r2, [r4, #0]
 800dd94:	6853      	ldr	r3, [r2, #4]
 800dd96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800dd9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd9e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dda0:	6822      	ldr	r2, [r4, #0]
 800dda2:	68d3      	ldr	r3, [r2, #12]
 800dda4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dda8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ddaa:	6923      	ldr	r3, [r4, #16]
 800ddac:	6962      	ldr	r2, [r4, #20]
 800ddae:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ddb0:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ddb2:	6822      	ldr	r2, [r4, #0]
 800ddb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ddb8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ddba:	69e3      	ldr	r3, [r4, #28]
 800ddbc:	6a21      	ldr	r1, [r4, #32]
 800ddbe:	6822      	ldr	r2, [r4, #0]
 800ddc0:	430b      	orrs	r3, r1
 800ddc2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800ddc4:	6822      	ldr	r2, [r4, #0]
 800ddc6:	6813      	ldr	r3, [r2, #0]
 800ddc8:	f043 0301 	orr.w	r3, r3, #1
 800ddcc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ddce:	2000      	movs	r0, #0
 800ddd0:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ddd2:	2320      	movs	r3, #32
 800ddd4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ddd8:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddda:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800ddde:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800dde0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800dde4:	f000 fb8a 	bl	800e4fc <HAL_I2C_MspInit>
 800dde8:	e7b1      	b.n	800dd4e <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ddea:	68a3      	ldr	r3, [r4, #8]
 800ddec:	6822      	ldr	r2, [r4, #0]
 800ddee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddf2:	6093      	str	r3, [r2, #8]
 800ddf4:	e7c5      	b.n	800dd82 <HAL_I2C_Init+0x44>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800ddf6:	6822      	ldr	r2, [r4, #0]
 800ddf8:	6853      	ldr	r3, [r2, #4]
 800ddfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ddfe:	6053      	str	r3, [r2, #4]
 800de00:	e7c7      	b.n	800dd92 <HAL_I2C_Init+0x54>
    return HAL_ERROR;
 800de02:	2001      	movs	r0, #1
}
 800de04:	4770      	bx	lr
	...

0800de08 <HAL_I2C_Master_Transmit>:
{
 800de08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de0c:	b082      	sub	sp, #8
 800de0e:	460f      	mov	r7, r1
 800de10:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800de12:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800de16:	2920      	cmp	r1, #32
 800de18:	f040 80b7 	bne.w	800df8a <HAL_I2C_Master_Transmit+0x182>
 800de1c:	4604      	mov	r4, r0
 800de1e:	4691      	mov	r9, r2
 800de20:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 800de22:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800de26:	2b01      	cmp	r3, #1
 800de28:	f000 80b3 	beq.w	800df92 <HAL_I2C_Master_Transmit+0x18a>
 800de2c:	f04f 0a01 	mov.w	sl, #1
 800de30:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800de34:	f7fe f92c 	bl	800c090 <HAL_GetTick>
 800de38:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800de3a:	9000      	str	r0, [sp, #0]
 800de3c:	2319      	movs	r3, #25
 800de3e:	4652      	mov	r2, sl
 800de40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800de44:	4620      	mov	r0, r4
 800de46:	f7ff feb8 	bl	800dbba <I2C_WaitOnFlagUntilTimeout>
 800de4a:	2800      	cmp	r0, #0
 800de4c:	f040 80a3 	bne.w	800df96 <HAL_I2C_Master_Transmit+0x18e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800de50:	2321      	movs	r3, #33	@ 0x21
 800de52:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800de56:	2310      	movs	r3, #16
 800de58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de5c:	2300      	movs	r3, #0
 800de5e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800de60:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800de64:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800de68:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de6a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800de6c:	b29b      	uxth	r3, r3
 800de6e:	2bff      	cmp	r3, #255	@ 0xff
 800de70:	d91e      	bls.n	800deb0 <HAL_I2C_Master_Transmit+0xa8>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800de72:	23ff      	movs	r3, #255	@ 0xff
 800de74:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800de76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    if (hi2c->XferSize > 0U)
 800de7a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800de7c:	b1ea      	cbz	r2, 800deba <HAL_I2C_Master_Transmit+0xb2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800de7e:	6822      	ldr	r2, [r4, #0]
 800de80:	f899 1000 	ldrb.w	r1, [r9]
 800de84:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800de86:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800de88:	3201      	adds	r2, #1
 800de8a:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800de8c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800de8e:	b292      	uxth	r2, r2
 800de90:	3a01      	subs	r2, #1
 800de92:	b292      	uxth	r2, r2
 800de94:	8562      	strh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800de96:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800de98:	3a01      	subs	r2, #1
 800de9a:	b292      	uxth	r2, r2
 800de9c:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800de9e:	3201      	adds	r2, #1
 800dea0:	4941      	ldr	r1, [pc, #260]	@ (800dfa8 <HAL_I2C_Master_Transmit+0x1a0>)
 800dea2:	9100      	str	r1, [sp, #0]
 800dea4:	b2d2      	uxtb	r2, r2
 800dea6:	4639      	mov	r1, r7
 800dea8:	4620      	mov	r0, r4
 800deaa:	f7ff fdae 	bl	800da0a <I2C_TransferConfig>
 800deae:	e018      	b.n	800dee2 <HAL_I2C_Master_Transmit+0xda>
      hi2c->XferSize = hi2c->XferCount;
 800deb0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800deb2:	8523      	strh	r3, [r4, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800deb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800deb8:	e7df      	b.n	800de7a <HAL_I2C_Master_Transmit+0x72>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800deba:	493b      	ldr	r1, [pc, #236]	@ (800dfa8 <HAL_I2C_Master_Transmit+0x1a0>)
 800debc:	9100      	str	r1, [sp, #0]
 800debe:	b2d2      	uxtb	r2, r2
 800dec0:	4639      	mov	r1, r7
 800dec2:	4620      	mov	r0, r4
 800dec4:	f7ff fda1 	bl	800da0a <I2C_TransferConfig>
 800dec8:	e00b      	b.n	800dee2 <HAL_I2C_Master_Transmit+0xda>
          hi2c->XferSize = hi2c->XferCount;
 800deca:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800decc:	b292      	uxth	r2, r2
 800dece:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ded0:	2300      	movs	r3, #0
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ded8:	b2d2      	uxtb	r2, r2
 800deda:	4639      	mov	r1, r7
 800dedc:	4620      	mov	r0, r4
 800dede:	f7ff fd94 	bl	800da0a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800dee2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d033      	beq.n	800df52 <HAL_I2C_Master_Transmit+0x14a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800deea:	462a      	mov	r2, r5
 800deec:	4631      	mov	r1, r6
 800deee:	4620      	mov	r0, r4
 800def0:	f7ff fe33 	bl	800db5a <I2C_WaitOnTXISFlagUntilTimeout>
 800def4:	2800      	cmp	r0, #0
 800def6:	d150      	bne.n	800df9a <HAL_I2C_Master_Transmit+0x192>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800def8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	7812      	ldrb	r2, [r2, #0]
 800defe:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800df00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800df02:	3301      	adds	r3, #1
 800df04:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800df06:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800df08:	b29b      	uxth	r3, r3
 800df0a:	3b01      	subs	r3, #1
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800df10:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800df12:	3b01      	subs	r3, #1
 800df14:	b29b      	uxth	r3, r3
 800df16:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800df18:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800df1a:	b292      	uxth	r2, r2
 800df1c:	2a00      	cmp	r2, #0
 800df1e:	d0e0      	beq.n	800dee2 <HAL_I2C_Master_Transmit+0xda>
 800df20:	2b00      	cmp	r3, #0
 800df22:	d1de      	bne.n	800dee2 <HAL_I2C_Master_Transmit+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800df24:	9500      	str	r5, [sp, #0]
 800df26:	4633      	mov	r3, r6
 800df28:	2200      	movs	r2, #0
 800df2a:	2180      	movs	r1, #128	@ 0x80
 800df2c:	4620      	mov	r0, r4
 800df2e:	f7ff fe44 	bl	800dbba <I2C_WaitOnFlagUntilTimeout>
 800df32:	bba0      	cbnz	r0, 800df9e <HAL_I2C_Master_Transmit+0x196>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800df36:	b29b      	uxth	r3, r3
 800df38:	2bff      	cmp	r3, #255	@ 0xff
 800df3a:	d9c6      	bls.n	800deca <HAL_I2C_Master_Transmit+0xc2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800df3c:	22ff      	movs	r2, #255	@ 0xff
 800df3e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800df40:	2300      	movs	r3, #0
 800df42:	9300      	str	r3, [sp, #0]
 800df44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800df48:	4639      	mov	r1, r7
 800df4a:	4620      	mov	r0, r4
 800df4c:	f7ff fd5d 	bl	800da0a <I2C_TransferConfig>
 800df50:	e7c7      	b.n	800dee2 <HAL_I2C_Master_Transmit+0xda>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800df52:	462a      	mov	r2, r5
 800df54:	4631      	mov	r1, r6
 800df56:	4620      	mov	r0, r4
 800df58:	f7ff fe6d 	bl	800dc36 <I2C_WaitOnSTOPFlagUntilTimeout>
 800df5c:	bb08      	cbnz	r0, 800dfa2 <HAL_I2C_Master_Transmit+0x19a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	2220      	movs	r2, #32
 800df62:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800df64:	6821      	ldr	r1, [r4, #0]
 800df66:	684b      	ldr	r3, [r1, #4]
 800df68:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800df6c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800df70:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800df74:	f023 0301 	bic.w	r3, r3, #1
 800df78:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800df7a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800df7e:	2300      	movs	r3, #0
 800df80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800df84:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800df88:	e000      	b.n	800df8c <HAL_I2C_Master_Transmit+0x184>
    return HAL_BUSY;
 800df8a:	2002      	movs	r0, #2
}
 800df8c:	b002      	add	sp, #8
 800df8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800df92:	2002      	movs	r0, #2
 800df94:	e7fa      	b.n	800df8c <HAL_I2C_Master_Transmit+0x184>
      return HAL_ERROR;
 800df96:	2001      	movs	r0, #1
 800df98:	e7f8      	b.n	800df8c <HAL_I2C_Master_Transmit+0x184>
        return HAL_ERROR;
 800df9a:	2001      	movs	r0, #1
 800df9c:	e7f6      	b.n	800df8c <HAL_I2C_Master_Transmit+0x184>
          return HAL_ERROR;
 800df9e:	2001      	movs	r0, #1
 800dfa0:	e7f4      	b.n	800df8c <HAL_I2C_Master_Transmit+0x184>
      return HAL_ERROR;
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	e7f2      	b.n	800df8c <HAL_I2C_Master_Transmit+0x184>
 800dfa6:	bf00      	nop
 800dfa8:	80002000 	.word	0x80002000

0800dfac <HAL_I2C_Master_Receive>:
{
 800dfac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	460f      	mov	r7, r1
 800dfb4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800dfb6:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800dfba:	2920      	cmp	r1, #32
 800dfbc:	f040 80a3 	bne.w	800e106 <HAL_I2C_Master_Receive+0x15a>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	4691      	mov	r9, r2
 800dfc4:	4698      	mov	r8, r3
    __HAL_LOCK(hi2c);
 800dfc6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800dfca:	2b01      	cmp	r3, #1
 800dfcc:	f000 809f 	beq.w	800e10e <HAL_I2C_Master_Receive+0x162>
 800dfd0:	f04f 0a01 	mov.w	sl, #1
 800dfd4:	f880 a040 	strb.w	sl, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800dfd8:	f7fe f85a 	bl	800c090 <HAL_GetTick>
 800dfdc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dfde:	9000      	str	r0, [sp, #0]
 800dfe0:	2319      	movs	r3, #25
 800dfe2:	4652      	mov	r2, sl
 800dfe4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800dfe8:	4620      	mov	r0, r4
 800dfea:	f7ff fde6 	bl	800dbba <I2C_WaitOnFlagUntilTimeout>
 800dfee:	2800      	cmp	r0, #0
 800dff0:	f040 808f 	bne.w	800e112 <HAL_I2C_Master_Receive+0x166>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dff4:	2322      	movs	r3, #34	@ 0x22
 800dff6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dffa:	2310      	movs	r3, #16
 800dffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e000:	2300      	movs	r3, #0
 800e002:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800e004:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e008:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e00c:	6363      	str	r3, [r4, #52]	@ 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e00e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e010:	b29b      	uxth	r3, r3
 800e012:	2bff      	cmp	r3, #255	@ 0xff
 800e014:	d90b      	bls.n	800e02e <HAL_I2C_Master_Receive+0x82>
      hi2c->XferSize = 1U;
 800e016:	4652      	mov	r2, sl
 800e018:	f8a4 a028 	strh.w	sl, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e01c:	4b41      	ldr	r3, [pc, #260]	@ (800e124 <HAL_I2C_Master_Receive+0x178>)
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e024:	4639      	mov	r1, r7
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff fcef 	bl	800da0a <I2C_TransferConfig>
 800e02c:	e018      	b.n	800e060 <HAL_I2C_Master_Receive+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 800e02e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800e030:	b292      	uxth	r2, r2
 800e032:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e034:	4b3b      	ldr	r3, [pc, #236]	@ (800e124 <HAL_I2C_Master_Receive+0x178>)
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e03c:	b2d2      	uxtb	r2, r2
 800e03e:	4639      	mov	r1, r7
 800e040:	4620      	mov	r0, r4
 800e042:	f7ff fce2 	bl	800da0a <I2C_TransferConfig>
 800e046:	e00b      	b.n	800e060 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 800e048:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800e04a:	b292      	uxth	r2, r2
 800e04c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e04e:	2300      	movs	r3, #0
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e056:	b2d2      	uxtb	r2, r2
 800e058:	4639      	mov	r1, r7
 800e05a:	4620      	mov	r0, r4
 800e05c:	f7ff fcd5 	bl	800da0a <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e060:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e062:	b29b      	uxth	r3, r3
 800e064:	2b00      	cmp	r3, #0
 800e066:	d032      	beq.n	800e0ce <HAL_I2C_Master_Receive+0x122>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e068:	462a      	mov	r2, r5
 800e06a:	4631      	mov	r1, r6
 800e06c:	4620      	mov	r0, r4
 800e06e:	f7ff fe11 	bl	800dc94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e072:	2800      	cmp	r0, #0
 800e074:	d14f      	bne.n	800e116 <HAL_I2C_Master_Receive+0x16a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e07a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e07c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800e07e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e080:	3301      	adds	r3, #1
 800e082:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800e084:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800e086:	3a01      	subs	r2, #1
 800e088:	b292      	uxth	r2, r2
 800e08a:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800e08c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e08e:	b29b      	uxth	r3, r3
 800e090:	3b01      	subs	r3, #1
 800e092:	b29b      	uxth	r3, r3
 800e094:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e096:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e098:	b29b      	uxth	r3, r3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d0e0      	beq.n	800e060 <HAL_I2C_Master_Receive+0xb4>
 800e09e:	2a00      	cmp	r2, #0
 800e0a0:	d1de      	bne.n	800e060 <HAL_I2C_Master_Receive+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e0a2:	9500      	str	r5, [sp, #0]
 800e0a4:	4633      	mov	r3, r6
 800e0a6:	2180      	movs	r1, #128	@ 0x80
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f7ff fd86 	bl	800dbba <I2C_WaitOnFlagUntilTimeout>
 800e0ae:	bba0      	cbnz	r0, 800e11a <HAL_I2C_Master_Receive+0x16e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e0b0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	2bff      	cmp	r3, #255	@ 0xff
 800e0b6:	d9c7      	bls.n	800e048 <HAL_I2C_Master_Receive+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e0b8:	22ff      	movs	r2, #255	@ 0xff
 800e0ba:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e0bc:	2300      	movs	r3, #0
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e0c4:	4639      	mov	r1, r7
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f7ff fc9f 	bl	800da0a <I2C_TransferConfig>
 800e0cc:	e7c8      	b.n	800e060 <HAL_I2C_Master_Receive+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e0ce:	462a      	mov	r2, r5
 800e0d0:	4631      	mov	r1, r6
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f7ff fdaf 	bl	800dc36 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e0d8:	bb08      	cbnz	r0, 800e11e <HAL_I2C_Master_Receive+0x172>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	2220      	movs	r2, #32
 800e0de:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800e0e0:	6821      	ldr	r1, [r4, #0]
 800e0e2:	684b      	ldr	r3, [r1, #4]
 800e0e4:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800e0e8:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800e0ec:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800e0f0:	f023 0301 	bic.w	r3, r3, #1
 800e0f4:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800e0f6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800e100:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800e104:	e000      	b.n	800e108 <HAL_I2C_Master_Receive+0x15c>
    return HAL_BUSY;
 800e106:	2002      	movs	r0, #2
}
 800e108:	b002      	add	sp, #8
 800e10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 800e10e:	2002      	movs	r0, #2
 800e110:	e7fa      	b.n	800e108 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800e112:	2001      	movs	r0, #1
 800e114:	e7f8      	b.n	800e108 <HAL_I2C_Master_Receive+0x15c>
        return HAL_ERROR;
 800e116:	2001      	movs	r0, #1
 800e118:	e7f6      	b.n	800e108 <HAL_I2C_Master_Receive+0x15c>
          return HAL_ERROR;
 800e11a:	2001      	movs	r0, #1
 800e11c:	e7f4      	b.n	800e108 <HAL_I2C_Master_Receive+0x15c>
      return HAL_ERROR;
 800e11e:	2001      	movs	r0, #1
 800e120:	e7f2      	b.n	800e108 <HAL_I2C_Master_Receive+0x15c>
 800e122:	bf00      	nop
 800e124:	80002400 	.word	0x80002400

0800e128 <HAL_I2C_IsDeviceReady>:
{
 800e128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e12c:	b085      	sub	sp, #20
 800e12e:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 800e130:	2300      	movs	r3, #0
 800e132:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e134:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800e138:	2b20      	cmp	r3, #32
 800e13a:	f040 8089 	bne.w	800e250 <HAL_I2C_IsDeviceReady+0x128>
 800e13e:	4606      	mov	r6, r0
 800e140:	4688      	mov	r8, r1
 800e142:	4691      	mov	r9, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e144:	6803      	ldr	r3, [r0, #0]
 800e146:	699b      	ldr	r3, [r3, #24]
 800e148:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800e14c:	f040 8082 	bne.w	800e254 <HAL_I2C_IsDeviceReady+0x12c>
    __HAL_LOCK(hi2c);
 800e150:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e154:	2b01      	cmp	r3, #1
 800e156:	d07f      	beq.n	800e258 <HAL_I2C_IsDeviceReady+0x130>
 800e158:	2301      	movs	r3, #1
 800e15a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800e15e:	2324      	movs	r3, #36	@ 0x24
 800e160:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e164:	2300      	movs	r3, #0
 800e166:	6443      	str	r3, [r0, #68]	@ 0x44
 800e168:	e041      	b.n	800e1ee <HAL_I2C_IsDeviceReady+0xc6>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800e16a:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800e16e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e172:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800e176:	e043      	b.n	800e200 <HAL_I2C_IsDeviceReady+0xd8>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800e178:	6833      	ldr	r3, [r6, #0]
 800e17a:	699c      	ldr	r4, [r3, #24]
 800e17c:	f3c4 1440 	ubfx	r4, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e180:	699b      	ldr	r3, [r3, #24]
 800e182:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800e186:	b9c4      	cbnz	r4, 800e1ba <HAL_I2C_IsDeviceReady+0x92>
 800e188:	b9bb      	cbnz	r3, 800e1ba <HAL_I2C_IsDeviceReady+0x92>
        if (Timeout != HAL_MAX_DELAY)
 800e18a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e18e:	d0f3      	beq.n	800e178 <HAL_I2C_IsDeviceReady+0x50>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e190:	f7fd ff7e 	bl	800c090 <HAL_GetTick>
 800e194:	1bc0      	subs	r0, r0, r7
 800e196:	42a8      	cmp	r0, r5
 800e198:	d801      	bhi.n	800e19e <HAL_I2C_IsDeviceReady+0x76>
 800e19a:	2d00      	cmp	r5, #0
 800e19c:	d1ec      	bne.n	800e178 <HAL_I2C_IsDeviceReady+0x50>
            hi2c->State = HAL_I2C_STATE_READY;
 800e19e:	2320      	movs	r3, #32
 800e1a0:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e1a4:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800e1a6:	f043 0320 	orr.w	r3, r3, #32
 800e1aa:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 800e1b2:	2001      	movs	r0, #1
}
 800e1b4:	b005      	add	sp, #20
 800e1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800e1ba:	6833      	ldr	r3, [r6, #0]
 800e1bc:	699b      	ldr	r3, [r3, #24]
 800e1be:	f013 0f10 	tst.w	r3, #16
 800e1c2:	d02a      	beq.n	800e21a <HAL_I2C_IsDeviceReady+0xf2>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800e1c4:	9700      	str	r7, [sp, #0]
 800e1c6:	462b      	mov	r3, r5
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	2120      	movs	r1, #32
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f7ff fcf4 	bl	800dbba <I2C_WaitOnFlagUntilTimeout>
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d144      	bne.n	800e260 <HAL_I2C_IsDeviceReady+0x138>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1d6:	6833      	ldr	r3, [r6, #0]
 800e1d8:	2210      	movs	r2, #16
 800e1da:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e1dc:	6833      	ldr	r3, [r6, #0]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 800e1e2:	9b03      	ldr	r3, [sp, #12]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 800e1e8:	9b03      	ldr	r3, [sp, #12]
 800e1ea:	454b      	cmp	r3, r9
 800e1ec:	d226      	bcs.n	800e23c <HAL_I2C_IsDeviceReady+0x114>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800e1ee:	68f3      	ldr	r3, [r6, #12]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d0ba      	beq.n	800e16a <HAL_I2C_IsDeviceReady+0x42>
 800e1f4:	f3c8 0309 	ubfx	r3, r8, #0, #10
 800e1f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e1fc:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800e200:	6832      	ldr	r2, [r6, #0]
 800e202:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800e204:	f7fd ff44 	bl	800c090 <HAL_GetTick>
 800e208:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800e20a:	6833      	ldr	r3, [r6, #0]
 800e20c:	699c      	ldr	r4, [r3, #24]
 800e20e:	f3c4 1440 	ubfx	r4, r4, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e212:	699b      	ldr	r3, [r3, #24]
 800e214:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800e218:	e7b5      	b.n	800e186 <HAL_I2C_IsDeviceReady+0x5e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800e21a:	9700      	str	r7, [sp, #0]
 800e21c:	462b      	mov	r3, r5
 800e21e:	2200      	movs	r2, #0
 800e220:	2120      	movs	r1, #32
 800e222:	4630      	mov	r0, r6
 800e224:	f7ff fcc9 	bl	800dbba <I2C_WaitOnFlagUntilTimeout>
 800e228:	b9c0      	cbnz	r0, 800e25c <HAL_I2C_IsDeviceReady+0x134>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e22a:	6832      	ldr	r2, [r6, #0]
 800e22c:	2320      	movs	r3, #32
 800e22e:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 800e230:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 800e234:	2300      	movs	r3, #0
 800e236:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 800e23a:	e7bb      	b.n	800e1b4 <HAL_I2C_IsDeviceReady+0x8c>
    hi2c->State = HAL_I2C_STATE_READY;
 800e23c:	f886 2041 	strb.w	r2, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e240:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800e242:	4313      	orrs	r3, r2
 800e244:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 800e246:	2300      	movs	r3, #0
 800e248:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 800e24c:	2001      	movs	r0, #1
 800e24e:	e7b1      	b.n	800e1b4 <HAL_I2C_IsDeviceReady+0x8c>
    return HAL_BUSY;
 800e250:	2002      	movs	r0, #2
 800e252:	e7af      	b.n	800e1b4 <HAL_I2C_IsDeviceReady+0x8c>
      return HAL_BUSY;
 800e254:	2002      	movs	r0, #2
 800e256:	e7ad      	b.n	800e1b4 <HAL_I2C_IsDeviceReady+0x8c>
    __HAL_LOCK(hi2c);
 800e258:	2002      	movs	r0, #2
 800e25a:	e7ab      	b.n	800e1b4 <HAL_I2C_IsDeviceReady+0x8c>
          return HAL_ERROR;
 800e25c:	2001      	movs	r0, #1
 800e25e:	e7a9      	b.n	800e1b4 <HAL_I2C_IsDeviceReady+0x8c>
          return HAL_ERROR;
 800e260:	2001      	movs	r0, #1
 800e262:	e7a7      	b.n	800e1b4 <HAL_I2C_IsDeviceReady+0x8c>

0800e264 <HAL_I2C_GetState>:
  return hi2c->State;
 800e264:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 800e268:	4770      	bx	lr

0800e26a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800e26a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800e26c:	4770      	bx	lr

0800e26e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e26e:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e270:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800e274:	2a20      	cmp	r2, #32
 800e276:	d123      	bne.n	800e2c0 <HAL_I2CEx_ConfigAnalogFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e278:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800e27c:	2a01      	cmp	r2, #1
 800e27e:	d021      	beq.n	800e2c4 <HAL_I2CEx_ConfigAnalogFilter+0x56>
 800e280:	2201      	movs	r2, #1
 800e282:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e286:	2224      	movs	r2, #36	@ 0x24
 800e288:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e28c:	6800      	ldr	r0, [r0, #0]
 800e28e:	6802      	ldr	r2, [r0, #0]
 800e290:	f022 0201 	bic.w	r2, r2, #1
 800e294:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e296:	6818      	ldr	r0, [r3, #0]
 800e298:	6802      	ldr	r2, [r0, #0]
 800e29a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e29e:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e2a0:	6818      	ldr	r0, [r3, #0]
 800e2a2:	6802      	ldr	r2, [r0, #0]
 800e2a4:	430a      	orrs	r2, r1
 800e2a6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e2a8:	6819      	ldr	r1, [r3, #0]
 800e2aa:	680a      	ldr	r2, [r1, #0]
 800e2ac:	f042 0201 	orr.w	r2, r2, #1
 800e2b0:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e2b2:	2220      	movs	r2, #32
 800e2b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800e2be:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800e2c0:	2002      	movs	r0, #2
 800e2c2:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800e2c4:	2002      	movs	r0, #2
  }
}
 800e2c6:	4770      	bx	lr

0800e2c8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e2c8:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2ca:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800e2ce:	2a20      	cmp	r2, #32
 800e2d0:	d121      	bne.n	800e316 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e2d2:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800e2d6:	2a01      	cmp	r2, #1
 800e2d8:	d01f      	beq.n	800e31a <HAL_I2CEx_ConfigDigitalFilter+0x52>
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e2e0:	2224      	movs	r2, #36	@ 0x24
 800e2e2:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e2e6:	6800      	ldr	r0, [r0, #0]
 800e2e8:	6802      	ldr	r2, [r0, #0]
 800e2ea:	f022 0201 	bic.w	r2, r2, #1
 800e2ee:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e2f0:	6818      	ldr	r0, [r3, #0]
 800e2f2:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e2f4:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e2f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e2fc:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e2fe:	6819      	ldr	r1, [r3, #0]
 800e300:	680a      	ldr	r2, [r1, #0]
 800e302:	f042 0201 	orr.w	r2, r2, #1
 800e306:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e308:	2220      	movs	r2, #32
 800e30a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e30e:	2000      	movs	r0, #0
 800e310:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800e314:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800e316:	2002      	movs	r0, #2
 800e318:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 800e31a:	2002      	movs	r0, #2
  }
}
 800e31c:	4770      	bx	lr
	...

0800e320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e320:	b500      	push	{lr}
 800e322:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e324:	4b0d      	ldr	r3, [pc, #52]	@ (800e35c <HAL_MspInit+0x3c>)
 800e326:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e328:	f042 0201 	orr.w	r2, r2, #1
 800e32c:	661a      	str	r2, [r3, #96]	@ 0x60
 800e32e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e330:	f002 0201 	and.w	r2, r2, #1
 800e334:	9200      	str	r2, [sp, #0]
 800e336:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e338:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e33a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e33e:	659a      	str	r2, [r3, #88]	@ 0x58
 800e340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e346:	9301      	str	r3, [sp, #4]
 800e348:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e34a:	2200      	movs	r2, #0
 800e34c:	210f      	movs	r1, #15
 800e34e:	f06f 0001 	mvn.w	r0, #1
 800e352:	f7ff f831 	bl	800d3b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e356:	b003      	add	sp, #12
 800e358:	f85d fb04 	ldr.w	pc, [sp], #4
 800e35c:	40021000 	.word	0x40021000

0800e360 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e360:	b570      	push	{r4, r5, r6, lr}
 800e362:	b09e      	sub	sp, #120	@ 0x78
 800e364:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e366:	2100      	movs	r1, #0
 800e368:	9119      	str	r1, [sp, #100]	@ 0x64
 800e36a:	911a      	str	r1, [sp, #104]	@ 0x68
 800e36c:	911b      	str	r1, [sp, #108]	@ 0x6c
 800e36e:	911c      	str	r1, [sp, #112]	@ 0x70
 800e370:	911d      	str	r1, [sp, #116]	@ 0x74
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e372:	2254      	movs	r2, #84	@ 0x54
 800e374:	a804      	add	r0, sp, #16
 800e376:	f002 faae 	bl	80108d6 <memset>
  if(hadc->Instance==ADC1)
 800e37a:	6822      	ldr	r2, [r4, #0]
 800e37c:	4b27      	ldr	r3, [pc, #156]	@ (800e41c <HAL_ADC_MspInit+0xbc>)
 800e37e:	429a      	cmp	r2, r3
 800e380:	d001      	beq.n	800e386 <HAL_ADC_MspInit+0x26>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800e382:	b01e      	add	sp, #120	@ 0x78
 800e384:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800e386:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e38a:	9304      	str	r3, [sp, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800e38c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800e390:	9316      	str	r3, [sp, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800e392:	2302      	movs	r3, #2
 800e394:	9305      	str	r3, [sp, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800e396:	9306      	str	r3, [sp, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800e398:	2208      	movs	r2, #8
 800e39a:	9207      	str	r2, [sp, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800e39c:	2207      	movs	r2, #7
 800e39e:	9208      	str	r2, [sp, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800e3a0:	9309      	str	r3, [sp, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800e3a2:	930a      	str	r3, [sp, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800e3a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3a8:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e3aa:	a804      	add	r0, sp, #16
 800e3ac:	f000 ff12 	bl	800f1d4 <HAL_RCCEx_PeriphCLKConfig>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d130      	bne.n	800e416 <HAL_ADC_MspInit+0xb6>
    __HAL_RCC_ADC_CLK_ENABLE();
 800e3b4:	4b1a      	ldr	r3, [pc, #104]	@ (800e420 <HAL_ADC_MspInit+0xc0>)
 800e3b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e3bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e3be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800e3c4:	9201      	str	r2, [sp, #4]
 800e3c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e3c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3ca:	f042 0201 	orr.w	r2, r2, #1
 800e3ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e3d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3d2:	f002 0201 	and.w	r2, r2, #1
 800e3d6:	9202      	str	r2, [sp, #8]
 800e3d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e3da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e3dc:	f042 0202 	orr.w	r2, r2, #2
 800e3e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e3e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3e4:	f003 0302 	and.w	r3, r3, #2
 800e3e8:	9303      	str	r3, [sp, #12]
 800e3ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC4_Pin|ADC5_Pin
 800e3ec:	237b      	movs	r3, #123	@ 0x7b
 800e3ee:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800e3f0:	260b      	movs	r6, #11
 800e3f2:	961a      	str	r6, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e3f4:	2500      	movs	r5, #0
 800e3f6:	951b      	str	r5, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e3f8:	ac19      	add	r4, sp, #100	@ 0x64
 800e3fa:	4621      	mov	r1, r4
 800e3fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e400:	f7ff fa0c 	bl	800d81c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC7_Pin;
 800e404:	2301      	movs	r3, #1
 800e406:	9319      	str	r3, [sp, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800e408:	961a      	str	r6, [sp, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e40a:	951b      	str	r5, [sp, #108]	@ 0x6c
    HAL_GPIO_Init(ADC7_GPIO_Port, &GPIO_InitStruct);
 800e40c:	4621      	mov	r1, r4
 800e40e:	4805      	ldr	r0, [pc, #20]	@ (800e424 <HAL_ADC_MspInit+0xc4>)
 800e410:	f7ff fa04 	bl	800d81c <HAL_GPIO_Init>
}
 800e414:	e7b5      	b.n	800e382 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 800e416:	f7fc fca7 	bl	800ad68 <Error_Handler>
 800e41a:	e7cb      	b.n	800e3b4 <HAL_ADC_MspInit+0x54>
 800e41c:	50040000 	.word	0x50040000
 800e420:	40021000 	.word	0x40021000
 800e424:	48000400 	.word	0x48000400

0800e428 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800e428:	b500      	push	{lr}
 800e42a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e42c:	2300      	movs	r3, #0
 800e42e:	9303      	str	r3, [sp, #12]
 800e430:	9304      	str	r3, [sp, #16]
 800e432:	9305      	str	r3, [sp, #20]
 800e434:	9306      	str	r3, [sp, #24]
 800e436:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 800e438:	6802      	ldr	r2, [r0, #0]
 800e43a:	4b24      	ldr	r3, [pc, #144]	@ (800e4cc <HAL_CAN_MspInit+0xa4>)
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d002      	beq.n	800e446 <HAL_CAN_MspInit+0x1e>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800e440:	b009      	add	sp, #36	@ 0x24
 800e442:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 800e446:	f503 33d6 	add.w	r3, r3, #109568	@ 0x1ac00
 800e44a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e44c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800e450:	659a      	str	r2, [r3, #88]	@ 0x58
 800e452:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e454:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 800e458:	9201      	str	r2, [sp, #4]
 800e45a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e45c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e45e:	f042 0201 	orr.w	r2, r2, #1
 800e462:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	9302      	str	r3, [sp, #8]
 800e46c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e46e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e472:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e474:	2302      	movs	r3, #2
 800e476:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e478:	2303      	movs	r3, #3
 800e47a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800e47c:	2309      	movs	r3, #9
 800e47e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e480:	a903      	add	r1, sp, #12
 800e482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e486:	f7ff f9c9 	bl	800d81c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800e48a:	2200      	movs	r2, #0
 800e48c:	2105      	movs	r1, #5
 800e48e:	2014      	movs	r0, #20
 800e490:	f7fe ff92 	bl	800d3b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800e494:	2014      	movs	r0, #20
 800e496:	f7fe ff9f 	bl	800d3d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800e49a:	2200      	movs	r2, #0
 800e49c:	2105      	movs	r1, #5
 800e49e:	2015      	movs	r0, #21
 800e4a0:	f7fe ff8a 	bl	800d3b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800e4a4:	2015      	movs	r0, #21
 800e4a6:	f7fe ff97 	bl	800d3d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	2106      	movs	r1, #6
 800e4ae:	2013      	movs	r0, #19
 800e4b0:	f7fe ff82 	bl	800d3b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800e4b4:	2013      	movs	r0, #19
 800e4b6:	f7fe ff8f 	bl	800d3d8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 6, 0);
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	2106      	movs	r1, #6
 800e4be:	2016      	movs	r0, #22
 800e4c0:	f7fe ff7a 	bl	800d3b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800e4c4:	2016      	movs	r0, #22
 800e4c6:	f7fe ff87 	bl	800d3d8 <HAL_NVIC_EnableIRQ>
}
 800e4ca:	e7b9      	b.n	800e440 <HAL_CAN_MspInit+0x18>
 800e4cc:	40006400 	.word	0x40006400

0800e4d0 <HAL_CRC_MspInit>:
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800e4d0:	6802      	ldr	r2, [r0, #0]
 800e4d2:	4b09      	ldr	r3, [pc, #36]	@ (800e4f8 <HAL_CRC_MspInit+0x28>)
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d000      	beq.n	800e4da <HAL_CRC_MspInit+0xa>
 800e4d8:	4770      	bx	lr
{
 800e4da:	b082      	sub	sp, #8
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800e4dc:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 800e4e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e4e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e4e6:	649a      	str	r2, [r3, #72]	@ 0x48
 800e4e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e4ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	9b01      	ldr	r3, [sp, #4]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800e4f2:	b002      	add	sp, #8
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	40023000 	.word	0x40023000

0800e4fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e500:	b0a0      	sub	sp, #128	@ 0x80
 800e502:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e504:	2100      	movs	r1, #0
 800e506:	911b      	str	r1, [sp, #108]	@ 0x6c
 800e508:	911c      	str	r1, [sp, #112]	@ 0x70
 800e50a:	911d      	str	r1, [sp, #116]	@ 0x74
 800e50c:	911e      	str	r1, [sp, #120]	@ 0x78
 800e50e:	911f      	str	r1, [sp, #124]	@ 0x7c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800e510:	2254      	movs	r2, #84	@ 0x54
 800e512:	a806      	add	r0, sp, #24
 800e514:	f002 f9df 	bl	80108d6 <memset>
  if(hi2c->Instance==I2C1)
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	4a40      	ldr	r2, [pc, #256]	@ (800e61c <HAL_I2C_MspInit+0x120>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d005      	beq.n	800e52c <HAL_I2C_MspInit+0x30>
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* USER CODE BEGIN I2C1_MspInit 1 */

    /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 800e520:	4a3f      	ldr	r2, [pc, #252]	@ (800e620 <HAL_I2C_MspInit+0x124>)
 800e522:	4293      	cmp	r3, r2
 800e524:	d032      	beq.n	800e58c <HAL_I2C_MspInit+0x90>
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800e526:	b020      	add	sp, #128	@ 0x80
 800e528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800e52c:	2340      	movs	r3, #64	@ 0x40
 800e52e:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800e530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e534:	9311      	str	r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e536:	a806      	add	r0, sp, #24
 800e538:	f000 fe4c 	bl	800f1d4 <HAL_RCCEx_PeriphCLKConfig>
 800e53c:	bb18      	cbnz	r0, 800e586 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e53e:	4c39      	ldr	r4, [pc, #228]	@ (800e624 <HAL_I2C_MspInit+0x128>)
 800e540:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e542:	f043 0301 	orr.w	r3, r3, #1
 800e546:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800e548:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	9301      	str	r3, [sp, #4]
 800e550:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800e552:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800e556:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e558:	2312      	movs	r3, #18
 800e55a:	931c      	str	r3, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e55c:	2301      	movs	r3, #1
 800e55e:	931d      	str	r3, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e560:	2303      	movs	r3, #3
 800e562:	931e      	str	r3, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e564:	2304      	movs	r3, #4
 800e566:	931f      	str	r3, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e568:	a91b      	add	r1, sp, #108	@ 0x6c
 800e56a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e56e:	f7ff f955 	bl	800d81c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e572:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e574:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e578:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e57a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e57c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e580:	9302      	str	r3, [sp, #8]
 800e582:	9b02      	ldr	r3, [sp, #8]
 800e584:	e7cf      	b.n	800e526 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 800e586:	f7fc fbef 	bl	800ad68 <Error_Handler>
 800e58a:	e7d8      	b.n	800e53e <HAL_I2C_MspInit+0x42>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800e58c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e590:	9306      	str	r3, [sp, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_HSI;
 800e592:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e596:	9312      	str	r3, [sp, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800e598:	a806      	add	r0, sp, #24
 800e59a:	f000 fe1b 	bl	800f1d4 <HAL_RCCEx_PeriphCLKConfig>
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d139      	bne.n	800e616 <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800e5a2:	4b20      	ldr	r3, [pc, #128]	@ (800e624 <HAL_I2C_MspInit+0x128>)
 800e5a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e5a6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800e5aa:	659a      	str	r2, [r3, #88]	@ 0x58
 800e5ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e5ae:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 800e5b2:	9203      	str	r2, [sp, #12]
 800e5b4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5b8:	f042 0201 	orr.w	r2, r2, #1
 800e5bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e5be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5c0:	f002 0201 	and.w	r2, r2, #1
 800e5c4:	9204      	str	r2, [sp, #16]
 800e5c6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e5c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e5ca:	f042 0202 	orr.w	r2, r2, #2
 800e5ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 800e5d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5d2:	f003 0302 	and.w	r3, r3, #2
 800e5d6:	9305      	str	r3, [sp, #20]
 800e5d8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800e5da:	2380      	movs	r3, #128	@ 0x80
 800e5dc:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e5de:	f04f 0812 	mov.w	r8, #18
 800e5e2:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5e6:	2701      	movs	r7, #1
 800e5e8:	971d      	str	r7, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e5ea:	2603      	movs	r6, #3
 800e5ec:	961e      	str	r6, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800e5ee:	2504      	movs	r5, #4
 800e5f0:	951f      	str	r5, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5f2:	ac1b      	add	r4, sp, #108	@ 0x6c
 800e5f4:	4621      	mov	r1, r4
 800e5f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e5fa:	f7ff f90f 	bl	800d81c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800e5fe:	2310      	movs	r3, #16
 800e600:	931b      	str	r3, [sp, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e602:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e606:	971d      	str	r7, [sp, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e608:	961e      	str	r6, [sp, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800e60a:	951f      	str	r5, [sp, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e60c:	4621      	mov	r1, r4
 800e60e:	4806      	ldr	r0, [pc, #24]	@ (800e628 <HAL_I2C_MspInit+0x12c>)
 800e610:	f7ff f904 	bl	800d81c <HAL_GPIO_Init>
}
 800e614:	e787      	b.n	800e526 <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 800e616:	f7fc fba7 	bl	800ad68 <Error_Handler>
 800e61a:	e7c2      	b.n	800e5a2 <HAL_I2C_MspInit+0xa6>
 800e61c:	40005400 	.word	0x40005400
 800e620:	40005c00 	.word	0x40005c00
 800e624:	40021000 	.word	0x40021000
 800e628:	48000400 	.word	0x48000400

0800e62c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800e62c:	4b02      	ldr	r3, [pc, #8]	@ (800e638 <HAL_PWREx_GetVoltageRange+0xc>)
 800e62e:	6818      	ldr	r0, [r3, #0]
#endif
}
 800e630:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	40007000 	.word	0x40007000

0800e63c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e63c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800e640:	d00f      	beq.n	800e662 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800e642:	4b1f      	ldr	r3, [pc, #124]	@ (800e6c0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e64a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e64e:	d034      	beq.n	800e6ba <HAL_PWREx_ControlVoltageScaling+0x7e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800e650:	4a1b      	ldr	r2, [pc, #108]	@ (800e6c0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800e652:	6813      	ldr	r3, [r2, #0]
 800e654:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e658:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e65c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800e65e:	2000      	movs	r0, #0
 800e660:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800e662:	4b17      	ldr	r3, [pc, #92]	@ (800e6c0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e66a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e66e:	d020      	beq.n	800e6b2 <HAL_PWREx_ControlVoltageScaling+0x76>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800e670:	4a13      	ldr	r2, [pc, #76]	@ (800e6c0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800e672:	6813      	ldr	r3, [r2, #0]
 800e674:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800e678:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e67c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800e67e:	4b11      	ldr	r3, [pc, #68]	@ (800e6c4 <HAL_PWREx_ControlVoltageScaling+0x88>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2232      	movs	r2, #50	@ 0x32
 800e684:	fb02 f303 	mul.w	r3, r2, r3
 800e688:	4a0f      	ldr	r2, [pc, #60]	@ (800e6c8 <HAL_PWREx_ControlVoltageScaling+0x8c>)
 800e68a:	fba2 2303 	umull	r2, r3, r2, r3
 800e68e:	0c9b      	lsrs	r3, r3, #18
 800e690:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e692:	e000      	b.n	800e696 <HAL_PWREx_ControlVoltageScaling+0x5a>
        wait_loop_index--;
 800e694:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800e696:	4a0a      	ldr	r2, [pc, #40]	@ (800e6c0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800e698:	6952      	ldr	r2, [r2, #20]
 800e69a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800e69e:	d001      	beq.n	800e6a4 <HAL_PWREx_ControlVoltageScaling+0x68>
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d1f7      	bne.n	800e694 <HAL_PWREx_ControlVoltageScaling+0x58>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800e6a4:	4b06      	ldr	r3, [pc, #24]	@ (800e6c0 <HAL_PWREx_ControlVoltageScaling+0x84>)
 800e6a6:	695b      	ldr	r3, [r3, #20]
 800e6a8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800e6ac:	d103      	bne.n	800e6b6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  return HAL_OK;
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	4770      	bx	lr
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	4770      	bx	lr
        return HAL_TIMEOUT;
 800e6b6:	2003      	movs	r0, #3
 800e6b8:	4770      	bx	lr
  return HAL_OK;
 800e6ba:	2000      	movs	r0, #0
}
 800e6bc:	4770      	bx	lr
 800e6be:	bf00      	nop
 800e6c0:	40007000 	.word	0x40007000
 800e6c4:	20000034 	.word	0x20000034
 800e6c8:	431bde83 	.word	0x431bde83

0800e6cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800e6cc:	b530      	push	{r4, r5, lr}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800e6d2:	4b20      	ldr	r3, [pc, #128]	@ (800e754 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800e6d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6d6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800e6da:	d00b      	beq.n	800e6f4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800e6dc:	f7ff ffa6 	bl	800e62c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e6e0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800e6e4:	d017      	beq.n	800e716 <RCC_SetFlashLatencyFromMSIRange+0x4a>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800e6e6:	2c80      	cmp	r4, #128	@ 0x80
 800e6e8:	d81f      	bhi.n	800e72a <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800e6ea:	d02d      	beq.n	800e748 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800e6ec:	2c70      	cmp	r4, #112	@ 0x70
 800e6ee:	d02d      	beq.n	800e74c <RCC_SetFlashLatencyFromMSIRange+0x80>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	e01b      	b.n	800e72c <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800e6f4:	4d17      	ldr	r5, [pc, #92]	@ (800e754 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800e6f6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800e6f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e6fc:	65ab      	str	r3, [r5, #88]	@ 0x58
 800e6fe:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800e700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e704:	9301      	str	r3, [sp, #4]
 800e706:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 800e708:	f7ff ff90 	bl	800e62c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800e70c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800e70e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e712:	65ab      	str	r3, [r5, #88]	@ 0x58
 800e714:	e7e4      	b.n	800e6e0 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 800e716:	2c80      	cmp	r4, #128	@ 0x80
 800e718:	d903      	bls.n	800e722 <RCC_SetFlashLatencyFromMSIRange+0x56>
      if(msirange > RCC_MSIRANGE_10)
 800e71a:	2ca0      	cmp	r4, #160	@ 0xa0
 800e71c:	d903      	bls.n	800e726 <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800e71e:	2102      	movs	r1, #2
 800e720:	e004      	b.n	800e72c <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800e722:	2100      	movs	r1, #0
 800e724:	e002      	b.n	800e72c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800e726:	2101      	movs	r1, #1
 800e728:	e000      	b.n	800e72c <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 800e72a:	2103      	movs	r1, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800e72c:	4a0a      	ldr	r2, [pc, #40]	@ (800e758 <RCC_SetFlashLatencyFromMSIRange+0x8c>)
 800e72e:	6813      	ldr	r3, [r2, #0]
 800e730:	f023 0307 	bic.w	r3, r3, #7
 800e734:	430b      	orrs	r3, r1
 800e736:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800e738:	6813      	ldr	r3, [r2, #0]
 800e73a:	f003 0307 	and.w	r3, r3, #7
 800e73e:	428b      	cmp	r3, r1
 800e740:	d106      	bne.n	800e750 <RCC_SetFlashLatencyFromMSIRange+0x84>
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e742:	2000      	movs	r0, #0
}
 800e744:	b003      	add	sp, #12
 800e746:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 800e748:	2102      	movs	r1, #2
 800e74a:	e7ef      	b.n	800e72c <RCC_SetFlashLatencyFromMSIRange+0x60>
        latency = FLASH_LATENCY_1; /* 1WS */
 800e74c:	2101      	movs	r1, #1
 800e74e:	e7ed      	b.n	800e72c <RCC_SetFlashLatencyFromMSIRange+0x60>
    return HAL_ERROR;
 800e750:	2001      	movs	r0, #1
 800e752:	e7f7      	b.n	800e744 <RCC_SetFlashLatencyFromMSIRange+0x78>
 800e754:	40021000 	.word	0x40021000
 800e758:	40022000 	.word	0x40022000

0800e75c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e75c:	4a25      	ldr	r2, [pc, #148]	@ (800e7f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e75e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e760:	68d2      	ldr	r2, [r2, #12]
 800e762:	f002 0203 	and.w	r2, r2, #3
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e766:	f013 030c 	ands.w	r3, r3, #12
 800e76a:	d009      	beq.n	800e780 <HAL_RCC_GetSysClockFreq+0x24>
 800e76c:	2b0c      	cmp	r3, #12
 800e76e:	d005      	beq.n	800e77c <HAL_RCC_GetSysClockFreq+0x20>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800e770:	2b04      	cmp	r3, #4
 800e772:	d03b      	beq.n	800e7ec <HAL_RCC_GetSysClockFreq+0x90>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800e774:	2b08      	cmp	r3, #8
 800e776:	d03b      	beq.n	800e7f0 <HAL_RCC_GetSysClockFreq+0x94>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800e778:	2000      	movs	r0, #0
 800e77a:	e00f      	b.n	800e79c <HAL_RCC_GetSysClockFreq+0x40>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800e77c:	2a01      	cmp	r2, #1
 800e77e:	d1f7      	bne.n	800e770 <HAL_RCC_GetSysClockFreq+0x14>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800e780:	4a1c      	ldr	r2, [pc, #112]	@ (800e7f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e782:	6812      	ldr	r2, [r2, #0]
 800e784:	f012 0f08 	tst.w	r2, #8
 800e788:	d10c      	bne.n	800e7a4 <HAL_RCC_GetSysClockFreq+0x48>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800e78a:	4a1a      	ldr	r2, [pc, #104]	@ (800e7f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e78c:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800e790:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 800e794:	4918      	ldr	r1, [pc, #96]	@ (800e7f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800e796:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e79a:	b113      	cbz	r3, 800e7a2 <HAL_RCC_GetSysClockFreq+0x46>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800e79c:	2b0c      	cmp	r3, #12
 800e79e:	d006      	beq.n	800e7ae <HAL_RCC_GetSysClockFreq+0x52>
 800e7a0:	2000      	movs	r0, #0
}
 800e7a2:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800e7a4:	4a13      	ldr	r2, [pc, #76]	@ (800e7f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e7a6:	6812      	ldr	r2, [r2, #0]
 800e7a8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800e7ac:	e7f2      	b.n	800e794 <HAL_RCC_GetSysClockFreq+0x38>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e7ae:	4b11      	ldr	r3, [pc, #68]	@ (800e7f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800e7b6:	2b02      	cmp	r3, #2
 800e7b8:	d016      	beq.n	800e7e8 <HAL_RCC_GetSysClockFreq+0x8c>
 800e7ba:	2b03      	cmp	r3, #3
 800e7bc:	d100      	bne.n	800e7c0 <HAL_RCC_GetSysClockFreq+0x64>
      pllvco = HSE_VALUE;
 800e7be:	480f      	ldr	r0, [pc, #60]	@ (800e7fc <HAL_RCC_GetSysClockFreq+0xa0>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e7c0:	490c      	ldr	r1, [pc, #48]	@ (800e7f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800e7c2:	68ca      	ldr	r2, [r1, #12]
 800e7c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800e7c8:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800e7ca:	68cb      	ldr	r3, [r1, #12]
 800e7cc:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800e7d0:	fb00 f303 	mul.w	r3, r0, r3
 800e7d4:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e7d8:	68c8      	ldr	r0, [r1, #12]
 800e7da:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800e7de:	3001      	adds	r0, #1
 800e7e0:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800e7e2:	fbb3 f0f0 	udiv	r0, r3, r0
 800e7e6:	4770      	bx	lr
    switch (pllsource)
 800e7e8:	4805      	ldr	r0, [pc, #20]	@ (800e800 <HAL_RCC_GetSysClockFreq+0xa4>)
 800e7ea:	e7e9      	b.n	800e7c0 <HAL_RCC_GetSysClockFreq+0x64>
    sysclockfreq = HSI_VALUE;
 800e7ec:	4804      	ldr	r0, [pc, #16]	@ (800e800 <HAL_RCC_GetSysClockFreq+0xa4>)
 800e7ee:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800e7f0:	4802      	ldr	r0, [pc, #8]	@ (800e7fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800e7f2:	4770      	bx	lr
 800e7f4:	40021000 	.word	0x40021000
 800e7f8:	08010e5c 	.word	0x08010e5c
 800e7fc:	007a1200 	.word	0x007a1200
 800e800:	00f42400 	.word	0x00f42400

0800e804 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800e804:	2800      	cmp	r0, #0
 800e806:	f000 831c 	beq.w	800ee42 <HAL_RCC_OscConfig+0x63e>
{
 800e80a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e80c:	b083      	sub	sp, #12
 800e80e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e810:	4b96      	ldr	r3, [pc, #600]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e812:	689d      	ldr	r5, [r3, #8]
 800e814:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e818:	68de      	ldr	r6, [r3, #12]
 800e81a:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e81e:	6803      	ldr	r3, [r0, #0]
 800e820:	f013 0f10 	tst.w	r3, #16
 800e824:	d05a      	beq.n	800e8dc <HAL_RCC_OscConfig+0xd8>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800e826:	b1e5      	cbz	r5, 800e862 <HAL_RCC_OscConfig+0x5e>
 800e828:	2d0c      	cmp	r5, #12
 800e82a:	d018      	beq.n	800e85e <HAL_RCC_OscConfig+0x5a>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800e82c:	69a3      	ldr	r3, [r4, #24]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f000 80bb 	beq.w	800e9aa <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 800e834:	4a8d      	ldr	r2, [pc, #564]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e836:	6813      	ldr	r3, [r2, #0]
 800e838:	f043 0301 	orr.w	r3, r3, #1
 800e83c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e83e:	f7fd fc27 	bl	800c090 <HAL_GetTick>
 800e842:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800e844:	4b89      	ldr	r3, [pc, #548]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f013 0f02 	tst.w	r3, #2
 800e84c:	f040 809a 	bne.w	800e984 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e850:	f7fd fc1e 	bl	800c090 <HAL_GetTick>
 800e854:	1bc0      	subs	r0, r0, r7
 800e856:	2802      	cmp	r0, #2
 800e858:	d9f4      	bls.n	800e844 <HAL_RCC_OscConfig+0x40>
            return HAL_TIMEOUT;
 800e85a:	2003      	movs	r0, #3
 800e85c:	e2fc      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800e85e:	2e01      	cmp	r6, #1
 800e860:	d1e4      	bne.n	800e82c <HAL_RCC_OscConfig+0x28>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e862:	4b82      	ldr	r3, [pc, #520]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f013 0f02 	tst.w	r3, #2
 800e86a:	d003      	beq.n	800e874 <HAL_RCC_OscConfig+0x70>
 800e86c:	69a3      	ldr	r3, [r4, #24]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f000 82e9 	beq.w	800ee46 <HAL_RCC_OscConfig+0x642>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e874:	6a20      	ldr	r0, [r4, #32]
 800e876:	4b7d      	ldr	r3, [pc, #500]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f013 0f08 	tst.w	r3, #8
 800e87e:	d05b      	beq.n	800e938 <HAL_RCC_OscConfig+0x134>
 800e880:	4b7a      	ldr	r3, [pc, #488]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e888:	4298      	cmp	r0, r3
 800e88a:	d85c      	bhi.n	800e946 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e88c:	4b77      	ldr	r3, [pc, #476]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	f042 0208 	orr.w	r2, r2, #8
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800e89c:	6a21      	ldr	r1, [r4, #32]
 800e89e:	430a      	orrs	r2, r1
 800e8a0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e8a2:	685a      	ldr	r2, [r3, #4]
 800e8a4:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800e8a8:	69e1      	ldr	r1, [r4, #28]
 800e8aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e8ae:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e8b0:	2d00      	cmp	r5, #0
 800e8b2:	d060      	beq.n	800e976 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e8b4:	f7ff ff52 	bl	800e75c <HAL_RCC_GetSysClockFreq>
 800e8b8:	4b6c      	ldr	r3, [pc, #432]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800e8c0:	4a6b      	ldr	r2, [pc, #428]	@ (800ea70 <HAL_RCC_OscConfig+0x26c>)
 800e8c2:	5cd3      	ldrb	r3, [r2, r3]
 800e8c4:	f003 031f 	and.w	r3, r3, #31
 800e8c8:	40d8      	lsrs	r0, r3
 800e8ca:	4b6a      	ldr	r3, [pc, #424]	@ (800ea74 <HAL_RCC_OscConfig+0x270>)
 800e8cc:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800e8ce:	4b6a      	ldr	r3, [pc, #424]	@ (800ea78 <HAL_RCC_OscConfig+0x274>)
 800e8d0:	6818      	ldr	r0, [r3, #0]
 800e8d2:	f000 ff61 	bl	800f798 <HAL_InitTick>
        if(status != HAL_OK)
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	f040 82be 	bne.w	800ee58 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	f013 0f01 	tst.w	r3, #1
 800e8e2:	f000 8081 	beq.w	800e9e8 <HAL_RCC_OscConfig+0x1e4>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800e8e6:	2d08      	cmp	r5, #8
 800e8e8:	d075      	beq.n	800e9d6 <HAL_RCC_OscConfig+0x1d2>
 800e8ea:	2d0c      	cmp	r5, #12
 800e8ec:	d071      	beq.n	800e9d2 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e8ee:	6863      	ldr	r3, [r4, #4]
 800e8f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8f4:	f000 8097 	beq.w	800ea26 <HAL_RCC_OscConfig+0x222>
 800e8f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e8fc:	f000 8099 	beq.w	800ea32 <HAL_RCC_OscConfig+0x22e>
 800e900:	4b5a      	ldr	r3, [pc, #360]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800e908:	601a      	str	r2, [r3, #0]
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800e910:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e912:	6863      	ldr	r3, [r4, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	f000 8099 	beq.w	800ea4c <HAL_RCC_OscConfig+0x248>
        tickstart = HAL_GetTick();
 800e91a:	f7fd fbb9 	bl	800c090 <HAL_GetTick>
 800e91e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e920:	4b52      	ldr	r3, [pc, #328]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800e928:	d15e      	bne.n	800e9e8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800e92a:	f7fd fbb1 	bl	800c090 <HAL_GetTick>
 800e92e:	1bc0      	subs	r0, r0, r7
 800e930:	2864      	cmp	r0, #100	@ 0x64
 800e932:	d9f5      	bls.n	800e920 <HAL_RCC_OscConfig+0x11c>
            return HAL_TIMEOUT;
 800e934:	2003      	movs	r0, #3
 800e936:	e28f      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800e938:	4b4c      	ldr	r3, [pc, #304]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e93a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e93e:	091b      	lsrs	r3, r3, #4
 800e940:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e944:	e7a0      	b.n	800e888 <HAL_RCC_OscConfig+0x84>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e946:	f7ff fec1 	bl	800e6cc <RCC_SetFlashLatencyFromMSIRange>
 800e94a:	2800      	cmp	r0, #0
 800e94c:	f040 827d 	bne.w	800ee4a <HAL_RCC_OscConfig+0x646>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e950:	4b46      	ldr	r3, [pc, #280]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	f042 0208 	orr.w	r2, r2, #8
 800e958:	601a      	str	r2, [r3, #0]
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800e960:	6a21      	ldr	r1, [r4, #32]
 800e962:	430a      	orrs	r2, r1
 800e964:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e966:	685a      	ldr	r2, [r3, #4]
 800e968:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800e96c:	69e1      	ldr	r1, [r4, #28]
 800e96e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e972:	605a      	str	r2, [r3, #4]
 800e974:	e79e      	b.n	800e8b4 <HAL_RCC_OscConfig+0xb0>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800e976:	6a20      	ldr	r0, [r4, #32]
 800e978:	f7ff fea8 	bl	800e6cc <RCC_SetFlashLatencyFromMSIRange>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d099      	beq.n	800e8b4 <HAL_RCC_OscConfig+0xb0>
              return HAL_ERROR;
 800e980:	2001      	movs	r0, #1
 800e982:	e269      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e984:	4b39      	ldr	r3, [pc, #228]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	f042 0208 	orr.w	r2, r2, #8
 800e98c:	601a      	str	r2, [r3, #0]
 800e98e:	681a      	ldr	r2, [r3, #0]
 800e990:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800e994:	6a21      	ldr	r1, [r4, #32]
 800e996:	430a      	orrs	r2, r1
 800e998:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e99a:	685a      	ldr	r2, [r3, #4]
 800e99c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800e9a0:	69e1      	ldr	r1, [r4, #28]
 800e9a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800e9a6:	605a      	str	r2, [r3, #4]
 800e9a8:	e798      	b.n	800e8dc <HAL_RCC_OscConfig+0xd8>
        __HAL_RCC_MSI_DISABLE();
 800e9aa:	4a30      	ldr	r2, [pc, #192]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e9ac:	6813      	ldr	r3, [r2, #0]
 800e9ae:	f023 0301 	bic.w	r3, r3, #1
 800e9b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800e9b4:	f7fd fb6c 	bl	800c090 <HAL_GetTick>
 800e9b8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800e9ba:	4b2c      	ldr	r3, [pc, #176]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f013 0f02 	tst.w	r3, #2
 800e9c2:	d08b      	beq.n	800e8dc <HAL_RCC_OscConfig+0xd8>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800e9c4:	f7fd fb64 	bl	800c090 <HAL_GetTick>
 800e9c8:	1bc0      	subs	r0, r0, r7
 800e9ca:	2802      	cmp	r0, #2
 800e9cc:	d9f5      	bls.n	800e9ba <HAL_RCC_OscConfig+0x1b6>
            return HAL_TIMEOUT;
 800e9ce:	2003      	movs	r0, #3
 800e9d0:	e242      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e9d2:	2e03      	cmp	r6, #3
 800e9d4:	d18b      	bne.n	800e8ee <HAL_RCC_OscConfig+0xea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e9d6:	4b25      	ldr	r3, [pc, #148]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800e9de:	d003      	beq.n	800e9e8 <HAL_RCC_OscConfig+0x1e4>
 800e9e0:	6863      	ldr	r3, [r4, #4]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f000 8233 	beq.w	800ee4e <HAL_RCC_OscConfig+0x64a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e9e8:	6823      	ldr	r3, [r4, #0]
 800e9ea:	f013 0f02 	tst.w	r3, #2
 800e9ee:	d058      	beq.n	800eaa2 <HAL_RCC_OscConfig+0x29e>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800e9f0:	2d04      	cmp	r5, #4
 800e9f2:	d045      	beq.n	800ea80 <HAL_RCC_OscConfig+0x27c>
 800e9f4:	2d0c      	cmp	r5, #12
 800e9f6:	d041      	beq.n	800ea7c <HAL_RCC_OscConfig+0x278>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800e9f8:	68e3      	ldr	r3, [r4, #12]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d077      	beq.n	800eaee <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_ENABLE();
 800e9fe:	4a1b      	ldr	r2, [pc, #108]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800ea00:	6813      	ldr	r3, [r2, #0]
 800ea02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea06:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ea08:	f7fd fb42 	bl	800c090 <HAL_GetTick>
 800ea0c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ea0e:	4b17      	ldr	r3, [pc, #92]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800ea16:	d161      	bne.n	800eadc <HAL_RCC_OscConfig+0x2d8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ea18:	f7fd fb3a 	bl	800c090 <HAL_GetTick>
 800ea1c:	1b80      	subs	r0, r0, r6
 800ea1e:	2802      	cmp	r0, #2
 800ea20:	d9f5      	bls.n	800ea0e <HAL_RCC_OscConfig+0x20a>
            return HAL_TIMEOUT;
 800ea22:	2003      	movs	r0, #3
 800ea24:	e218      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ea26:	4a11      	ldr	r2, [pc, #68]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800ea28:	6813      	ldr	r3, [r2, #0]
 800ea2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	e76f      	b.n	800e912 <HAL_RCC_OscConfig+0x10e>
 800ea32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea36:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800ea40:	601a      	str	r2, [r3, #0]
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800ea48:	601a      	str	r2, [r3, #0]
 800ea4a:	e762      	b.n	800e912 <HAL_RCC_OscConfig+0x10e>
        tickstart = HAL_GetTick();
 800ea4c:	f7fd fb20 	bl	800c090 <HAL_GetTick>
 800ea50:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ea52:	4b06      	ldr	r3, [pc, #24]	@ (800ea6c <HAL_RCC_OscConfig+0x268>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800ea5a:	d0c5      	beq.n	800e9e8 <HAL_RCC_OscConfig+0x1e4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea5c:	f7fd fb18 	bl	800c090 <HAL_GetTick>
 800ea60:	1bc0      	subs	r0, r0, r7
 800ea62:	2864      	cmp	r0, #100	@ 0x64
 800ea64:	d9f5      	bls.n	800ea52 <HAL_RCC_OscConfig+0x24e>
            return HAL_TIMEOUT;
 800ea66:	2003      	movs	r0, #3
 800ea68:	e1f6      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
 800ea6a:	bf00      	nop
 800ea6c:	40021000 	.word	0x40021000
 800ea70:	08010e94 	.word	0x08010e94
 800ea74:	20000034 	.word	0x20000034
 800ea78:	20000010 	.word	0x20000010
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ea7c:	2e02      	cmp	r6, #2
 800ea7e:	d1bb      	bne.n	800e9f8 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ea80:	4ba4      	ldr	r3, [pc, #656]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800ea88:	d003      	beq.n	800ea92 <HAL_RCC_OscConfig+0x28e>
 800ea8a:	68e3      	ldr	r3, [r4, #12]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	f000 81e0 	beq.w	800ee52 <HAL_RCC_OscConfig+0x64e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ea92:	4aa0      	ldr	r2, [pc, #640]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ea94:	6853      	ldr	r3, [r2, #4]
 800ea96:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800ea9a:	6921      	ldr	r1, [r4, #16]
 800ea9c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800eaa0:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	f013 0f08 	tst.w	r3, #8
 800eaa8:	d04c      	beq.n	800eb44 <HAL_RCC_OscConfig+0x340>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eaaa:	6963      	ldr	r3, [r4, #20]
 800eaac:	b39b      	cbz	r3, 800eb16 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_LSI_ENABLE();
 800eaae:	4a99      	ldr	r2, [pc, #612]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eab0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800eab4:	f043 0301 	orr.w	r3, r3, #1
 800eab8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800eabc:	f7fd fae8 	bl	800c090 <HAL_GetTick>
 800eac0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800eac2:	4b94      	ldr	r3, [pc, #592]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eac8:	f013 0f02 	tst.w	r3, #2
 800eacc:	d13a      	bne.n	800eb44 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eace:	f7fd fadf 	bl	800c090 <HAL_GetTick>
 800ead2:	1b80      	subs	r0, r0, r6
 800ead4:	2802      	cmp	r0, #2
 800ead6:	d9f4      	bls.n	800eac2 <HAL_RCC_OscConfig+0x2be>
          return HAL_TIMEOUT;
 800ead8:	2003      	movs	r0, #3
 800eada:	e1bd      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eadc:	4a8d      	ldr	r2, [pc, #564]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eade:	6853      	ldr	r3, [r2, #4]
 800eae0:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800eae4:	6921      	ldr	r1, [r4, #16]
 800eae6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800eaea:	6053      	str	r3, [r2, #4]
 800eaec:	e7d9      	b.n	800eaa2 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_HSI_DISABLE();
 800eaee:	4a89      	ldr	r2, [pc, #548]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eaf0:	6813      	ldr	r3, [r2, #0]
 800eaf2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eaf6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800eaf8:	f7fd faca 	bl	800c090 <HAL_GetTick>
 800eafc:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800eafe:	4b85      	ldr	r3, [pc, #532]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800eb06:	d0cc      	beq.n	800eaa2 <HAL_RCC_OscConfig+0x29e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb08:	f7fd fac2 	bl	800c090 <HAL_GetTick>
 800eb0c:	1b80      	subs	r0, r0, r6
 800eb0e:	2802      	cmp	r0, #2
 800eb10:	d9f5      	bls.n	800eafe <HAL_RCC_OscConfig+0x2fa>
            return HAL_TIMEOUT;
 800eb12:	2003      	movs	r0, #3
 800eb14:	e1a0      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_LSI_DISABLE();
 800eb16:	4a7f      	ldr	r2, [pc, #508]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eb18:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800eb1c:	f023 0301 	bic.w	r3, r3, #1
 800eb20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800eb24:	f7fd fab4 	bl	800c090 <HAL_GetTick>
 800eb28:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800eb2a:	4b7a      	ldr	r3, [pc, #488]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eb2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eb30:	f013 0f02 	tst.w	r3, #2
 800eb34:	d006      	beq.n	800eb44 <HAL_RCC_OscConfig+0x340>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800eb36:	f7fd faab 	bl	800c090 <HAL_GetTick>
 800eb3a:	1b80      	subs	r0, r0, r6
 800eb3c:	2802      	cmp	r0, #2
 800eb3e:	d9f4      	bls.n	800eb2a <HAL_RCC_OscConfig+0x326>
          return HAL_TIMEOUT;
 800eb40:	2003      	movs	r0, #3
 800eb42:	e189      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	f013 0f04 	tst.w	r3, #4
 800eb4a:	d07a      	beq.n	800ec42 <HAL_RCC_OscConfig+0x43e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800eb4c:	4b71      	ldr	r3, [pc, #452]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eb4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb50:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800eb54:	d136      	bne.n	800ebc4 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb56:	4b6f      	ldr	r3, [pc, #444]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eb58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800eb5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800eb5e:	659a      	str	r2, [r3, #88]	@ 0x58
 800eb60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eb62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eb66:	9301      	str	r3, [sp, #4]
 800eb68:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800eb6a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800eb6c:	4b6a      	ldr	r3, [pc, #424]	@ (800ed18 <HAL_RCC_OscConfig+0x514>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800eb74:	d028      	beq.n	800ebc8 <HAL_RCC_OscConfig+0x3c4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb76:	68a3      	ldr	r3, [r4, #8]
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d039      	beq.n	800ebf0 <HAL_RCC_OscConfig+0x3ec>
 800eb7c:	2b05      	cmp	r3, #5
 800eb7e:	d03f      	beq.n	800ec00 <HAL_RCC_OscConfig+0x3fc>
 800eb80:	4b64      	ldr	r3, [pc, #400]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eb82:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800eb86:	f022 0201 	bic.w	r2, r2, #1
 800eb8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800eb8e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800eb92:	f022 0204 	bic.w	r2, r2, #4
 800eb96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800eb9a:	68a3      	ldr	r3, [r4, #8]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d03d      	beq.n	800ec1c <HAL_RCC_OscConfig+0x418>
      tickstart = HAL_GetTick();
 800eba0:	f7fd fa76 	bl	800c090 <HAL_GetTick>
 800eba4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800eba6:	4b5b      	ldr	r3, [pc, #364]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800eba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebac:	f013 0f02 	tst.w	r3, #2
 800ebb0:	d146      	bne.n	800ec40 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ebb2:	f7fd fa6d 	bl	800c090 <HAL_GetTick>
 800ebb6:	1bc0      	subs	r0, r0, r7
 800ebb8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ebbc:	4298      	cmp	r0, r3
 800ebbe:	d9f2      	bls.n	800eba6 <HAL_RCC_OscConfig+0x3a2>
          return HAL_TIMEOUT;
 800ebc0:	2003      	movs	r0, #3
 800ebc2:	e149      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
    FlagStatus       pwrclkchanged = RESET;
 800ebc4:	2600      	movs	r6, #0
 800ebc6:	e7d1      	b.n	800eb6c <HAL_RCC_OscConfig+0x368>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ebc8:	4a53      	ldr	r2, [pc, #332]	@ (800ed18 <HAL_RCC_OscConfig+0x514>)
 800ebca:	6813      	ldr	r3, [r2, #0]
 800ebcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ebd0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800ebd2:	f7fd fa5d 	bl	800c090 <HAL_GetTick>
 800ebd6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ebd8:	4b4f      	ldr	r3, [pc, #316]	@ (800ed18 <HAL_RCC_OscConfig+0x514>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800ebe0:	d1c9      	bne.n	800eb76 <HAL_RCC_OscConfig+0x372>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebe2:	f7fd fa55 	bl	800c090 <HAL_GetTick>
 800ebe6:	1bc0      	subs	r0, r0, r7
 800ebe8:	2802      	cmp	r0, #2
 800ebea:	d9f5      	bls.n	800ebd8 <HAL_RCC_OscConfig+0x3d4>
          return HAL_TIMEOUT;
 800ebec:	2003      	movs	r0, #3
 800ebee:	e133      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebf0:	4a48      	ldr	r2, [pc, #288]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ebf2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800ebf6:	f043 0301 	orr.w	r3, r3, #1
 800ebfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ebfe:	e7cc      	b.n	800eb9a <HAL_RCC_OscConfig+0x396>
 800ec00:	4b44      	ldr	r3, [pc, #272]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ec02:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ec06:	f042 0204 	orr.w	r2, r2, #4
 800ec0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800ec0e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ec12:	f042 0201 	orr.w	r2, r2, #1
 800ec16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800ec1a:	e7be      	b.n	800eb9a <HAL_RCC_OscConfig+0x396>
      tickstart = HAL_GetTick();
 800ec1c:	f7fd fa38 	bl	800c090 <HAL_GetTick>
 800ec20:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ec22:	4b3c      	ldr	r3, [pc, #240]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ec24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec28:	f013 0f02 	tst.w	r3, #2
 800ec2c:	d008      	beq.n	800ec40 <HAL_RCC_OscConfig+0x43c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ec2e:	f7fd fa2f 	bl	800c090 <HAL_GetTick>
 800ec32:	1bc0      	subs	r0, r0, r7
 800ec34:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ec38:	4298      	cmp	r0, r3
 800ec3a:	d9f2      	bls.n	800ec22 <HAL_RCC_OscConfig+0x41e>
          return HAL_TIMEOUT;
 800ec3c:	2003      	movs	r0, #3
 800ec3e:	e10b      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
    if(pwrclkchanged == SET)
 800ec40:	b9e6      	cbnz	r6, 800ec7c <HAL_RCC_OscConfig+0x478>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ec42:	6823      	ldr	r3, [r4, #0]
 800ec44:	f013 0f20 	tst.w	r3, #32
 800ec48:	d035      	beq.n	800ecb6 <HAL_RCC_OscConfig+0x4b2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ec4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ec4c:	b1e3      	cbz	r3, 800ec88 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 800ec4e:	4a31      	ldr	r2, [pc, #196]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ec50:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800ec54:	f043 0301 	orr.w	r3, r3, #1
 800ec58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800ec5c:	f7fd fa18 	bl	800c090 <HAL_GetTick>
 800ec60:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ec62:	4b2c      	ldr	r3, [pc, #176]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ec64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ec68:	f013 0f02 	tst.w	r3, #2
 800ec6c:	d123      	bne.n	800ecb6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ec6e:	f7fd fa0f 	bl	800c090 <HAL_GetTick>
 800ec72:	1b80      	subs	r0, r0, r6
 800ec74:	2802      	cmp	r0, #2
 800ec76:	d9f4      	bls.n	800ec62 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 800ec78:	2003      	movs	r0, #3
 800ec7a:	e0ed      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ec7c:	4a25      	ldr	r2, [pc, #148]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ec7e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ec80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ec84:	6593      	str	r3, [r2, #88]	@ 0x58
 800ec86:	e7dc      	b.n	800ec42 <HAL_RCC_OscConfig+0x43e>
      __HAL_RCC_HSI48_DISABLE();
 800ec88:	4a22      	ldr	r2, [pc, #136]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ec8a:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 800ec8e:	f023 0301 	bic.w	r3, r3, #1
 800ec92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800ec96:	f7fd f9fb 	bl	800c090 <HAL_GetTick>
 800ec9a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ec9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ec9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800eca2:	f013 0f02 	tst.w	r3, #2
 800eca6:	d006      	beq.n	800ecb6 <HAL_RCC_OscConfig+0x4b2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eca8:	f7fd f9f2 	bl	800c090 <HAL_GetTick>
 800ecac:	1b80      	subs	r0, r0, r6
 800ecae:	2802      	cmp	r0, #2
 800ecb0:	d9f4      	bls.n	800ec9c <HAL_RCC_OscConfig+0x498>
          return HAL_TIMEOUT;
 800ecb2:	2003      	movs	r0, #3
 800ecb4:	e0d0      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ecb6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 80cc 	beq.w	800ee56 <HAL_RCC_OscConfig+0x652>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	d017      	beq.n	800ecf2 <HAL_RCC_OscConfig+0x4ee>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ecc2:	2d0c      	cmp	r5, #12
 800ecc4:	f000 80cc 	beq.w	800ee60 <HAL_RCC_OscConfig+0x65c>
        __HAL_RCC_PLL_DISABLE();
 800ecc8:	4a12      	ldr	r2, [pc, #72]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ecca:	6813      	ldr	r3, [r2, #0]
 800eccc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ecd0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800ecd2:	f7fd f9dd 	bl	800c090 <HAL_GetTick>
 800ecd6:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ecd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800ece0:	f000 80a8 	beq.w	800ee34 <HAL_RCC_OscConfig+0x630>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ece4:	f7fd f9d4 	bl	800c090 <HAL_GetTick>
 800ece8:	1b00      	subs	r0, r0, r4
 800ecea:	2802      	cmp	r0, #2
 800ecec:	d9f4      	bls.n	800ecd8 <HAL_RCC_OscConfig+0x4d4>
            return HAL_TIMEOUT;
 800ecee:	2003      	movs	r0, #3
 800ecf0:	e0b2      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
      pll_config = RCC->PLLCFGR;
 800ecf2:	4b08      	ldr	r3, [pc, #32]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ecf4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ecf6:	f003 0103 	and.w	r1, r3, #3
 800ecfa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ecfc:	4291      	cmp	r1, r2
 800ecfe:	d00d      	beq.n	800ed1c <HAL_RCC_OscConfig+0x518>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ed00:	2d0c      	cmp	r5, #12
 800ed02:	f000 80ab 	beq.w	800ee5c <HAL_RCC_OscConfig+0x658>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ed06:	4b03      	ldr	r3, [pc, #12]	@ (800ed14 <HAL_RCC_OscConfig+0x510>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 800ed0e:	d02f      	beq.n	800ed70 <HAL_RCC_OscConfig+0x56c>
            return HAL_ERROR;
 800ed10:	2001      	movs	r0, #1
 800ed12:	e0a1      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
 800ed14:	40021000 	.word	0x40021000
 800ed18:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ed1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ed20:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ed22:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed24:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800ed28:	d1ea      	bne.n	800ed00 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ed2a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800ed2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ed30:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800ed34:	d1e4      	bne.n	800ed00 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ed36:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800ed3a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ed3c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800ed40:	d1de      	bne.n	800ed00 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ed42:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 800ed46:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800ed48:	0852      	lsrs	r2, r2, #1
 800ed4a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ed4c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800ed50:	d1d6      	bne.n	800ed00 <HAL_RCC_OscConfig+0x4fc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ed52:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800ed56:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ed58:	0852      	lsrs	r2, r2, #1
 800ed5a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ed5c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800ed60:	d1ce      	bne.n	800ed00 <HAL_RCC_OscConfig+0x4fc>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ed62:	4b40      	ldr	r3, [pc, #256]	@ (800ee64 <HAL_RCC_OscConfig+0x660>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800ed6a:	d049      	beq.n	800ee00 <HAL_RCC_OscConfig+0x5fc>
  return HAL_OK;
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	e073      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_DISABLE();
 800ed70:	4a3c      	ldr	r2, [pc, #240]	@ (800ee64 <HAL_RCC_OscConfig+0x660>)
 800ed72:	6813      	ldr	r3, [r2, #0]
 800ed74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ed78:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800ed7a:	f7fd f989 	bl	800c090 <HAL_GetTick>
 800ed7e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ed80:	4b38      	ldr	r3, [pc, #224]	@ (800ee64 <HAL_RCC_OscConfig+0x660>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800ed88:	d006      	beq.n	800ed98 <HAL_RCC_OscConfig+0x594>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ed8a:	f7fd f981 	bl	800c090 <HAL_GetTick>
 800ed8e:	1b40      	subs	r0, r0, r5
 800ed90:	2802      	cmp	r0, #2
 800ed92:	d9f5      	bls.n	800ed80 <HAL_RCC_OscConfig+0x57c>
                return HAL_TIMEOUT;
 800ed94:	2003      	movs	r0, #3
 800ed96:	e05f      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ed98:	4a32      	ldr	r2, [pc, #200]	@ (800ee64 <HAL_RCC_OscConfig+0x660>)
 800ed9a:	68d3      	ldr	r3, [r2, #12]
 800ed9c:	4932      	ldr	r1, [pc, #200]	@ (800ee68 <HAL_RCC_OscConfig+0x664>)
 800ed9e:	4019      	ands	r1, r3
 800eda0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800eda2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800eda4:	3801      	subs	r0, #1
 800eda6:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800edaa:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800edac:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800edb0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800edb2:	0840      	lsrs	r0, r0, #1
 800edb4:	3801      	subs	r0, #1
 800edb6:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 800edba:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800edbc:	0840      	lsrs	r0, r0, #1
 800edbe:	3801      	subs	r0, #1
 800edc0:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800edc4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800edc6:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 800edca:	4319      	orrs	r1, r3
 800edcc:	60d1      	str	r1, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 800edce:	6813      	ldr	r3, [r2, #0]
 800edd0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800edd4:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800edd6:	68d3      	ldr	r3, [r2, #12]
 800edd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eddc:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 800edde:	f7fd f957 	bl	800c090 <HAL_GetTick>
 800ede2:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ede4:	4b1f      	ldr	r3, [pc, #124]	@ (800ee64 <HAL_RCC_OscConfig+0x660>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800edec:	d106      	bne.n	800edfc <HAL_RCC_OscConfig+0x5f8>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800edee:	f7fd f94f 	bl	800c090 <HAL_GetTick>
 800edf2:	1b00      	subs	r0, r0, r4
 800edf4:	2802      	cmp	r0, #2
 800edf6:	d9f5      	bls.n	800ede4 <HAL_RCC_OscConfig+0x5e0>
                return HAL_TIMEOUT;
 800edf8:	2003      	movs	r0, #3
 800edfa:	e02d      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800edfc:	2000      	movs	r0, #0
 800edfe:	e02b      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLL_ENABLE();
 800ee00:	4b18      	ldr	r3, [pc, #96]	@ (800ee64 <HAL_RCC_OscConfig+0x660>)
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800ee08:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ee0a:	68da      	ldr	r2, [r3, #12]
 800ee0c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800ee10:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 800ee12:	f7fd f93d 	bl	800c090 <HAL_GetTick>
 800ee16:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ee18:	4b12      	ldr	r3, [pc, #72]	@ (800ee64 <HAL_RCC_OscConfig+0x660>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800ee20:	d106      	bne.n	800ee30 <HAL_RCC_OscConfig+0x62c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ee22:	f7fd f935 	bl	800c090 <HAL_GetTick>
 800ee26:	1b03      	subs	r3, r0, r4
 800ee28:	2b02      	cmp	r3, #2
 800ee2a:	d9f5      	bls.n	800ee18 <HAL_RCC_OscConfig+0x614>
              return HAL_TIMEOUT;
 800ee2c:	2003      	movs	r0, #3
 800ee2e:	e013      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800ee30:	2000      	movs	r0, #0
 800ee32:	e011      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800ee34:	4a0b      	ldr	r2, [pc, #44]	@ (800ee64 <HAL_RCC_OscConfig+0x660>)
 800ee36:	68d1      	ldr	r1, [r2, #12]
 800ee38:	4b0c      	ldr	r3, [pc, #48]	@ (800ee6c <HAL_RCC_OscConfig+0x668>)
 800ee3a:	400b      	ands	r3, r1
 800ee3c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800ee3e:	2000      	movs	r0, #0
 800ee40:	e00a      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
    return HAL_ERROR;
 800ee42:	2001      	movs	r0, #1
}
 800ee44:	4770      	bx	lr
        return HAL_ERROR;
 800ee46:	2001      	movs	r0, #1
 800ee48:	e006      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
            return HAL_ERROR;
 800ee4a:	2001      	movs	r0, #1
 800ee4c:	e004      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800ee4e:	2001      	movs	r0, #1
 800ee50:	e002      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800ee52:	2001      	movs	r0, #1
 800ee54:	e000      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
  return HAL_OK;
 800ee56:	2000      	movs	r0, #0
}
 800ee58:	b003      	add	sp, #12
 800ee5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          return HAL_ERROR;
 800ee5c:	2001      	movs	r0, #1
 800ee5e:	e7fb      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
        return HAL_ERROR;
 800ee60:	2001      	movs	r0, #1
 800ee62:	e7f9      	b.n	800ee58 <HAL_RCC_OscConfig+0x654>
 800ee64:	40021000 	.word	0x40021000
 800ee68:	019d808c 	.word	0x019d808c
 800ee6c:	feeefffc 	.word	0xfeeefffc

0800ee70 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f000 80af 	beq.w	800efd4 <HAL_RCC_ClockConfig+0x164>
{
 800ee76:	b570      	push	{r4, r5, r6, lr}
 800ee78:	460d      	mov	r5, r1
 800ee7a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ee7c:	4b59      	ldr	r3, [pc, #356]	@ (800efe4 <HAL_RCC_ClockConfig+0x174>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f003 0307 	and.w	r3, r3, #7
 800ee84:	428b      	cmp	r3, r1
 800ee86:	d20b      	bcs.n	800eea0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee88:	4a56      	ldr	r2, [pc, #344]	@ (800efe4 <HAL_RCC_ClockConfig+0x174>)
 800ee8a:	6813      	ldr	r3, [r2, #0]
 800ee8c:	f023 0307 	bic.w	r3, r3, #7
 800ee90:	430b      	orrs	r3, r1
 800ee92:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee94:	6813      	ldr	r3, [r2, #0]
 800ee96:	f003 0307 	and.w	r3, r3, #7
 800ee9a:	428b      	cmp	r3, r1
 800ee9c:	f040 809c 	bne.w	800efd8 <HAL_RCC_ClockConfig+0x168>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800eea0:	6823      	ldr	r3, [r4, #0]
 800eea2:	f013 0f02 	tst.w	r3, #2
 800eea6:	d00c      	beq.n	800eec2 <HAL_RCC_ClockConfig+0x52>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800eea8:	68a2      	ldr	r2, [r4, #8]
 800eeaa:	4b4f      	ldr	r3, [pc, #316]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d905      	bls.n	800eec2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800eeb6:	494c      	ldr	r1, [pc, #304]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800eeb8:	688b      	ldr	r3, [r1, #8]
 800eeba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800eebe:	431a      	orrs	r2, r3
 800eec0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800eec2:	6823      	ldr	r3, [r4, #0]
 800eec4:	f013 0f01 	tst.w	r3, #1
 800eec8:	d039      	beq.n	800ef3e <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800eeca:	6863      	ldr	r3, [r4, #4]
 800eecc:	2b03      	cmp	r3, #3
 800eece:	d009      	beq.n	800eee4 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800eed0:	2b02      	cmp	r3, #2
 800eed2:	d026      	beq.n	800ef22 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800eed4:	bb63      	cbnz	r3, 800ef30 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800eed6:	4a44      	ldr	r2, [pc, #272]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800eed8:	6812      	ldr	r2, [r2, #0]
 800eeda:	f012 0f02 	tst.w	r2, #2
 800eede:	d106      	bne.n	800eeee <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800eee0:	2001      	movs	r0, #1
 800eee2:	e076      	b.n	800efd2 <HAL_RCC_ClockConfig+0x162>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800eee4:	4a40      	ldr	r2, [pc, #256]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800eee6:	6812      	ldr	r2, [r2, #0]
 800eee8:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800eeec:	d076      	beq.n	800efdc <HAL_RCC_ClockConfig+0x16c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800eeee:	493e      	ldr	r1, [pc, #248]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800eef0:	688a      	ldr	r2, [r1, #8]
 800eef2:	f022 0203 	bic.w	r2, r2, #3
 800eef6:	4313      	orrs	r3, r2
 800eef8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800eefa:	f7fd f8c9 	bl	800c090 <HAL_GetTick>
 800eefe:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ef00:	4b39      	ldr	r3, [pc, #228]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	f003 030c 	and.w	r3, r3, #12
 800ef08:	6862      	ldr	r2, [r4, #4]
 800ef0a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800ef0e:	d016      	beq.n	800ef3e <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef10:	f7fd f8be 	bl	800c090 <HAL_GetTick>
 800ef14:	1b80      	subs	r0, r0, r6
 800ef16:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ef1a:	4298      	cmp	r0, r3
 800ef1c:	d9f0      	bls.n	800ef00 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 800ef1e:	2003      	movs	r0, #3
 800ef20:	e057      	b.n	800efd2 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ef22:	4a31      	ldr	r2, [pc, #196]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800ef24:	6812      	ldr	r2, [r2, #0]
 800ef26:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800ef2a:	d1e0      	bne.n	800eeee <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800ef2c:	2001      	movs	r0, #1
 800ef2e:	e050      	b.n	800efd2 <HAL_RCC_ClockConfig+0x162>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ef30:	4a2d      	ldr	r2, [pc, #180]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800ef32:	6812      	ldr	r2, [r2, #0]
 800ef34:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800ef38:	d1d9      	bne.n	800eeee <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 800ef3a:	2001      	movs	r0, #1
 800ef3c:	e049      	b.n	800efd2 <HAL_RCC_ClockConfig+0x162>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef3e:	6823      	ldr	r3, [r4, #0]
 800ef40:	f013 0f02 	tst.w	r3, #2
 800ef44:	d00c      	beq.n	800ef60 <HAL_RCC_ClockConfig+0xf0>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ef46:	68a2      	ldr	r2, [r4, #8]
 800ef48:	4b27      	ldr	r3, [pc, #156]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d205      	bcs.n	800ef60 <HAL_RCC_ClockConfig+0xf0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ef54:	4924      	ldr	r1, [pc, #144]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800ef56:	688b      	ldr	r3, [r1, #8]
 800ef58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef5c:	431a      	orrs	r2, r3
 800ef5e:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ef60:	4b20      	ldr	r3, [pc, #128]	@ (800efe4 <HAL_RCC_ClockConfig+0x174>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f003 0307 	and.w	r3, r3, #7
 800ef68:	42ab      	cmp	r3, r5
 800ef6a:	d90a      	bls.n	800ef82 <HAL_RCC_ClockConfig+0x112>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ef6c:	4a1d      	ldr	r2, [pc, #116]	@ (800efe4 <HAL_RCC_ClockConfig+0x174>)
 800ef6e:	6813      	ldr	r3, [r2, #0]
 800ef70:	f023 0307 	bic.w	r3, r3, #7
 800ef74:	432b      	orrs	r3, r5
 800ef76:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef78:	6813      	ldr	r3, [r2, #0]
 800ef7a:	f003 0307 	and.w	r3, r3, #7
 800ef7e:	42ab      	cmp	r3, r5
 800ef80:	d12e      	bne.n	800efe0 <HAL_RCC_ClockConfig+0x170>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ef82:	6823      	ldr	r3, [r4, #0]
 800ef84:	f013 0f04 	tst.w	r3, #4
 800ef88:	d006      	beq.n	800ef98 <HAL_RCC_ClockConfig+0x128>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ef8a:	4a17      	ldr	r2, [pc, #92]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800ef8c:	6893      	ldr	r3, [r2, #8]
 800ef8e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800ef92:	68e1      	ldr	r1, [r4, #12]
 800ef94:	430b      	orrs	r3, r1
 800ef96:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ef98:	6823      	ldr	r3, [r4, #0]
 800ef9a:	f013 0f08 	tst.w	r3, #8
 800ef9e:	d007      	beq.n	800efb0 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800efa0:	4a11      	ldr	r2, [pc, #68]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800efa2:	6893      	ldr	r3, [r2, #8]
 800efa4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800efa8:	6921      	ldr	r1, [r4, #16]
 800efaa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800efae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800efb0:	f7ff fbd4 	bl	800e75c <HAL_RCC_GetSysClockFreq>
 800efb4:	4b0c      	ldr	r3, [pc, #48]	@ (800efe8 <HAL_RCC_ClockConfig+0x178>)
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800efbc:	4a0b      	ldr	r2, [pc, #44]	@ (800efec <HAL_RCC_ClockConfig+0x17c>)
 800efbe:	5cd3      	ldrb	r3, [r2, r3]
 800efc0:	f003 031f 	and.w	r3, r3, #31
 800efc4:	40d8      	lsrs	r0, r3
 800efc6:	4b0a      	ldr	r3, [pc, #40]	@ (800eff0 <HAL_RCC_ClockConfig+0x180>)
 800efc8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800efca:	4b0a      	ldr	r3, [pc, #40]	@ (800eff4 <HAL_RCC_ClockConfig+0x184>)
 800efcc:	6818      	ldr	r0, [r3, #0]
 800efce:	f000 fbe3 	bl	800f798 <HAL_InitTick>
}
 800efd2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800efd4:	2001      	movs	r0, #1
}
 800efd6:	4770      	bx	lr
      return HAL_ERROR;
 800efd8:	2001      	movs	r0, #1
 800efda:	e7fa      	b.n	800efd2 <HAL_RCC_ClockConfig+0x162>
        return HAL_ERROR;
 800efdc:	2001      	movs	r0, #1
 800efde:	e7f8      	b.n	800efd2 <HAL_RCC_ClockConfig+0x162>
      return HAL_ERROR;
 800efe0:	2001      	movs	r0, #1
 800efe2:	e7f6      	b.n	800efd2 <HAL_RCC_ClockConfig+0x162>
 800efe4:	40022000 	.word	0x40022000
 800efe8:	40021000 	.word	0x40021000
 800efec:	08010e94 	.word	0x08010e94
 800eff0:	20000034 	.word	0x20000034
 800eff4:	20000010 	.word	0x20000010

0800eff8 <HAL_RCC_GetHCLKFreq>:
}
 800eff8:	4b01      	ldr	r3, [pc, #4]	@ (800f000 <HAL_RCC_GetHCLKFreq+0x8>)
 800effa:	6818      	ldr	r0, [r3, #0]
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	20000034 	.word	0x20000034

0800f004 <HAL_RCC_GetPCLK1Freq>:
{
 800f004:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800f006:	f7ff fff7 	bl	800eff8 <HAL_RCC_GetHCLKFreq>
 800f00a:	4b05      	ldr	r3, [pc, #20]	@ (800f020 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800f012:	4a04      	ldr	r2, [pc, #16]	@ (800f024 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f014:	5cd3      	ldrb	r3, [r2, r3]
 800f016:	f003 031f 	and.w	r3, r3, #31
}
 800f01a:	40d8      	lsrs	r0, r3
 800f01c:	bd08      	pop	{r3, pc}
 800f01e:	bf00      	nop
 800f020:	40021000 	.word	0x40021000
 800f024:	08010e8c 	.word	0x08010e8c

0800f028 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800f028:	230f      	movs	r3, #15
 800f02a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800f02c:	4b0b      	ldr	r3, [pc, #44]	@ (800f05c <HAL_RCC_GetClockConfig+0x34>)
 800f02e:	689a      	ldr	r2, [r3, #8]
 800f030:	f002 0203 	and.w	r2, r2, #3
 800f034:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800f036:	689a      	ldr	r2, [r3, #8]
 800f038:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 800f03c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800f03e:	689a      	ldr	r2, [r3, #8]
 800f040:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800f044:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	08db      	lsrs	r3, r3, #3
 800f04a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f04e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800f050:	4b03      	ldr	r3, [pc, #12]	@ (800f060 <HAL_RCC_GetClockConfig+0x38>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f003 0307 	and.w	r3, r3, #7
 800f058:	600b      	str	r3, [r1, #0]
}
 800f05a:	4770      	bx	lr
 800f05c:	40021000 	.word	0x40021000
 800f060:	40022000 	.word	0x40022000

0800f064 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800f064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f066:	4604      	mov	r4, r0
 800f068:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800f06a:	4b59      	ldr	r3, [pc, #356]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	f013 0f03 	tst.w	r3, #3
 800f072:	d018      	beq.n	800f0a6 <RCCEx_PLLSAI1_Config+0x42>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800f074:	4b56      	ldr	r3, [pc, #344]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	f003 0303 	and.w	r3, r3, #3
 800f07c:	6802      	ldr	r2, [r0, #0]
 800f07e:	4293      	cmp	r3, r2
 800f080:	d002      	beq.n	800f088 <RCCEx_PLLSAI1_Config+0x24>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800f082:	2601      	movs	r6, #1
      }
    }
  }

  return status;
}
 800f084:	4630      	mov	r0, r6
 800f086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800f088:	2a00      	cmp	r2, #0
 800f08a:	f000 809c 	beq.w	800f1c6 <RCCEx_PLLSAI1_Config+0x162>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800f08e:	4b50      	ldr	r3, [pc, #320]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800f096:	3301      	adds	r3, #1
 800f098:	6842      	ldr	r2, [r0, #4]
       ||
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d001      	beq.n	800f0a2 <RCCEx_PLLSAI1_Config+0x3e>
      status = HAL_ERROR;
 800f09e:	2601      	movs	r6, #1
 800f0a0:	e7f0      	b.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
  HAL_StatusTypeDef status = HAL_OK;
 800f0a2:	2600      	movs	r6, #0
 800f0a4:	e019      	b.n	800f0da <RCCEx_PLLSAI1_Config+0x76>
    switch(PllSai1->PLLSAI1Source)
 800f0a6:	6803      	ldr	r3, [r0, #0]
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d055      	beq.n	800f158 <RCCEx_PLLSAI1_Config+0xf4>
 800f0ac:	2b03      	cmp	r3, #3
 800f0ae:	d05a      	beq.n	800f166 <RCCEx_PLLSAI1_Config+0x102>
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	f040 808a 	bne.w	800f1ca <RCCEx_PLLSAI1_Config+0x166>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800f0b6:	4a46      	ldr	r2, [pc, #280]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f0b8:	6812      	ldr	r2, [r2, #0]
 800f0ba:	f012 0f02 	tst.w	r2, #2
 800f0be:	d05e      	beq.n	800f17e <RCCEx_PLLSAI1_Config+0x11a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800f0c0:	4843      	ldr	r0, [pc, #268]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f0c2:	68c2      	ldr	r2, [r0, #12]
 800f0c4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800f0c8:	6861      	ldr	r1, [r4, #4]
 800f0ca:	3901      	subs	r1, #1
 800f0cc:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	60c3      	str	r3, [r0, #12]
 800f0d4:	2600      	movs	r6, #0
  if(status == HAL_OK)
 800f0d6:	2e00      	cmp	r6, #0
 800f0d8:	d1d4      	bne.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
    __HAL_RCC_PLLSAI1_DISABLE();
 800f0da:	4a3d      	ldr	r2, [pc, #244]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f0dc:	6813      	ldr	r3, [r2, #0]
 800f0de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f0e2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f0e4:	f7fc ffd4 	bl	800c090 <HAL_GetTick>
 800f0e8:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800f0ea:	4b39      	ldr	r3, [pc, #228]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800f0f2:	d005      	beq.n	800f100 <RCCEx_PLLSAI1_Config+0x9c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f0f4:	f7fc ffcc 	bl	800c090 <HAL_GetTick>
 800f0f8:	1bc3      	subs	r3, r0, r7
 800f0fa:	2b02      	cmp	r3, #2
 800f0fc:	d9f5      	bls.n	800f0ea <RCCEx_PLLSAI1_Config+0x86>
        status = HAL_TIMEOUT;
 800f0fe:	2603      	movs	r6, #3
    if(status == HAL_OK)
 800f100:	2e00      	cmp	r6, #0
 800f102:	d1bf      	bne.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
      if(Divider == DIVIDER_P_UPDATE)
 800f104:	2d00      	cmp	r5, #0
 800f106:	d13c      	bne.n	800f182 <RCCEx_PLLSAI1_Config+0x11e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f108:	4931      	ldr	r1, [pc, #196]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f10a:	690b      	ldr	r3, [r1, #16]
 800f10c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800f110:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800f114:	68a0      	ldr	r0, [r4, #8]
 800f116:	68e2      	ldr	r2, [r4, #12]
 800f118:	06d2      	lsls	r2, r2, #27
 800f11a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f11e:	4313      	orrs	r3, r2
 800f120:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 800f122:	4a2b      	ldr	r2, [pc, #172]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f124:	6813      	ldr	r3, [r2, #0]
 800f126:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f12a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800f12c:	f7fc ffb0 	bl	800c090 <HAL_GetTick>
 800f130:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f132:	4b27      	ldr	r3, [pc, #156]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800f13a:	d105      	bne.n	800f148 <RCCEx_PLLSAI1_Config+0xe4>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800f13c:	f7fc ffa8 	bl	800c090 <HAL_GetTick>
 800f140:	1b40      	subs	r0, r0, r5
 800f142:	2802      	cmp	r0, #2
 800f144:	d9f5      	bls.n	800f132 <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_TIMEOUT;
 800f146:	2603      	movs	r6, #3
      if(status == HAL_OK)
 800f148:	2e00      	cmp	r6, #0
 800f14a:	d19b      	bne.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800f14c:	4a20      	ldr	r2, [pc, #128]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f14e:	6913      	ldr	r3, [r2, #16]
 800f150:	69a1      	ldr	r1, [r4, #24]
 800f152:	430b      	orrs	r3, r1
 800f154:	6113      	str	r3, [r2, #16]
 800f156:	e795      	b.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800f158:	4a1d      	ldr	r2, [pc, #116]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f15a:	6812      	ldr	r2, [r2, #0]
 800f15c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800f160:	d1ae      	bne.n	800f0c0 <RCCEx_PLLSAI1_Config+0x5c>
 800f162:	2601      	movs	r6, #1
 800f164:	e78e      	b.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800f166:	4a1a      	ldr	r2, [pc, #104]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f168:	6812      	ldr	r2, [r2, #0]
 800f16a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800f16e:	d1a7      	bne.n	800f0c0 <RCCEx_PLLSAI1_Config+0x5c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800f170:	4a17      	ldr	r2, [pc, #92]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f172:	6812      	ldr	r2, [r2, #0]
 800f174:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800f178:	d1a2      	bne.n	800f0c0 <RCCEx_PLLSAI1_Config+0x5c>
 800f17a:	2601      	movs	r6, #1
 800f17c:	e782      	b.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
        status = HAL_ERROR;
 800f17e:	2601      	movs	r6, #1
 800f180:	e7a9      	b.n	800f0d6 <RCCEx_PLLSAI1_Config+0x72>
      else if(Divider == DIVIDER_Q_UPDATE)
 800f182:	2d01      	cmp	r5, #1
 800f184:	d00f      	beq.n	800f1a6 <RCCEx_PLLSAI1_Config+0x142>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f186:	4812      	ldr	r0, [pc, #72]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f188:	6902      	ldr	r2, [r0, #16]
 800f18a:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 800f18e:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800f192:	68a1      	ldr	r1, [r4, #8]
 800f194:	6963      	ldr	r3, [r4, #20]
 800f196:	085b      	lsrs	r3, r3, #1
 800f198:	3b01      	subs	r3, #1
 800f19a:	065b      	lsls	r3, r3, #25
 800f19c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f1a0:	431a      	orrs	r2, r3
 800f1a2:	6102      	str	r2, [r0, #16]
 800f1a4:	e7bd      	b.n	800f122 <RCCEx_PLLSAI1_Config+0xbe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800f1a6:	480a      	ldr	r0, [pc, #40]	@ (800f1d0 <RCCEx_PLLSAI1_Config+0x16c>)
 800f1a8:	6902      	ldr	r2, [r0, #16]
 800f1aa:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800f1ae:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800f1b2:	68a1      	ldr	r1, [r4, #8]
 800f1b4:	6923      	ldr	r3, [r4, #16]
 800f1b6:	085b      	lsrs	r3, r3, #1
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	055b      	lsls	r3, r3, #21
 800f1bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f1c0:	431a      	orrs	r2, r3
 800f1c2:	6102      	str	r2, [r0, #16]
 800f1c4:	e7ad      	b.n	800f122 <RCCEx_PLLSAI1_Config+0xbe>
      status = HAL_ERROR;
 800f1c6:	2601      	movs	r6, #1
 800f1c8:	e75c      	b.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
    switch(PllSai1->PLLSAI1Source)
 800f1ca:	2601      	movs	r6, #1
 800f1cc:	e75a      	b.n	800f084 <RCCEx_PLLSAI1_Config+0x20>
 800f1ce:	bf00      	nop
 800f1d0:	40021000 	.word	0x40021000

0800f1d4 <HAL_RCCEx_PeriphCLKConfig>:
{
 800f1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d8:	b082      	sub	sp, #8
 800f1da:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f1dc:	6803      	ldr	r3, [r0, #0]
 800f1de:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800f1e2:	d026      	beq.n	800f232 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch(PeriphClkInit->Sai1ClockSelection)
 800f1e4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f1e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f1ea:	d006      	beq.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x26>
 800f1ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800f1f0:	d01d      	beq.n	800f22e <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800f1f2:	b19b      	cbz	r3, 800f21c <HAL_RCCEx_PeriphCLKConfig+0x48>
 800f1f4:	2601      	movs	r6, #1
 800f1f6:	4637      	mov	r7, r6
 800f1f8:	e01d      	b.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x62>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800f1fa:	4aae      	ldr	r2, [pc, #696]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f1fc:	68d3      	ldr	r3, [r2, #12]
 800f1fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f202:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f204:	2700      	movs	r7, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f206:	4aab      	ldr	r2, [pc, #684]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f208:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f20c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800f210:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800f212:	430b      	orrs	r3, r1
 800f214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f218:	2600      	movs	r6, #0
 800f21a:	e00c      	b.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x62>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800f21c:	2100      	movs	r1, #0
 800f21e:	3004      	adds	r0, #4
 800f220:	f7ff ff20 	bl	800f064 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800f224:	4607      	mov	r7, r0
 800f226:	2800      	cmp	r0, #0
 800f228:	d0ed      	beq.n	800f206 <HAL_RCCEx_PeriphCLKConfig+0x32>
      status = ret;
 800f22a:	4606      	mov	r6, r0
 800f22c:	e003      	b.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0x62>
    switch(PeriphClkInit->Sai1ClockSelection)
 800f22e:	2700      	movs	r7, #0
 800f230:	e7e9      	b.n	800f206 <HAL_RCCEx_PeriphCLKConfig+0x32>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f232:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f234:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f236:	6823      	ldr	r3, [r4, #0]
 800f238:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800f23c:	d06b      	beq.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800f23e:	4b9d      	ldr	r3, [pc, #628]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f242:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 800f246:	d14c      	bne.n	800f2e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800f248:	4b9a      	ldr	r3, [pc, #616]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f24a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f24c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800f250:	659a      	str	r2, [r3, #88]	@ 0x58
 800f252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f258:	9301      	str	r3, [sp, #4]
 800f25a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800f25c:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f260:	4a95      	ldr	r2, [pc, #596]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800f262:	6813      	ldr	r3, [r2, #0]
 800f264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f268:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800f26a:	f7fc ff11 	bl	800c090 <HAL_GetTick>
 800f26e:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800f270:	4b91      	ldr	r3, [pc, #580]	@ (800f4b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800f278:	d105      	bne.n	800f286 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f27a:	f7fc ff09 	bl	800c090 <HAL_GetTick>
 800f27e:	1b40      	subs	r0, r0, r5
 800f280:	2802      	cmp	r0, #2
 800f282:	d9f5      	bls.n	800f270 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        ret = HAL_TIMEOUT;
 800f284:	2703      	movs	r7, #3
    if(ret == HAL_OK)
 800f286:	2f00      	cmp	r7, #0
 800f288:	d140      	bne.n	800f30c <HAL_RCCEx_PeriphCLKConfig+0x138>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800f28a:	4b8a      	ldr	r3, [pc, #552]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f28c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800f290:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800f294:	d018      	beq.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800f296:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800f298:	429a      	cmp	r2, r3
 800f29a:	d012      	beq.n	800f2c2 <HAL_RCCEx_PeriphCLKConfig+0xee>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800f29c:	4a85      	ldr	r2, [pc, #532]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f29e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800f2a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800f2a6:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800f2aa:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800f2ae:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f2b2:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800f2b6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800f2ba:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 800f2be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800f2c2:	f013 0f01 	tst.w	r3, #1
 800f2c6:	d10f      	bne.n	800f2e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      if(ret == HAL_OK)
 800f2c8:	2f00      	cmp	r7, #0
 800f2ca:	f040 80c9 	bne.w	800f460 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f2ce:	4a79      	ldr	r2, [pc, #484]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f2d0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800f2d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f2d8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800f2da:	430b      	orrs	r3, r1
 800f2dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800f2e0:	e015      	b.n	800f30e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    FlagStatus       pwrclkchanged = RESET;
 800f2e2:	f04f 0800 	mov.w	r8, #0
 800f2e6:	e7bb      	b.n	800f260 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        tickstart = HAL_GetTick();
 800f2e8:	f7fc fed2 	bl	800c090 <HAL_GetTick>
 800f2ec:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f2ee:	4b71      	ldr	r3, [pc, #452]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2f4:	f013 0f02 	tst.w	r3, #2
 800f2f8:	d1e6      	bne.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f2fa:	f7fc fec9 	bl	800c090 <HAL_GetTick>
 800f2fe:	1b40      	subs	r0, r0, r5
 800f300:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f304:	4298      	cmp	r0, r3
 800f306:	d9f2      	bls.n	800f2ee <HAL_RCCEx_PeriphCLKConfig+0x11a>
            ret = HAL_TIMEOUT;
 800f308:	2703      	movs	r7, #3
 800f30a:	e7dd      	b.n	800f2c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
 800f30c:	463e      	mov	r6, r7
    if(pwrclkchanged == SET)
 800f30e:	f1b8 0f00 	cmp.w	r8, #0
 800f312:	f040 80a7 	bne.w	800f464 <HAL_RCCEx_PeriphCLKConfig+0x290>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	f013 0f01 	tst.w	r3, #1
 800f31c:	d008      	beq.n	800f330 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f31e:	4a65      	ldr	r2, [pc, #404]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f320:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f324:	f023 0303 	bic.w	r3, r3, #3
 800f328:	6a21      	ldr	r1, [r4, #32]
 800f32a:	430b      	orrs	r3, r1
 800f32c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f330:	6823      	ldr	r3, [r4, #0]
 800f332:	f013 0f02 	tst.w	r3, #2
 800f336:	d008      	beq.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f338:	4a5e      	ldr	r2, [pc, #376]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f33a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f33e:	f023 030c 	bic.w	r3, r3, #12
 800f342:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f344:	430b      	orrs	r3, r1
 800f346:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	f013 0f20 	tst.w	r3, #32
 800f350:	d008      	beq.n	800f364 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f352:	4a58      	ldr	r2, [pc, #352]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f354:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f358:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800f35c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800f35e:	430b      	orrs	r3, r1
 800f360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f364:	6823      	ldr	r3, [r4, #0]
 800f366:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800f36a:	d008      	beq.n	800f37e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f36c:	4a51      	ldr	r2, [pc, #324]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f36e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f372:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800f376:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f378:	430b      	orrs	r3, r1
 800f37a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800f37e:	6823      	ldr	r3, [r4, #0]
 800f380:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800f384:	d008      	beq.n	800f398 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f386:	4a4b      	ldr	r2, [pc, #300]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f388:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f38c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f390:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f392:	430b      	orrs	r3, r1
 800f394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f398:	6823      	ldr	r3, [r4, #0]
 800f39a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800f39e:	d008      	beq.n	800f3b2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f3a0:	4a44      	ldr	r2, [pc, #272]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f3a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f3a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800f3aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f3ac:	430b      	orrs	r3, r1
 800f3ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f3b2:	6823      	ldr	r3, [r4, #0]
 800f3b4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800f3b8:	d008      	beq.n	800f3cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f3ba:	4a3e      	ldr	r2, [pc, #248]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f3bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f3c0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800f3c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f3c6:	430b      	orrs	r3, r1
 800f3c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f3cc:	6823      	ldr	r3, [r4, #0]
 800f3ce:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800f3d2:	d00f      	beq.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f3d4:	4a37      	ldr	r2, [pc, #220]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f3d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f3da:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800f3de:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 800f3e0:	430b      	orrs	r3, r1
 800f3e2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800f3e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f3ec:	d040      	beq.n	800f470 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800f3ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f3f2:	d042      	beq.n	800f47a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800f3f4:	6823      	ldr	r3, [r4, #0]
 800f3f6:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800f3fa:	d00f      	beq.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x248>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f3fc:	4a2d      	ldr	r2, [pc, #180]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f3fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f402:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800f406:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f408:	430b      	orrs	r3, r1
 800f40a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800f40e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f410:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800f414:	d039      	beq.n	800f48a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800f416:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800f41a:	d03b      	beq.n	800f494 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f41c:	6823      	ldr	r3, [r4, #0]
 800f41e:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800f422:	d00c      	beq.n	800f43e <HAL_RCCEx_PeriphCLKConfig+0x26a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f424:	4a23      	ldr	r2, [pc, #140]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f426:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f42a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800f42e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f430:	430b      	orrs	r3, r1
 800f432:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800f436:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f438:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f43c:	d032      	beq.n	800f4a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f43e:	6823      	ldr	r3, [r4, #0]
 800f440:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 800f444:	d008      	beq.n	800f458 <HAL_RCCEx_PeriphCLKConfig+0x284>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f446:	4a1b      	ldr	r2, [pc, #108]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f448:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800f44c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f450:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800f452:	430b      	orrs	r3, r1
 800f454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800f458:	4630      	mov	r0, r6
 800f45a:	b002      	add	sp, #8
 800f45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 800f460:	463e      	mov	r6, r7
 800f462:	e754      	b.n	800f30e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f464:	4a13      	ldr	r2, [pc, #76]	@ (800f4b4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800f466:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800f468:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f46c:	6593      	str	r3, [r2, #88]	@ 0x58
 800f46e:	e752      	b.n	800f316 <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f470:	68d3      	ldr	r3, [r2, #12]
 800f472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f476:	60d3      	str	r3, [r2, #12]
 800f478:	e7bc      	b.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f47a:	2101      	movs	r1, #1
 800f47c:	1d20      	adds	r0, r4, #4
 800f47e:	f7ff fdf1 	bl	800f064 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800f482:	2800      	cmp	r0, #0
 800f484:	d0b6      	beq.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
          status = ret;
 800f486:	4606      	mov	r6, r0
 800f488:	e7b4      	b.n	800f3f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800f48a:	68d3      	ldr	r3, [r2, #12]
 800f48c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f490:	60d3      	str	r3, [r2, #12]
 800f492:	e7c3      	b.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800f494:	2101      	movs	r1, #1
 800f496:	1d20      	adds	r0, r4, #4
 800f498:	f7ff fde4 	bl	800f064 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800f49c:	2800      	cmp	r0, #0
 800f49e:	d0bd      	beq.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x248>
        status = ret;
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	e7bb      	b.n	800f41c <HAL_RCCEx_PeriphCLKConfig+0x248>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800f4a4:	2102      	movs	r1, #2
 800f4a6:	1d20      	adds	r0, r4, #4
 800f4a8:	f7ff fddc 	bl	800f064 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d0c6      	beq.n	800f43e <HAL_RCCEx_PeriphCLKConfig+0x26a>
        status = ret;
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	e7c4      	b.n	800f43e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800f4b4:	40021000 	.word	0x40021000
 800f4b8:	40007000 	.word	0x40007000

0800f4bc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800f4bc:	4770      	bx	lr
	...

0800f4c0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f4c0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d126      	bne.n	800f516 <HAL_TIM_Base_Start_IT+0x56>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4c8:	2302      	movs	r3, #2
 800f4ca:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f4ce:	6802      	ldr	r2, [r0, #0]
 800f4d0:	68d3      	ldr	r3, [r2, #12]
 800f4d2:	f043 0301 	orr.w	r3, r3, #1
 800f4d6:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4d8:	6803      	ldr	r3, [r0, #0]
 800f4da:	4a12      	ldr	r2, [pc, #72]	@ (800f524 <HAL_TIM_Base_Start_IT+0x64>)
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d00c      	beq.n	800f4fa <HAL_TIM_Base_Start_IT+0x3a>
 800f4e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4e4:	d009      	beq.n	800f4fa <HAL_TIM_Base_Start_IT+0x3a>
 800f4e6:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d005      	beq.n	800f4fa <HAL_TIM_Base_Start_IT+0x3a>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f4ee:	681a      	ldr	r2, [r3, #0]
 800f4f0:	f042 0201 	orr.w	r2, r2, #1
 800f4f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f4f6:	2000      	movs	r0, #0
 800f4f8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f4fa:	6899      	ldr	r1, [r3, #8]
 800f4fc:	4a0a      	ldr	r2, [pc, #40]	@ (800f528 <HAL_TIM_Base_Start_IT+0x68>)
 800f4fe:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f500:	2a06      	cmp	r2, #6
 800f502:	d00a      	beq.n	800f51a <HAL_TIM_Base_Start_IT+0x5a>
 800f504:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800f508:	d009      	beq.n	800f51e <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	f042 0201 	orr.w	r2, r2, #1
 800f510:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800f512:	2000      	movs	r0, #0
 800f514:	4770      	bx	lr
    return HAL_ERROR;
 800f516:	2001      	movs	r0, #1
 800f518:	4770      	bx	lr
  return HAL_OK;
 800f51a:	2000      	movs	r0, #0
 800f51c:	4770      	bx	lr
 800f51e:	2000      	movs	r0, #0
}
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop
 800f524:	40012c00 	.word	0x40012c00
 800f528:	00010007 	.word	0x00010007

0800f52c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f52c:	4770      	bx	lr

0800f52e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f52e:	4770      	bx	lr

0800f530 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f530:	4770      	bx	lr

0800f532 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f532:	4770      	bx	lr

0800f534 <HAL_TIM_IRQHandler>:
{
 800f534:	b570      	push	{r4, r5, r6, lr}
 800f536:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800f538:	6803      	ldr	r3, [r0, #0]
 800f53a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f53c:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f53e:	f015 0f02 	tst.w	r5, #2
 800f542:	d010      	beq.n	800f566 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f544:	f016 0f02 	tst.w	r6, #2
 800f548:	d00d      	beq.n	800f566 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f54a:	f06f 0202 	mvn.w	r2, #2
 800f54e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f550:	2301      	movs	r3, #1
 800f552:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f554:	6803      	ldr	r3, [r0, #0]
 800f556:	699b      	ldr	r3, [r3, #24]
 800f558:	f013 0f03 	tst.w	r3, #3
 800f55c:	d064      	beq.n	800f628 <HAL_TIM_IRQHandler+0xf4>
          HAL_TIM_IC_CaptureCallback(htim);
 800f55e:	f7ff ffe6 	bl	800f52e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f562:	2300      	movs	r3, #0
 800f564:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f566:	f015 0f04 	tst.w	r5, #4
 800f56a:	d012      	beq.n	800f592 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f56c:	f016 0f04 	tst.w	r6, #4
 800f570:	d00f      	beq.n	800f592 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	f06f 0204 	mvn.w	r2, #4
 800f578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f57a:	2302      	movs	r3, #2
 800f57c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	699b      	ldr	r3, [r3, #24]
 800f582:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800f586:	d055      	beq.n	800f634 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 800f588:	4620      	mov	r0, r4
 800f58a:	f7ff ffd0 	bl	800f52e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f58e:	2300      	movs	r3, #0
 800f590:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f592:	f015 0f08 	tst.w	r5, #8
 800f596:	d012      	beq.n	800f5be <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f598:	f016 0f08 	tst.w	r6, #8
 800f59c:	d00f      	beq.n	800f5be <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f59e:	6823      	ldr	r3, [r4, #0]
 800f5a0:	f06f 0208 	mvn.w	r2, #8
 800f5a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f5a6:	2304      	movs	r3, #4
 800f5a8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f5aa:	6823      	ldr	r3, [r4, #0]
 800f5ac:	69db      	ldr	r3, [r3, #28]
 800f5ae:	f013 0f03 	tst.w	r3, #3
 800f5b2:	d046      	beq.n	800f642 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f7ff ffba 	bl	800f52e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f5be:	f015 0f10 	tst.w	r5, #16
 800f5c2:	d012      	beq.n	800f5ea <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f5c4:	f016 0f10 	tst.w	r6, #16
 800f5c8:	d00f      	beq.n	800f5ea <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f5ca:	6823      	ldr	r3, [r4, #0]
 800f5cc:	f06f 0210 	mvn.w	r2, #16
 800f5d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5d2:	2308      	movs	r3, #8
 800f5d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5d6:	6823      	ldr	r3, [r4, #0]
 800f5d8:	69db      	ldr	r3, [r3, #28]
 800f5da:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800f5de:	d037      	beq.n	800f650 <HAL_TIM_IRQHandler+0x11c>
        HAL_TIM_IC_CaptureCallback(htim);
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f7ff ffa4 	bl	800f52e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f5ea:	f015 0f01 	tst.w	r5, #1
 800f5ee:	d002      	beq.n	800f5f6 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f5f0:	f016 0f01 	tst.w	r6, #1
 800f5f4:	d133      	bne.n	800f65e <HAL_TIM_IRQHandler+0x12a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f5f6:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 800f5fa:	d002      	beq.n	800f602 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f5fc:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800f600:	d135      	bne.n	800f66e <HAL_TIM_IRQHandler+0x13a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f602:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800f606:	d002      	beq.n	800f60e <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f608:	f016 0f80 	tst.w	r6, #128	@ 0x80
 800f60c:	d137      	bne.n	800f67e <HAL_TIM_IRQHandler+0x14a>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f60e:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800f612:	d002      	beq.n	800f61a <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f614:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800f618:	d139      	bne.n	800f68e <HAL_TIM_IRQHandler+0x15a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f61a:	f015 0f20 	tst.w	r5, #32
 800f61e:	d002      	beq.n	800f626 <HAL_TIM_IRQHandler+0xf2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f620:	f016 0f20 	tst.w	r6, #32
 800f624:	d13b      	bne.n	800f69e <HAL_TIM_IRQHandler+0x16a>
}
 800f626:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f628:	f7ff ff80 	bl	800f52c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f62c:	4620      	mov	r0, r4
 800f62e:	f7ff ff7f 	bl	800f530 <HAL_TIM_PWM_PulseFinishedCallback>
 800f632:	e796      	b.n	800f562 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f634:	4620      	mov	r0, r4
 800f636:	f7ff ff79 	bl	800f52c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f63a:	4620      	mov	r0, r4
 800f63c:	f7ff ff78 	bl	800f530 <HAL_TIM_PWM_PulseFinishedCallback>
 800f640:	e7a5      	b.n	800f58e <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f642:	4620      	mov	r0, r4
 800f644:	f7ff ff72 	bl	800f52c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f648:	4620      	mov	r0, r4
 800f64a:	f7ff ff71 	bl	800f530 <HAL_TIM_PWM_PulseFinishedCallback>
 800f64e:	e7b4      	b.n	800f5ba <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f650:	4620      	mov	r0, r4
 800f652:	f7ff ff6b 	bl	800f52c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f656:	4620      	mov	r0, r4
 800f658:	f7ff ff6a 	bl	800f530 <HAL_TIM_PWM_PulseFinishedCallback>
 800f65c:	e7c3      	b.n	800f5e6 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f65e:	6823      	ldr	r3, [r4, #0]
 800f660:	f06f 0201 	mvn.w	r2, #1
 800f664:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800f666:	4620      	mov	r0, r4
 800f668:	f7fb fb72 	bl	800ad50 <HAL_TIM_PeriodElapsedCallback>
 800f66c:	e7c3      	b.n	800f5f6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f66e:	6823      	ldr	r3, [r4, #0]
 800f670:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f674:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800f676:	4620      	mov	r0, r4
 800f678:	f000 f88b 	bl	800f792 <HAL_TIMEx_BreakCallback>
 800f67c:	e7c1      	b.n	800f602 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f67e:	6823      	ldr	r3, [r4, #0]
 800f680:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f684:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800f686:	4620      	mov	r0, r4
 800f688:	f000 f884 	bl	800f794 <HAL_TIMEx_Break2Callback>
 800f68c:	e7bf      	b.n	800f60e <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f68e:	6823      	ldr	r3, [r4, #0]
 800f690:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f694:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800f696:	4620      	mov	r0, r4
 800f698:	f7ff ff4b 	bl	800f532 <HAL_TIM_TriggerCallback>
 800f69c:	e7bd      	b.n	800f61a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f69e:	6823      	ldr	r3, [r4, #0]
 800f6a0:	f06f 0220 	mvn.w	r2, #32
 800f6a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f000 f872 	bl	800f790 <HAL_TIMEx_CommutCallback>
}
 800f6ac:	e7bb      	b.n	800f626 <HAL_TIM_IRQHandler+0xf2>
	...

0800f6b0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6b0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6b2:	4a1e      	ldr	r2, [pc, #120]	@ (800f72c <TIM_Base_SetConfig+0x7c>)
 800f6b4:	4290      	cmp	r0, r2
 800f6b6:	d002      	beq.n	800f6be <TIM_Base_SetConfig+0xe>
 800f6b8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800f6bc:	d103      	bne.n	800f6c6 <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f6be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800f6c2:	684a      	ldr	r2, [r1, #4]
 800f6c4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f6c6:	4a19      	ldr	r2, [pc, #100]	@ (800f72c <TIM_Base_SetConfig+0x7c>)
 800f6c8:	4290      	cmp	r0, r2
 800f6ca:	d00a      	beq.n	800f6e2 <TIM_Base_SetConfig+0x32>
 800f6cc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800f6d0:	d007      	beq.n	800f6e2 <TIM_Base_SetConfig+0x32>
 800f6d2:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
 800f6d6:	4290      	cmp	r0, r2
 800f6d8:	d003      	beq.n	800f6e2 <TIM_Base_SetConfig+0x32>
 800f6da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800f6de:	4290      	cmp	r0, r2
 800f6e0:	d103      	bne.n	800f6ea <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f6e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f6e6:	68ca      	ldr	r2, [r1, #12]
 800f6e8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f6ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6ee:	694a      	ldr	r2, [r1, #20]
 800f6f0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800f6f2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f6f4:	688b      	ldr	r3, [r1, #8]
 800f6f6:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f6f8:	680b      	ldr	r3, [r1, #0]
 800f6fa:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f6fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f72c <TIM_Base_SetConfig+0x7c>)
 800f6fe:	4298      	cmp	r0, r3
 800f700:	d007      	beq.n	800f712 <TIM_Base_SetConfig+0x62>
 800f702:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 800f706:	4298      	cmp	r0, r3
 800f708:	d003      	beq.n	800f712 <TIM_Base_SetConfig+0x62>
 800f70a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f70e:	4298      	cmp	r0, r3
 800f710:	d101      	bne.n	800f716 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f712:	690b      	ldr	r3, [r1, #16]
 800f714:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f716:	2301      	movs	r3, #1
 800f718:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f71a:	6903      	ldr	r3, [r0, #16]
 800f71c:	f013 0f01 	tst.w	r3, #1
 800f720:	d003      	beq.n	800f72a <TIM_Base_SetConfig+0x7a>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f722:	6903      	ldr	r3, [r0, #16]
 800f724:	f023 0301 	bic.w	r3, r3, #1
 800f728:	6103      	str	r3, [r0, #16]
  }
}
 800f72a:	4770      	bx	lr
 800f72c:	40012c00 	.word	0x40012c00

0800f730 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800f730:	b360      	cbz	r0, 800f78c <HAL_TIM_Base_Init+0x5c>
{
 800f732:	b510      	push	{r4, lr}
 800f734:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800f736:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800f73a:	b313      	cbz	r3, 800f782 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800f73c:	2302      	movs	r3, #2
 800f73e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f742:	4621      	mov	r1, r4
 800f744:	f851 0b04 	ldr.w	r0, [r1], #4
 800f748:	f7ff ffb2 	bl	800f6b0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f74c:	2301      	movs	r3, #1
 800f74e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f752:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800f756:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800f75a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800f75e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800f762:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f76a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800f76e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800f772:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800f776:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800f77a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800f77e:	2000      	movs	r0, #0
}
 800f780:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800f782:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800f786:	f7ff fe99 	bl	800f4bc <HAL_TIM_Base_MspInit>
 800f78a:	e7d7      	b.n	800f73c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800f78c:	2001      	movs	r0, #1
}
 800f78e:	4770      	bx	lr

0800f790 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f790:	4770      	bx	lr

0800f792 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f792:	4770      	bx	lr

0800f794 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f794:	4770      	bx	lr
	...

0800f798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f798:	b530      	push	{r4, r5, lr}
 800f79a:	b089      	sub	sp, #36	@ 0x24
 800f79c:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800f79e:	4b21      	ldr	r3, [pc, #132]	@ (800f824 <HAL_InitTick+0x8c>)
 800f7a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f7a2:	f042 0210 	orr.w	r2, r2, #16
 800f7a6:	659a      	str	r2, [r3, #88]	@ 0x58
 800f7a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7aa:	f003 0310 	and.w	r3, r3, #16
 800f7ae:	9301      	str	r3, [sp, #4]
 800f7b0:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f7b2:	a902      	add	r1, sp, #8
 800f7b4:	a803      	add	r0, sp, #12
 800f7b6:	f7ff fc37 	bl	800f028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800f7ba:	9b06      	ldr	r3, [sp, #24]
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800f7bc:	b9cb      	cbnz	r3, 800f7f2 <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800f7be:	f7ff fc21 	bl	800f004 <HAL_RCC_GetPCLK1Freq>
 800f7c2:	4603      	mov	r3, r0
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800f7c4:	4a18      	ldr	r2, [pc, #96]	@ (800f828 <HAL_InitTick+0x90>)
 800f7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ca:	0c9b      	lsrs	r3, r3, #18
 800f7cc:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800f7ce:	4817      	ldr	r0, [pc, #92]	@ (800f82c <HAL_InitTick+0x94>)
 800f7d0:	4a17      	ldr	r2, [pc, #92]	@ (800f830 <HAL_InitTick+0x98>)
 800f7d2:	6002      	str	r2, [r0, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800f7d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800f7d8:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800f7da:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7e0:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f7e2:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800f7e4:	f7ff ffa4 	bl	800f730 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800f7e8:	4605      	mov	r5, r0
 800f7ea:	b130      	cbz	r0, 800f7fa <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	b009      	add	sp, #36	@ 0x24
 800f7f0:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800f7f2:	f7ff fc07 	bl	800f004 <HAL_RCC_GetPCLK1Freq>
 800f7f6:	0043      	lsls	r3, r0, #1
 800f7f8:	e7e4      	b.n	800f7c4 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800f7fa:	480c      	ldr	r0, [pc, #48]	@ (800f82c <HAL_InitTick+0x94>)
 800f7fc:	f7ff fe60 	bl	800f4c0 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800f800:	4605      	mov	r5, r0
 800f802:	2800      	cmp	r0, #0
 800f804:	d1f2      	bne.n	800f7ec <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800f806:	2036      	movs	r0, #54	@ 0x36
 800f808:	f7fd fde6 	bl	800d3d8 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f80c:	2c0f      	cmp	r4, #15
 800f80e:	d901      	bls.n	800f814 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 800f810:	2501      	movs	r5, #1
 800f812:	e7eb      	b.n	800f7ec <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800f814:	2200      	movs	r2, #0
 800f816:	4621      	mov	r1, r4
 800f818:	2036      	movs	r0, #54	@ 0x36
 800f81a:	f7fd fdcd 	bl	800d3b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f81e:	4b05      	ldr	r3, [pc, #20]	@ (800f834 <HAL_InitTick+0x9c>)
 800f820:	601c      	str	r4, [r3, #0]
 800f822:	e7e3      	b.n	800f7ec <HAL_InitTick+0x54>
 800f824:	40021000 	.word	0x40021000
 800f828:	431bde83 	.word	0x431bde83
 800f82c:	20003e70 	.word	0x20003e70
 800f830:	40001000 	.word	0x40001000
 800f834:	20000010 	.word	0x20000010

0800f838 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800f838:	e7fe      	b.n	800f838 <NMI_Handler>

0800f83a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f83a:	e7fe      	b.n	800f83a <HardFault_Handler>

0800f83c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f83c:	e7fe      	b.n	800f83c <MemManage_Handler>

0800f83e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f83e:	e7fe      	b.n	800f83e <BusFault_Handler>

0800f840 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f840:	e7fe      	b.n	800f840 <UsageFault_Handler>

0800f842 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f842:	4770      	bx	lr

0800f844 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800f844:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800f846:	4802      	ldr	r0, [pc, #8]	@ (800f850 <CAN1_RX0_IRQHandler+0xc>)
 800f848:	f7fd fc38 	bl	800d0bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800f84c:	bd08      	pop	{r3, pc}
 800f84e:	bf00      	nop
 800f850:	20003d98 	.word	0x20003d98

0800f854 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800f854:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800f856:	4802      	ldr	r0, [pc, #8]	@ (800f860 <CAN1_RX1_IRQHandler+0xc>)
 800f858:	f7fd fc30 	bl	800d0bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800f85c:	bd08      	pop	{r3, pc}
 800f85e:	bf00      	nop
 800f860:	20003d98 	.word	0x20003d98

0800f864 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800f864:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800f866:	4802      	ldr	r0, [pc, #8]	@ (800f870 <CAN1_TX_IRQHandler+0xc>)
 800f868:	f7fd fc28 	bl	800d0bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800f86c:	bd08      	pop	{r3, pc}
 800f86e:	bf00      	nop
 800f870:	20003d98 	.word	0x20003d98

0800f874 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800f874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800f876:	4802      	ldr	r0, [pc, #8]	@ (800f880 <CAN1_SCE_IRQHandler+0xc>)
 800f878:	f7fd fc20 	bl	800d0bc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800f87c:	bd08      	pop	{r3, pc}
 800f87e:	bf00      	nop
 800f880:	20003d98 	.word	0x20003d98

0800f884 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800f884:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800f886:	4802      	ldr	r0, [pc, #8]	@ (800f890 <TIM6_DAC_IRQHandler+0xc>)
 800f888:	f7ff fe54 	bl	800f534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800f88c:	bd08      	pop	{r3, pc}
 800f88e:	bf00      	nop
 800f890:	20003e70 	.word	0x20003e70

0800f894 <SystemInit>:

void SystemInit(void)
{
  /* Reset RCC clock configuration to default state (coming from bootloader) */
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800f894:	4b0f      	ldr	r3, [pc, #60]	@ (800f8d4 <SystemInit+0x40>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	f042 0201 	orr.w	r2, r2, #1
 800f89c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register (switch to MSI as system clock) */
  RCC->CFGR = 0x00000000U;
 800f89e:	2100      	movs	r1, #0
 800f8a0:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON, HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 800f8a8:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 800f8ac:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register to default */
  RCC->PLLCFGR = 0x00001000U;
 800f8ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800f8b2:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800f8ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800f8bc:	6199      	str	r1, [r3, #24]

#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 800f8be:	4b06      	ldr	r3, [pc, #24]	@ (800f8d8 <SystemInit+0x44>)
 800f8c0:	4a06      	ldr	r2, [pc, #24]	@ (800f8dc <SystemInit+0x48>)
 800f8c2:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800f8c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f8c8:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800f8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif
}
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	40021000 	.word	0x40021000
 800f8d8:	e000ed00 	.word	0xe000ed00
 800f8dc:	08008000 	.word	0x08008000

0800f8e0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8e0:	4b08      	ldr	r3, [pc, #32]	@ (800f904 <prvResetNextTaskUnblockTime+0x24>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	b923      	cbnz	r3, 800f8f2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f8e8:	4b07      	ldr	r3, [pc, #28]	@ (800f908 <prvResetNextTaskUnblockTime+0x28>)
 800f8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ee:	601a      	str	r2, [r3, #0]
 800f8f0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8f2:	4b04      	ldr	r3, [pc, #16]	@ (800f904 <prvResetNextTaskUnblockTime+0x24>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	4b02      	ldr	r3, [pc, #8]	@ (800f908 <prvResetNextTaskUnblockTime+0x28>)
 800f8fe:	601a      	str	r2, [r3, #0]
	}
}
 800f900:	4770      	bx	lr
 800f902:	bf00      	nop
 800f904:	20003f2c 	.word	0x20003f2c
 800f908:	20003ec4 	.word	0x20003ec4

0800f90c <prvInitialiseNewTask>:
{
 800f90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f910:	4680      	mov	r8, r0
 800f912:	460d      	mov	r5, r1
 800f914:	4617      	mov	r7, r2
 800f916:	4699      	mov	r9, r3
 800f918:	9e08      	ldr	r6, [sp, #32]
 800f91a:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 800f91e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f920:	0092      	lsls	r2, r2, #2
 800f922:	21a5      	movs	r1, #165	@ 0xa5
 800f924:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f926:	f000 ffd6 	bl	80108d6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f92a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800f92c:	f107 4280 	add.w	r2, r7, #1073741824	@ 0x40000000
 800f930:	3a01      	subs	r2, #1
 800f932:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f936:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800f93a:	b3a5      	cbz	r5, 800f9a6 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f93c:	f04f 0c00 	mov.w	ip, #0
 800f940:	f1bc 0f0f 	cmp.w	ip, #15
 800f944:	d809      	bhi.n	800f95a <prvInitialiseNewTask+0x4e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f946:	f815 300c 	ldrb.w	r3, [r5, ip]
 800f94a:	eb04 020c 	add.w	r2, r4, ip
 800f94e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800f952:	b113      	cbz	r3, 800f95a <prvInitialiseNewTask+0x4e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f954:	f10c 0c01 	add.w	ip, ip, #1
 800f958:	e7f2      	b.n	800f940 <prvInitialiseNewTask+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f95a:	2300      	movs	r3, #0
 800f95c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f960:	2e37      	cmp	r6, #55	@ 0x37
 800f962:	d900      	bls.n	800f966 <prvInitialiseNewTask+0x5a>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f964:	2637      	movs	r6, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800f966:	62e6      	str	r6, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800f968:	64e6      	str	r6, [r4, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f96a:	2500      	movs	r5, #0
 800f96c:	6525      	str	r5, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f96e:	1d20      	adds	r0, r4, #4
 800f970:	f7fb f929 	bl	800abc6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f974:	f104 0018 	add.w	r0, r4, #24
 800f978:	f7fb f925 	bl	800abc6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f97c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f97e:	f1c6 0638 	rsb	r6, r6, #56	@ 0x38
 800f982:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f984:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800f986:	6565      	str	r5, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f988:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f98c:	464a      	mov	r2, r9
 800f98e:	4641      	mov	r1, r8
 800f990:	4638      	mov	r0, r7
 800f992:	f7fb fc09 	bl	800b1a8 <pxPortInitialiseStack>
 800f996:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800f998:	f1ba 0f00 	cmp.w	sl, #0
 800f99c:	d001      	beq.n	800f9a2 <prvInitialiseNewTask+0x96>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f99e:	f8ca 4000 	str.w	r4, [sl]
}
 800f9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800f9ac:	e7d8      	b.n	800f960 <prvInitialiseNewTask+0x54>
	...

0800f9b0 <prvInitialiseTaskLists>:
{
 800f9b0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f9b2:	2400      	movs	r4, #0
 800f9b4:	e007      	b.n	800f9c6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f9b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800f9ba:	0093      	lsls	r3, r2, #2
 800f9bc:	480e      	ldr	r0, [pc, #56]	@ (800f9f8 <prvInitialiseTaskLists+0x48>)
 800f9be:	4418      	add	r0, r3
 800f9c0:	f7fb f8f6 	bl	800abb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f9c4:	3401      	adds	r4, #1
 800f9c6:	2c37      	cmp	r4, #55	@ 0x37
 800f9c8:	d9f5      	bls.n	800f9b6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800f9ca:	4d0c      	ldr	r5, [pc, #48]	@ (800f9fc <prvInitialiseTaskLists+0x4c>)
 800f9cc:	4628      	mov	r0, r5
 800f9ce:	f7fb f8ef 	bl	800abb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f9d2:	4c0b      	ldr	r4, [pc, #44]	@ (800fa00 <prvInitialiseTaskLists+0x50>)
 800f9d4:	4620      	mov	r0, r4
 800f9d6:	f7fb f8eb 	bl	800abb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f9da:	480a      	ldr	r0, [pc, #40]	@ (800fa04 <prvInitialiseTaskLists+0x54>)
 800f9dc:	f7fb f8e8 	bl	800abb0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f9e0:	4809      	ldr	r0, [pc, #36]	@ (800fa08 <prvInitialiseTaskLists+0x58>)
 800f9e2:	f7fb f8e5 	bl	800abb0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f9e6:	4809      	ldr	r0, [pc, #36]	@ (800fa0c <prvInitialiseTaskLists+0x5c>)
 800f9e8:	f7fb f8e2 	bl	800abb0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f9ec:	4b08      	ldr	r3, [pc, #32]	@ (800fa10 <prvInitialiseTaskLists+0x60>)
 800f9ee:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f9f0:	4b08      	ldr	r3, [pc, #32]	@ (800fa14 <prvInitialiseTaskLists+0x64>)
 800f9f2:	601c      	str	r4, [r3, #0]
}
 800f9f4:	bd38      	pop	{r3, r4, r5, pc}
 800f9f6:	bf00      	nop
 800f9f8:	20003f58 	.word	0x20003f58
 800f9fc:	20003f44 	.word	0x20003f44
 800fa00:	20003f30 	.word	0x20003f30
 800fa04:	20003f14 	.word	0x20003f14
 800fa08:	20003f00 	.word	0x20003f00
 800fa0c:	20003ee8 	.word	0x20003ee8
 800fa10:	20003f2c 	.word	0x20003f2c
 800fa14:	20003f28 	.word	0x20003f28

0800fa18 <prvAddNewTaskToReadyList>:
{
 800fa18:	b510      	push	{r4, lr}
 800fa1a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800fa1c:	f7fb fbf2 	bl	800b204 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800fa20:	4a22      	ldr	r2, [pc, #136]	@ (800faac <prvAddNewTaskToReadyList+0x94>)
 800fa22:	6813      	ldr	r3, [r2, #0]
 800fa24:	3301      	adds	r3, #1
 800fa26:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fa28:	4b21      	ldr	r3, [pc, #132]	@ (800fab0 <prvAddNewTaskToReadyList+0x98>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	b15b      	cbz	r3, 800fa46 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800fa2e:	4b21      	ldr	r3, [pc, #132]	@ (800fab4 <prvAddNewTaskToReadyList+0x9c>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	b96b      	cbnz	r3, 800fa50 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fa34:	4b1e      	ldr	r3, [pc, #120]	@ (800fab0 <prvAddNewTaskToReadyList+0x98>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa3a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d807      	bhi.n	800fa50 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800fa40:	4b1b      	ldr	r3, [pc, #108]	@ (800fab0 <prvAddNewTaskToReadyList+0x98>)
 800fa42:	601c      	str	r4, [r3, #0]
 800fa44:	e004      	b.n	800fa50 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800fa46:	4b1a      	ldr	r3, [pc, #104]	@ (800fab0 <prvAddNewTaskToReadyList+0x98>)
 800fa48:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fa4a:	6813      	ldr	r3, [r2, #0]
 800fa4c:	2b01      	cmp	r3, #1
 800fa4e:	d029      	beq.n	800faa4 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 800fa50:	4a19      	ldr	r2, [pc, #100]	@ (800fab8 <prvAddNewTaskToReadyList+0xa0>)
 800fa52:	6813      	ldr	r3, [r2, #0]
 800fa54:	3301      	adds	r3, #1
 800fa56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fa58:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800fa5a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fa5c:	4b17      	ldr	r3, [pc, #92]	@ (800fabc <prvAddNewTaskToReadyList+0xa4>)
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4298      	cmp	r0, r3
 800fa62:	d901      	bls.n	800fa68 <prvAddNewTaskToReadyList+0x50>
 800fa64:	4b15      	ldr	r3, [pc, #84]	@ (800fabc <prvAddNewTaskToReadyList+0xa4>)
 800fa66:	6018      	str	r0, [r3, #0]
 800fa68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800fa6c:	1d21      	adds	r1, r4, #4
 800fa6e:	4b14      	ldr	r3, [pc, #80]	@ (800fac0 <prvAddNewTaskToReadyList+0xa8>)
 800fa70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fa74:	f7fb f8aa 	bl	800abcc <vListInsertEnd>
	taskEXIT_CRITICAL();
 800fa78:	f7fb fbe6 	bl	800b248 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800fa7c:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <prvAddNewTaskToReadyList+0x9c>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	b17b      	cbz	r3, 800faa2 <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fa82:	4b0b      	ldr	r3, [pc, #44]	@ (800fab0 <prvAddNewTaskToReadyList+0x98>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa88:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d209      	bcs.n	800faa2 <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 800fa8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fa92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa96:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	f3bf 8f6f 	isb	sy
}
 800faa2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800faa4:	f7ff ff84 	bl	800f9b0 <prvInitialiseTaskLists>
 800faa8:	e7d2      	b.n	800fa50 <prvAddNewTaskToReadyList+0x38>
 800faaa:	bf00      	nop
 800faac:	20003ee4 	.word	0x20003ee4
 800fab0:	200043b8 	.word	0x200043b8
 800fab4:	20003ed8 	.word	0x20003ed8
 800fab8:	20003ec8 	.word	0x20003ec8
 800fabc:	20003edc 	.word	0x20003edc
 800fac0:	20003f58 	.word	0x20003f58

0800fac4 <prvDeleteTCB>:
	{
 800fac4:	b510      	push	{r4, lr}
 800fac6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fac8:	f890 3059 	ldrb.w	r3, [r0, #89]	@ 0x59
 800facc:	b163      	cbz	r3, 800fae8 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800face:	2b01      	cmp	r3, #1
 800fad0:	d011      	beq.n	800faf6 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	d00e      	beq.n	800faf4 <prvDeleteTCB+0x30>
 800fad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fada:	f383 8811 	msr	BASEPRI, r3
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	f3bf 8f4f 	dsb	sy
 800fae6:	e7fe      	b.n	800fae6 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 800fae8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800faea:	f7fb f817 	bl	800ab1c <vPortFree>
				vPortFree( pxTCB );
 800faee:	4620      	mov	r0, r4
 800faf0:	f7fb f814 	bl	800ab1c <vPortFree>
	}
 800faf4:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 800faf6:	f7fb f811 	bl	800ab1c <vPortFree>
 800fafa:	e7fb      	b.n	800faf4 <prvDeleteTCB+0x30>

0800fafc <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fafc:	4b0f      	ldr	r3, [pc, #60]	@ (800fb3c <prvCheckTasksWaitingTermination+0x40>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	b1d3      	cbz	r3, 800fb38 <prvCheckTasksWaitingTermination+0x3c>
{
 800fb02:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800fb04:	f7fb fb7e 	bl	800b204 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb08:	4b0d      	ldr	r3, [pc, #52]	@ (800fb40 <prvCheckTasksWaitingTermination+0x44>)
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb0e:	1d20      	adds	r0, r4, #4
 800fb10:	f7fb f880 	bl	800ac14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fb14:	4a0b      	ldr	r2, [pc, #44]	@ (800fb44 <prvCheckTasksWaitingTermination+0x48>)
 800fb16:	6813      	ldr	r3, [r2, #0]
 800fb18:	3b01      	subs	r3, #1
 800fb1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fb1c:	4a07      	ldr	r2, [pc, #28]	@ (800fb3c <prvCheckTasksWaitingTermination+0x40>)
 800fb1e:	6813      	ldr	r3, [r2, #0]
 800fb20:	3b01      	subs	r3, #1
 800fb22:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800fb24:	f7fb fb90 	bl	800b248 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f7ff ffcb 	bl	800fac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fb2e:	4b03      	ldr	r3, [pc, #12]	@ (800fb3c <prvCheckTasksWaitingTermination+0x40>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1e6      	bne.n	800fb04 <prvCheckTasksWaitingTermination+0x8>
 }
 800fb36:	bd10      	pop	{r4, pc}
 800fb38:	4770      	bx	lr
 800fb3a:	bf00      	nop
 800fb3c:	20003efc 	.word	0x20003efc
 800fb40:	20003f00 	.word	0x20003f00
 800fb44:	20003ee4 	.word	0x20003ee4

0800fb48 <prvIdleTask>:
{
 800fb48:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800fb4a:	f7ff ffd7 	bl	800fafc <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fb4e:	4b07      	ldr	r3, [pc, #28]	@ (800fb6c <prvIdleTask+0x24>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d9f9      	bls.n	800fb4a <prvIdleTask+0x2>
				taskYIELD();
 800fb56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fb5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800fb62:	f3bf 8f4f 	dsb	sy
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	e7ee      	b.n	800fb4a <prvIdleTask+0x2>
 800fb6c:	20003f58 	.word	0x20003f58

0800fb70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb70:	b570      	push	{r4, r5, r6, lr}
 800fb72:	4604      	mov	r4, r0
 800fb74:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb76:	4b17      	ldr	r3, [pc, #92]	@ (800fbd4 <prvAddCurrentTaskToDelayedList+0x64>)
 800fb78:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb7a:	4b17      	ldr	r3, [pc, #92]	@ (800fbd8 <prvAddCurrentTaskToDelayedList+0x68>)
 800fb7c:	6818      	ldr	r0, [r3, #0]
 800fb7e:	3004      	adds	r0, #4
 800fb80:	f7fb f848 	bl	800ac14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb84:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fb88:	d00d      	beq.n	800fba6 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb8a:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fb8c:	4b12      	ldr	r3, [pc, #72]	@ (800fbd8 <prvAddCurrentTaskToDelayedList+0x68>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800fb92:	42a6      	cmp	r6, r4
 800fb94:	d910      	bls.n	800fbb8 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb96:	4b11      	ldr	r3, [pc, #68]	@ (800fbdc <prvAddCurrentTaskToDelayedList+0x6c>)
 800fb98:	6818      	ldr	r0, [r3, #0]
 800fb9a:	4b0f      	ldr	r3, [pc, #60]	@ (800fbd8 <prvAddCurrentTaskToDelayedList+0x68>)
 800fb9c:	6819      	ldr	r1, [r3, #0]
 800fb9e:	3104      	adds	r1, #4
 800fba0:	f7fb f81f 	bl	800abe2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fba4:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fba6:	2d00      	cmp	r5, #0
 800fba8:	d0ef      	beq.n	800fb8a <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbaa:	4b0b      	ldr	r3, [pc, #44]	@ (800fbd8 <prvAddCurrentTaskToDelayedList+0x68>)
 800fbac:	6819      	ldr	r1, [r3, #0]
 800fbae:	3104      	adds	r1, #4
 800fbb0:	480b      	ldr	r0, [pc, #44]	@ (800fbe0 <prvAddCurrentTaskToDelayedList+0x70>)
 800fbb2:	f7fb f80b 	bl	800abcc <vListInsertEnd>
 800fbb6:	e7f5      	b.n	800fba4 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbb8:	4b0a      	ldr	r3, [pc, #40]	@ (800fbe4 <prvAddCurrentTaskToDelayedList+0x74>)
 800fbba:	6818      	ldr	r0, [r3, #0]
 800fbbc:	4b06      	ldr	r3, [pc, #24]	@ (800fbd8 <prvAddCurrentTaskToDelayedList+0x68>)
 800fbbe:	6819      	ldr	r1, [r3, #0]
 800fbc0:	3104      	adds	r1, #4
 800fbc2:	f7fb f80e 	bl	800abe2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fbc6:	4b08      	ldr	r3, [pc, #32]	@ (800fbe8 <prvAddCurrentTaskToDelayedList+0x78>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	42a3      	cmp	r3, r4
 800fbcc:	d9ea      	bls.n	800fba4 <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 800fbce:	4b06      	ldr	r3, [pc, #24]	@ (800fbe8 <prvAddCurrentTaskToDelayedList+0x78>)
 800fbd0:	601c      	str	r4, [r3, #0]
}
 800fbd2:	e7e7      	b.n	800fba4 <prvAddCurrentTaskToDelayedList+0x34>
 800fbd4:	20003ee0 	.word	0x20003ee0
 800fbd8:	200043b8 	.word	0x200043b8
 800fbdc:	20003f28 	.word	0x20003f28
 800fbe0:	20003ee8 	.word	0x20003ee8
 800fbe4:	20003f2c 	.word	0x20003f2c
 800fbe8:	20003ec4 	.word	0x20003ec4

0800fbec <xTaskCreateStatic>:
	{
 800fbec:	b530      	push	{r4, r5, lr}
 800fbee:	b087      	sub	sp, #28
 800fbf0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800fbf2:	b17c      	cbz	r4, 800fc14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fbf4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800fbf6:	b1b5      	cbz	r5, 800fc26 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800fbf8:	255c      	movs	r5, #92	@ 0x5c
 800fbfa:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fbfc:	9d04      	ldr	r5, [sp, #16]
 800fbfe:	2d5c      	cmp	r5, #92	@ 0x5c
 800fc00:	d01a      	beq.n	800fc38 <xTaskCreateStatic+0x4c>
 800fc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc06:	f383 8811 	msr	BASEPRI, r3
 800fc0a:	f3bf 8f6f 	isb	sy
 800fc0e:	f3bf 8f4f 	dsb	sy
 800fc12:	e7fe      	b.n	800fc12 <xTaskCreateStatic+0x26>
 800fc14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc18:	f383 8811 	msr	BASEPRI, r3
 800fc1c:	f3bf 8f6f 	isb	sy
 800fc20:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800fc24:	e7fe      	b.n	800fc24 <xTaskCreateStatic+0x38>
 800fc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc2a:	f383 8811 	msr	BASEPRI, r3
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800fc36:	e7fe      	b.n	800fc36 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fc38:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fc3a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800fc3c:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fc3e:	2402      	movs	r4, #2
 800fc40:	f885 4059 	strb.w	r4, [r5, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fc44:	2400      	movs	r4, #0
 800fc46:	9403      	str	r4, [sp, #12]
 800fc48:	9502      	str	r5, [sp, #8]
 800fc4a:	ac05      	add	r4, sp, #20
 800fc4c:	9401      	str	r4, [sp, #4]
 800fc4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fc50:	9400      	str	r4, [sp, #0]
 800fc52:	f7ff fe5b 	bl	800f90c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc56:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800fc58:	f7ff fede 	bl	800fa18 <prvAddNewTaskToReadyList>
	}
 800fc5c:	9805      	ldr	r0, [sp, #20]
 800fc5e:	b007      	add	sp, #28
 800fc60:	bd30      	pop	{r4, r5, pc}

0800fc62 <xTaskCreate>:
	{
 800fc62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc66:	b085      	sub	sp, #20
 800fc68:	4607      	mov	r7, r0
 800fc6a:	4688      	mov	r8, r1
 800fc6c:	4614      	mov	r4, r2
 800fc6e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc70:	0090      	lsls	r0, r2, #2
 800fc72:	f7fa fec7 	bl	800aa04 <pvPortMalloc>
			if( pxStack != NULL )
 800fc76:	b308      	cbz	r0, 800fcbc <xTaskCreate+0x5a>
 800fc78:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc7a:	205c      	movs	r0, #92	@ 0x5c
 800fc7c:	f7fa fec2 	bl	800aa04 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800fc80:	4605      	mov	r5, r0
 800fc82:	b1a8      	cbz	r0, 800fcb0 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800fc84:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	f880 3059 	strb.w	r3, [r0, #89]	@ 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc8e:	9303      	str	r3, [sp, #12]
 800fc90:	9002      	str	r0, [sp, #8]
 800fc92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc94:	9301      	str	r3, [sp, #4]
 800fc96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc98:	9300      	str	r3, [sp, #0]
 800fc9a:	4633      	mov	r3, r6
 800fc9c:	4622      	mov	r2, r4
 800fc9e:	4641      	mov	r1, r8
 800fca0:	4638      	mov	r0, r7
 800fca2:	f7ff fe33 	bl	800f90c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fca6:	4628      	mov	r0, r5
 800fca8:	f7ff feb6 	bl	800fa18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fcac:	2001      	movs	r0, #1
 800fcae:	e007      	b.n	800fcc0 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 800fcb0:	4648      	mov	r0, r9
 800fcb2:	f7fa ff33 	bl	800ab1c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fcb6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcba:	e001      	b.n	800fcc0 <xTaskCreate+0x5e>
 800fcbc:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800fcc0:	b005      	add	sp, #20
 800fcc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800fcc8 <vTaskStartScheduler>:
{
 800fcc8:	b510      	push	{r4, lr}
 800fcca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fccc:	2400      	movs	r4, #0
 800fcce:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fcd0:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fcd2:	aa07      	add	r2, sp, #28
 800fcd4:	a906      	add	r1, sp, #24
 800fcd6:	a805      	add	r0, sp, #20
 800fcd8:	f7fa faf0 	bl	800a2bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fcdc:	9b05      	ldr	r3, [sp, #20]
 800fcde:	9302      	str	r3, [sp, #8]
 800fce0:	9b06      	ldr	r3, [sp, #24]
 800fce2:	9301      	str	r3, [sp, #4]
 800fce4:	9400      	str	r4, [sp, #0]
 800fce6:	4623      	mov	r3, r4
 800fce8:	9a07      	ldr	r2, [sp, #28]
 800fcea:	4917      	ldr	r1, [pc, #92]	@ (800fd48 <vTaskStartScheduler+0x80>)
 800fcec:	4817      	ldr	r0, [pc, #92]	@ (800fd4c <vTaskStartScheduler+0x84>)
 800fcee:	f7ff ff7d 	bl	800fbec <xTaskCreateStatic>
 800fcf2:	4b17      	ldr	r3, [pc, #92]	@ (800fd50 <vTaskStartScheduler+0x88>)
 800fcf4:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 800fcf6:	b1c0      	cbz	r0, 800fd2a <vTaskStartScheduler+0x62>
			xReturn = xTimerCreateTimerTask();
 800fcf8:	f000 fc06 	bl	8010508 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800fcfc:	2801      	cmp	r0, #1
 800fcfe:	d115      	bne.n	800fd2c <vTaskStartScheduler+0x64>
 800fd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd04:	f383 8811 	msr	BASEPRI, r3
 800fd08:	f3bf 8f6f 	isb	sy
 800fd0c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800fd10:	4b10      	ldr	r3, [pc, #64]	@ (800fd54 <vTaskStartScheduler+0x8c>)
 800fd12:	f04f 32ff 	mov.w	r2, #4294967295
 800fd16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fd18:	4b0f      	ldr	r3, [pc, #60]	@ (800fd58 <vTaskStartScheduler+0x90>)
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fd1e:	4b0f      	ldr	r3, [pc, #60]	@ (800fd5c <vTaskStartScheduler+0x94>)
 800fd20:	2200      	movs	r2, #0
 800fd22:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800fd24:	f7fb fb08 	bl	800b338 <xPortStartScheduler>
		}
 800fd28:	e003      	b.n	800fd32 <vTaskStartScheduler+0x6a>
			xReturn = pdFAIL;
 800fd2a:	2000      	movs	r0, #0
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fd2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fd30:	d001      	beq.n	800fd36 <vTaskStartScheduler+0x6e>
}
 800fd32:	b008      	add	sp, #32
 800fd34:	bd10      	pop	{r4, pc}
 800fd36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd3a:	f383 8811 	msr	BASEPRI, r3
 800fd3e:	f3bf 8f6f 	isb	sy
 800fd42:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fd46:	e7fe      	b.n	800fd46 <vTaskStartScheduler+0x7e>
 800fd48:	08010cd4 	.word	0x08010cd4
 800fd4c:	0800fb49 	.word	0x0800fb49
 800fd50:	20003ec0 	.word	0x20003ec0
 800fd54:	20003ec4 	.word	0x20003ec4
 800fd58:	20003ed8 	.word	0x20003ed8
 800fd5c:	20003ee0 	.word	0x20003ee0

0800fd60 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800fd60:	4a02      	ldr	r2, [pc, #8]	@ (800fd6c <vTaskSuspendAll+0xc>)
 800fd62:	6813      	ldr	r3, [r2, #0]
 800fd64:	3301      	adds	r3, #1
 800fd66:	6013      	str	r3, [r2, #0]
}
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	20003ebc 	.word	0x20003ebc

0800fd70 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800fd70:	4b01      	ldr	r3, [pc, #4]	@ (800fd78 <xTaskGetTickCount+0x8>)
 800fd72:	6818      	ldr	r0, [r3, #0]
}
 800fd74:	4770      	bx	lr
 800fd76:	bf00      	nop
 800fd78:	20003ee0 	.word	0x20003ee0

0800fd7c <xTaskGetTickCountFromISR>:
{
 800fd7c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd7e:	f7fb fb67 	bl	800b450 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800fd82:	4b01      	ldr	r3, [pc, #4]	@ (800fd88 <xTaskGetTickCountFromISR+0xc>)
 800fd84:	6818      	ldr	r0, [r3, #0]
}
 800fd86:	bd08      	pop	{r3, pc}
 800fd88:	20003ee0 	.word	0x20003ee0

0800fd8c <xTaskIncrementTick>:
{
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd8e:	4b3a      	ldr	r3, [pc, #232]	@ (800fe78 <xTaskIncrementTick+0xec>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d169      	bne.n	800fe6a <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd96:	4b39      	ldr	r3, [pc, #228]	@ (800fe7c <xTaskIncrementTick+0xf0>)
 800fd98:	681d      	ldr	r5, [r3, #0]
 800fd9a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800fd9c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd9e:	b9c5      	cbnz	r5, 800fdd2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800fda0:	4b37      	ldr	r3, [pc, #220]	@ (800fe80 <xTaskIncrementTick+0xf4>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	b143      	cbz	r3, 800fdba <xTaskIncrementTick+0x2e>
 800fda8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdac:	f383 8811 	msr	BASEPRI, r3
 800fdb0:	f3bf 8f6f 	isb	sy
 800fdb4:	f3bf 8f4f 	dsb	sy
 800fdb8:	e7fe      	b.n	800fdb8 <xTaskIncrementTick+0x2c>
 800fdba:	4a31      	ldr	r2, [pc, #196]	@ (800fe80 <xTaskIncrementTick+0xf4>)
 800fdbc:	6811      	ldr	r1, [r2, #0]
 800fdbe:	4b31      	ldr	r3, [pc, #196]	@ (800fe84 <xTaskIncrementTick+0xf8>)
 800fdc0:	6818      	ldr	r0, [r3, #0]
 800fdc2:	6010      	str	r0, [r2, #0]
 800fdc4:	6019      	str	r1, [r3, #0]
 800fdc6:	4a30      	ldr	r2, [pc, #192]	@ (800fe88 <xTaskIncrementTick+0xfc>)
 800fdc8:	6813      	ldr	r3, [r2, #0]
 800fdca:	3301      	adds	r3, #1
 800fdcc:	6013      	str	r3, [r2, #0]
 800fdce:	f7ff fd87 	bl	800f8e0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fdd2:	4b2e      	ldr	r3, [pc, #184]	@ (800fe8c <xTaskIncrementTick+0x100>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	42ab      	cmp	r3, r5
 800fdd8:	d93d      	bls.n	800fe56 <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 800fdda:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fddc:	4b2c      	ldr	r3, [pc, #176]	@ (800fe90 <xTaskIncrementTick+0x104>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fde2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fde6:	009a      	lsls	r2, r3, #2
 800fde8:	4b2a      	ldr	r3, [pc, #168]	@ (800fe94 <xTaskIncrementTick+0x108>)
 800fdea:	589b      	ldr	r3, [r3, r2]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d900      	bls.n	800fdf2 <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 800fdf0:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 800fdf2:	4b29      	ldr	r3, [pc, #164]	@ (800fe98 <xTaskIncrementTick+0x10c>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d03c      	beq.n	800fe74 <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800fdfa:	2701      	movs	r7, #1
	return xSwitchRequired;
 800fdfc:	e03a      	b.n	800fe74 <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 800fdfe:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe00:	4b1f      	ldr	r3, [pc, #124]	@ (800fe80 <xTaskIncrementTick+0xf4>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	b343      	cbz	r3, 800fe5a <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe08:	4b1d      	ldr	r3, [pc, #116]	@ (800fe80 <xTaskIncrementTick+0xf4>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fe10:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 800fe12:	429d      	cmp	r5, r3
 800fe14:	d326      	bcc.n	800fe64 <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe16:	1d26      	adds	r6, r4, #4
 800fe18:	4630      	mov	r0, r6
 800fe1a:	f7fa fefb 	bl	800ac14 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800fe20:	b11b      	cbz	r3, 800fe2a <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe22:	f104 0018 	add.w	r0, r4, #24
 800fe26:	f7fa fef5 	bl	800ac14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fe2a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800fe2c:	4a1b      	ldr	r2, [pc, #108]	@ (800fe9c <xTaskIncrementTick+0x110>)
 800fe2e:	6812      	ldr	r2, [r2, #0]
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d901      	bls.n	800fe38 <xTaskIncrementTick+0xac>
 800fe34:	4a19      	ldr	r2, [pc, #100]	@ (800fe9c <xTaskIncrementTick+0x110>)
 800fe36:	6013      	str	r3, [r2, #0]
 800fe38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800fe3c:	009a      	lsls	r2, r3, #2
 800fe3e:	4631      	mov	r1, r6
 800fe40:	4814      	ldr	r0, [pc, #80]	@ (800fe94 <xTaskIncrementTick+0x108>)
 800fe42:	4410      	add	r0, r2
 800fe44:	f7fa fec2 	bl	800abcc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe48:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800fe4a:	4b11      	ldr	r3, [pc, #68]	@ (800fe90 <xTaskIncrementTick+0x104>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d2d4      	bcs.n	800fdfe <xTaskIncrementTick+0x72>
 800fe54:	e7d4      	b.n	800fe00 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 800fe56:	2700      	movs	r7, #0
 800fe58:	e7d2      	b.n	800fe00 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe5a:	4b0c      	ldr	r3, [pc, #48]	@ (800fe8c <xTaskIncrementTick+0x100>)
 800fe5c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe60:	601a      	str	r2, [r3, #0]
					break;
 800fe62:	e7bb      	b.n	800fddc <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800fe64:	4a09      	ldr	r2, [pc, #36]	@ (800fe8c <xTaskIncrementTick+0x100>)
 800fe66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fe68:	e7b8      	b.n	800fddc <xTaskIncrementTick+0x50>
		++xPendedTicks;
 800fe6a:	4a0d      	ldr	r2, [pc, #52]	@ (800fea0 <xTaskIncrementTick+0x114>)
 800fe6c:	6813      	ldr	r3, [r2, #0]
 800fe6e:	3301      	adds	r3, #1
 800fe70:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800fe72:	2700      	movs	r7, #0
}
 800fe74:	4638      	mov	r0, r7
 800fe76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe78:	20003ebc 	.word	0x20003ebc
 800fe7c:	20003ee0 	.word	0x20003ee0
 800fe80:	20003f2c 	.word	0x20003f2c
 800fe84:	20003f28 	.word	0x20003f28
 800fe88:	20003ecc 	.word	0x20003ecc
 800fe8c:	20003ec4 	.word	0x20003ec4
 800fe90:	200043b8 	.word	0x200043b8
 800fe94:	20003f58 	.word	0x20003f58
 800fe98:	20003ed0 	.word	0x20003ed0
 800fe9c:	20003edc 	.word	0x20003edc
 800fea0:	20003ed4 	.word	0x20003ed4

0800fea4 <xTaskResumeAll>:
{
 800fea4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800fea6:	4b35      	ldr	r3, [pc, #212]	@ (800ff7c <xTaskResumeAll+0xd8>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	b943      	cbnz	r3, 800febe <xTaskResumeAll+0x1a>
 800feac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb0:	f383 8811 	msr	BASEPRI, r3
 800feb4:	f3bf 8f6f 	isb	sy
 800feb8:	f3bf 8f4f 	dsb	sy
 800febc:	e7fe      	b.n	800febc <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800febe:	f7fb f9a1 	bl	800b204 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fec2:	4b2e      	ldr	r3, [pc, #184]	@ (800ff7c <xTaskResumeAll+0xd8>)
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	3a01      	subs	r2, #1
 800fec8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d14f      	bne.n	800ff70 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fed0:	4b2b      	ldr	r3, [pc, #172]	@ (800ff80 <xTaskResumeAll+0xdc>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	b90b      	cbnz	r3, 800feda <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800fed6:	2400      	movs	r4, #0
 800fed8:	e04b      	b.n	800ff72 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 800feda:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fedc:	4b29      	ldr	r3, [pc, #164]	@ (800ff84 <xTaskResumeAll+0xe0>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	b31b      	cbz	r3, 800ff2a <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fee2:	4b28      	ldr	r3, [pc, #160]	@ (800ff84 <xTaskResumeAll+0xe0>)
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fee8:	f104 0018 	add.w	r0, r4, #24
 800feec:	f7fa fe92 	bl	800ac14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fef0:	1d25      	adds	r5, r4, #4
 800fef2:	4628      	mov	r0, r5
 800fef4:	f7fa fe8e 	bl	800ac14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fef8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800fefa:	4b23      	ldr	r3, [pc, #140]	@ (800ff88 <xTaskResumeAll+0xe4>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	4298      	cmp	r0, r3
 800ff00:	d901      	bls.n	800ff06 <xTaskResumeAll+0x62>
 800ff02:	4b21      	ldr	r3, [pc, #132]	@ (800ff88 <xTaskResumeAll+0xe4>)
 800ff04:	6018      	str	r0, [r3, #0]
 800ff06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	4b1f      	ldr	r3, [pc, #124]	@ (800ff8c <xTaskResumeAll+0xe8>)
 800ff0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ff12:	f7fa fe5b 	bl	800abcc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ff16:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ff18:	4b1d      	ldr	r3, [pc, #116]	@ (800ff90 <xTaskResumeAll+0xec>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d3dc      	bcc.n	800fedc <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 800ff22:	4b1c      	ldr	r3, [pc, #112]	@ (800ff94 <xTaskResumeAll+0xf0>)
 800ff24:	2201      	movs	r2, #1
 800ff26:	601a      	str	r2, [r3, #0]
 800ff28:	e7d8      	b.n	800fedc <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 800ff2a:	b10c      	cbz	r4, 800ff30 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 800ff2c:	f7ff fcd8 	bl	800f8e0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ff30:	4b19      	ldr	r3, [pc, #100]	@ (800ff98 <xTaskResumeAll+0xf4>)
 800ff32:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800ff34:	b984      	cbnz	r4, 800ff58 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 800ff36:	4b17      	ldr	r3, [pc, #92]	@ (800ff94 <xTaskResumeAll+0xf0>)
 800ff38:	681c      	ldr	r4, [r3, #0]
 800ff3a:	b1d4      	cbz	r4, 800ff72 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 800ff3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ff40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800ff50:	2401      	movs	r4, #1
 800ff52:	e00e      	b.n	800ff72 <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ff54:	3c01      	subs	r4, #1
 800ff56:	d007      	beq.n	800ff68 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 800ff58:	f7ff ff18 	bl	800fd8c <xTaskIncrementTick>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	d0f9      	beq.n	800ff54 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 800ff60:	4b0c      	ldr	r3, [pc, #48]	@ (800ff94 <xTaskResumeAll+0xf0>)
 800ff62:	2201      	movs	r2, #1
 800ff64:	601a      	str	r2, [r3, #0]
 800ff66:	e7f5      	b.n	800ff54 <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 800ff68:	4b0b      	ldr	r3, [pc, #44]	@ (800ff98 <xTaskResumeAll+0xf4>)
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	601a      	str	r2, [r3, #0]
 800ff6e:	e7e2      	b.n	800ff36 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 800ff70:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800ff72:	f7fb f969 	bl	800b248 <vPortExitCritical>
}
 800ff76:	4620      	mov	r0, r4
 800ff78:	bd38      	pop	{r3, r4, r5, pc}
 800ff7a:	bf00      	nop
 800ff7c:	20003ebc 	.word	0x20003ebc
 800ff80:	20003ee4 	.word	0x20003ee4
 800ff84:	20003f14 	.word	0x20003f14
 800ff88:	20003edc 	.word	0x20003edc
 800ff8c:	20003f58 	.word	0x20003f58
 800ff90:	200043b8 	.word	0x200043b8
 800ff94:	20003ed0 	.word	0x20003ed0
 800ff98:	20003ed4 	.word	0x20003ed4

0800ff9c <vTaskDelay>:
	{
 800ff9c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ff9e:	b1a8      	cbz	r0, 800ffcc <vTaskDelay+0x30>
 800ffa0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800ffa2:	4b10      	ldr	r3, [pc, #64]	@ (800ffe4 <vTaskDelay+0x48>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	b143      	cbz	r3, 800ffba <vTaskDelay+0x1e>
 800ffa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffac:	f383 8811 	msr	BASEPRI, r3
 800ffb0:	f3bf 8f6f 	isb	sy
 800ffb4:	f3bf 8f4f 	dsb	sy
 800ffb8:	e7fe      	b.n	800ffb8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800ffba:	f7ff fed1 	bl	800fd60 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ffbe:	2100      	movs	r1, #0
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f7ff fdd5 	bl	800fb70 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800ffc6:	f7ff ff6d 	bl	800fea4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800ffca:	b948      	cbnz	r0, 800ffe0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 800ffcc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ffd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	f3bf 8f6f 	isb	sy
	}
 800ffe0:	bd10      	pop	{r4, pc}
 800ffe2:	bf00      	nop
 800ffe4:	20003ebc 	.word	0x20003ebc

0800ffe8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ffe8:	4b20      	ldr	r3, [pc, #128]	@ (801006c <vTaskSwitchContext+0x84>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	b11b      	cbz	r3, 800fff6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800ffee:	4b20      	ldr	r3, [pc, #128]	@ (8010070 <vTaskSwitchContext+0x88>)
 800fff0:	2201      	movs	r2, #1
 800fff2:	601a      	str	r2, [r3, #0]
 800fff4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800fff6:	4b1e      	ldr	r3, [pc, #120]	@ (8010070 <vTaskSwitchContext+0x88>)
 800fff8:	2200      	movs	r2, #0
 800fffa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fffc:	4b1d      	ldr	r3, [pc, #116]	@ (8010074 <vTaskSwitchContext+0x8c>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8010004:	008a      	lsls	r2, r1, #2
 8010006:	491c      	ldr	r1, [pc, #112]	@ (8010078 <vTaskSwitchContext+0x90>)
 8010008:	588a      	ldr	r2, [r1, r2]
 801000a:	b95a      	cbnz	r2, 8010024 <vTaskSwitchContext+0x3c>
 801000c:	b10b      	cbz	r3, 8010012 <vTaskSwitchContext+0x2a>
 801000e:	3b01      	subs	r3, #1
 8010010:	e7f6      	b.n	8010000 <vTaskSwitchContext+0x18>
 8010012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010016:	f383 8811 	msr	BASEPRI, r3
 801001a:	f3bf 8f6f 	isb	sy
 801001e:	f3bf 8f4f 	dsb	sy
 8010022:	e7fe      	b.n	8010022 <vTaskSwitchContext+0x3a>
 8010024:	4608      	mov	r0, r1
 8010026:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801002a:	008a      	lsls	r2, r1, #2
 801002c:	4402      	add	r2, r0
 801002e:	6851      	ldr	r1, [r2, #4]
 8010030:	6849      	ldr	r1, [r1, #4]
 8010032:	6051      	str	r1, [r2, #4]
 8010034:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8010038:	ea4f 028c 	mov.w	r2, ip, lsl #2
 801003c:	3208      	adds	r2, #8
 801003e:	4402      	add	r2, r0
 8010040:	4291      	cmp	r1, r2
 8010042:	d00b      	beq.n	801005c <vTaskSwitchContext+0x74>
 8010044:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8010048:	0091      	lsls	r1, r2, #2
 801004a:	4a0b      	ldr	r2, [pc, #44]	@ (8010078 <vTaskSwitchContext+0x90>)
 801004c:	440a      	add	r2, r1
 801004e:	6852      	ldr	r2, [r2, #4]
 8010050:	68d1      	ldr	r1, [r2, #12]
 8010052:	4a0a      	ldr	r2, [pc, #40]	@ (801007c <vTaskSwitchContext+0x94>)
 8010054:	6011      	str	r1, [r2, #0]
 8010056:	4a07      	ldr	r2, [pc, #28]	@ (8010074 <vTaskSwitchContext+0x8c>)
 8010058:	6013      	str	r3, [r2, #0]
}
 801005a:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801005c:	6848      	ldr	r0, [r1, #4]
 801005e:	4662      	mov	r2, ip
 8010060:	0091      	lsls	r1, r2, #2
 8010062:	4a05      	ldr	r2, [pc, #20]	@ (8010078 <vTaskSwitchContext+0x90>)
 8010064:	440a      	add	r2, r1
 8010066:	6050      	str	r0, [r2, #4]
 8010068:	e7ec      	b.n	8010044 <vTaskSwitchContext+0x5c>
 801006a:	bf00      	nop
 801006c:	20003ebc 	.word	0x20003ebc
 8010070:	20003ed0 	.word	0x20003ed0
 8010074:	20003edc 	.word	0x20003edc
 8010078:	20003f58 	.word	0x20003f58
 801007c:	200043b8 	.word	0x200043b8

08010080 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8010080:	b158      	cbz	r0, 801009a <vTaskPlaceOnEventList+0x1a>
{
 8010082:	b510      	push	{r4, lr}
 8010084:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010086:	4a09      	ldr	r2, [pc, #36]	@ (80100ac <vTaskPlaceOnEventList+0x2c>)
 8010088:	6811      	ldr	r1, [r2, #0]
 801008a:	3118      	adds	r1, #24
 801008c:	f7fa fda9 	bl	800abe2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010090:	2101      	movs	r1, #1
 8010092:	4620      	mov	r0, r4
 8010094:	f7ff fd6c 	bl	800fb70 <prvAddCurrentTaskToDelayedList>
}
 8010098:	bd10      	pop	{r4, pc}
 801009a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801009e:	f383 8811 	msr	BASEPRI, r3
 80100a2:	f3bf 8f6f 	isb	sy
 80100a6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80100aa:	e7fe      	b.n	80100aa <vTaskPlaceOnEventList+0x2a>
 80100ac:	200043b8 	.word	0x200043b8

080100b0 <vTaskPlaceOnEventListRestricted>:
	{
 80100b0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80100b2:	b170      	cbz	r0, 80100d2 <vTaskPlaceOnEventListRestricted+0x22>
 80100b4:	460d      	mov	r5, r1
 80100b6:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80100b8:	4a0a      	ldr	r2, [pc, #40]	@ (80100e4 <vTaskPlaceOnEventListRestricted+0x34>)
 80100ba:	6811      	ldr	r1, [r2, #0]
 80100bc:	3118      	adds	r1, #24
 80100be:	f7fa fd85 	bl	800abcc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 80100c2:	b10c      	cbz	r4, 80100c8 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 80100c4:	f04f 35ff 	mov.w	r5, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80100c8:	4621      	mov	r1, r4
 80100ca:	4628      	mov	r0, r5
 80100cc:	f7ff fd50 	bl	800fb70 <prvAddCurrentTaskToDelayedList>
	}
 80100d0:	bd38      	pop	{r3, r4, r5, pc}
 80100d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100d6:	f383 8811 	msr	BASEPRI, r3
 80100da:	f3bf 8f6f 	isb	sy
 80100de:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80100e2:	e7fe      	b.n	80100e2 <vTaskPlaceOnEventListRestricted+0x32>
 80100e4:	200043b8 	.word	0x200043b8

080100e8 <xTaskRemoveFromEventList>:
{
 80100e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100ea:	68c3      	ldr	r3, [r0, #12]
 80100ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80100ee:	b324      	cbz	r4, 801013a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80100f0:	f104 0518 	add.w	r5, r4, #24
 80100f4:	4628      	mov	r0, r5
 80100f6:	f7fa fd8d 	bl	800ac14 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100fa:	4b18      	ldr	r3, [pc, #96]	@ (801015c <xTaskRemoveFromEventList+0x74>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	bb2b      	cbnz	r3, 801014c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010100:	1d25      	adds	r5, r4, #4
 8010102:	4628      	mov	r0, r5
 8010104:	f7fa fd86 	bl	800ac14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010108:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801010a:	4b15      	ldr	r3, [pc, #84]	@ (8010160 <xTaskRemoveFromEventList+0x78>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4298      	cmp	r0, r3
 8010110:	d901      	bls.n	8010116 <xTaskRemoveFromEventList+0x2e>
 8010112:	4b13      	ldr	r3, [pc, #76]	@ (8010160 <xTaskRemoveFromEventList+0x78>)
 8010114:	6018      	str	r0, [r3, #0]
 8010116:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801011a:	4629      	mov	r1, r5
 801011c:	4b11      	ldr	r3, [pc, #68]	@ (8010164 <xTaskRemoveFromEventList+0x7c>)
 801011e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010122:	f7fa fd53 	bl	800abcc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010126:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8010128:	4b0f      	ldr	r3, [pc, #60]	@ (8010168 <xTaskRemoveFromEventList+0x80>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801012e:	429a      	cmp	r2, r3
 8010130:	d911      	bls.n	8010156 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8010132:	2001      	movs	r0, #1
 8010134:	4b0d      	ldr	r3, [pc, #52]	@ (801016c <xTaskRemoveFromEventList+0x84>)
 8010136:	6018      	str	r0, [r3, #0]
}
 8010138:	bd38      	pop	{r3, r4, r5, pc}
 801013a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 801014a:	e7fe      	b.n	801014a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801014c:	4629      	mov	r1, r5
 801014e:	4808      	ldr	r0, [pc, #32]	@ (8010170 <xTaskRemoveFromEventList+0x88>)
 8010150:	f7fa fd3c 	bl	800abcc <vListInsertEnd>
 8010154:	e7e7      	b.n	8010126 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8010156:	2000      	movs	r0, #0
	return xReturn;
 8010158:	e7ee      	b.n	8010138 <xTaskRemoveFromEventList+0x50>
 801015a:	bf00      	nop
 801015c:	20003ebc 	.word	0x20003ebc
 8010160:	20003edc 	.word	0x20003edc
 8010164:	20003f58 	.word	0x20003f58
 8010168:	200043b8 	.word	0x200043b8
 801016c:	20003ed0 	.word	0x20003ed0
 8010170:	20003f14 	.word	0x20003f14

08010174 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010174:	4b03      	ldr	r3, [pc, #12]	@ (8010184 <vTaskInternalSetTimeOutState+0x10>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801017a:	4b03      	ldr	r3, [pc, #12]	@ (8010188 <vTaskInternalSetTimeOutState+0x14>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	6043      	str	r3, [r0, #4]
}
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop
 8010184:	20003ecc 	.word	0x20003ecc
 8010188:	20003ee0 	.word	0x20003ee0

0801018c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 801018c:	b1e0      	cbz	r0, 80101c8 <xTaskCheckForTimeOut+0x3c>
{
 801018e:	b570      	push	{r4, r5, r6, lr}
 8010190:	460c      	mov	r4, r1
 8010192:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8010194:	b309      	cbz	r1, 80101da <xTaskCheckForTimeOut+0x4e>
	taskENTER_CRITICAL();
 8010196:	f7fb f835 	bl	800b204 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801019a:	4b1c      	ldr	r3, [pc, #112]	@ (801020c <xTaskCheckForTimeOut+0x80>)
 801019c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801019e:	686b      	ldr	r3, [r5, #4]
 80101a0:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 80101a2:	6822      	ldr	r2, [r4, #0]
 80101a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80101a8:	d028      	beq.n	80101fc <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80101aa:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8010210 <xTaskCheckForTimeOut+0x84>
 80101ae:	f8dc c000 	ldr.w	ip, [ip]
 80101b2:	682e      	ldr	r6, [r5, #0]
 80101b4:	4566      	cmp	r6, ip
 80101b6:	d001      	beq.n	80101bc <xTaskCheckForTimeOut+0x30>
 80101b8:	428b      	cmp	r3, r1
 80101ba:	d924      	bls.n	8010206 <xTaskCheckForTimeOut+0x7a>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80101bc:	4282      	cmp	r2, r0
 80101be:	d815      	bhi.n	80101ec <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 80101c0:	2300      	movs	r3, #0
 80101c2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80101c4:	2401      	movs	r4, #1
 80101c6:	e01a      	b.n	80101fe <xTaskCheckForTimeOut+0x72>
 80101c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101cc:	f383 8811 	msr	BASEPRI, r3
 80101d0:	f3bf 8f6f 	isb	sy
 80101d4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80101d8:	e7fe      	b.n	80101d8 <xTaskCheckForTimeOut+0x4c>
 80101da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101de:	f383 8811 	msr	BASEPRI, r3
 80101e2:	f3bf 8f6f 	isb	sy
 80101e6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80101ea:	e7fe      	b.n	80101ea <xTaskCheckForTimeOut+0x5e>
			*pxTicksToWait -= xElapsedTime;
 80101ec:	1a5b      	subs	r3, r3, r1
 80101ee:	4413      	add	r3, r2
 80101f0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80101f2:	4628      	mov	r0, r5
 80101f4:	f7ff ffbe 	bl	8010174 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80101f8:	2400      	movs	r4, #0
 80101fa:	e000      	b.n	80101fe <xTaskCheckForTimeOut+0x72>
				xReturn = pdFALSE;
 80101fc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80101fe:	f7fb f823 	bl	800b248 <vPortExitCritical>
}
 8010202:	4620      	mov	r0, r4
 8010204:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8010206:	2401      	movs	r4, #1
 8010208:	e7f9      	b.n	80101fe <xTaskCheckForTimeOut+0x72>
 801020a:	bf00      	nop
 801020c:	20003ee0 	.word	0x20003ee0
 8010210:	20003ecc 	.word	0x20003ecc

08010214 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010214:	4b01      	ldr	r3, [pc, #4]	@ (801021c <vTaskMissedYield+0x8>)
 8010216:	2201      	movs	r2, #1
 8010218:	601a      	str	r2, [r3, #0]
}
 801021a:	4770      	bx	lr
 801021c:	20003ed0 	.word	0x20003ed0

08010220 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8010220:	4b01      	ldr	r3, [pc, #4]	@ (8010228 <xTaskGetCurrentTaskHandle+0x8>)
 8010222:	6818      	ldr	r0, [r3, #0]
	}
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop
 8010228:	200043b8 	.word	0x200043b8

0801022c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801022c:	4b05      	ldr	r3, [pc, #20]	@ (8010244 <xTaskGetSchedulerState+0x18>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	b133      	cbz	r3, 8010240 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010232:	4b05      	ldr	r3, [pc, #20]	@ (8010248 <xTaskGetSchedulerState+0x1c>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	b10b      	cbz	r3, 801023c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8010238:	2000      	movs	r0, #0
	}
 801023a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 801023c:	2002      	movs	r0, #2
 801023e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010240:	2001      	movs	r0, #1
 8010242:	4770      	bx	lr
 8010244:	20003ed8 	.word	0x20003ed8
 8010248:	20003ebc 	.word	0x20003ebc

0801024c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 801024c:	2800      	cmp	r0, #0
 801024e:	d03e      	beq.n	80102ce <xTaskPriorityInherit+0x82>
	{
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010254:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010256:	4a20      	ldr	r2, [pc, #128]	@ (80102d8 <xTaskPriorityInherit+0x8c>)
 8010258:	6812      	ldr	r2, [r2, #0]
 801025a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801025c:	4293      	cmp	r3, r2
 801025e:	d22e      	bcs.n	80102be <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010260:	6982      	ldr	r2, [r0, #24]
 8010262:	2a00      	cmp	r2, #0
 8010264:	db05      	blt.n	8010272 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010266:	4a1c      	ldr	r2, [pc, #112]	@ (80102d8 <xTaskPriorityInherit+0x8c>)
 8010268:	6812      	ldr	r2, [r2, #0]
 801026a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801026c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8010270:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010272:	6961      	ldr	r1, [r4, #20]
 8010274:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010278:	4a18      	ldr	r2, [pc, #96]	@ (80102dc <xTaskPriorityInherit+0x90>)
 801027a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801027e:	4299      	cmp	r1, r3
 8010280:	d005      	beq.n	801028e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010282:	4b15      	ldr	r3, [pc, #84]	@ (80102d8 <xTaskPriorityInherit+0x8c>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010288:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 801028a:	2001      	movs	r0, #1
	}
 801028c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801028e:	1d25      	adds	r5, r4, #4
 8010290:	4628      	mov	r0, r5
 8010292:	f7fa fcbf 	bl	800ac14 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010296:	4b10      	ldr	r3, [pc, #64]	@ (80102d8 <xTaskPriorityInherit+0x8c>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801029c:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801029e:	4b10      	ldr	r3, [pc, #64]	@ (80102e0 <xTaskPriorityInherit+0x94>)
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4298      	cmp	r0, r3
 80102a4:	d901      	bls.n	80102aa <xTaskPriorityInherit+0x5e>
 80102a6:	4b0e      	ldr	r3, [pc, #56]	@ (80102e0 <xTaskPriorityInherit+0x94>)
 80102a8:	6018      	str	r0, [r3, #0]
 80102aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80102ae:	4629      	mov	r1, r5
 80102b0:	4b0a      	ldr	r3, [pc, #40]	@ (80102dc <xTaskPriorityInherit+0x90>)
 80102b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80102b6:	f7fa fc89 	bl	800abcc <vListInsertEnd>
				xReturn = pdTRUE;
 80102ba:	2001      	movs	r0, #1
 80102bc:	e7e6      	b.n	801028c <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80102be:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80102c0:	4b05      	ldr	r3, [pc, #20]	@ (80102d8 <xTaskPriorityInherit+0x8c>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d303      	bcc.n	80102d2 <xTaskPriorityInherit+0x86>
	BaseType_t xReturn = pdFALSE;
 80102ca:	2000      	movs	r0, #0
 80102cc:	e7de      	b.n	801028c <xTaskPriorityInherit+0x40>
 80102ce:	2000      	movs	r0, #0
	}
 80102d0:	4770      	bx	lr
					xReturn = pdTRUE;
 80102d2:	2001      	movs	r0, #1
		return xReturn;
 80102d4:	e7da      	b.n	801028c <xTaskPriorityInherit+0x40>
 80102d6:	bf00      	nop
 80102d8:	200043b8 	.word	0x200043b8
 80102dc:	20003f58 	.word	0x20003f58
 80102e0:	20003edc 	.word	0x20003edc

080102e4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80102e4:	2800      	cmp	r0, #0
 80102e6:	d03b      	beq.n	8010360 <xTaskPriorityDisinherit+0x7c>
	{
 80102e8:	b538      	push	{r3, r4, r5, lr}
 80102ea:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 80102ec:	4b1e      	ldr	r3, [pc, #120]	@ (8010368 <xTaskPriorityDisinherit+0x84>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4283      	cmp	r3, r0
 80102f2:	d008      	beq.n	8010306 <xTaskPriorityDisinherit+0x22>
 80102f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102f8:	f383 8811 	msr	BASEPRI, r3
 80102fc:	f3bf 8f6f 	isb	sy
 8010300:	f3bf 8f4f 	dsb	sy
 8010304:	e7fe      	b.n	8010304 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8010306:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010308:	b943      	cbnz	r3, 801031c <xTaskPriorityDisinherit+0x38>
 801030a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801030e:	f383 8811 	msr	BASEPRI, r3
 8010312:	f3bf 8f6f 	isb	sy
 8010316:	f3bf 8f4f 	dsb	sy
 801031a:	e7fe      	b.n	801031a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 801031c:	3b01      	subs	r3, #1
 801031e:	6503      	str	r3, [r0, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010320:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010322:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8010324:	4291      	cmp	r1, r2
 8010326:	d01d      	beq.n	8010364 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010328:	b10b      	cbz	r3, 801032e <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 801032a:	2000      	movs	r0, #0
	}
 801032c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801032e:	1d05      	adds	r5, r0, #4
 8010330:	4628      	mov	r0, r5
 8010332:	f7fa fc6f 	bl	800ac14 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010336:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8010338:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801033a:	f1c0 0338 	rsb	r3, r0, #56	@ 0x38
 801033e:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010340:	4b0a      	ldr	r3, [pc, #40]	@ (801036c <xTaskPriorityDisinherit+0x88>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4298      	cmp	r0, r3
 8010346:	d901      	bls.n	801034c <xTaskPriorityDisinherit+0x68>
 8010348:	4b08      	ldr	r3, [pc, #32]	@ (801036c <xTaskPriorityDisinherit+0x88>)
 801034a:	6018      	str	r0, [r3, #0]
 801034c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8010350:	4629      	mov	r1, r5
 8010352:	4b07      	ldr	r3, [pc, #28]	@ (8010370 <xTaskPriorityDisinherit+0x8c>)
 8010354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010358:	f7fa fc38 	bl	800abcc <vListInsertEnd>
					xReturn = pdTRUE;
 801035c:	2001      	movs	r0, #1
 801035e:	e7e5      	b.n	801032c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8010360:	2000      	movs	r0, #0
	}
 8010362:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8010364:	2000      	movs	r0, #0
 8010366:	e7e1      	b.n	801032c <xTaskPriorityDisinherit+0x48>
 8010368:	200043b8 	.word	0x200043b8
 801036c:	20003edc 	.word	0x20003edc
 8010370:	20003f58 	.word	0x20003f58

08010374 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8010374:	2800      	cmp	r0, #0
 8010376:	d046      	beq.n	8010406 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8010378:	b538      	push	{r3, r4, r5, lr}
 801037a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 801037c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801037e:	b943      	cbnz	r3, 8010392 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8010380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010384:	f383 8811 	msr	BASEPRI, r3
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	f3bf 8f4f 	dsb	sy
 8010390:	e7fe      	b.n	8010390 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010392:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8010394:	428a      	cmp	r2, r1
 8010396:	d200      	bcs.n	801039a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010398:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 801039a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801039c:	4291      	cmp	r1, r2
 801039e:	d001      	beq.n	80103a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80103a0:	2b01      	cmp	r3, #1
 80103a2:	d000      	beq.n	80103a6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80103a4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80103a6:	4b18      	ldr	r3, [pc, #96]	@ (8010408 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	42a3      	cmp	r3, r4
 80103ac:	d022      	beq.n	80103f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80103ae:	62e2      	str	r2, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80103b0:	69a3      	ldr	r3, [r4, #24]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	db02      	blt.n	80103bc <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80103b6:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 80103ba:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80103bc:	6962      	ldr	r2, [r4, #20]
 80103be:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80103c2:	4b12      	ldr	r3, [pc, #72]	@ (801040c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80103c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d1eb      	bne.n	80103a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103cc:	1d25      	adds	r5, r4, #4
 80103ce:	4628      	mov	r0, r5
 80103d0:	f7fa fc20 	bl	800ac14 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80103d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80103d6:	4b0e      	ldr	r3, [pc, #56]	@ (8010410 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	4298      	cmp	r0, r3
 80103dc:	d901      	bls.n	80103e2 <vTaskPriorityDisinheritAfterTimeout+0x6e>
 80103de:	4b0c      	ldr	r3, [pc, #48]	@ (8010410 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80103e0:	6018      	str	r0, [r3, #0]
 80103e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80103e6:	4629      	mov	r1, r5
 80103e8:	4b08      	ldr	r3, [pc, #32]	@ (801040c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80103ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80103ee:	f7fa fbed 	bl	800abcc <vListInsertEnd>
	}
 80103f2:	e7d7      	b.n	80103a4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 80103f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103f8:	f383 8811 	msr	BASEPRI, r3
 80103fc:	f3bf 8f6f 	isb	sy
 8010400:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8010404:	e7fe      	b.n	8010404 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8010406:	4770      	bx	lr
 8010408:	200043b8 	.word	0x200043b8
 801040c:	20003f58 	.word	0x20003f58
 8010410:	20003edc 	.word	0x20003edc

08010414 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8010414:	4b05      	ldr	r3, [pc, #20]	@ (801042c <pvTaskIncrementMutexHeldCount+0x18>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	b123      	cbz	r3, 8010424 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 801041a:	4b04      	ldr	r3, [pc, #16]	@ (801042c <pvTaskIncrementMutexHeldCount+0x18>)
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8010420:	3301      	adds	r3, #1
 8010422:	6513      	str	r3, [r2, #80]	@ 0x50
		return pxCurrentTCB;
 8010424:	4b01      	ldr	r3, [pc, #4]	@ (801042c <pvTaskIncrementMutexHeldCount+0x18>)
 8010426:	6818      	ldr	r0, [r3, #0]
	}
 8010428:	4770      	bx	lr
 801042a:	bf00      	nop
 801042c:	200043b8 	.word	0x200043b8

08010430 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010430:	4b06      	ldr	r3, [pc, #24]	@ (801044c <prvGetNextExpireTime+0x1c>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	6813      	ldr	r3, [r2, #0]
 8010436:	b92b      	cbnz	r3, 8010444 <prvGetNextExpireTime+0x14>
 8010438:	2301      	movs	r3, #1
 801043a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 801043c:	b923      	cbnz	r3, 8010448 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801043e:	68d3      	ldr	r3, [r2, #12]
 8010440:	6818      	ldr	r0, [r3, #0]
 8010442:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010444:	2300      	movs	r3, #0
 8010446:	e7f8      	b.n	801043a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010448:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 801044a:	4770      	bx	lr
 801044c:	200044bc 	.word	0x200044bc

08010450 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010450:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010452:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010454:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010456:	4291      	cmp	r1, r2
 8010458:	d80c      	bhi.n	8010474 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801045a:	1ad2      	subs	r2, r2, r3
 801045c:	6983      	ldr	r3, [r0, #24]
 801045e:	429a      	cmp	r2, r3
 8010460:	d301      	bcc.n	8010466 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010462:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8010464:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010466:	1d01      	adds	r1, r0, #4
 8010468:	4b09      	ldr	r3, [pc, #36]	@ (8010490 <prvInsertTimerInActiveList+0x40>)
 801046a:	6818      	ldr	r0, [r3, #0]
 801046c:	f7fa fbb9 	bl	800abe2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010470:	2000      	movs	r0, #0
 8010472:	e7f7      	b.n	8010464 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010474:	429a      	cmp	r2, r3
 8010476:	d201      	bcs.n	801047c <prvInsertTimerInActiveList+0x2c>
 8010478:	4299      	cmp	r1, r3
 801047a:	d206      	bcs.n	801048a <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801047c:	1d01      	adds	r1, r0, #4
 801047e:	4b05      	ldr	r3, [pc, #20]	@ (8010494 <prvInsertTimerInActiveList+0x44>)
 8010480:	6818      	ldr	r0, [r3, #0]
 8010482:	f7fa fbae 	bl	800abe2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010486:	2000      	movs	r0, #0
 8010488:	e7ec      	b.n	8010464 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 801048a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 801048c:	e7ea      	b.n	8010464 <prvInsertTimerInActiveList+0x14>
 801048e:	bf00      	nop
 8010490:	200044b8 	.word	0x200044b8
 8010494:	200044bc 	.word	0x200044bc

08010498 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010498:	b530      	push	{r4, r5, lr}
 801049a:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801049c:	f7fa feb2 	bl	800b204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80104a0:	4b11      	ldr	r3, [pc, #68]	@ (80104e8 <prvCheckForValidListAndQueue+0x50>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	b11b      	cbz	r3, 80104ae <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104a6:	f7fa fecf 	bl	800b248 <vPortExitCritical>
}
 80104aa:	b003      	add	sp, #12
 80104ac:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80104ae:	4d0f      	ldr	r5, [pc, #60]	@ (80104ec <prvCheckForValidListAndQueue+0x54>)
 80104b0:	4628      	mov	r0, r5
 80104b2:	f7fa fb7d 	bl	800abb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80104b6:	4c0e      	ldr	r4, [pc, #56]	@ (80104f0 <prvCheckForValidListAndQueue+0x58>)
 80104b8:	4620      	mov	r0, r4
 80104ba:	f7fa fb79 	bl	800abb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80104be:	4b0d      	ldr	r3, [pc, #52]	@ (80104f4 <prvCheckForValidListAndQueue+0x5c>)
 80104c0:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80104c2:	4b0d      	ldr	r3, [pc, #52]	@ (80104f8 <prvCheckForValidListAndQueue+0x60>)
 80104c4:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80104c6:	2300      	movs	r3, #0
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	4b0c      	ldr	r3, [pc, #48]	@ (80104fc <prvCheckForValidListAndQueue+0x64>)
 80104cc:	4a0c      	ldr	r2, [pc, #48]	@ (8010500 <prvCheckForValidListAndQueue+0x68>)
 80104ce:	2110      	movs	r1, #16
 80104d0:	200a      	movs	r0, #10
 80104d2:	f7fb f8e6 	bl	800b6a2 <xQueueGenericCreateStatic>
 80104d6:	4b04      	ldr	r3, [pc, #16]	@ (80104e8 <prvCheckForValidListAndQueue+0x50>)
 80104d8:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80104da:	2800      	cmp	r0, #0
 80104dc:	d0e3      	beq.n	80104a6 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80104de:	4909      	ldr	r1, [pc, #36]	@ (8010504 <prvCheckForValidListAndQueue+0x6c>)
 80104e0:	f7fb fd52 	bl	800bf88 <vQueueAddToRegistry>
 80104e4:	e7df      	b.n	80104a6 <prvCheckForValidListAndQueue+0xe>
 80104e6:	bf00      	nop
 80104e8:	200044b4 	.word	0x200044b4
 80104ec:	200044d4 	.word	0x200044d4
 80104f0:	200044c0 	.word	0x200044c0
 80104f4:	200044bc 	.word	0x200044bc
 80104f8:	200044b8 	.word	0x200044b8
 80104fc:	200043bc 	.word	0x200043bc
 8010500:	2000440c 	.word	0x2000440c
 8010504:	08010cdc 	.word	0x08010cdc

08010508 <xTimerCreateTimerTask>:
{
 8010508:	b510      	push	{r4, lr}
 801050a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 801050c:	f7ff ffc4 	bl	8010498 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8010510:	4b12      	ldr	r3, [pc, #72]	@ (801055c <xTimerCreateTimerTask+0x54>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	b1cb      	cbz	r3, 801054a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010516:	2400      	movs	r4, #0
 8010518:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801051a:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801051c:	aa07      	add	r2, sp, #28
 801051e:	a906      	add	r1, sp, #24
 8010520:	a805      	add	r0, sp, #20
 8010522:	f7f9 fed7 	bl	800a2d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010526:	9b05      	ldr	r3, [sp, #20]
 8010528:	9302      	str	r3, [sp, #8]
 801052a:	9b06      	ldr	r3, [sp, #24]
 801052c:	9301      	str	r3, [sp, #4]
 801052e:	2302      	movs	r3, #2
 8010530:	9300      	str	r3, [sp, #0]
 8010532:	4623      	mov	r3, r4
 8010534:	9a07      	ldr	r2, [sp, #28]
 8010536:	490a      	ldr	r1, [pc, #40]	@ (8010560 <xTimerCreateTimerTask+0x58>)
 8010538:	480a      	ldr	r0, [pc, #40]	@ (8010564 <xTimerCreateTimerTask+0x5c>)
 801053a:	f7ff fb57 	bl	800fbec <xTaskCreateStatic>
 801053e:	4b0a      	ldr	r3, [pc, #40]	@ (8010568 <xTimerCreateTimerTask+0x60>)
 8010540:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8010542:	b110      	cbz	r0, 801054a <xTimerCreateTimerTask+0x42>
}
 8010544:	2001      	movs	r0, #1
 8010546:	b008      	add	sp, #32
 8010548:	bd10      	pop	{r4, pc}
 801054a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801054e:	f383 8811 	msr	BASEPRI, r3
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 801055a:	e7fe      	b.n	801055a <xTimerCreateTimerTask+0x52>
 801055c:	200044b4 	.word	0x200044b4
 8010560:	08010ce4 	.word	0x08010ce4
 8010564:	0801086d 	.word	0x0801086d
 8010568:	200044b0 	.word	0x200044b0

0801056c <xTimerGenericCommand>:
	configASSERT( xTimer );
 801056c:	b1b8      	cbz	r0, 801059e <xTimerGenericCommand+0x32>
 801056e:	469c      	mov	ip, r3
 8010570:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 8010572:	4818      	ldr	r0, [pc, #96]	@ (80105d4 <xTimerGenericCommand+0x68>)
 8010574:	6800      	ldr	r0, [r0, #0]
 8010576:	b358      	cbz	r0, 80105d0 <xTimerGenericCommand+0x64>
{
 8010578:	b500      	push	{lr}
 801057a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 801057c:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801057e:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010580:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010582:	2905      	cmp	r1, #5
 8010584:	dc1c      	bgt.n	80105c0 <xTimerGenericCommand+0x54>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010586:	f7ff fe51 	bl	801022c <xTaskGetSchedulerState>
 801058a:	2802      	cmp	r0, #2
 801058c:	d010      	beq.n	80105b0 <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801058e:	2300      	movs	r3, #0
 8010590:	461a      	mov	r2, r3
 8010592:	4669      	mov	r1, sp
 8010594:	480f      	ldr	r0, [pc, #60]	@ (80105d4 <xTimerGenericCommand+0x68>)
 8010596:	6800      	ldr	r0, [r0, #0]
 8010598:	f7fb f932 	bl	800b800 <xQueueGenericSend>
 801059c:	e015      	b.n	80105ca <xTimerGenericCommand+0x5e>
 801059e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105a2:	f383 8811 	msr	BASEPRI, r3
 80105a6:	f3bf 8f6f 	isb	sy
 80105aa:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80105ae:	e7fe      	b.n	80105ae <xTimerGenericCommand+0x42>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80105b0:	2300      	movs	r3, #0
 80105b2:	9a06      	ldr	r2, [sp, #24]
 80105b4:	4669      	mov	r1, sp
 80105b6:	4807      	ldr	r0, [pc, #28]	@ (80105d4 <xTimerGenericCommand+0x68>)
 80105b8:	6800      	ldr	r0, [r0, #0]
 80105ba:	f7fb f921 	bl	800b800 <xQueueGenericSend>
 80105be:	e004      	b.n	80105ca <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80105c0:	2300      	movs	r3, #0
 80105c2:	4662      	mov	r2, ip
 80105c4:	4669      	mov	r1, sp
 80105c6:	f7fb fa25 	bl	800ba14 <xQueueGenericSendFromISR>
}
 80105ca:	b005      	add	sp, #20
 80105cc:	f85d fb04 	ldr.w	pc, [sp], #4
BaseType_t xReturn = pdFAIL;
 80105d0:	2000      	movs	r0, #0
}
 80105d2:	4770      	bx	lr
 80105d4:	200044b4 	.word	0x200044b4

080105d8 <prvSwitchTimerLists>:
{
 80105d8:	b570      	push	{r4, r5, r6, lr}
 80105da:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80105dc:	4b1b      	ldr	r3, [pc, #108]	@ (801064c <prvSwitchTimerLists+0x74>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	b362      	cbz	r2, 801063e <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105e4:	68db      	ldr	r3, [r3, #12]
 80105e6:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105e8:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105ea:	1d25      	adds	r5, r4, #4
 80105ec:	4628      	mov	r0, r5
 80105ee:	f7fa fb11 	bl	800ac14 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105f2:	6a23      	ldr	r3, [r4, #32]
 80105f4:	4620      	mov	r0, r4
 80105f6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105f8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80105fc:	f013 0f04 	tst.w	r3, #4
 8010600:	d0ec      	beq.n	80105dc <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010602:	69a3      	ldr	r3, [r4, #24]
 8010604:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8010606:	429e      	cmp	r6, r3
 8010608:	d207      	bcs.n	801061a <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801060a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801060c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801060e:	4629      	mov	r1, r5
 8010610:	4b0e      	ldr	r3, [pc, #56]	@ (801064c <prvSwitchTimerLists+0x74>)
 8010612:	6818      	ldr	r0, [r3, #0]
 8010614:	f7fa fae5 	bl	800abe2 <vListInsert>
 8010618:	e7e0      	b.n	80105dc <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801061a:	2100      	movs	r1, #0
 801061c:	9100      	str	r1, [sp, #0]
 801061e:	460b      	mov	r3, r1
 8010620:	4632      	mov	r2, r6
 8010622:	4620      	mov	r0, r4
 8010624:	f7ff ffa2 	bl	801056c <xTimerGenericCommand>
				configASSERT( xResult );
 8010628:	2800      	cmp	r0, #0
 801062a:	d1d7      	bne.n	80105dc <prvSwitchTimerLists+0x4>
 801062c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010630:	f383 8811 	msr	BASEPRI, r3
 8010634:	f3bf 8f6f 	isb	sy
 8010638:	f3bf 8f4f 	dsb	sy
 801063c:	e7fe      	b.n	801063c <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 801063e:	4a04      	ldr	r2, [pc, #16]	@ (8010650 <prvSwitchTimerLists+0x78>)
 8010640:	6810      	ldr	r0, [r2, #0]
 8010642:	4902      	ldr	r1, [pc, #8]	@ (801064c <prvSwitchTimerLists+0x74>)
 8010644:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8010646:	6013      	str	r3, [r2, #0]
}
 8010648:	b002      	add	sp, #8
 801064a:	bd70      	pop	{r4, r5, r6, pc}
 801064c:	200044bc 	.word	0x200044bc
 8010650:	200044b8 	.word	0x200044b8

08010654 <prvSampleTimeNow>:
{
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 8010658:	f7ff fb8a 	bl	800fd70 <xTaskGetTickCount>
 801065c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 801065e:	4b07      	ldr	r3, [pc, #28]	@ (801067c <prvSampleTimeNow+0x28>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	4283      	cmp	r3, r0
 8010664:	d805      	bhi.n	8010672 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 8010666:	2300      	movs	r3, #0
 8010668:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 801066a:	4b04      	ldr	r3, [pc, #16]	@ (801067c <prvSampleTimeNow+0x28>)
 801066c:	601c      	str	r4, [r3, #0]
}
 801066e:	4620      	mov	r0, r4
 8010670:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 8010672:	f7ff ffb1 	bl	80105d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010676:	2301      	movs	r3, #1
 8010678:	602b      	str	r3, [r5, #0]
 801067a:	e7f6      	b.n	801066a <prvSampleTimeNow+0x16>
 801067c:	200044ac 	.word	0x200044ac

08010680 <prvProcessExpiredTimer>:
{
 8010680:	b570      	push	{r4, r5, r6, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	4606      	mov	r6, r0
 8010686:	460d      	mov	r5, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010688:	4917      	ldr	r1, [pc, #92]	@ (80106e8 <prvProcessExpiredTimer+0x68>)
 801068a:	6809      	ldr	r1, [r1, #0]
 801068c:	68c9      	ldr	r1, [r1, #12]
 801068e:	68cc      	ldr	r4, [r1, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010690:	1d20      	adds	r0, r4, #4
 8010692:	f7fa fabf 	bl	800ac14 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010696:	f894 c028 	ldrb.w	ip, [r4, #40]	@ 0x28
 801069a:	f01c 0f04 	tst.w	ip, #4
 801069e:	d108      	bne.n	80106b2 <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80106a0:	f02c 0c01 	bic.w	ip, ip, #1
 80106a4:	f884 c028 	strb.w	ip, [r4, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106a8:	6a23      	ldr	r3, [r4, #32]
 80106aa:	4620      	mov	r0, r4
 80106ac:	4798      	blx	r3
}
 80106ae:	b002      	add	sp, #8
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80106b2:	69a1      	ldr	r1, [r4, #24]
 80106b4:	4633      	mov	r3, r6
 80106b6:	462a      	mov	r2, r5
 80106b8:	4431      	add	r1, r6
 80106ba:	4620      	mov	r0, r4
 80106bc:	f7ff fec8 	bl	8010450 <prvInsertTimerInActiveList>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d0f1      	beq.n	80106a8 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80106c4:	2100      	movs	r1, #0
 80106c6:	9100      	str	r1, [sp, #0]
 80106c8:	460b      	mov	r3, r1
 80106ca:	4632      	mov	r2, r6
 80106cc:	4620      	mov	r0, r4
 80106ce:	f7ff ff4d 	bl	801056c <xTimerGenericCommand>
			configASSERT( xResult );
 80106d2:	2800      	cmp	r0, #0
 80106d4:	d1e8      	bne.n	80106a8 <prvProcessExpiredTimer+0x28>
 80106d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106da:	f383 8811 	msr	BASEPRI, r3
 80106de:	f3bf 8f6f 	isb	sy
 80106e2:	f3bf 8f4f 	dsb	sy
 80106e6:	e7fe      	b.n	80106e6 <prvProcessExpiredTimer+0x66>
 80106e8:	200044bc 	.word	0x200044bc

080106ec <prvProcessTimerOrBlockTask>:
{
 80106ec:	b570      	push	{r4, r5, r6, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	4606      	mov	r6, r0
 80106f2:	460c      	mov	r4, r1
	vTaskSuspendAll();
 80106f4:	f7ff fb34 	bl	800fd60 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106f8:	a801      	add	r0, sp, #4
 80106fa:	f7ff ffab 	bl	8010654 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80106fe:	9b01      	ldr	r3, [sp, #4]
 8010700:	bb33      	cbnz	r3, 8010750 <prvProcessTimerOrBlockTask+0x64>
 8010702:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010704:	b9e4      	cbnz	r4, 8010740 <prvProcessTimerOrBlockTask+0x54>
 8010706:	42b0      	cmp	r0, r6
 8010708:	d213      	bcs.n	8010732 <prvProcessTimerOrBlockTask+0x46>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801070a:	4622      	mov	r2, r4
 801070c:	1b71      	subs	r1, r6, r5
 801070e:	4b12      	ldr	r3, [pc, #72]	@ (8010758 <prvProcessTimerOrBlockTask+0x6c>)
 8010710:	6818      	ldr	r0, [r3, #0]
 8010712:	f7fb fc79 	bl	800c008 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010716:	f7ff fbc5 	bl	800fea4 <xTaskResumeAll>
 801071a:	b9d8      	cbnz	r0, 8010754 <prvProcessTimerOrBlockTask+0x68>
					portYIELD_WITHIN_API();
 801071c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8010720:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010724:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	e010      	b.n	8010754 <prvProcessTimerOrBlockTask+0x68>
				( void ) xTaskResumeAll();
 8010732:	f7ff fbb7 	bl	800fea4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010736:	4629      	mov	r1, r5
 8010738:	4630      	mov	r0, r6
 801073a:	f7ff ffa1 	bl	8010680 <prvProcessExpiredTimer>
 801073e:	e009      	b.n	8010754 <prvProcessTimerOrBlockTask+0x68>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010740:	4a06      	ldr	r2, [pc, #24]	@ (801075c <prvProcessTimerOrBlockTask+0x70>)
 8010742:	6812      	ldr	r2, [r2, #0]
 8010744:	6812      	ldr	r2, [r2, #0]
 8010746:	b90a      	cbnz	r2, 801074c <prvProcessTimerOrBlockTask+0x60>
 8010748:	2401      	movs	r4, #1
 801074a:	e7de      	b.n	801070a <prvProcessTimerOrBlockTask+0x1e>
 801074c:	461c      	mov	r4, r3
 801074e:	e7dc      	b.n	801070a <prvProcessTimerOrBlockTask+0x1e>
			( void ) xTaskResumeAll();
 8010750:	f7ff fba8 	bl	800fea4 <xTaskResumeAll>
}
 8010754:	b002      	add	sp, #8
 8010756:	bd70      	pop	{r4, r5, r6, pc}
 8010758:	200044b4 	.word	0x200044b4
 801075c:	200044b8 	.word	0x200044b8

08010760 <prvProcessReceivedCommands>:
{
 8010760:	b510      	push	{r4, lr}
 8010762:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010764:	e002      	b.n	801076c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010766:	9b04      	ldr	r3, [sp, #16]
 8010768:	2b00      	cmp	r3, #0
 801076a:	da0f      	bge.n	801078c <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801076c:	2200      	movs	r2, #0
 801076e:	a904      	add	r1, sp, #16
 8010770:	4b3d      	ldr	r3, [pc, #244]	@ (8010868 <prvProcessReceivedCommands+0x108>)
 8010772:	6818      	ldr	r0, [r3, #0]
 8010774:	f7fb fa0e 	bl	800bb94 <xQueueReceive>
 8010778:	2800      	cmp	r0, #0
 801077a:	d072      	beq.n	8010862 <prvProcessReceivedCommands+0x102>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801077c:	9b04      	ldr	r3, [sp, #16]
 801077e:	2b00      	cmp	r3, #0
 8010780:	daf1      	bge.n	8010766 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010782:	9907      	ldr	r1, [sp, #28]
 8010784:	9806      	ldr	r0, [sp, #24]
 8010786:	9b05      	ldr	r3, [sp, #20]
 8010788:	4798      	blx	r3
 801078a:	e7ec      	b.n	8010766 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801078c:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801078e:	6963      	ldr	r3, [r4, #20]
 8010790:	b113      	cbz	r3, 8010798 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010792:	1d20      	adds	r0, r4, #4
 8010794:	f7fa fa3e 	bl	800ac14 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010798:	a803      	add	r0, sp, #12
 801079a:	f7ff ff5b 	bl	8010654 <prvSampleTimeNow>
 801079e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80107a0:	9b04      	ldr	r3, [sp, #16]
 80107a2:	2b09      	cmp	r3, #9
 80107a4:	d8e2      	bhi.n	801076c <prvProcessReceivedCommands+0xc>
 80107a6:	e8df f003 	tbb	[pc, r3]
 80107aa:	0505      	.short	0x0505
 80107ac:	4e362f05 	.word	0x4e362f05
 80107b0:	362f0505 	.word	0x362f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80107b4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80107b8:	f043 0301 	orr.w	r3, r3, #1
 80107bc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80107c0:	9b05      	ldr	r3, [sp, #20]
 80107c2:	69a1      	ldr	r1, [r4, #24]
 80107c4:	4419      	add	r1, r3
 80107c6:	4620      	mov	r0, r4
 80107c8:	f7ff fe42 	bl	8010450 <prvInsertTimerInActiveList>
 80107cc:	2800      	cmp	r0, #0
 80107ce:	d0cd      	beq.n	801076c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107d0:	6a23      	ldr	r3, [r4, #32]
 80107d2:	4620      	mov	r0, r4
 80107d4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107d6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80107da:	f013 0f04 	tst.w	r3, #4
 80107de:	d0c5      	beq.n	801076c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80107e0:	69a2      	ldr	r2, [r4, #24]
 80107e2:	2100      	movs	r1, #0
 80107e4:	9100      	str	r1, [sp, #0]
 80107e6:	460b      	mov	r3, r1
 80107e8:	9805      	ldr	r0, [sp, #20]
 80107ea:	4402      	add	r2, r0
 80107ec:	4620      	mov	r0, r4
 80107ee:	f7ff febd 	bl	801056c <xTimerGenericCommand>
							configASSERT( xResult );
 80107f2:	2800      	cmp	r0, #0
 80107f4:	d1ba      	bne.n	801076c <prvProcessReceivedCommands+0xc>
 80107f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	e7fe      	b.n	8010806 <prvProcessReceivedCommands+0xa6>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010808:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801080c:	f023 0301 	bic.w	r3, r3, #1
 8010810:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					break;
 8010814:	e7aa      	b.n	801076c <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010816:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801081a:	f043 0301 	orr.w	r3, r3, #1
 801081e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010822:	9905      	ldr	r1, [sp, #20]
 8010824:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010826:	b129      	cbz	r1, 8010834 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010828:	4603      	mov	r3, r0
 801082a:	4401      	add	r1, r0
 801082c:	4620      	mov	r0, r4
 801082e:	f7ff fe0f 	bl	8010450 <prvInsertTimerInActiveList>
					break;
 8010832:	e79b      	b.n	801076c <prvProcessReceivedCommands+0xc>
 8010834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010844:	e7fe      	b.n	8010844 <prvProcessReceivedCommands+0xe4>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010846:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801084a:	f013 0f02 	tst.w	r3, #2
 801084e:	d004      	beq.n	801085a <prvProcessReceivedCommands+0xfa>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010850:	f023 0301 	bic.w	r3, r3, #1
 8010854:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8010858:	e788      	b.n	801076c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 801085a:	4620      	mov	r0, r4
 801085c:	f7fa f95e 	bl	800ab1c <vPortFree>
 8010860:	e784      	b.n	801076c <prvProcessReceivedCommands+0xc>
}
 8010862:	b008      	add	sp, #32
 8010864:	bd10      	pop	{r4, pc}
 8010866:	bf00      	nop
 8010868:	200044b4 	.word	0x200044b4

0801086c <prvTimerTask>:
{
 801086c:	b500      	push	{lr}
 801086e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010870:	a801      	add	r0, sp, #4
 8010872:	f7ff fddd 	bl	8010430 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010876:	9901      	ldr	r1, [sp, #4]
 8010878:	f7ff ff38 	bl	80106ec <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 801087c:	f7ff ff70 	bl	8010760 <prvProcessReceivedCommands>
	for( ;; )
 8010880:	e7f6      	b.n	8010870 <prvTimerTask+0x4>
	...

08010884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8010884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80108bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8010888:	f7ff f804 	bl	800f894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801088c:	480c      	ldr	r0, [pc, #48]	@ (80108c0 <LoopForever+0x6>)
  ldr r1, =_edata
 801088e:	490d      	ldr	r1, [pc, #52]	@ (80108c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8010890:	4a0d      	ldr	r2, [pc, #52]	@ (80108c8 <LoopForever+0xe>)
  movs r3, #0
 8010892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010894:	e002      	b.n	801089c <LoopCopyDataInit>

08010896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801089a:	3304      	adds	r3, #4

0801089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80108a0:	d3f9      	bcc.n	8010896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80108a2:	4a0a      	ldr	r2, [pc, #40]	@ (80108cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80108a4:	4c0a      	ldr	r4, [pc, #40]	@ (80108d0 <LoopForever+0x16>)
  movs r3, #0
 80108a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80108a8:	e001      	b.n	80108ae <LoopFillZerobss>

080108aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80108aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80108ac:	3204      	adds	r2, #4

080108ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80108ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80108b0:	d3fb      	bcc.n	80108aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80108b2:	f000 f81f 	bl	80108f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80108b6:	f7fa fb77 	bl	800afa8 <main>

080108ba <LoopForever>:

LoopForever:
    b LoopForever
 80108ba:	e7fe      	b.n	80108ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80108bc:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80108c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80108c4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80108c8:	08010eb8 	.word	0x08010eb8
  ldr r2, =_sbss
 80108cc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80108d0:	20004620 	.word	0x20004620

080108d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80108d4:	e7fe      	b.n	80108d4 <ADC1_IRQHandler>

080108d6 <memset>:
 80108d6:	4402      	add	r2, r0
 80108d8:	4603      	mov	r3, r0
 80108da:	4293      	cmp	r3, r2
 80108dc:	d100      	bne.n	80108e0 <memset+0xa>
 80108de:	4770      	bx	lr
 80108e0:	f803 1b01 	strb.w	r1, [r3], #1
 80108e4:	e7f9      	b.n	80108da <memset+0x4>
	...

080108e8 <__errno>:
 80108e8:	4b01      	ldr	r3, [pc, #4]	@ (80108f0 <__errno+0x8>)
 80108ea:	6818      	ldr	r0, [r3, #0]
 80108ec:	4770      	bx	lr
 80108ee:	bf00      	nop
 80108f0:	20000038 	.word	0x20000038

080108f4 <__libc_init_array>:
 80108f4:	b570      	push	{r4, r5, r6, lr}
 80108f6:	4b0d      	ldr	r3, [pc, #52]	@ (801092c <__libc_init_array+0x38>)
 80108f8:	4d0d      	ldr	r5, [pc, #52]	@ (8010930 <__libc_init_array+0x3c>)
 80108fa:	1b5b      	subs	r3, r3, r5
 80108fc:	109c      	asrs	r4, r3, #2
 80108fe:	2600      	movs	r6, #0
 8010900:	42a6      	cmp	r6, r4
 8010902:	d109      	bne.n	8010918 <__libc_init_array+0x24>
 8010904:	f000 f958 	bl	8010bb8 <_init>
 8010908:	4d0a      	ldr	r5, [pc, #40]	@ (8010934 <__libc_init_array+0x40>)
 801090a:	4b0b      	ldr	r3, [pc, #44]	@ (8010938 <__libc_init_array+0x44>)
 801090c:	1b5b      	subs	r3, r3, r5
 801090e:	109c      	asrs	r4, r3, #2
 8010910:	2600      	movs	r6, #0
 8010912:	42a6      	cmp	r6, r4
 8010914:	d105      	bne.n	8010922 <__libc_init_array+0x2e>
 8010916:	bd70      	pop	{r4, r5, r6, pc}
 8010918:	f855 3b04 	ldr.w	r3, [r5], #4
 801091c:	4798      	blx	r3
 801091e:	3601      	adds	r6, #1
 8010920:	e7ee      	b.n	8010900 <__libc_init_array+0xc>
 8010922:	f855 3b04 	ldr.w	r3, [r5], #4
 8010926:	4798      	blx	r3
 8010928:	3601      	adds	r6, #1
 801092a:	e7f2      	b.n	8010912 <__libc_init_array+0x1e>
 801092c:	08010ea8 	.word	0x08010ea8
 8010930:	08010ea8 	.word	0x08010ea8
 8010934:	08010ea8 	.word	0x08010ea8
 8010938:	08010eac 	.word	0x08010eac

0801093c <memcpy>:
 801093c:	440a      	add	r2, r1
 801093e:	4291      	cmp	r1, r2
 8010940:	f100 33ff 	add.w	r3, r0, #4294967295
 8010944:	d100      	bne.n	8010948 <memcpy+0xc>
 8010946:	4770      	bx	lr
 8010948:	b510      	push	{r4, lr}
 801094a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801094e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010952:	4291      	cmp	r1, r2
 8010954:	d1f9      	bne.n	801094a <memcpy+0xe>
 8010956:	bd10      	pop	{r4, pc}

08010958 <logf>:
 8010958:	b508      	push	{r3, lr}
 801095a:	ed2d 8b02 	vpush	{d8}
 801095e:	eeb0 8a40 	vmov.f32	s16, s0
 8010962:	f000 f82f 	bl	80109c4 <__ieee754_logf>
 8010966:	eeb4 8a48 	vcmp.f32	s16, s16
 801096a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801096e:	d60f      	bvs.n	8010990 <logf+0x38>
 8010970:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010978:	dc0a      	bgt.n	8010990 <logf+0x38>
 801097a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010982:	d108      	bne.n	8010996 <logf+0x3e>
 8010984:	f7ff ffb0 	bl	80108e8 <__errno>
 8010988:	2322      	movs	r3, #34	@ 0x22
 801098a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80109b0 <logf+0x58>
 801098e:	6003      	str	r3, [r0, #0]
 8010990:	ecbd 8b02 	vpop	{d8}
 8010994:	bd08      	pop	{r3, pc}
 8010996:	f7ff ffa7 	bl	80108e8 <__errno>
 801099a:	ecbd 8b02 	vpop	{d8}
 801099e:	4603      	mov	r3, r0
 80109a0:	2221      	movs	r2, #33	@ 0x21
 80109a2:	601a      	str	r2, [r3, #0]
 80109a4:	4803      	ldr	r0, [pc, #12]	@ (80109b4 <logf+0x5c>)
 80109a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80109aa:	f000 b805 	b.w	80109b8 <nanf>
 80109ae:	bf00      	nop
 80109b0:	ff800000 	.word	0xff800000
 80109b4:	08010c88 	.word	0x08010c88

080109b8 <nanf>:
 80109b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80109c0 <nanf+0x8>
 80109bc:	4770      	bx	lr
 80109be:	bf00      	nop
 80109c0:	7fc00000 	.word	0x7fc00000

080109c4 <__ieee754_logf>:
 80109c4:	ee10 2a10 	vmov	r2, s0
 80109c8:	f032 4300 	bics.w	r3, r2, #2147483648	@ 0x80000000
 80109cc:	d02f      	beq.n	8010a2e <__ieee754_logf+0x6a>
 80109ce:	2a00      	cmp	r2, #0
 80109d0:	4613      	mov	r3, r2
 80109d2:	db33      	blt.n	8010a3c <__ieee754_logf+0x78>
 80109d4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80109d8:	da40      	bge.n	8010a5c <__ieee754_logf+0x98>
 80109da:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 80109de:	db34      	blt.n	8010a4a <__ieee754_logf+0x86>
 80109e0:	f04f 0c00 	mov.w	ip, #0
 80109e4:	4864      	ldr	r0, [pc, #400]	@ (8010b78 <__ieee754_logf+0x1b4>)
 80109e6:	f3c3 0116 	ubfx	r1, r3, #0, #23
 80109ea:	4408      	add	r0, r1
 80109ec:	f400 0200 	and.w	r2, r0, #8388608	@ 0x800000
 80109f0:	f082 527e 	eor.w	r2, r2, #1065353216	@ 0x3f800000
 80109f4:	430a      	orrs	r2, r1
 80109f6:	15db      	asrs	r3, r3, #23
 80109f8:	ee00 2a10 	vmov	s0, r2
 80109fc:	3b7f      	subs	r3, #127	@ 0x7f
 80109fe:	4a5f      	ldr	r2, [pc, #380]	@ (8010b7c <__ieee754_logf+0x1b8>)
 8010a00:	4463      	add	r3, ip
 8010a02:	f101 0c0f 	add.w	ip, r1, #15
 8010a06:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010a0a:	ea0c 0202 	and.w	r2, ip, r2
 8010a0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010a12:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8010a16:	bb22      	cbnz	r2, 8010a62 <__ieee754_logf+0x9e>
 8010a18:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8010a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a20:	d162      	bne.n	8010ae8 <__ieee754_logf+0x124>
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	f040 8090 	bne.w	8010b48 <__ieee754_logf+0x184>
 8010a28:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8010b80 <__ieee754_logf+0x1bc>
 8010a2c:	4770      	bx	lr
 8010a2e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010b84 <__ieee754_logf+0x1c0>
 8010a32:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8010b80 <__ieee754_logf+0x1bc>
 8010a36:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010a3a:	4770      	bx	lr
 8010a3c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010a40:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8010b80 <__ieee754_logf+0x1bc>
 8010a44:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8010a48:	4770      	bx	lr
 8010a4a:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8010b88 <__ieee754_logf+0x1c4>
 8010a4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010a52:	f06f 0c18 	mvn.w	ip, #24
 8010a56:	ee17 3a90 	vmov	r3, s15
 8010a5a:	e7c3      	b.n	80109e4 <__ieee754_logf+0x20>
 8010a5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010a60:	4770      	bx	lr
 8010a62:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010a66:	ee70 7a27 	vadd.f32	s15, s0, s15
 8010a6a:	ee07 3a10 	vmov	s14, r3
 8010a6e:	ee80 4a27 	vdiv.f32	s8, s0, s15
 8010a72:	4846      	ldr	r0, [pc, #280]	@ (8010b8c <__ieee754_logf+0x1c8>)
 8010a74:	f5c1 1257 	rsb	r2, r1, #3522560	@ 0x35c000
 8010a78:	4408      	add	r0, r1
 8010a7a:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8010a7e:	4302      	orrs	r2, r0
 8010a80:	2a00      	cmp	r2, #0
 8010a82:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 8010b90 <__ieee754_logf+0x1cc>
 8010a86:	eddf 4a43 	vldr	s9, [pc, #268]	@ 8010b94 <__ieee754_logf+0x1d0>
 8010a8a:	eddf 5a43 	vldr	s11, [pc, #268]	@ 8010b98 <__ieee754_logf+0x1d4>
 8010a8e:	eddf 3a43 	vldr	s7, [pc, #268]	@ 8010b9c <__ieee754_logf+0x1d8>
 8010a92:	ed9f 5a43 	vldr	s10, [pc, #268]	@ 8010ba0 <__ieee754_logf+0x1dc>
 8010a96:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8010ba4 <__ieee754_logf+0x1e0>
 8010a9a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8010ba8 <__ieee754_logf+0x1e4>
 8010a9e:	ee24 6a04 	vmul.f32	s12, s8, s8
 8010aa2:	eef8 2ac7 	vcvt.f32.s32	s5, s14
 8010aa6:	ee26 7a06 	vmul.f32	s14, s12, s12
 8010aaa:	eee7 4a03 	vfma.f32	s9, s14, s6
 8010aae:	eea7 5a23 	vfma.f32	s10, s14, s7
 8010ab2:	eee4 5a87 	vfma.f32	s11, s9, s14
 8010ab6:	eee5 6a07 	vfma.f32	s13, s10, s14
 8010aba:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010abe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010ac2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010ac6:	dd2a      	ble.n	8010b1e <__ieee754_logf+0x15a>
 8010ac8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010acc:	ee20 7a07 	vmul.f32	s14, s0, s14
 8010ad0:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010ad4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ad8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010adc:	bb3b      	cbnz	r3, 8010b2e <__ieee754_logf+0x16a>
 8010ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ae2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010ae6:	4770      	bx	lr
 8010ae8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8010bac <__ieee754_logf+0x1e8>
 8010aec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010af0:	eee0 7a47 	vfms.f32	s15, s0, s14
 8010af4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010af8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d0f0      	beq.n	8010ae2 <__ieee754_logf+0x11e>
 8010b00:	ee07 3a90 	vmov	s15, r3
 8010b04:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 8010bb0 <__ieee754_logf+0x1ec>
 8010b08:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010bb4 <__ieee754_logf+0x1f0>
 8010b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b10:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8010b14:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010b18:	ee97 0aa6 	vfnms.f32	s0, s15, s13
 8010b1c:	4770      	bx	lr
 8010b1e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010b22:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010b26:	b9e3      	cbnz	r3, 8010b62 <__ieee754_logf+0x19e>
 8010b28:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010b2c:	4770      	bx	lr
 8010b2e:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 8010bb0 <__ieee754_logf+0x1ec>
 8010b32:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8010bb4 <__ieee754_logf+0x1f0>
 8010b36:	eee2 7a86 	vfma.f32	s15, s5, s12
 8010b3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010b3e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010b42:	ee92 0aa6 	vfnms.f32	s0, s5, s13
 8010b46:	4770      	bx	lr
 8010b48:	ee07 3a90 	vmov	s15, r3
 8010b4c:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8010bb0 <__ieee754_logf+0x1ec>
 8010b50:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010bb4 <__ieee754_logf+0x1f0>
 8010b54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b58:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010b5c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8010b60:	4770      	bx	lr
 8010b62:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8010bb0 <__ieee754_logf+0x1ec>
 8010b66:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8010bb4 <__ieee754_logf+0x1f0>
 8010b6a:	eee2 7ae6 	vfms.f32	s15, s5, s13
 8010b6e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010b72:	ee92 0a87 	vfnms.f32	s0, s5, s14
 8010b76:	4770      	bx	lr
 8010b78:	004afb20 	.word	0x004afb20
 8010b7c:	007ffff0 	.word	0x007ffff0
 8010b80:	00000000 	.word	0x00000000
 8010b84:	cc000000 	.word	0xcc000000
 8010b88:	4c000000 	.word	0x4c000000
 8010b8c:	ffcf5c30 	.word	0xffcf5c30
 8010b90:	3e178897 	.word	0x3e178897
 8010b94:	3e3a3325 	.word	0x3e3a3325
 8010b98:	3e924925 	.word	0x3e924925
 8010b9c:	3e1cd04f 	.word	0x3e1cd04f
 8010ba0:	3e638e29 	.word	0x3e638e29
 8010ba4:	3f2aaaab 	.word	0x3f2aaaab
 8010ba8:	3ecccccd 	.word	0x3ecccccd
 8010bac:	3eaaaaab 	.word	0x3eaaaaab
 8010bb0:	3717f7d1 	.word	0x3717f7d1
 8010bb4:	3f317180 	.word	0x3f317180

08010bb8 <_init>:
 8010bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bba:	bf00      	nop
 8010bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bbe:	bc08      	pop	{r3}
 8010bc0:	469e      	mov	lr, r3
 8010bc2:	4770      	bx	lr

08010bc4 <_fini>:
 8010bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc6:	bf00      	nop
 8010bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bca:	bc08      	pop	{r3}
 8010bcc:	469e      	mov	lr, r3
 8010bce:	4770      	bx	lr
