ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"cell_temp_handler.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/cell_temp_handler.c"
  20              		.section	.text.CellTemp_IsADCEnabled,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	CellTemp_IsADCEnabled:
  27              	.LVL0:
  28              	.LFB299:
   1:Core/Src/cell_temp_handler.c **** /* USER CODE BEGIN Header */
   2:Core/Src/cell_temp_handler.c **** /**
   3:Core/Src/cell_temp_handler.c ****   ******************************************************************************
   4:Core/Src/cell_temp_handler.c ****   * @file           : cell_temp_handler.c
   5:Core/Src/cell_temp_handler.c ****   * @brief          : Cell temperature monitoring handler implementation
   6:Core/Src/cell_temp_handler.c ****   ******************************************************************************
   7:Core/Src/cell_temp_handler.c ****   * @attention
   8:Core/Src/cell_temp_handler.c ****   *
   9:Core/Src/cell_temp_handler.c ****   * Copyright (c) 2025 STMicroelectronics.
  10:Core/Src/cell_temp_handler.c ****   * All rights reserved.
  11:Core/Src/cell_temp_handler.c ****   *
  12:Core/Src/cell_temp_handler.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/cell_temp_handler.c ****   * in root directory of this software component.
  14:Core/Src/cell_temp_handler.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/cell_temp_handler.c ****   *
  16:Core/Src/cell_temp_handler.c ****   ******************************************************************************
  17:Core/Src/cell_temp_handler.c ****   */
  18:Core/Src/cell_temp_handler.c **** /* USER CODE END Header */
  19:Core/Src/cell_temp_handler.c **** 
  20:Core/Src/cell_temp_handler.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/cell_temp_handler.c **** #include "cell_temp_handler.h"
  22:Core/Src/cell_temp_handler.c **** #include "can_manager.h"
  23:Core/Src/cell_temp_handler.c **** #include "error_manager.h"
  24:Core/Src/cell_temp_handler.c **** #include <string.h>
  25:Core/Src/cell_temp_handler.c **** 
  26:Core/Src/cell_temp_handler.c **** /* Private variables ---------------------------------------------------------*/
  27:Core/Src/cell_temp_handler.c **** static temp_monitor_state_t temp_state = {0};
  28:Core/Src/cell_temp_handler.c **** static uint64_t thermistor_fault_mask = THERMISTOR_FAULT_MASK_DEFAULT;
  29:Core/Src/cell_temp_handler.c **** static const uint32_t adc_channels[NUM_ADC_CHANNELS] = {
  30:Core/Src/cell_temp_handler.c ****     ADC_CH_1, ADC_CH_2, ADC_CH_3, ADC_CH_4, ADC_CH_5, ADC_CH_6, ADC_CH_7
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 2


  31:Core/Src/cell_temp_handler.c **** };
  32:Core/Src/cell_temp_handler.c **** 
  33:Core/Src/cell_temp_handler.c **** // ADC channel enabled flags - compile time configuration
  34:Core/Src/cell_temp_handler.c **** static const uint8_t adc_channel_enabled[NUM_ADC_CHANNELS] = {
  35:Core/Src/cell_temp_handler.c ****     ADC1_ENABLED, ADC2_ENABLED, ADC3_ENABLED, ADC4_ENABLED, 
  36:Core/Src/cell_temp_handler.c ****     ADC5_ENABLED, ADC6_ENABLED, ADC7_ENABLED
  37:Core/Src/cell_temp_handler.c **** };
  38:Core/Src/cell_temp_handler.c **** 
  39:Core/Src/cell_temp_handler.c **** /* Private function prototypes -----------------------------------------------*/
  40:Core/Src/cell_temp_handler.c **** static HAL_StatusTypeDef CellTemp_ConfigureADCChannel(uint32_t channel);
  41:Core/Src/cell_temp_handler.c **** static HAL_StatusTypeDef CellTemp_SendTemperatureMessage(uint8_t msg_index, uint8_t start_therm_idx
  42:Core/Src/cell_temp_handler.c **** static uint8_t CellTemp_IsADCEnabled(uint8_t adc_index);
  43:Core/Src/cell_temp_handler.c **** static uint8_t CellTemp_IsFaultDetectionEnabled(uint8_t thermistor_index);
  44:Core/Src/cell_temp_handler.c **** 
  45:Core/Src/cell_temp_handler.c **** /* Function Implementations --------------------------------------------------*/
  46:Core/Src/cell_temp_handler.c **** 
  47:Core/Src/cell_temp_handler.c **** /**
  48:Core/Src/cell_temp_handler.c ****   * @brief  Initialize cell temperature monitoring system
  49:Core/Src/cell_temp_handler.c ****   * @retval HAL_StatusTypeDef
  50:Core/Src/cell_temp_handler.c ****   */
  51:Core/Src/cell_temp_handler.c **** HAL_StatusTypeDef CellTemp_Init(void)
  52:Core/Src/cell_temp_handler.c **** {
  53:Core/Src/cell_temp_handler.c ****     // Initialize state structure
  54:Core/Src/cell_temp_handler.c ****     memset(&temp_state, 0, sizeof(temp_monitor_state_t));
  55:Core/Src/cell_temp_handler.c **** 
  56:Core/Src/cell_temp_handler.c ****     // Initialize thermistor data
  57:Core/Src/cell_temp_handler.c ****     for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
  58:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
  59:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].mux_channel = i % MUX_CHANNELS;
  60:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].temperature = -127.0f; // Invalid temperature marker
  61:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].raw_adc = 0;
  62:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].last_read_time = 0;
  63:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_accumulator = 0;
  64:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].sample_count = 0;
  65:Core/Src/cell_temp_handler.c ****     }
  66:Core/Src/cell_temp_handler.c **** 
  67:Core/Src/cell_temp_handler.c ****     // Note: ADC calibration is already done in main() before RTOS starts
  68:Core/Src/cell_temp_handler.c **** 
  69:Core/Src/cell_temp_handler.c ****     // Initialize MUX control signals to 0 (without calling osDelay)
  70:Core/Src/cell_temp_handler.c ****     HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
  71:Core/Src/cell_temp_handler.c ****     HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
  72:Core/Src/cell_temp_handler.c ****     HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
  73:Core/Src/cell_temp_handler.c **** 
  74:Core/Src/cell_temp_handler.c ****     return HAL_OK;
  75:Core/Src/cell_temp_handler.c **** }
  76:Core/Src/cell_temp_handler.c **** 
  77:Core/Src/cell_temp_handler.c **** /**
  78:Core/Src/cell_temp_handler.c ****   * @brief  Configure ADC for specific channel
  79:Core/Src/cell_temp_handler.c ****   * @param  channel: ADC channel to configure
  80:Core/Src/cell_temp_handler.c ****   * @retval HAL_StatusTypeDef
  81:Core/Src/cell_temp_handler.c ****   */
  82:Core/Src/cell_temp_handler.c **** static HAL_StatusTypeDef CellTemp_ConfigureADCChannel(uint32_t channel)
  83:Core/Src/cell_temp_handler.c **** {
  84:Core/Src/cell_temp_handler.c ****     ADC_ChannelConfTypeDef sConfig = {0};
  85:Core/Src/cell_temp_handler.c ****     
  86:Core/Src/cell_temp_handler.c ****     sConfig.Channel = channel;
  87:Core/Src/cell_temp_handler.c ****     sConfig.Rank = ADC_REGULAR_RANK_1;
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 3


  88:Core/Src/cell_temp_handler.c ****     sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; // Long sampling for high impedance
  89:Core/Src/cell_temp_handler.c ****     sConfig.SingleDiff = ADC_SINGLE_ENDED;
  90:Core/Src/cell_temp_handler.c ****     sConfig.OffsetNumber = ADC_OFFSET_NONE;
  91:Core/Src/cell_temp_handler.c ****     sConfig.Offset = 0;
  92:Core/Src/cell_temp_handler.c ****     
  93:Core/Src/cell_temp_handler.c ****     return HAL_ADC_ConfigChannel(&hadc1, &sConfig);
  94:Core/Src/cell_temp_handler.c **** }
  95:Core/Src/cell_temp_handler.c **** 
  96:Core/Src/cell_temp_handler.c **** /**
  97:Core/Src/cell_temp_handler.c ****   * @brief  Read single ADC value from specified channel
  98:Core/Src/cell_temp_handler.c ****   * @param  adc_channel: ADC channel to read
  99:Core/Src/cell_temp_handler.c ****   * @retval ADC value (0-4095)
 100:Core/Src/cell_temp_handler.c ****   */
 101:Core/Src/cell_temp_handler.c **** uint16_t CellTemp_ReadADC(uint32_t adc_channel)
 102:Core/Src/cell_temp_handler.c **** {
 103:Core/Src/cell_temp_handler.c ****     uint16_t adc_value = 0;
 104:Core/Src/cell_temp_handler.c ****     
 105:Core/Src/cell_temp_handler.c ****     // Configure ADC for the specified channel
 106:Core/Src/cell_temp_handler.c ****     if (CellTemp_ConfigureADCChannel(adc_channel) != HAL_OK) {
 107:Core/Src/cell_temp_handler.c ****         return 0;
 108:Core/Src/cell_temp_handler.c ****     }
 109:Core/Src/cell_temp_handler.c ****     
 110:Core/Src/cell_temp_handler.c ****     // Start ADC conversion
 111:Core/Src/cell_temp_handler.c ****     if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 112:Core/Src/cell_temp_handler.c ****         // Wait for conversion to complete
 113:Core/Src/cell_temp_handler.c ****         if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 114:Core/Src/cell_temp_handler.c ****             // Get ADC value
 115:Core/Src/cell_temp_handler.c ****             adc_value = HAL_ADC_GetValue(&hadc1);
 116:Core/Src/cell_temp_handler.c ****         }
 117:Core/Src/cell_temp_handler.c ****         // Stop ADC
 118:Core/Src/cell_temp_handler.c ****         HAL_ADC_Stop(&hadc1);
 119:Core/Src/cell_temp_handler.c ****     }
 120:Core/Src/cell_temp_handler.c ****     
 121:Core/Src/cell_temp_handler.c ****     return adc_value;
 122:Core/Src/cell_temp_handler.c **** }
 123:Core/Src/cell_temp_handler.c **** 
 124:Core/Src/cell_temp_handler.c **** /**
 125:Core/Src/cell_temp_handler.c ****   * @brief  Set MUX channel using 3-bit digital control signals
 126:Core/Src/cell_temp_handler.c ****   * @param  channel: MUX channel to select (0-7)
 127:Core/Src/cell_temp_handler.c ****   * @retval None
 128:Core/Src/cell_temp_handler.c ****   */
 129:Core/Src/cell_temp_handler.c **** void CellTemp_SetMuxChannel(uint8_t channel)
 130:Core/Src/cell_temp_handler.c **** {
 131:Core/Src/cell_temp_handler.c ****     // Validate channel range
 132:Core/Src/cell_temp_handler.c ****     if (channel > 7) {
 133:Core/Src/cell_temp_handler.c ****         return;
 134:Core/Src/cell_temp_handler.c ****     }
 135:Core/Src/cell_temp_handler.c ****     
 136:Core/Src/cell_temp_handler.c ****     // Set MUX control signals based on 3-bit channel value
 137:Core/Src/cell_temp_handler.c ****     // MUX_SIG1 = bit 0
 138:Core/Src/cell_temp_handler.c ****     // MUX_SIG2 = bit 1  
 139:Core/Src/cell_temp_handler.c ****     // MUX_SIG3 = bit 2
 140:Core/Src/cell_temp_handler.c ****     
 141:Core/Src/cell_temp_handler.c ****     if (channel & 0x01) {
 142:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_SET);
 143:Core/Src/cell_temp_handler.c ****     } else {
 144:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_RESET);
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 4


 145:Core/Src/cell_temp_handler.c ****     }
 146:Core/Src/cell_temp_handler.c ****     
 147:Core/Src/cell_temp_handler.c ****     if (channel & 0x02) {
 148:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_SET);
 149:Core/Src/cell_temp_handler.c ****     } else {
 150:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 151:Core/Src/cell_temp_handler.c ****     }
 152:Core/Src/cell_temp_handler.c ****     
 153:Core/Src/cell_temp_handler.c ****     if (channel & 0x04) {
 154:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_SET);
 155:Core/Src/cell_temp_handler.c ****     } else {
 156:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 157:Core/Src/cell_temp_handler.c ****     }
 158:Core/Src/cell_temp_handler.c ****     
 159:Core/Src/cell_temp_handler.c ****     // Allow time for MUX to settle (2 ticks = 2ms at default 1ms tick rate)
 160:Core/Src/cell_temp_handler.c ****     osDelay(2);
 161:Core/Src/cell_temp_handler.c **** }
 162:Core/Src/cell_temp_handler.c **** 
 163:Core/Src/cell_temp_handler.c **** /**
 164:Core/Src/cell_temp_handler.c ****   * @brief  Calculate temperature from thermistor ADC reading using B-parameter equation
 165:Core/Src/cell_temp_handler.c ****   * @param  adc_value: Raw ADC value (0-4095)
 166:Core/Src/cell_temp_handler.c ****   * @retval Temperature in degrees Celsius
 167:Core/Src/cell_temp_handler.c ****   */
 168:Core/Src/cell_temp_handler.c **** float CellTemp_CalculateTemperature(uint16_t adc_value)
 169:Core/Src/cell_temp_handler.c **** {
 170:Core/Src/cell_temp_handler.c ****     // Convert ADC value to voltage
 171:Core/Src/cell_temp_handler.c ****     float voltage = ((float)adc_value / ADC_RESOLUTION) * ADC_VREF;
 172:Core/Src/cell_temp_handler.c ****     
 173:Core/Src/cell_temp_handler.c ****     // Check for disconnected thermistor (very low ADC reading means low voltage = open circuit)
 174:Core/Src/cell_temp_handler.c ****     if (adc_value < 10) {  // Less than ~8mV indicates disconnected sensor
 175:Core/Src/cell_temp_handler.c ****         return -127.0f;  // Return obvious error value
 176:Core/Src/cell_temp_handler.c ****     }
 177:Core/Src/cell_temp_handler.c ****     
 178:Core/Src/cell_temp_handler.c ****     // Calculate thermistor resistance using voltage divider
 179:Core/Src/cell_temp_handler.c ****     // Circuit: 3.3V -> 10kΩ pullup -> ADC_input -> Thermistor -> GND
 180:Core/Src/cell_temp_handler.c ****     // Voltage divider: V_adc = 3.3V * (R_thermistor / (R_pullup + R_thermistor))
 181:Core/Src/cell_temp_handler.c ****     // Solving for R_thermistor: R_thermistor = (V_adc * R_pullup) / (3.3V - V_adc)
 182:Core/Src/cell_temp_handler.c ****     
 183:Core/Src/cell_temp_handler.c ****     float r_thermistor;
 184:Core/Src/cell_temp_handler.c ****     
 185:Core/Src/cell_temp_handler.c ****     if (voltage >= 3.29f) {  // Close to 3.3V limit, very high resistance (cold)
 186:Core/Src/cell_temp_handler.c ****         r_thermistor = PULLUP_RESISTOR * 100.0f;  // Assume very high resistance
 187:Core/Src/cell_temp_handler.c ****     } else {
 188:Core/Src/cell_temp_handler.c ****         // Normal calculation with 3.3V supply
 189:Core/Src/cell_temp_handler.c ****         r_thermistor = (voltage * PULLUP_RESISTOR) / (ADC_VREF - voltage);
 190:Core/Src/cell_temp_handler.c ****     }
 191:Core/Src/cell_temp_handler.c ****     
 192:Core/Src/cell_temp_handler.c ****     // Handle edge cases
 193:Core/Src/cell_temp_handler.c ****     if (r_thermistor <= 0) {
 194:Core/Src/cell_temp_handler.c ****         return 125.0f; // Return maximum temperature for very low resistance
 195:Core/Src/cell_temp_handler.c ****     }
 196:Core/Src/cell_temp_handler.c ****     
 197:Core/Src/cell_temp_handler.c ****     // Calculate temperature using B-parameter equation (derived from Steinhart-Hart)
 198:Core/Src/cell_temp_handler.c ****     // 1/T = 1/T0 + (1/B) * ln(R/R0)
 199:Core/Src/cell_temp_handler.c ****     // Where T0 = 298.15K (25°C), R0 = resistance at 25°C, B = B-value
 200:Core/Src/cell_temp_handler.c ****     float ln_ratio = logf(r_thermistor / THERMISTOR_R25);
 201:Core/Src/cell_temp_handler.c ****     float temp_kelvin = 1.0f / ((1.0f / REFERENCE_TEMP_K) + (ln_ratio / THERMISTOR_B_VALUE));
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 5


 202:Core/Src/cell_temp_handler.c ****     
 203:Core/Src/cell_temp_handler.c ****     // Convert to Celsius
 204:Core/Src/cell_temp_handler.c ****     float temp_celsius = temp_kelvin - 273.15f;
 205:Core/Src/cell_temp_handler.c ****     
 206:Core/Src/cell_temp_handler.c ****     // Clamp to reasonable range
 207:Core/Src/cell_temp_handler.c ****     if (temp_celsius < -40.0f) {
 208:Core/Src/cell_temp_handler.c ****         temp_celsius = -40.0f;
 209:Core/Src/cell_temp_handler.c ****     } else if (temp_celsius > 125.0f) {
 210:Core/Src/cell_temp_handler.c ****         temp_celsius = 125.0f;
 211:Core/Src/cell_temp_handler.c ****     }
 212:Core/Src/cell_temp_handler.c ****     
 213:Core/Src/cell_temp_handler.c ****     return temp_celsius;
 214:Core/Src/cell_temp_handler.c **** }
 215:Core/Src/cell_temp_handler.c **** 
 216:Core/Src/cell_temp_handler.c **** /**
 217:Core/Src/cell_temp_handler.c ****   * @brief  Read temperature from specific thermistor
 218:Core/Src/cell_temp_handler.c ****   * @param  adc_index: ADC channel index (0-6)
 219:Core/Src/cell_temp_handler.c ****   * @param  mux_channel: MUX channel (0-7)
 220:Core/Src/cell_temp_handler.c ****   * @retval Temperature in degrees Celsius
 221:Core/Src/cell_temp_handler.c ****   */
 222:Core/Src/cell_temp_handler.c **** float CellTemp_ReadThermistor(uint8_t adc_index, uint8_t mux_channel)
 223:Core/Src/cell_temp_handler.c **** {
 224:Core/Src/cell_temp_handler.c ****     // Validate inputs
 225:Core/Src/cell_temp_handler.c ****     if (adc_index >= NUM_ADC_CHANNELS || mux_channel >= MUX_CHANNELS) {
 226:Core/Src/cell_temp_handler.c ****         return -127.0f;
 227:Core/Src/cell_temp_handler.c ****     }
 228:Core/Src/cell_temp_handler.c ****     
 229:Core/Src/cell_temp_handler.c ****     // Set MUX to desired channel
 230:Core/Src/cell_temp_handler.c ****     CellTemp_SetMuxChannel(mux_channel);
 231:Core/Src/cell_temp_handler.c ****     
 232:Core/Src/cell_temp_handler.c ****     // Read ADC value from the specified ADC channel
 233:Core/Src/cell_temp_handler.c ****     uint16_t adc_value = CellTemp_ReadADC(adc_channels[adc_index]);
 234:Core/Src/cell_temp_handler.c ****     
 235:Core/Src/cell_temp_handler.c ****     // Calculate temperature
 236:Core/Src/cell_temp_handler.c ****     return CellTemp_CalculateTemperature(adc_value);
 237:Core/Src/cell_temp_handler.c **** }
 238:Core/Src/cell_temp_handler.c **** 
 239:Core/Src/cell_temp_handler.c **** /**
 240:Core/Src/cell_temp_handler.c ****   * @brief  Main temperature monitoring task (to be called from ReadCellTemps)
 241:Core/Src/cell_temp_handler.c ****   * @param  argument: Not used
 242:Core/Src/cell_temp_handler.c ****   * @retval None
 243:Core/Src/cell_temp_handler.c ****   */
 244:Core/Src/cell_temp_handler.c **** void CellTemp_MonitorTask(void *argument)
 245:Core/Src/cell_temp_handler.c **** {
 246:Core/Src/cell_temp_handler.c ****     // Initialize the temperature monitoring system
 247:Core/Src/cell_temp_handler.c ****     if (CellTemp_Init() != HAL_OK) {
 248:Core/Src/cell_temp_handler.c ****         // Handle initialization error - blink would go here if we had an LED
 249:Core/Src/cell_temp_handler.c ****         while(1) {
 250:Core/Src/cell_temp_handler.c ****             osDelay(1000);  // Wait 1 second (1000 ticks at 1ms tick rate)
 251:Core/Src/cell_temp_handler.c ****         }
 252:Core/Src/cell_temp_handler.c ****     }
 253:Core/Src/cell_temp_handler.c ****     
 254:Core/Src/cell_temp_handler.c ****     // Strategy: Oversample each MUX channel for 125ms, then send CAN updates
 255:Core/Src/cell_temp_handler.c ****     // - Set MUX channel once
 256:Core/Src/cell_temp_handler.c ****     // - Sample all 7 ADC channels every 10ms for 125ms (12 samples each)
 257:Core/Src/cell_temp_handler.c ****     // - Average the samples to get accurate readings
 258:Core/Src/cell_temp_handler.c ****     // - Send CAN messages with updated values for all 7 ADCs
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 6


 259:Core/Src/cell_temp_handler.c ****     // - Move to next MUX channel and repeat
 260:Core/Src/cell_temp_handler.c ****     // Complete cycle time: 125ms × 8 MUX channels = 1 second
 261:Core/Src/cell_temp_handler.c ****     
 262:Core/Src/cell_temp_handler.c ****     /* Infinite loop */
 263:Core/Src/cell_temp_handler.c ****     for(;;)
 264:Core/Src/cell_temp_handler.c ****     {
 265:Core/Src/cell_temp_handler.c ****         // Set the current MUX channel for all ADCs
 266:Core/Src/cell_temp_handler.c ****         CellTemp_SetMuxChannel(temp_state.current_mux);
 267:Core/Src/cell_temp_handler.c ****         
 268:Core/Src/cell_temp_handler.c ****         // Reset accumulators for this MUX channel (across all ADC channels)
 269:Core/Src/cell_temp_handler.c ****         for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 270:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 271:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 272:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].adc_accumulator = 0;
 273:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].sample_count = 0;
 274:Core/Src/cell_temp_handler.c ****             }
 275:Core/Src/cell_temp_handler.c ****         }
 276:Core/Src/cell_temp_handler.c ****         
 277:Core/Src/cell_temp_handler.c ****         // Oversample for 500ms (50 samples at 10ms intervals)
 278:Core/Src/cell_temp_handler.c ****         for (uint16_t sample = 0; sample < TEMP_SAMPLES_PER_MUX; sample++) {
 279:Core/Src/cell_temp_handler.c ****             // Read all enabled ADC channels for current MUX channel
 280:Core/Src/cell_temp_handler.c ****             for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 281:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 282:Core/Src/cell_temp_handler.c ****                     uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 283:Core/Src/cell_temp_handler.c ****                     thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 284:Core/Src/cell_temp_handler.c ****                     
 285:Core/Src/cell_temp_handler.c ****                     // Read ADC value
 286:Core/Src/cell_temp_handler.c ****                     uint16_t adc_value = CellTemp_ReadADC(adc_channels[adc]);
 287:Core/Src/cell_temp_handler.c ****                     
 288:Core/Src/cell_temp_handler.c ****                     // Accumulate sample (ignore obviously invalid readings)
 289:Core/Src/cell_temp_handler.c ****                     if (adc_value >= 10) {  // Valid reading threshold
 290:Core/Src/cell_temp_handler.c ****                         therm->adc_accumulator += adc_value;
 291:Core/Src/cell_temp_handler.c ****                         therm->sample_count++;
 292:Core/Src/cell_temp_handler.c ****                     }
 293:Core/Src/cell_temp_handler.c ****                 }
 294:Core/Src/cell_temp_handler.c ****             }
 295:Core/Src/cell_temp_handler.c ****             
 296:Core/Src/cell_temp_handler.c ****             // Wait 10ms before next sample
 297:Core/Src/cell_temp_handler.c ****             osDelay(TEMP_SAMPLE_INTERVAL_MS);
 298:Core/Src/cell_temp_handler.c ****         }
 299:Core/Src/cell_temp_handler.c ****         
 300:Core/Src/cell_temp_handler.c ****         // Calculate averaged values and temperatures for this MUX channel
 301:Core/Src/cell_temp_handler.c ****         uint32_t current_time = osKernelGetTickCount();
 302:Core/Src/cell_temp_handler.c ****         
 303:Core/Src/cell_temp_handler.c ****         for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 304:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 305:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 306:Core/Src/cell_temp_handler.c ****                 thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 307:Core/Src/cell_temp_handler.c ****                 
 308:Core/Src/cell_temp_handler.c ****                 // Calculate average ADC value
 309:Core/Src/cell_temp_handler.c ****                 if (therm->sample_count > 0) {
 310:Core/Src/cell_temp_handler.c ****                     therm->raw_adc = (uint16_t)(therm->adc_accumulator / therm->sample_count);
 311:Core/Src/cell_temp_handler.c ****                     therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 312:Core/Src/cell_temp_handler.c ****                     therm->last_read_time = current_time;
 313:Core/Src/cell_temp_handler.c ****                     
 314:Core/Src/cell_temp_handler.c ****                     // Check temperature limits and set error flags (only if fault detection is ena
 315:Core/Src/cell_temp_handler.c ****                     if (CellTemp_IsFaultDetectionEnabled(therm_idx)) {
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 7


 316:Core/Src/cell_temp_handler.c ****                         if (therm->temperature > -126.0f) {  // Valid temperature reading
 317:Core/Src/cell_temp_handler.c ****                             if (therm->temperature > TEMP_MAX_CELSIUS) {
 318:Core/Src/cell_temp_handler.c ****                                 ErrorMgr_SetError(ERROR_OVER_TEMP);
 319:Core/Src/cell_temp_handler.c ****                             } else if (therm->temperature < TEMP_MIN_CELSIUS) {
 320:Core/Src/cell_temp_handler.c ****                                 ErrorMgr_SetError(ERROR_UNDER_TEMP);
 321:Core/Src/cell_temp_handler.c ****                             }
 322:Core/Src/cell_temp_handler.c ****                         } else {
 323:Core/Src/cell_temp_handler.c ****                             ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 324:Core/Src/cell_temp_handler.c ****                         }
 325:Core/Src/cell_temp_handler.c ****                     }
 326:Core/Src/cell_temp_handler.c ****                 } else {
 327:Core/Src/cell_temp_handler.c ****                     // No valid samples collected - sensor fault
 328:Core/Src/cell_temp_handler.c ****                     therm->raw_adc = 0;
 329:Core/Src/cell_temp_handler.c ****                     therm->temperature = -127.0f;
 330:Core/Src/cell_temp_handler.c ****                     // Only report sensor fault if fault detection is enabled for this thermistor
 331:Core/Src/cell_temp_handler.c ****                     if (CellTemp_IsFaultDetectionEnabled(therm_idx)) {
 332:Core/Src/cell_temp_handler.c ****                         ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 333:Core/Src/cell_temp_handler.c ****                     }
 334:Core/Src/cell_temp_handler.c ****                 }
 335:Core/Src/cell_temp_handler.c ****             } else {
 336:Core/Src/cell_temp_handler.c ****                 // ADC disabled - mark thermistor as invalid
 337:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 338:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature = -127.0f;
 339:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].raw_adc = 0;
 340:Core/Src/cell_temp_handler.c ****             }
 341:Core/Src/cell_temp_handler.c ****         }
 342:Core/Src/cell_temp_handler.c ****         
 343:Core/Src/cell_temp_handler.c ****         // Send CAN messages only when all 4 thermistors in the message have been updated
 344:Core/Src/cell_temp_handler.c ****         // Each message covers 4 consecutive thermistors from the same ADC
 345:Core/Src/cell_temp_handler.c ****         // Message updates happen when MUX channels 3 and 7 complete
 346:Core/Src/cell_temp_handler.c ****         
 347:Core/Src/cell_temp_handler.c ****         if (temp_state.current_mux == 3 || temp_state.current_mux == 7) {
 348:Core/Src/cell_temp_handler.c ****             // Just completed MUX 0-3 or MUX 4-7, so we have all 4 temps for a message
 349:Core/Src/cell_temp_handler.c ****             for (uint8_t adc = 0; adc < NUM_ADC_CHANNELS; adc++) {
 350:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 351:Core/Src/cell_temp_handler.c ****                     // Determine which message to send based on current MUX
 352:Core/Src/cell_temp_handler.c ****                     if (temp_state.current_mux == 3) {
 353:Core/Src/cell_temp_handler.c ****                         // Send message 0 for this ADC (thermistors 0-3)
 354:Core/Src/cell_temp_handler.c ****                         uint8_t msg_idx = adc * 2;
 355:Core/Src/cell_temp_handler.c ****                         uint8_t start_therm_idx = adc * MUX_CHANNELS;
 356:Core/Src/cell_temp_handler.c ****                         CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 357:Core/Src/cell_temp_handler.c ****                         osDelay(2); // Small delay between messages
 358:Core/Src/cell_temp_handler.c ****                     } else {
 359:Core/Src/cell_temp_handler.c ****                         // Send message 1 for this ADC (thermistors 4-7)
 360:Core/Src/cell_temp_handler.c ****                         uint8_t msg_idx = adc * 2 + 1;
 361:Core/Src/cell_temp_handler.c ****                         uint8_t start_therm_idx = adc * MUX_CHANNELS + 4;
 362:Core/Src/cell_temp_handler.c ****                         CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 363:Core/Src/cell_temp_handler.c ****                         osDelay(2); // Small delay between messages
 364:Core/Src/cell_temp_handler.c ****                     }
 365:Core/Src/cell_temp_handler.c ****                 }
 366:Core/Src/cell_temp_handler.c ****             }
 367:Core/Src/cell_temp_handler.c ****         }
 368:Core/Src/cell_temp_handler.c ****         
 369:Core/Src/cell_temp_handler.c ****         // Move to next MUX channel
 370:Core/Src/cell_temp_handler.c ****         temp_state.current_mux++;
 371:Core/Src/cell_temp_handler.c ****         
 372:Core/Src/cell_temp_handler.c ****         // Check if we completed full cycle of all MUX channels
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 8


 373:Core/Src/cell_temp_handler.c ****         if (temp_state.current_mux >= MUX_CHANNELS) {
 374:Core/Src/cell_temp_handler.c ****             temp_state.current_mux = 0;
 375:Core/Src/cell_temp_handler.c ****             temp_state.cycle_count++;
 376:Core/Src/cell_temp_handler.c ****             
 377:Core/Src/cell_temp_handler.c ****             // After completing a full cycle, check if all thermistors are within limits
 378:Core/Src/cell_temp_handler.c ****             // If so, clear the error flags
 379:Core/Src/cell_temp_handler.c ****             uint8_t any_over_temp = 0;
 380:Core/Src/cell_temp_handler.c ****             uint8_t any_under_temp = 0;
 381:Core/Src/cell_temp_handler.c ****             uint8_t any_sensor_fault = 0;
 382:Core/Src/cell_temp_handler.c ****             
 383:Core/Src/cell_temp_handler.c ****             for (uint8_t i = 0; i < TOTAL_THERMISTORS; i++) {
 384:Core/Src/cell_temp_handler.c ****                 // Only check enabled ADC channels and thermistors with fault detection enabled
 385:Core/Src/cell_temp_handler.c ****                 uint8_t therm_adc = i / MUX_CHANNELS;
 386:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(therm_adc) && CellTemp_IsFaultDetectionEnabled(i)) {
 387:Core/Src/cell_temp_handler.c ****                     float temp = temp_state.thermistors[i].temperature;
 388:Core/Src/cell_temp_handler.c ****                     
 389:Core/Src/cell_temp_handler.c ****                     if (temp <= -126.0f) {
 390:Core/Src/cell_temp_handler.c ****                         // Invalid reading - sensor fault
 391:Core/Src/cell_temp_handler.c ****                         any_sensor_fault = 1;
 392:Core/Src/cell_temp_handler.c ****                     } else if (temp > TEMP_MAX_CELSIUS) {
 393:Core/Src/cell_temp_handler.c ****                         // Over temperature
 394:Core/Src/cell_temp_handler.c ****                         any_over_temp = 1;
 395:Core/Src/cell_temp_handler.c ****                     } else if (temp < TEMP_MIN_CELSIUS) {
 396:Core/Src/cell_temp_handler.c ****                         // Under temperature
 397:Core/Src/cell_temp_handler.c ****                         any_under_temp = 1;
 398:Core/Src/cell_temp_handler.c ****                     }
 399:Core/Src/cell_temp_handler.c ****                 }
 400:Core/Src/cell_temp_handler.c ****             }
 401:Core/Src/cell_temp_handler.c ****             
 402:Core/Src/cell_temp_handler.c ****             // Clear error flags if all thermistors are within bounds
 403:Core/Src/cell_temp_handler.c ****             if (!any_over_temp) {
 404:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_OVER_TEMP);
 405:Core/Src/cell_temp_handler.c ****             }
 406:Core/Src/cell_temp_handler.c ****             if (!any_under_temp) {
 407:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_UNDER_TEMP);
 408:Core/Src/cell_temp_handler.c ****             }
 409:Core/Src/cell_temp_handler.c ****             if (!any_sensor_fault) {
 410:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_TEMP_SENSOR_FAULT);
 411:Core/Src/cell_temp_handler.c ****             }
 412:Core/Src/cell_temp_handler.c ****         }
 413:Core/Src/cell_temp_handler.c ****     }
 414:Core/Src/cell_temp_handler.c **** }
 415:Core/Src/cell_temp_handler.c **** 
 416:Core/Src/cell_temp_handler.c **** /**
 417:Core/Src/cell_temp_handler.c ****   * @brief  Check if ADC channel is enabled
 418:Core/Src/cell_temp_handler.c ****   * @param  adc_index: ADC channel index (0-6)
 419:Core/Src/cell_temp_handler.c ****   * @retval 1 if enabled, 0 if disabled
 420:Core/Src/cell_temp_handler.c ****   */
 421:Core/Src/cell_temp_handler.c **** static uint8_t CellTemp_IsADCEnabled(uint8_t adc_index)
 422:Core/Src/cell_temp_handler.c **** {
  29              		.loc 1 422 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 423:Core/Src/cell_temp_handler.c ****     if (adc_index >= NUM_ADC_CHANNELS) {
  34              		.loc 1 423 5 view .LVU1
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 9


  35              		.loc 1 423 8 is_stmt 0 view .LVU2
  36 0000 0628     		cmp	r0, #6
  37 0002 02D8     		bhi	.L3
 424:Core/Src/cell_temp_handler.c ****         return 0;
 425:Core/Src/cell_temp_handler.c ****     }
 426:Core/Src/cell_temp_handler.c ****     return adc_channel_enabled[adc_index];
  38              		.loc 1 426 5 is_stmt 1 view .LVU3
  39              		.loc 1 426 31 is_stmt 0 view .LVU4
  40 0004 024B     		ldr	r3, .L4
  41 0006 185C     		ldrb	r0, [r3, r0]	@ zero_extendqisi2
  42              	.LVL1:
  43              		.loc 1 426 31 view .LVU5
  44 0008 7047     		bx	lr
  45              	.LVL2:
  46              	.L3:
 424:Core/Src/cell_temp_handler.c ****         return 0;
  47              		.loc 1 424 16 view .LVU6
  48 000a 0020     		movs	r0, #0
  49              	.LVL3:
 427:Core/Src/cell_temp_handler.c **** }
  50              		.loc 1 427 1 view .LVU7
  51 000c 7047     		bx	lr
  52              	.L5:
  53 000e 00BF     		.align	2
  54              	.L4:
  55 0010 00000000 		.word	adc_channel_enabled
  56              		.cfi_endproc
  57              	.LFE299:
  59              		.section	.text.CellTemp_IsFaultDetectionEnabled,"ax",%progbits
  60              		.align	1
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  65              	CellTemp_IsFaultDetectionEnabled:
  66              	.LVL4:
  67              	.LFB300:
 428:Core/Src/cell_temp_handler.c **** 
 429:Core/Src/cell_temp_handler.c **** /**
 430:Core/Src/cell_temp_handler.c ****   * @brief  Check if fault detection is enabled for a specific thermistor
 431:Core/Src/cell_temp_handler.c ****   * @param  thermistor_index: Thermistor index (0-55)
 432:Core/Src/cell_temp_handler.c ****   * @retval 1 if fault detection enabled, 0 if disabled
 433:Core/Src/cell_temp_handler.c ****   */
 434:Core/Src/cell_temp_handler.c **** static uint8_t CellTemp_IsFaultDetectionEnabled(uint8_t thermistor_index)
 435:Core/Src/cell_temp_handler.c **** {
  68              		.loc 1 435 1 is_stmt 1 view -0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
 436:Core/Src/cell_temp_handler.c ****     if (thermistor_index >= TOTAL_THERMISTORS) {
  73              		.loc 1 436 5 view .LVU9
  74              		.loc 1 436 8 is_stmt 0 view .LVU10
  75 0000 3728     		cmp	r0, #55
  76 0002 14D8     		bhi	.L8
 435:Core/Src/cell_temp_handler.c ****     if (thermistor_index >= TOTAL_THERMISTORS) {
  77              		.loc 1 435 1 view .LVU11
  78 0004 10B4     		push	{r4}
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 10


  79              		.cfi_def_cfa_offset 4
  80              		.cfi_offset 4, -4
 437:Core/Src/cell_temp_handler.c ****         return 0;
 438:Core/Src/cell_temp_handler.c ****     }
 439:Core/Src/cell_temp_handler.c ****     // Check if the corresponding bit is set in the fault mask
 440:Core/Src/cell_temp_handler.c ****     return (thermistor_fault_mask & (1ULL << thermistor_index)) ? 1 : 0;
  81              		.loc 1 440 5 is_stmt 1 view .LVU12
  82              		.loc 1 440 65 is_stmt 0 view .LVU13
  83 0006 0B4A     		ldr	r2, .L13
  84 0008 1368     		ldr	r3, [r2]
  85 000a 5468     		ldr	r4, [r2, #4]
  86 000c C0F12001 		rsb	r1, r0, #32
  87 0010 A0F12002 		sub	r2, r0, #32
  88 0014 23FA00F0 		lsr	r0, r3, r0
  89              	.LVL5:
  90              		.loc 1 440 65 view .LVU14
  91 0018 04FA01F1 		lsl	r1, r4, r1
  92 001c 0843     		orrs	r0, r0, r1
  93 001e 24FA02F2 		lsr	r2, r4, r2
  94              	.LVL6:
  95              		.loc 1 440 65 view .LVU15
  96 0022 1043     		orrs	r0, r0, r2
  97              		.loc 1 440 69 view .LVU16
  98 0024 00F00100 		and	r0, r0, #1
 441:Core/Src/cell_temp_handler.c **** }
  99              		.loc 1 441 1 view .LVU17
 100 0028 5DF8044B 		ldr	r4, [sp], #4
 101              		.cfi_restore 4
 102              		.cfi_def_cfa_offset 0
 103 002c 7047     		bx	lr
 104              	.LVL7:
 105              	.L8:
 437:Core/Src/cell_temp_handler.c ****         return 0;
 106              		.loc 1 437 16 view .LVU18
 107 002e 0020     		movs	r0, #0
 108              	.LVL8:
 109              		.loc 1 441 1 view .LVU19
 110 0030 7047     		bx	lr
 111              	.L14:
 112 0032 00BF     		.align	2
 113              	.L13:
 114 0034 00000000 		.word	thermistor_fault_mask
 115              		.cfi_endproc
 116              	.LFE300:
 118              		.section	.text.CellTemp_ConfigureADCChannel,"ax",%progbits
 119              		.align	1
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 124              	CellTemp_ConfigureADCChannel:
 125              	.LVL9:
 126              	.LFB293:
  83:Core/Src/cell_temp_handler.c ****     ADC_ChannelConfTypeDef sConfig = {0};
 127              		.loc 1 83 1 is_stmt 1 view -0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 24
 130              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 11


  83:Core/Src/cell_temp_handler.c ****     ADC_ChannelConfTypeDef sConfig = {0};
 131              		.loc 1 83 1 is_stmt 0 view .LVU21
 132 0000 00B5     		push	{lr}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 14, -4
 135 0002 87B0     		sub	sp, sp, #28
 136              		.cfi_def_cfa_offset 32
  84:Core/Src/cell_temp_handler.c ****     
 137              		.loc 1 84 5 is_stmt 1 view .LVU22
  84:Core/Src/cell_temp_handler.c ****     
 138              		.loc 1 84 28 is_stmt 0 view .LVU23
 139 0004 6946     		mov	r1, sp
 140 0006 0023     		movs	r3, #0
 141 0008 0093     		str	r3, [sp]
 142 000a 0193     		str	r3, [sp, #4]
 143 000c 0293     		str	r3, [sp, #8]
 144 000e 0393     		str	r3, [sp, #12]
 145 0010 0493     		str	r3, [sp, #16]
 146 0012 0593     		str	r3, [sp, #20]
  86:Core/Src/cell_temp_handler.c ****     sConfig.Rank = ADC_REGULAR_RANK_1;
 147              		.loc 1 86 5 is_stmt 1 view .LVU24
  86:Core/Src/cell_temp_handler.c ****     sConfig.Rank = ADC_REGULAR_RANK_1;
 148              		.loc 1 86 21 is_stmt 0 view .LVU25
 149 0014 0090     		str	r0, [sp]
  87:Core/Src/cell_temp_handler.c ****     sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; // Long sampling for high impedance
 150              		.loc 1 87 5 is_stmt 1 view .LVU26
  87:Core/Src/cell_temp_handler.c ****     sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5; // Long sampling for high impedance
 151              		.loc 1 87 18 is_stmt 0 view .LVU27
 152 0016 0623     		movs	r3, #6
 153 0018 0193     		str	r3, [sp, #4]
  88:Core/Src/cell_temp_handler.c ****     sConfig.SingleDiff = ADC_SINGLE_ENDED;
 154              		.loc 1 88 5 is_stmt 1 view .LVU28
  88:Core/Src/cell_temp_handler.c ****     sConfig.SingleDiff = ADC_SINGLE_ENDED;
 155              		.loc 1 88 26 is_stmt 0 view .LVU29
 156 001a 0723     		movs	r3, #7
 157 001c 0293     		str	r3, [sp, #8]
  89:Core/Src/cell_temp_handler.c ****     sConfig.OffsetNumber = ADC_OFFSET_NONE;
 158              		.loc 1 89 5 is_stmt 1 view .LVU30
  89:Core/Src/cell_temp_handler.c ****     sConfig.OffsetNumber = ADC_OFFSET_NONE;
 159              		.loc 1 89 24 is_stmt 0 view .LVU31
 160 001e 7F23     		movs	r3, #127
 161 0020 0393     		str	r3, [sp, #12]
  90:Core/Src/cell_temp_handler.c ****     sConfig.Offset = 0;
 162              		.loc 1 90 5 is_stmt 1 view .LVU32
  90:Core/Src/cell_temp_handler.c ****     sConfig.Offset = 0;
 163              		.loc 1 90 26 is_stmt 0 view .LVU33
 164 0022 0423     		movs	r3, #4
 165 0024 0493     		str	r3, [sp, #16]
  91:Core/Src/cell_temp_handler.c ****     
 166              		.loc 1 91 5 is_stmt 1 view .LVU34
  93:Core/Src/cell_temp_handler.c **** }
 167              		.loc 1 93 5 view .LVU35
  93:Core/Src/cell_temp_handler.c **** }
 168              		.loc 1 93 12 is_stmt 0 view .LVU36
 169 0026 0348     		ldr	r0, .L17
 170              	.LVL10:
  93:Core/Src/cell_temp_handler.c **** }
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 12


 171              		.loc 1 93 12 view .LVU37
 172 0028 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 173              	.LVL11:
  94:Core/Src/cell_temp_handler.c **** 
 174              		.loc 1 94 1 view .LVU38
 175 002c 07B0     		add	sp, sp, #28
 176              		.cfi_def_cfa_offset 4
 177              		@ sp needed
 178 002e 5DF804FB 		ldr	pc, [sp], #4
 179              	.L18:
 180 0032 00BF     		.align	2
 181              	.L17:
 182 0034 00000000 		.word	hadc1
 183              		.cfi_endproc
 184              	.LFE293:
 186              		.section	.text.CellTemp_SendTemperatureMessage,"ax",%progbits
 187              		.align	1
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 192              	CellTemp_SendTemperatureMessage:
 193              	.LVL12:
 194              	.LFB301:
 442:Core/Src/cell_temp_handler.c **** 
 443:Core/Src/cell_temp_handler.c **** /**
 444:Core/Src/cell_temp_handler.c ****   * @brief  Send single temperature CAN message
 445:Core/Src/cell_temp_handler.c ****   * @param  msg_index: Message index (0-13, for 14 messages total)
 446:Core/Src/cell_temp_handler.c ****   * @param  start_therm_idx: Starting thermistor index
 447:Core/Src/cell_temp_handler.c ****   * @retval HAL_StatusTypeDef
 448:Core/Src/cell_temp_handler.c ****   */
 449:Core/Src/cell_temp_handler.c **** static HAL_StatusTypeDef CellTemp_SendTemperatureMessage(uint8_t msg_index, uint8_t start_therm_idx
 450:Core/Src/cell_temp_handler.c **** {
 195              		.loc 1 450 1 is_stmt 1 view -0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 8
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              		.loc 1 450 1 is_stmt 0 view .LVU40
 200 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 201              		.cfi_def_cfa_offset 20
 202              		.cfi_offset 4, -20
 203              		.cfi_offset 5, -16
 204              		.cfi_offset 6, -12
 205              		.cfi_offset 7, -8
 206              		.cfi_offset 14, -4
 207 0002 83B0     		sub	sp, sp, #12
 208              		.cfi_def_cfa_offset 32
 209 0004 0646     		mov	r6, r0
 210 0006 0D46     		mov	r5, r1
 451:Core/Src/cell_temp_handler.c ****     uint8_t TxData[8];
 211              		.loc 1 451 5 is_stmt 1 view .LVU41
 452:Core/Src/cell_temp_handler.c ****     
 453:Core/Src/cell_temp_handler.c ****     // Check if this message corresponds to a disabled ADC channel
 454:Core/Src/cell_temp_handler.c ****     // Each message covers 4 thermistors, determine which ADC channel(s) it uses
 455:Core/Src/cell_temp_handler.c ****     uint8_t first_adc = start_therm_idx / MUX_CHANNELS;
 212              		.loc 1 455 5 view .LVU42
 213              		.loc 1 455 13 is_stmt 0 view .LVU43
 214 0008 CC08     		lsrs	r4, r1, #3
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 13


 215              	.LVL13:
 456:Core/Src/cell_temp_handler.c ****     uint8_t last_adc = (start_therm_idx + 3) / MUX_CHANNELS;
 216              		.loc 1 456 5 is_stmt 1 view .LVU44
 217              		.loc 1 456 46 is_stmt 0 view .LVU45
 218 000a CF1C     		adds	r7, r1, #3
 219              		.loc 1 456 13 view .LVU46
 220 000c FF08     		lsrs	r7, r7, #3
 221              	.LVL14:
 457:Core/Src/cell_temp_handler.c ****     
 458:Core/Src/cell_temp_handler.c ****     // Skip message if all ADC channels for this message are disabled
 459:Core/Src/cell_temp_handler.c ****     uint8_t any_enabled = 0;
 222              		.loc 1 459 5 is_stmt 1 view .LVU47
 460:Core/Src/cell_temp_handler.c ****     for (uint8_t adc = first_adc; adc <= last_adc && adc < NUM_ADC_CHANNELS; adc++) {
 223              		.loc 1 460 5 view .LVU48
 224              	.LBB2:
 225              		.loc 1 460 10 view .LVU49
 226              		.loc 1 460 5 is_stmt 0 view .LVU50
 227 000e 01E0     		b	.L21
 228              	.LVL15:
 229              	.L38:
 230              		.loc 1 460 81 is_stmt 1 discriminator 2 view .LVU51
 231 0010 0134     		adds	r4, r4, #1
 232              	.LVL16:
 233              		.loc 1 460 81 is_stmt 0 discriminator 2 view .LVU52
 234 0012 E4B2     		uxtb	r4, r4
 235              	.LVL17:
 236              	.L21:
 237              		.loc 1 460 51 is_stmt 1 discriminator 1 view .LVU53
 238 0014 BC42     		cmp	r4, r7
 239 0016 0AD8     		bhi	.L30
 240              		.loc 1 460 51 is_stmt 0 discriminator 3 view .LVU54
 241 0018 062C     		cmp	r4, #6
 242 001a 06D8     		bhi	.L37
 461:Core/Src/cell_temp_handler.c ****         if (CellTemp_IsADCEnabled(adc)) {
 243              		.loc 1 461 9 is_stmt 1 view .LVU55
 244              		.loc 1 461 13 is_stmt 0 view .LVU56
 245 001c 2046     		mov	r0, r4
 246 001e FFF7FEFF 		bl	CellTemp_IsADCEnabled
 247              	.LVL18:
 248              		.loc 1 461 12 discriminator 1 view .LVU57
 249 0022 0028     		cmp	r0, #0
 250 0024 F4D0     		beq	.L38
 462:Core/Src/cell_temp_handler.c ****             any_enabled = 1;
 251              		.loc 1 462 25 view .LVU58
 252 0026 0120     		movs	r0, #1
 253 0028 02E0     		b	.L22
 254              	.L37:
 255              	.LBE2:
 459:Core/Src/cell_temp_handler.c ****     for (uint8_t adc = first_adc; adc <= last_adc && adc < NUM_ADC_CHANNELS; adc++) {
 256              		.loc 1 459 13 view .LVU59
 257 002a 0020     		movs	r0, #0
 258              	.LBB3:
 259 002c 00E0     		b	.L22
 260              	.L30:
 261              	.LBE3:
 262 002e 0020     		movs	r0, #0
 263              	.L22:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 14


 264              	.LVL19:
 463:Core/Src/cell_temp_handler.c ****             break;
 464:Core/Src/cell_temp_handler.c ****         }
 465:Core/Src/cell_temp_handler.c ****     }
 466:Core/Src/cell_temp_handler.c ****     
 467:Core/Src/cell_temp_handler.c ****     if (!any_enabled) {
 265              		.loc 1 467 5 is_stmt 1 view .LVU60
 266              		.loc 1 467 8 is_stmt 0 view .LVU61
 267 0030 0028     		cmp	r0, #0
 268 0032 3DD0     		beq	.L24
 269              	.LBB4:
 468:Core/Src/cell_temp_handler.c ****         return HAL_OK; // Skip sending this message
 469:Core/Src/cell_temp_handler.c ****     }
 470:Core/Src/cell_temp_handler.c ****     
 471:Core/Src/cell_temp_handler.c ****     // Prepare CAN message with 4 thermistor readings per message
 472:Core/Src/cell_temp_handler.c ****     // Temperature format: temp_celsius * 10 (0.1°C resolution), little endian
 473:Core/Src/cell_temp_handler.c ****     
 474:Core/Src/cell_temp_handler.c ****     for (uint8_t i = 0; i < 4; i++) {
 270              		.loc 1 474 18 view .LVU62
 271 0034 0024     		movs	r4, #0
 272              	.LVL20:
 273              		.loc 1 474 18 view .LVU63
 274 0036 0DE0     		b	.L25
 275              	.LVL21:
 276              	.L31:
 277              	.LBB5:
 475:Core/Src/cell_temp_handler.c ****         uint8_t therm_idx = start_therm_idx + i;
 476:Core/Src/cell_temp_handler.c ****         int16_t temp_data = 0x8000; // Default invalid temperature marker
 278              		.loc 1 476 17 view .LVU64
 279 0038 1E4B     		ldr	r3, .L40
 280              	.LVL22:
 281              	.L26:
 477:Core/Src/cell_temp_handler.c ****         
 478:Core/Src/cell_temp_handler.c ****         // Check if this thermistor's ADC is enabled
 479:Core/Src/cell_temp_handler.c ****         if (therm_idx < TOTAL_THERMISTORS) {
 480:Core/Src/cell_temp_handler.c ****             uint8_t therm_adc = therm_idx / MUX_CHANNELS;
 481:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(therm_adc) && 
 482:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature > -126.0f) {
 483:Core/Src/cell_temp_handler.c ****                 temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
 484:Core/Src/cell_temp_handler.c ****             }
 485:Core/Src/cell_temp_handler.c ****         }
 486:Core/Src/cell_temp_handler.c ****         
 487:Core/Src/cell_temp_handler.c ****         // Pack temperature data (little endian)
 488:Core/Src/cell_temp_handler.c ****         TxData[i * 2] = temp_data & 0xFF;         // LSB
 282              		.loc 1 488 9 is_stmt 1 view .LVU65
 283              		.loc 1 488 18 is_stmt 0 view .LVU66
 284 003a 6200     		lsls	r2, r4, #1
 285              		.loc 1 488 23 view .LVU67
 286 003c 02A9     		add	r1, sp, #8
 287 003e 01EB4401 		add	r1, r1, r4, lsl #1
 288 0042 01F8083C 		strb	r3, [r1, #-8]
 489:Core/Src/cell_temp_handler.c ****         TxData[i * 2 + 1] = (temp_data >> 8) & 0xFF; // MSB
 289              		.loc 1 489 9 is_stmt 1 view .LVU68
 290              		.loc 1 489 27 is_stmt 0 view .LVU69
 291 0046 0932     		adds	r2, r2, #9
 292 0048 6A44     		add	r2, sp, r2
 293 004a 1B12     		asrs	r3, r3, #8
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 15


 294              	.LVL23:
 295              		.loc 1 489 27 view .LVU70
 296 004c 02F8083C 		strb	r3, [r2, #-8]
 297              	.LBE5:
 474:Core/Src/cell_temp_handler.c ****         uint8_t therm_idx = start_therm_idx + i;
 298              		.loc 1 474 33 is_stmt 1 discriminator 2 view .LVU71
 299 0050 0134     		adds	r4, r4, #1
 300              	.LVL24:
 474:Core/Src/cell_temp_handler.c ****         uint8_t therm_idx = start_therm_idx + i;
 301              		.loc 1 474 33 is_stmt 0 discriminator 2 view .LVU72
 302 0052 E4B2     		uxtb	r4, r4
 303              	.LVL25:
 304              	.L25:
 474:Core/Src/cell_temp_handler.c ****         uint8_t therm_idx = start_therm_idx + i;
 305              		.loc 1 474 27 is_stmt 1 discriminator 1 view .LVU73
 306 0054 032C     		cmp	r4, #3
 307 0056 23D8     		bhi	.L39
 308              	.LBB7:
 475:Core/Src/cell_temp_handler.c ****         int16_t temp_data = 0x8000; // Default invalid temperature marker
 309              		.loc 1 475 9 view .LVU74
 475:Core/Src/cell_temp_handler.c ****         int16_t temp_data = 0x8000; // Default invalid temperature marker
 310              		.loc 1 475 17 is_stmt 0 view .LVU75
 311 0058 6719     		adds	r7, r4, r5
 312 005a FFB2     		uxtb	r7, r7
 313              	.LVL26:
 476:Core/Src/cell_temp_handler.c ****         
 314              		.loc 1 476 9 is_stmt 1 view .LVU76
 479:Core/Src/cell_temp_handler.c ****             uint8_t therm_adc = therm_idx / MUX_CHANNELS;
 315              		.loc 1 479 9 view .LVU77
 479:Core/Src/cell_temp_handler.c ****             uint8_t therm_adc = therm_idx / MUX_CHANNELS;
 316              		.loc 1 479 12 is_stmt 0 view .LVU78
 317 005c 372F     		cmp	r7, #55
 318 005e EBD8     		bhi	.L31
 319              	.LBB6:
 480:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(therm_adc) && 
 320              		.loc 1 480 13 is_stmt 1 view .LVU79
 321              	.LVL27:
 481:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature > -126.0f) {
 322              		.loc 1 481 13 view .LVU80
 481:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature > -126.0f) {
 323              		.loc 1 481 17 is_stmt 0 view .LVU81
 324 0060 F808     		lsrs	r0, r7, #3
 325 0062 FFF7FEFF 		bl	CellTemp_IsADCEnabled
 326              	.LVL28:
 481:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature > -126.0f) {
 327              		.loc 1 481 16 discriminator 1 view .LVU82
 328 0066 B8B1     		cbz	r0, .L32
 482:Core/Src/cell_temp_handler.c ****                 temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
 329              		.loc 1 482 50 view .LVU83
 330 0068 07EB4707 		add	r7, r7, r7, lsl #1
 331              	.LVL29:
 482:Core/Src/cell_temp_handler.c ****                 temp_data = (int16_t)(temp_state.thermistors[therm_idx].temperature * 10.0f);
 332              		.loc 1 482 50 view .LVU84
 333 006c 124B     		ldr	r3, .L40+4
 334 006e 03EBC703 		add	r3, r3, r7, lsl #3
 335 0072 D3ED017A 		vldr.32	s15, [r3, #4]
 481:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature > -126.0f) {
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 16


 336              		.loc 1 481 50 discriminator 1 view .LVU85
 337 0076 9FED117A 		vldr.32	s14, .L40+8
 338 007a F4EEC77A 		vcmpe.f32	s15, s14
 339 007e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 340 0082 0BDD     		ble	.L35
 483:Core/Src/cell_temp_handler.c ****             }
 341              		.loc 1 483 17 is_stmt 1 view .LVU86
 483:Core/Src/cell_temp_handler.c ****             }
 342              		.loc 1 483 85 is_stmt 0 view .LVU87
 343 0084 B2EE047A 		vmov.f32	s14, #1.0e+1
 344 0088 67EE877A 		vmul.f32	s15, s15, s14
 483:Core/Src/cell_temp_handler.c ****             }
 345              		.loc 1 483 27 view .LVU88
 346 008c FDEEE77A 		vcvt.s32.f32	s15, s15
 347 0090 17EE903A 		vmov	r3, s15	@ int
 348 0094 1BB2     		sxth	r3, r3
 349              	.LVL30:
 483:Core/Src/cell_temp_handler.c ****             }
 350              		.loc 1 483 27 view .LVU89
 351 0096 D0E7     		b	.L26
 352              	.LVL31:
 353              	.L32:
 483:Core/Src/cell_temp_handler.c ****             }
 354              		.loc 1 483 27 view .LVU90
 355              	.LBE6:
 476:Core/Src/cell_temp_handler.c ****         
 356              		.loc 1 476 17 view .LVU91
 357 0098 064B     		ldr	r3, .L40
 358 009a CEE7     		b	.L26
 359              	.LVL32:
 360              	.L35:
 476:Core/Src/cell_temp_handler.c ****         
 361              		.loc 1 476 17 view .LVU92
 362 009c 054B     		ldr	r3, .L40
 363 009e CCE7     		b	.L26
 364              	.LVL33:
 365              	.L39:
 476:Core/Src/cell_temp_handler.c ****         
 366              		.loc 1 476 17 view .LVU93
 367              	.LBE7:
 368              	.LBE4:
 490:Core/Src/cell_temp_handler.c ****     }
 491:Core/Src/cell_temp_handler.c ****     
 492:Core/Src/cell_temp_handler.c ****     // Send via CAN Manager (non-blocking, queued)
 493:Core/Src/cell_temp_handler.c ****     // CAN_TEMP_ID already has module offset applied from Config_Init()
 494:Core/Src/cell_temp_handler.c ****     uint32_t can_id = CAN_TEMP_ID + msg_index;
 369              		.loc 1 494 5 is_stmt 1 view .LVU94
 370              		.loc 1 494 35 is_stmt 0 view .LVU95
 371 00a0 074B     		ldr	r3, .L40+12
 372 00a2 1868     		ldr	r0, [r3]
 373              	.LVL34:
 495:Core/Src/cell_temp_handler.c ****     return CAN_SendMessage(can_id, TxData, 8, CAN_PRIORITY_NORMAL);
 374              		.loc 1 495 5 is_stmt 1 view .LVU96
 375              		.loc 1 495 12 is_stmt 0 view .LVU97
 376 00a4 0223     		movs	r3, #2
 377 00a6 0822     		movs	r2, #8
 378 00a8 6946     		mov	r1, sp
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 17


 379 00aa 3044     		add	r0, r0, r6
 380              	.LVL35:
 381              		.loc 1 495 12 view .LVU98
 382 00ac FFF7FEFF 		bl	CAN_SendMessage
 383              	.LVL36:
 384              	.L24:
 496:Core/Src/cell_temp_handler.c **** }
 385              		.loc 1 496 1 view .LVU99
 386 00b0 03B0     		add	sp, sp, #12
 387              		.cfi_def_cfa_offset 20
 388              		@ sp needed
 389 00b2 F0BD     		pop	{r4, r5, r6, r7, pc}
 390              	.LVL37:
 391              	.L41:
 392              		.loc 1 496 1 view .LVU100
 393              		.align	2
 394              	.L40:
 395 00b4 0080FFFF 		.word	-32768
 396 00b8 00000000 		.word	temp_state
 397 00bc 0000FCC2 		.word	-1023672320
 398 00c0 00000000 		.word	CAN_TEMP_ID
 399              		.cfi_endproc
 400              	.LFE301:
 402              		.section	.text.CellTemp_Init,"ax",%progbits
 403              		.align	1
 404              		.global	CellTemp_Init
 405              		.syntax unified
 406              		.thumb
 407              		.thumb_func
 409              	CellTemp_Init:
 410              	.LFB292:
  52:Core/Src/cell_temp_handler.c ****     // Initialize state structure
 411              		.loc 1 52 1 is_stmt 1 view -0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415 0000 10B5     		push	{r4, lr}
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 4, -8
 418              		.cfi_offset 14, -4
  54:Core/Src/cell_temp_handler.c **** 
 419              		.loc 1 54 5 view .LVU102
 420 0002 40F24C52 		movw	r2, #1356
 421 0006 0021     		movs	r1, #0
 422 0008 1A48     		ldr	r0, .L46
 423 000a FFF7FEFF 		bl	memset
 424              	.LVL38:
  57:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 425              		.loc 1 57 5 view .LVU103
 426              	.LBB8:
  57:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 427              		.loc 1 57 10 view .LVU104
  57:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 428              		.loc 1 57 18 is_stmt 0 view .LVU105
 429 000e 0023     		movs	r3, #0
  57:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 430              		.loc 1 57 5 view .LVU106
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 18


 431 0010 19E0     		b	.L43
 432              	.LVL39:
 433              	.L44:
  58:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].mux_channel = i % MUX_CHANNELS;
 434              		.loc 1 58 9 is_stmt 1 view .LVU107
  58:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].mux_channel = i % MUX_CHANNELS;
 435              		.loc 1 58 45 is_stmt 0 view .LVU108
 436 0012 184A     		ldr	r2, .L46
 437 0014 03EB4301 		add	r1, r3, r3, lsl #1
 438 0018 C800     		lsls	r0, r1, #3
 439 001a 1118     		adds	r1, r2, r0
 440 001c 4FEAD30C 		lsr	ip, r3, #3
 441 0020 02F800C0 		strb	ip, [r2, r0]
  59:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].temperature = -127.0f; // Invalid temperature marker
 442              		.loc 1 59 9 is_stmt 1 view .LVU109
  59:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].temperature = -127.0f; // Invalid temperature marker
 443              		.loc 1 59 51 is_stmt 0 view .LVU110
 444 0024 03F00700 		and	r0, r3, #7
  59:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].temperature = -127.0f; // Invalid temperature marker
 445              		.loc 1 59 47 view .LVU111
 446 0028 4870     		strb	r0, [r1, #1]
  60:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].raw_adc = 0;
 447              		.loc 1 60 9 is_stmt 1 view .LVU112
  60:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].raw_adc = 0;
 448              		.loc 1 60 47 is_stmt 0 view .LVU113
 449 002a 1348     		ldr	r0, .L46+4
 450 002c 4860     		str	r0, [r1, #4]	@ float
  61:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].last_read_time = 0;
 451              		.loc 1 61 9 is_stmt 1 view .LVU114
  61:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].last_read_time = 0;
 452              		.loc 1 61 43 is_stmt 0 view .LVU115
 453 002e 0020     		movs	r0, #0
 454 0030 0881     		strh	r0, [r1, #8]	@ movhi
  62:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_accumulator = 0;
 455              		.loc 1 62 9 is_stmt 1 view .LVU116
  62:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_accumulator = 0;
 456              		.loc 1 62 50 is_stmt 0 view .LVU117
 457 0032 C860     		str	r0, [r1, #12]
  63:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].sample_count = 0;
 458              		.loc 1 63 9 is_stmt 1 view .LVU118
  63:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].sample_count = 0;
 459              		.loc 1 63 51 is_stmt 0 view .LVU119
 460 0034 0861     		str	r0, [r1, #16]
  64:Core/Src/cell_temp_handler.c ****     }
 461              		.loc 1 64 9 is_stmt 1 view .LVU120
  64:Core/Src/cell_temp_handler.c ****     }
 462              		.loc 1 64 48 is_stmt 0 view .LVU121
 463 0036 03EB430C 		add	ip, r3, r3, lsl #1
 464 003a 4FEACC01 		lsl	r1, ip, #3
 465 003e 0A44     		add	r2, r2, r1
 466 0040 9082     		strh	r0, [r2, #20]	@ movhi
  57:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 467              		.loc 1 57 49 is_stmt 1 discriminator 3 view .LVU122
 468 0042 0133     		adds	r3, r3, #1
 469              	.LVL40:
  57:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 470              		.loc 1 57 49 is_stmt 0 discriminator 3 view .LVU123
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 19


 471 0044 DBB2     		uxtb	r3, r3
 472              	.LVL41:
 473              	.L43:
  57:Core/Src/cell_temp_handler.c ****         temp_state.thermistors[i].adc_index = i / MUX_CHANNELS;
 474              		.loc 1 57 27 is_stmt 1 discriminator 1 view .LVU124
 475 0046 372B     		cmp	r3, #55
 476 0048 E3D9     		bls	.L44
 477              	.LBE8:
  70:Core/Src/cell_temp_handler.c ****     HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_RESET);
 478              		.loc 1 70 5 view .LVU125
 479 004a 0C4C     		ldr	r4, .L46+8
 480 004c 0022     		movs	r2, #0
 481 004e 0221     		movs	r1, #2
 482 0050 2046     		mov	r0, r4
 483 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 484              	.LVL42:
  71:Core/Src/cell_temp_handler.c ****     HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_RESET);
 485              		.loc 1 71 5 view .LVU126
 486 0056 0022     		movs	r2, #0
 487 0058 4FF48071 		mov	r1, #256
 488 005c 4FF09040 		mov	r0, #1207959552
 489 0060 FFF7FEFF 		bl	HAL_GPIO_WritePin
 490              	.LVL43:
  72:Core/Src/cell_temp_handler.c **** 
 491              		.loc 1 72 5 view .LVU127
 492 0064 0022     		movs	r2, #0
 493 0066 2021     		movs	r1, #32
 494 0068 2046     		mov	r0, r4
 495 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 496              	.LVL44:
  74:Core/Src/cell_temp_handler.c **** }
 497              		.loc 1 74 5 view .LVU128
  75:Core/Src/cell_temp_handler.c **** 
 498              		.loc 1 75 1 is_stmt 0 view .LVU129
 499 006e 0020     		movs	r0, #0
 500 0070 10BD     		pop	{r4, pc}
 501              	.L47:
 502 0072 00BF     		.align	2
 503              	.L46:
 504 0074 00000000 		.word	temp_state
 505 0078 0000FEC2 		.word	-1023541248
 506 007c 00040048 		.word	1207960576
 507              		.cfi_endproc
 508              	.LFE292:
 510              		.section	.text.CellTemp_ReadADC,"ax",%progbits
 511              		.align	1
 512              		.global	CellTemp_ReadADC
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 517              	CellTemp_ReadADC:
 518              	.LVL45:
 519              	.LFB294:
 102:Core/Src/cell_temp_handler.c ****     uint16_t adc_value = 0;
 520              		.loc 1 102 1 is_stmt 1 view -0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 20


 523              		@ frame_needed = 0, uses_anonymous_args = 0
 102:Core/Src/cell_temp_handler.c ****     uint16_t adc_value = 0;
 524              		.loc 1 102 1 is_stmt 0 view .LVU131
 525 0000 10B5     		push	{r4, lr}
 526              		.cfi_def_cfa_offset 8
 527              		.cfi_offset 4, -8
 528              		.cfi_offset 14, -4
 103:Core/Src/cell_temp_handler.c ****     
 529              		.loc 1 103 5 is_stmt 1 view .LVU132
 530              	.LVL46:
 106:Core/Src/cell_temp_handler.c ****         return 0;
 531              		.loc 1 106 5 view .LVU133
 106:Core/Src/cell_temp_handler.c ****         return 0;
 532              		.loc 1 106 9 is_stmt 0 view .LVU134
 533 0002 FFF7FEFF 		bl	CellTemp_ConfigureADCChannel
 534              	.LVL47:
 106:Core/Src/cell_temp_handler.c ****         return 0;
 535              		.loc 1 106 8 discriminator 1 view .LVU135
 536 0006 10B1     		cbz	r0, .L55
 107:Core/Src/cell_temp_handler.c ****     }
 537              		.loc 1 107 16 view .LVU136
 538 0008 0024     		movs	r4, #0
 539              	.LVL48:
 540              	.L49:
 122:Core/Src/cell_temp_handler.c **** 
 541              		.loc 1 122 1 view .LVU137
 542 000a 2046     		mov	r0, r4
 543 000c 10BD     		pop	{r4, pc}
 544              	.LVL49:
 545              	.L55:
 111:Core/Src/cell_temp_handler.c ****         // Wait for conversion to complete
 546              		.loc 1 111 5 is_stmt 1 view .LVU138
 111:Core/Src/cell_temp_handler.c ****         // Wait for conversion to complete
 547              		.loc 1 111 9 is_stmt 0 view .LVU139
 548 000e 0B48     		ldr	r0, .L58
 549 0010 FFF7FEFF 		bl	HAL_ADC_Start
 550              	.LVL50:
 111:Core/Src/cell_temp_handler.c ****         // Wait for conversion to complete
 551              		.loc 1 111 8 discriminator 1 view .LVU140
 552 0014 08B1     		cbz	r0, .L56
 103:Core/Src/cell_temp_handler.c ****     
 553              		.loc 1 103 14 view .LVU141
 554 0016 0024     		movs	r4, #0
 555 0018 F7E7     		b	.L49
 556              	.L56:
 113:Core/Src/cell_temp_handler.c ****             // Get ADC value
 557              		.loc 1 113 9 is_stmt 1 view .LVU142
 113:Core/Src/cell_temp_handler.c ****             // Get ADC value
 558              		.loc 1 113 13 is_stmt 0 view .LVU143
 559 001a 4FF0FF31 		mov	r1, #-1
 560 001e 0748     		ldr	r0, .L58
 561 0020 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 562              	.LVL51:
 113:Core/Src/cell_temp_handler.c ****             // Get ADC value
 563              		.loc 1 113 12 discriminator 1 view .LVU144
 564 0024 20B1     		cbz	r0, .L57
 103:Core/Src/cell_temp_handler.c ****     
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 21


 565              		.loc 1 103 14 view .LVU145
 566 0026 0024     		movs	r4, #0
 567              	.LVL52:
 568              	.L50:
 118:Core/Src/cell_temp_handler.c ****     }
 569              		.loc 1 118 9 is_stmt 1 view .LVU146
 570 0028 0448     		ldr	r0, .L58
 571 002a FFF7FEFF 		bl	HAL_ADC_Stop
 572              	.LVL53:
 573 002e ECE7     		b	.L49
 574              	.LVL54:
 575              	.L57:
 115:Core/Src/cell_temp_handler.c ****         }
 576              		.loc 1 115 13 view .LVU147
 115:Core/Src/cell_temp_handler.c ****         }
 577              		.loc 1 115 25 is_stmt 0 view .LVU148
 578 0030 0248     		ldr	r0, .L58
 579 0032 FFF7FEFF 		bl	HAL_ADC_GetValue
 580              	.LVL55:
 115:Core/Src/cell_temp_handler.c ****         }
 581              		.loc 1 115 23 discriminator 1 view .LVU149
 582 0036 84B2     		uxth	r4, r0
 583              	.LVL56:
 115:Core/Src/cell_temp_handler.c ****         }
 584              		.loc 1 115 23 discriminator 1 view .LVU150
 585 0038 F6E7     		b	.L50
 586              	.L59:
 587 003a 00BF     		.align	2
 588              	.L58:
 589 003c 00000000 		.word	hadc1
 590              		.cfi_endproc
 591              	.LFE294:
 593              		.section	.text.CellTemp_SetMuxChannel,"ax",%progbits
 594              		.align	1
 595              		.global	CellTemp_SetMuxChannel
 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 600              	CellTemp_SetMuxChannel:
 601              	.LVL57:
 602              	.LFB295:
 130:Core/Src/cell_temp_handler.c ****     // Validate channel range
 603              		.loc 1 130 1 is_stmt 1 view -0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 132:Core/Src/cell_temp_handler.c ****         return;
 607              		.loc 1 132 5 view .LVU152
 132:Core/Src/cell_temp_handler.c ****         return;
 608              		.loc 1 132 8 is_stmt 0 view .LVU153
 609 0000 0728     		cmp	r0, #7
 610 0002 33D8     		bhi	.L69
 130:Core/Src/cell_temp_handler.c ****     // Validate channel range
 611              		.loc 1 130 1 view .LVU154
 612 0004 10B5     		push	{r4, lr}
 613              		.cfi_def_cfa_offset 8
 614              		.cfi_offset 4, -8
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 22


 615              		.cfi_offset 14, -4
 616 0006 0446     		mov	r4, r0
 141:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_SET);
 617              		.loc 1 141 5 is_stmt 1 view .LVU155
 141:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG1_PORT, MUX_SIG1_PIN, GPIO_PIN_SET);
 618              		.loc 1 141 8 is_stmt 0 view .LVU156
 619 0008 10F0010F 		tst	r0, #1
 620 000c 1AD0     		beq	.L62
 142:Core/Src/cell_temp_handler.c ****     } else {
 621              		.loc 1 142 9 is_stmt 1 view .LVU157
 622 000e 0122     		movs	r2, #1
 623 0010 0221     		movs	r1, #2
 624 0012 1748     		ldr	r0, .L72
 625              	.LVL58:
 142:Core/Src/cell_temp_handler.c ****     } else {
 626              		.loc 1 142 9 is_stmt 0 view .LVU158
 627 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 628              	.LVL59:
 629              	.L63:
 147:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_SET);
 630              		.loc 1 147 5 is_stmt 1 view .LVU159
 147:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG2_PORT, MUX_SIG2_PIN, GPIO_PIN_SET);
 631              		.loc 1 147 8 is_stmt 0 view .LVU160
 632 0018 14F0020F 		tst	r4, #2
 633 001c 18D0     		beq	.L64
 148:Core/Src/cell_temp_handler.c ****     } else {
 634              		.loc 1 148 9 is_stmt 1 view .LVU161
 635 001e 0122     		movs	r2, #1
 636 0020 4FF48071 		mov	r1, #256
 637 0024 4FF09040 		mov	r0, #1207959552
 638 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 639              	.LVL60:
 640              	.L65:
 153:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_SET);
 641              		.loc 1 153 5 view .LVU162
 153:Core/Src/cell_temp_handler.c ****         HAL_GPIO_WritePin(MUX_SIG3_PORT, MUX_SIG3_PIN, GPIO_PIN_SET);
 642              		.loc 1 153 8 is_stmt 0 view .LVU163
 643 002c 14F0040F 		tst	r4, #4
 644 0030 16D0     		beq	.L66
 154:Core/Src/cell_temp_handler.c ****     } else {
 645              		.loc 1 154 9 is_stmt 1 view .LVU164
 646 0032 0122     		movs	r2, #1
 647 0034 2021     		movs	r1, #32
 648 0036 0E48     		ldr	r0, .L72
 649 0038 FFF7FEFF 		bl	HAL_GPIO_WritePin
 650              	.LVL61:
 651              	.L67:
 160:Core/Src/cell_temp_handler.c **** }
 652              		.loc 1 160 5 view .LVU165
 653 003c 0220     		movs	r0, #2
 654 003e FFF7FEFF 		bl	osDelay
 655              	.LVL62:
 161:Core/Src/cell_temp_handler.c **** 
 656              		.loc 1 161 1 is_stmt 0 view .LVU166
 657 0042 10BD     		pop	{r4, pc}
 658              	.LVL63:
 659              	.L62:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 23


 144:Core/Src/cell_temp_handler.c ****     }
 660              		.loc 1 144 9 is_stmt 1 view .LVU167
 661 0044 0022     		movs	r2, #0
 662 0046 0221     		movs	r1, #2
 663 0048 0948     		ldr	r0, .L72
 664              	.LVL64:
 144:Core/Src/cell_temp_handler.c ****     }
 665              		.loc 1 144 9 is_stmt 0 view .LVU168
 666 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 667              	.LVL65:
 668 004e E3E7     		b	.L63
 669              	.L64:
 150:Core/Src/cell_temp_handler.c ****     }
 670              		.loc 1 150 9 is_stmt 1 view .LVU169
 671 0050 0022     		movs	r2, #0
 672 0052 4FF48071 		mov	r1, #256
 673 0056 4FF09040 		mov	r0, #1207959552
 674 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 675              	.LVL66:
 676 005e E5E7     		b	.L65
 677              	.L66:
 156:Core/Src/cell_temp_handler.c ****     }
 678              		.loc 1 156 9 view .LVU170
 679 0060 0022     		movs	r2, #0
 680 0062 2021     		movs	r1, #32
 681 0064 0248     		ldr	r0, .L72
 682 0066 FFF7FEFF 		bl	HAL_GPIO_WritePin
 683              	.LVL67:
 684 006a E7E7     		b	.L67
 685              	.LVL68:
 686              	.L69:
 687              		.cfi_def_cfa_offset 0
 688              		.cfi_restore 4
 689              		.cfi_restore 14
 156:Core/Src/cell_temp_handler.c ****     }
 690              		.loc 1 156 9 is_stmt 0 view .LVU171
 691 006c 7047     		bx	lr
 692              	.L73:
 693 006e 00BF     		.align	2
 694              	.L72:
 695 0070 00040048 		.word	1207960576
 696              		.cfi_endproc
 697              	.LFE295:
 699              		.section	.text.CellTemp_CalculateTemperature,"ax",%progbits
 700              		.align	1
 701              		.global	CellTemp_CalculateTemperature
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 706              	CellTemp_CalculateTemperature:
 707              	.LVL69:
 708              	.LFB296:
 169:Core/Src/cell_temp_handler.c ****     // Convert ADC value to voltage
 709              		.loc 1 169 1 is_stmt 1 view -0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
 712              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 24


 171:Core/Src/cell_temp_handler.c ****     
 713              		.loc 1 171 5 view .LVU173
 171:Core/Src/cell_temp_handler.c ****     
 714              		.loc 1 171 22 is_stmt 0 view .LVU174
 715 0000 07EE900A 		vmov	s15, r0	@ int
 716 0004 F8EE676A 		vcvt.f32.u32	s13, s15
 171:Core/Src/cell_temp_handler.c ****     
 717              		.loc 1 171 39 view .LVU175
 718 0008 9FED297A 		vldr.32	s14, .L86
 719 000c C6EE877A 		vdiv.f32	s15, s13, s14
 171:Core/Src/cell_temp_handler.c ****     
 720              		.loc 1 171 11 view .LVU176
 721 0010 9FED287A 		vldr.32	s14, .L86+4
 722 0014 67EE877A 		vmul.f32	s15, s15, s14
 723              	.LVL70:
 174:Core/Src/cell_temp_handler.c ****         return -127.0f;  // Return obvious error value
 724              		.loc 1 174 5 is_stmt 1 view .LVU177
 174:Core/Src/cell_temp_handler.c ****         return -127.0f;  // Return obvious error value
 725              		.loc 1 174 8 is_stmt 0 view .LVU178
 726 0018 0928     		cmp	r0, #9
 727 001a 40D9     		bls	.L77
 183:Core/Src/cell_temp_handler.c ****     
 728              		.loc 1 183 5 is_stmt 1 view .LVU179
 185:Core/Src/cell_temp_handler.c ****         r_thermistor = PULLUP_RESISTOR * 100.0f;  // Assume very high resistance
 729              		.loc 1 185 5 view .LVU180
 185:Core/Src/cell_temp_handler.c ****         r_thermistor = PULLUP_RESISTOR * 100.0f;  // Assume very high resistance
 730              		.loc 1 185 8 is_stmt 0 view .LVU181
 731 001c 9FED267A 		vldr.32	s14, .L86+8
 732 0020 F4EEC77A 		vcmpe.f32	s15, s14
 733 0024 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 734 0028 36DA     		bge	.L78
 189:Core/Src/cell_temp_handler.c ****     }
 735              		.loc 1 189 9 is_stmt 1 view .LVU182
 189:Core/Src/cell_temp_handler.c ****     }
 736              		.loc 1 189 33 is_stmt 0 view .LVU183
 737 002a DFED246A 		vldr.32	s13, .L86+12
 738 002e 67EEA66A 		vmul.f32	s13, s15, s13
 189:Core/Src/cell_temp_handler.c ****     }
 739              		.loc 1 189 64 view .LVU184
 740 0032 9FED207A 		vldr.32	s14, .L86+4
 741 0036 77EE677A 		vsub.f32	s15, s14, s15
 742              	.LVL71:
 189:Core/Src/cell_temp_handler.c ****     }
 743              		.loc 1 189 22 view .LVU185
 744 003a 86EEA77A 		vdiv.f32	s14, s13, s15
 745              	.LVL72:
 193:Core/Src/cell_temp_handler.c ****         return 125.0f; // Return maximum temperature for very low resistance
 746              		.loc 1 193 5 is_stmt 1 view .LVU186
 193:Core/Src/cell_temp_handler.c ****         return 125.0f; // Return maximum temperature for very low resistance
 747              		.loc 1 193 8 is_stmt 0 view .LVU187
 748 003e B5EEC07A 		vcmpe.f32	s14, #0
 749 0042 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 750 0046 2DD9     		bls	.L85
 751              	.LVL73:
 752              	.L76:
 169:Core/Src/cell_temp_handler.c ****     // Convert ADC value to voltage
 753              		.loc 1 169 1 view .LVU188
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 25


 754 0048 08B5     		push	{r3, lr}
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 3, -8
 757              		.cfi_offset 14, -4
 200:Core/Src/cell_temp_handler.c ****     float temp_kelvin = 1.0f / ((1.0f / REFERENCE_TEMP_K) + (ln_ratio / THERMISTOR_B_VALUE));
 758              		.loc 1 200 5 is_stmt 1 view .LVU189
 200:Core/Src/cell_temp_handler.c ****     float temp_kelvin = 1.0f / ((1.0f / REFERENCE_TEMP_K) + (ln_ratio / THERMISTOR_B_VALUE));
 759              		.loc 1 200 22 is_stmt 0 view .LVU190
 760 004a 9FED1C0A 		vldr.32	s0, .L86+12
 761 004e 87EE000A 		vdiv.f32	s0, s14, s0
 762 0052 FFF7FEFF 		bl	logf
 763              	.LVL74:
 201:Core/Src/cell_temp_handler.c ****     
 764              		.loc 1 201 5 is_stmt 1 view .LVU191
 201:Core/Src/cell_temp_handler.c ****     
 765              		.loc 1 201 71 is_stmt 0 view .LVU192
 766 0056 9FED1A7A 		vldr.32	s14, .L86+16
 767 005a C0EE077A 		vdiv.f32	s15, s0, s14
 201:Core/Src/cell_temp_handler.c ****     
 768              		.loc 1 201 59 view .LVU193
 769 005e 9FED197A 		vldr.32	s14, .L86+20
 770 0062 77EE877A 		vadd.f32	s15, s15, s14
 201:Core/Src/cell_temp_handler.c ****     
 771              		.loc 1 201 11 view .LVU194
 772 0066 B7EE007A 		vmov.f32	s14, #1.0e+0
 773 006a 87EE270A 		vdiv.f32	s0, s14, s15
 774              	.LVL75:
 204:Core/Src/cell_temp_handler.c ****     
 775              		.loc 1 204 5 is_stmt 1 view .LVU195
 204:Core/Src/cell_temp_handler.c ****     
 776              		.loc 1 204 11 is_stmt 0 view .LVU196
 777 006e DFED167A 		vldr.32	s15, .L86+24
 778 0072 30EE670A 		vsub.f32	s0, s0, s15
 779              	.LVL76:
 207:Core/Src/cell_temp_handler.c ****         temp_celsius = -40.0f;
 780              		.loc 1 207 5 is_stmt 1 view .LVU197
 207:Core/Src/cell_temp_handler.c ****         temp_celsius = -40.0f;
 781              		.loc 1 207 8 is_stmt 0 view .LVU198
 782 0076 DFED157A 		vldr.32	s15, .L86+28
 783 007a B4EEE70A 		vcmpe.f32	s0, s15
 784 007e F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 785 0082 12D4     		bmi	.L80
 209:Core/Src/cell_temp_handler.c ****         temp_celsius = 125.0f;
 786              		.loc 1 209 12 is_stmt 1 view .LVU199
 209:Core/Src/cell_temp_handler.c ****         temp_celsius = 125.0f;
 787              		.loc 1 209 15 is_stmt 0 view .LVU200
 788 0084 DFED127A 		vldr.32	s15, .L86+32
 789 0088 B4EEE70A 		vcmpe.f32	s0, s15
 790 008c F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 791 0090 0DDD     		ble	.L74
 210:Core/Src/cell_temp_handler.c ****     }
 792              		.loc 1 210 22 view .LVU201
 793 0092 9FED0F0A 		vldr.32	s0, .L86+32
 794              	.LVL77:
 210:Core/Src/cell_temp_handler.c ****     }
 795              		.loc 1 210 22 view .LVU202
 796 0096 0AE0     		b	.L74
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 26


 797              	.LVL78:
 798              	.L78:
 799              		.cfi_def_cfa_offset 0
 800              		.cfi_restore 3
 801              		.cfi_restore 14
 186:Core/Src/cell_temp_handler.c ****     } else {
 802              		.loc 1 186 22 view .LVU203
 803 0098 9FED0E7A 		vldr.32	s14, .L86+36
 804 009c D4E7     		b	.L76
 805              	.L77:
 175:Core/Src/cell_temp_handler.c ****     }
 806              		.loc 1 175 16 view .LVU204
 807 009e 9FED0E0A 		vldr.32	s0, .L86+40
 808 00a2 7047     		bx	lr
 809              	.LVL79:
 810              	.L85:
 194:Core/Src/cell_temp_handler.c ****     }
 811              		.loc 1 194 16 view .LVU205
 812 00a4 9FED0A0A 		vldr.32	s0, .L86+32
 214:Core/Src/cell_temp_handler.c **** 
 813              		.loc 1 214 1 view .LVU206
 814 00a8 7047     		bx	lr
 815              	.LVL80:
 816              	.L80:
 817              		.cfi_def_cfa_offset 8
 818              		.cfi_offset 3, -8
 819              		.cfi_offset 14, -4
 208:Core/Src/cell_temp_handler.c ****     } else if (temp_celsius > 125.0f) {
 820              		.loc 1 208 22 view .LVU207
 821 00aa 9FED080A 		vldr.32	s0, .L86+28
 822              	.LVL81:
 823              	.L74:
 214:Core/Src/cell_temp_handler.c **** 
 824              		.loc 1 214 1 view .LVU208
 825 00ae 08BD     		pop	{r3, pc}
 826              	.L87:
 827              		.align	2
 828              	.L86:
 829 00b0 00F07F45 		.word	1166012416
 830 00b4 33335340 		.word	1079194419
 831 00b8 5C8F5240 		.word	1079152476
 832 00bc 00401C46 		.word	1176256512
 833 00c0 00B05645 		.word	1163309056
 834 00c4 0FCF5B3B 		.word	995872527
 835 00c8 33938843 		.word	1133024051
 836 00cc 000020C2 		.word	-1038090240
 837 00d0 0000FA42 		.word	1123680256
 838 00d4 00247449 		.word	1232348160
 839 00d8 0000FEC2 		.word	-1023541248
 840              		.cfi_endproc
 841              	.LFE296:
 843              		.section	.text.CellTemp_ReadThermistor,"ax",%progbits
 844              		.align	1
 845              		.global	CellTemp_ReadThermistor
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 27


 850              	CellTemp_ReadThermistor:
 851              	.LVL82:
 852              	.LFB297:
 223:Core/Src/cell_temp_handler.c ****     // Validate inputs
 853              		.loc 1 223 1 is_stmt 1 view -0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 0
 856              		@ frame_needed = 0, uses_anonymous_args = 0
 225:Core/Src/cell_temp_handler.c ****         return -127.0f;
 857              		.loc 1 225 5 view .LVU210
 225:Core/Src/cell_temp_handler.c ****         return -127.0f;
 858              		.loc 1 225 8 is_stmt 0 view .LVU211
 859 0000 0628     		cmp	r0, #6
 860 0002 11D8     		bhi	.L90
 223:Core/Src/cell_temp_handler.c ****     // Validate inputs
 861              		.loc 1 223 1 view .LVU212
 862 0004 10B5     		push	{r4, lr}
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 4, -8
 865              		.cfi_offset 14, -4
 866 0006 0446     		mov	r4, r0
 225:Core/Src/cell_temp_handler.c ****         return -127.0f;
 867              		.loc 1 225 39 discriminator 1 view .LVU213
 868 0008 0729     		cmp	r1, #7
 869 000a 02D9     		bls	.L96
 226:Core/Src/cell_temp_handler.c ****     }
 870              		.loc 1 226 16 view .LVU214
 871 000c 9FED080A 		vldr.32	s0, .L97
 872              	.LVL83:
 873              	.L88:
 237:Core/Src/cell_temp_handler.c **** 
 874              		.loc 1 237 1 view .LVU215
 875 0010 10BD     		pop	{r4, pc}
 876              	.LVL84:
 877              	.L96:
 230:Core/Src/cell_temp_handler.c ****     
 878              		.loc 1 230 5 is_stmt 1 view .LVU216
 879 0012 0846     		mov	r0, r1
 880              	.LVL85:
 230:Core/Src/cell_temp_handler.c ****     
 881              		.loc 1 230 5 is_stmt 0 view .LVU217
 882 0014 FFF7FEFF 		bl	CellTemp_SetMuxChannel
 883              	.LVL86:
 233:Core/Src/cell_temp_handler.c ****     
 884              		.loc 1 233 5 is_stmt 1 view .LVU218
 233:Core/Src/cell_temp_handler.c ****     
 885              		.loc 1 233 26 is_stmt 0 view .LVU219
 886 0018 064B     		ldr	r3, .L97+4
 887 001a 53F82400 		ldr	r0, [r3, r4, lsl #2]
 888 001e FFF7FEFF 		bl	CellTemp_ReadADC
 889              	.LVL87:
 236:Core/Src/cell_temp_handler.c **** }
 890              		.loc 1 236 5 is_stmt 1 view .LVU220
 236:Core/Src/cell_temp_handler.c **** }
 891              		.loc 1 236 12 is_stmt 0 view .LVU221
 892 0022 FFF7FEFF 		bl	CellTemp_CalculateTemperature
 893              	.LVL88:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 28


 236:Core/Src/cell_temp_handler.c **** }
 894              		.loc 1 236 12 view .LVU222
 895 0026 F3E7     		b	.L88
 896              	.LVL89:
 897              	.L90:
 898              		.cfi_def_cfa_offset 0
 899              		.cfi_restore 4
 900              		.cfi_restore 14
 226:Core/Src/cell_temp_handler.c ****     }
 901              		.loc 1 226 16 view .LVU223
 902 0028 9FED010A 		vldr.32	s0, .L97
 237:Core/Src/cell_temp_handler.c **** 
 903              		.loc 1 237 1 view .LVU224
 904 002c 7047     		bx	lr
 905              	.L98:
 906 002e 00BF     		.align	2
 907              	.L97:
 908 0030 0000FEC2 		.word	-1023541248
 909 0034 00000000 		.word	adc_channels
 910              		.cfi_endproc
 911              	.LFE297:
 913              		.section	.text.CellTemp_MonitorTask,"ax",%progbits
 914              		.align	1
 915              		.global	CellTemp_MonitorTask
 916              		.syntax unified
 917              		.thumb
 918              		.thumb_func
 920              	CellTemp_MonitorTask:
 921              	.LVL90:
 922              	.LFB298:
 245:Core/Src/cell_temp_handler.c ****     // Initialize the temperature monitoring system
 923              		.loc 1 245 1 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 245:Core/Src/cell_temp_handler.c ****     // Initialize the temperature monitoring system
 927              		.loc 1 245 1 is_stmt 0 view .LVU226
 928 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 929              		.cfi_def_cfa_offset 32
 930              		.cfi_offset 4, -32
 931              		.cfi_offset 5, -28
 932              		.cfi_offset 6, -24
 933              		.cfi_offset 7, -20
 934              		.cfi_offset 8, -16
 935              		.cfi_offset 9, -12
 936              		.cfi_offset 10, -8
 937              		.cfi_offset 14, -4
 938 0004 2DED028B 		vpush.64	{d8}
 939              		.cfi_def_cfa_offset 40
 940              		.cfi_offset 80, -40
 941              		.cfi_offset 81, -36
 247:Core/Src/cell_temp_handler.c ****         // Handle initialization error - blink would go here if we had an LED
 942              		.loc 1 247 5 is_stmt 1 view .LVU227
 247:Core/Src/cell_temp_handler.c ****         // Handle initialization error - blink would go here if we had an LED
 943              		.loc 1 247 9 is_stmt 0 view .LVU228
 944 0008 FFF7FEFF 		bl	CellTemp_Init
 945              	.LVL91:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 29


 247:Core/Src/cell_temp_handler.c ****         // Handle initialization error - blink would go here if we had an LED
 946              		.loc 1 247 8 discriminator 1 view .LVU229
 947 000c 0746     		mov	r7, r0
 948 000e 0028     		cmp	r0, #0
 949 0010 00F0D480 		beq	.L125
 950              	.L101:
 249:Core/Src/cell_temp_handler.c ****             osDelay(1000);  // Wait 1 second (1000 ticks at 1ms tick rate)
 951              		.loc 1 249 9 is_stmt 1 view .LVU230
 250:Core/Src/cell_temp_handler.c ****         }
 952              		.loc 1 250 13 discriminator 1 view .LVU231
 953 0014 4FF47A70 		mov	r0, #1000
 954 0018 FFF7FEFF 		bl	osDelay
 955              	.LVL92:
 249:Core/Src/cell_temp_handler.c ****             osDelay(1000);  // Wait 1 second (1000 ticks at 1ms tick rate)
 956              		.loc 1 249 14 view .LVU232
 957 001c FAE7     		b	.L101
 958              	.LVL93:
 959              	.L103:
 960              	.LBB9:
 961              	.LBB10:
 269:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 962              		.loc 1 269 58 discriminator 2 view .LVU233
 963 001e 0134     		adds	r4, r4, #1
 964              	.LVL94:
 269:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 965              		.loc 1 269 58 is_stmt 0 discriminator 2 view .LVU234
 966 0020 E4B2     		uxtb	r4, r4
 967              	.LVL95:
 968              	.L102:
 269:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 969              		.loc 1 269 35 is_stmt 1 discriminator 1 view .LVU235
 970 0022 062C     		cmp	r4, #6
 971 0024 13D8     		bhi	.L144
 270:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 972              		.loc 1 270 13 view .LVU236
 270:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 973              		.loc 1 270 17 is_stmt 0 view .LVU237
 974 0026 2046     		mov	r0, r4
 975 0028 FFF7FEFF 		bl	CellTemp_IsADCEnabled
 976              	.LVL96:
 270:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 977              		.loc 1 270 16 discriminator 1 view .LVU238
 978 002c 0028     		cmp	r0, #0
 979 002e F6D0     		beq	.L103
 980              	.LBB11:
 271:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].adc_accumulator = 0;
 981              		.loc 1 271 17 is_stmt 1 view .LVU239
 271:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].adc_accumulator = 0;
 982              		.loc 1 271 56 is_stmt 0 view .LVU240
 983 0030 E300     		lsls	r3, r4, #3
 984 0032 DBB2     		uxtb	r3, r3
 271:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].adc_accumulator = 0;
 985              		.loc 1 271 68 view .LVU241
 986 0034 A34A     		ldr	r2, .L156
 987 0036 92F84115 		ldrb	r1, [r2, #1345]	@ zero_extendqisi2
 271:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].adc_accumulator = 0;
 988              		.loc 1 271 25 view .LVU242
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 30


 989 003a 0B44     		add	r3, r3, r1
 990 003c DBB2     		uxtb	r3, r3
 991              	.LVL97:
 272:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].sample_count = 0;
 992              		.loc 1 272 17 is_stmt 1 view .LVU243
 272:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].sample_count = 0;
 993              		.loc 1 272 67 is_stmt 0 view .LVU244
 994 003e 03EB4301 		add	r1, r3, r3, lsl #1
 995 0042 02EBC101 		add	r1, r2, r1, lsl #3
 996 0046 0020     		movs	r0, #0
 997 0048 0861     		str	r0, [r1, #16]
 273:Core/Src/cell_temp_handler.c ****             }
 998              		.loc 1 273 17 is_stmt 1 view .LVU245
 273:Core/Src/cell_temp_handler.c ****             }
 999              		.loc 1 273 64 is_stmt 0 view .LVU246
 1000 004a 8882     		strh	r0, [r1, #20]	@ movhi
 1001 004c E7E7     		b	.L103
 1002              	.LVL98:
 1003              	.L144:
 273:Core/Src/cell_temp_handler.c ****             }
 1004              		.loc 1 273 64 view .LVU247
 1005              	.LBE11:
 1006              	.LBE10:
 1007              	.LBB12:
 278:Core/Src/cell_temp_handler.c ****             // Read all enabled ADC channels for current MUX channel
 1008              		.loc 1 278 23 view .LVU248
 1009 004e 0026     		movs	r6, #0
 1010 0050 2BE0     		b	.L105
 1011              	.LVL99:
 1012              	.L106:
 1013              	.LBB13:
 280:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 1014              		.loc 1 280 62 is_stmt 1 discriminator 2 view .LVU249
 1015 0052 0134     		adds	r4, r4, #1
 1016              	.LVL100:
 280:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 1017              		.loc 1 280 62 is_stmt 0 discriminator 2 view .LVU250
 1018 0054 E4B2     		uxtb	r4, r4
 1019              	.LVL101:
 1020              	.L108:
 280:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 1021              		.loc 1 280 39 is_stmt 1 discriminator 1 view .LVU251
 1022 0056 062C     		cmp	r4, #6
 1023 0058 22D8     		bhi	.L145
 281:Core/Src/cell_temp_handler.c ****                     uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 1024              		.loc 1 281 17 view .LVU252
 281:Core/Src/cell_temp_handler.c ****                     uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 1025              		.loc 1 281 21 is_stmt 0 view .LVU253
 1026 005a 2046     		mov	r0, r4
 1027 005c FFF7FEFF 		bl	CellTemp_IsADCEnabled
 1028              	.LVL102:
 281:Core/Src/cell_temp_handler.c ****                     uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 1029              		.loc 1 281 20 discriminator 1 view .LVU254
 1030 0060 0028     		cmp	r0, #0
 1031 0062 F6D0     		beq	.L106
 1032              	.LBB14:
 282:Core/Src/cell_temp_handler.c ****                     thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 31


 1033              		.loc 1 282 21 is_stmt 1 view .LVU255
 282:Core/Src/cell_temp_handler.c ****                     thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 1034              		.loc 1 282 60 is_stmt 0 view .LVU256
 1035 0064 E500     		lsls	r5, r4, #3
 1036 0066 EDB2     		uxtb	r5, r5
 282:Core/Src/cell_temp_handler.c ****                     thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 1037              		.loc 1 282 72 view .LVU257
 1038 0068 964B     		ldr	r3, .L156
 1039 006a 93F84135 		ldrb	r3, [r3, #1345]	@ zero_extendqisi2
 282:Core/Src/cell_temp_handler.c ****                     thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 1040              		.loc 1 282 29 view .LVU258
 1041 006e 1D44     		add	r5, r5, r3
 1042 0070 EDB2     		uxtb	r5, r5
 1043              	.LVL103:
 283:Core/Src/cell_temp_handler.c ****                     
 1044              		.loc 1 283 21 is_stmt 1 view .LVU259
 286:Core/Src/cell_temp_handler.c ****                     
 1045              		.loc 1 286 21 view .LVU260
 286:Core/Src/cell_temp_handler.c ****                     
 1046              		.loc 1 286 42 is_stmt 0 view .LVU261
 1047 0072 954B     		ldr	r3, .L156+4
 1048 0074 53F82400 		ldr	r0, [r3, r4, lsl #2]
 1049 0078 FFF7FEFF 		bl	CellTemp_ReadADC
 1050              	.LVL104:
 289:Core/Src/cell_temp_handler.c ****                         therm->adc_accumulator += adc_value;
 1051              		.loc 1 289 21 is_stmt 1 view .LVU262
 289:Core/Src/cell_temp_handler.c ****                         therm->adc_accumulator += adc_value;
 1052              		.loc 1 289 24 is_stmt 0 view .LVU263
 1053 007c 0928     		cmp	r0, #9
 1054 007e E8D9     		bls	.L106
 290:Core/Src/cell_temp_handler.c ****                         therm->sample_count++;
 1055              		.loc 1 290 25 is_stmt 1 view .LVU264
 290:Core/Src/cell_temp_handler.c ****                         therm->sample_count++;
 1056              		.loc 1 290 30 is_stmt 0 view .LVU265
 1057 0080 904A     		ldr	r2, .L156
 1058 0082 05EB4503 		add	r3, r5, r5, lsl #1
 1059 0086 02EBC303 		add	r3, r2, r3, lsl #3
 1060 008a 1969     		ldr	r1, [r3, #16]
 290:Core/Src/cell_temp_handler.c ****                         therm->sample_count++;
 1061              		.loc 1 290 48 view .LVU266
 1062 008c 0844     		add	r0, r0, r1
 1063              	.LVL105:
 290:Core/Src/cell_temp_handler.c ****                         therm->sample_count++;
 1064              		.loc 1 290 48 view .LVU267
 1065 008e 1861     		str	r0, [r3, #16]
 291:Core/Src/cell_temp_handler.c ****                     }
 1066              		.loc 1 291 25 is_stmt 1 view .LVU268
 291:Core/Src/cell_temp_handler.c ****                     }
 1067              		.loc 1 291 30 is_stmt 0 view .LVU269
 1068 0090 9B8A     		ldrh	r3, [r3, #20]
 291:Core/Src/cell_temp_handler.c ****                     }
 1069              		.loc 1 291 44 view .LVU270
 1070 0092 05EB4505 		add	r5, r5, r5, lsl #1
 1071              	.LVL106:
 291:Core/Src/cell_temp_handler.c ****                     }
 1072              		.loc 1 291 44 view .LVU271
 1073 0096 02EBC502 		add	r2, r2, r5, lsl #3
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 32


 1074 009a 0133     		adds	r3, r3, #1
 1075 009c 9382     		strh	r3, [r2, #20]	@ movhi
 1076 009e D8E7     		b	.L106
 1077              	.LVL107:
 1078              	.L145:
 291:Core/Src/cell_temp_handler.c ****                     }
 1079              		.loc 1 291 44 view .LVU272
 1080              	.LBE14:
 1081              	.LBE13:
 297:Core/Src/cell_temp_handler.c ****         }
 1082              		.loc 1 297 13 is_stmt 1 view .LVU273
 1083 00a0 0A20     		movs	r0, #10
 1084 00a2 FFF7FEFF 		bl	osDelay
 1085              	.LVL108:
 278:Core/Src/cell_temp_handler.c ****             // Read all enabled ADC channels for current MUX channel
 1086              		.loc 1 278 72 discriminator 2 view .LVU274
 1087 00a6 0136     		adds	r6, r6, #1
 1088              	.LVL109:
 278:Core/Src/cell_temp_handler.c ****             // Read all enabled ADC channels for current MUX channel
 1089              		.loc 1 278 72 is_stmt 0 discriminator 2 view .LVU275
 1090 00a8 B6B2     		uxth	r6, r6
 1091              	.LVL110:
 1092              	.L105:
 278:Core/Src/cell_temp_handler.c ****             // Read all enabled ADC channels for current MUX channel
 1093              		.loc 1 278 42 is_stmt 1 discriminator 1 view .LVU276
 1094 00aa 0B2E     		cmp	r6, #11
 1095 00ac 01D8     		bhi	.L146
 1096              	.LBB15:
 280:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 1097              		.loc 1 280 26 is_stmt 0 view .LVU277
 1098 00ae 3C46     		mov	r4, r7
 1099 00b0 D1E7     		b	.L108
 1100              	.L146:
 1101              	.LBE15:
 1102              	.LBE12:
 301:Core/Src/cell_temp_handler.c ****         
 1103              		.loc 1 301 9 is_stmt 1 view .LVU278
 301:Core/Src/cell_temp_handler.c ****         
 1104              		.loc 1 301 33 is_stmt 0 view .LVU279
 1105 00b2 FFF7FEFF 		bl	osKernelGetTickCount
 1106              	.LVL111:
 1107 00b6 0646     		mov	r6, r0
 1108              	.LVL112:
 303:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1109              		.loc 1 303 9 is_stmt 1 view .LVU280
 1110              	.LBB16:
 303:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1111              		.loc 1 303 14 view .LVU281
 303:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1112              		.loc 1 303 22 is_stmt 0 view .LVU282
 1113 00b8 3C46     		mov	r4, r7
 303:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1114              		.loc 1 303 9 view .LVU283
 1115 00ba 44E0     		b	.L109
 1116              	.LVL113:
 1117              	.L149:
 1118              	.LBB17:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 33


 310:Core/Src/cell_temp_handler.c ****                     therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 1119              		.loc 1 310 21 is_stmt 1 view .LVU284
 310:Core/Src/cell_temp_handler.c ****                     therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 1120              		.loc 1 310 54 is_stmt 0 view .LVU285
 1121 00bc 9846     		mov	r8, r3
 1122 00be 1B69     		ldr	r3, [r3, #16]
 310:Core/Src/cell_temp_handler.c ****                     therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 1123              		.loc 1 310 72 view .LVU286
 1124 00c0 B3FBF2F3 		udiv	r3, r3, r2
 310:Core/Src/cell_temp_handler.c ****                     therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 1125              		.loc 1 310 38 view .LVU287
 1126 00c4 98B2     		uxth	r0, r3
 310:Core/Src/cell_temp_handler.c ****                     therm->temperature = CellTemp_CalculateTemperature(therm->raw_adc);
 1127              		.loc 1 310 36 view .LVU288
 1128 00c6 A8F80800 		strh	r0, [r8, #8]	@ movhi
 311:Core/Src/cell_temp_handler.c ****                     therm->last_read_time = current_time;
 1129              		.loc 1 311 21 is_stmt 1 view .LVU289
 311:Core/Src/cell_temp_handler.c ****                     therm->last_read_time = current_time;
 1130              		.loc 1 311 42 is_stmt 0 view .LVU290
 1131 00ca FFF7FEFF 		bl	CellTemp_CalculateTemperature
 1132              	.LVL114:
 1133 00ce B0EE408A 		vmov.f32	s16, s0
 311:Core/Src/cell_temp_handler.c ****                     therm->last_read_time = current_time;
 1134              		.loc 1 311 40 discriminator 1 view .LVU291
 1135 00d2 88ED010A 		vstr.32	s0, [r8, #4]
 312:Core/Src/cell_temp_handler.c ****                     
 1136              		.loc 1 312 21 is_stmt 1 view .LVU292
 312:Core/Src/cell_temp_handler.c ****                     
 1137              		.loc 1 312 43 is_stmt 0 view .LVU293
 1138 00d6 C8F80C60 		str	r6, [r8, #12]
 315:Core/Src/cell_temp_handler.c ****                         if (therm->temperature > -126.0f) {  // Valid temperature reading
 1139              		.loc 1 315 21 is_stmt 1 view .LVU294
 315:Core/Src/cell_temp_handler.c ****                         if (therm->temperature > -126.0f) {  // Valid temperature reading
 1140              		.loc 1 315 25 is_stmt 0 view .LVU295
 1141 00da 2846     		mov	r0, r5
 1142 00dc FFF7FEFF 		bl	CellTemp_IsFaultDetectionEnabled
 1143              	.LVL115:
 315:Core/Src/cell_temp_handler.c ****                         if (therm->temperature > -126.0f) {  // Valid temperature reading
 1144              		.loc 1 315 24 discriminator 1 view .LVU296
 1145 00e0 78B3     		cbz	r0, .L112
 316:Core/Src/cell_temp_handler.c ****                             if (therm->temperature > TEMP_MAX_CELSIUS) {
 1146              		.loc 1 316 25 is_stmt 1 view .LVU297
 316:Core/Src/cell_temp_handler.c ****                             if (therm->temperature > TEMP_MAX_CELSIUS) {
 1147              		.loc 1 316 28 is_stmt 0 view .LVU298
 1148 00e2 DFED7A7A 		vldr.32	s15, .L156+8
 1149 00e6 B4EEE78A 		vcmpe.f32	s16, s15
 1150 00ea F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1151 00ee 15DD     		ble	.L141
 317:Core/Src/cell_temp_handler.c ****                                 ErrorMgr_SetError(ERROR_OVER_TEMP);
 1152              		.loc 1 317 29 is_stmt 1 view .LVU299
 317:Core/Src/cell_temp_handler.c ****                                 ErrorMgr_SetError(ERROR_OVER_TEMP);
 1153              		.loc 1 317 32 is_stmt 0 view .LVU300
 1154 00f0 DFED777A 		vldr.32	s15, .L156+12
 1155 00f4 B4EEE78A 		vcmpe.f32	s16, s15
 1156 00f8 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1157 00fc 0ADC     		bgt	.L147
 319:Core/Src/cell_temp_handler.c ****                                 ErrorMgr_SetError(ERROR_UNDER_TEMP);
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 34


 1158              		.loc 1 319 36 is_stmt 1 view .LVU301
 319:Core/Src/cell_temp_handler.c ****                                 ErrorMgr_SetError(ERROR_UNDER_TEMP);
 1159              		.loc 1 319 39 is_stmt 0 view .LVU302
 1160 00fe FBEE047A 		vmov.f32	s15, #-2.0e+1
 1161 0102 B4EEE78A 		vcmpe.f32	s16, s15
 1162 0106 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1163 010a 1AD5     		bpl	.L112
 320:Core/Src/cell_temp_handler.c ****                             }
 1164              		.loc 1 320 33 is_stmt 1 view .LVU303
 1165 010c 0220     		movs	r0, #2
 1166 010e FFF7FEFF 		bl	ErrorMgr_SetError
 1167              	.LVL116:
 1168 0112 16E0     		b	.L112
 1169              	.L147:
 318:Core/Src/cell_temp_handler.c ****                             } else if (therm->temperature < TEMP_MIN_CELSIUS) {
 1170              		.loc 1 318 33 view .LVU304
 1171 0114 0120     		movs	r0, #1
 1172 0116 FFF7FEFF 		bl	ErrorMgr_SetError
 1173              	.LVL117:
 1174 011a 12E0     		b	.L112
 1175              	.L141:
 323:Core/Src/cell_temp_handler.c ****                         }
 1176              		.loc 1 323 29 view .LVU305
 1177 011c 0420     		movs	r0, #4
 1178 011e FFF7FEFF 		bl	ErrorMgr_SetError
 1179              	.LVL118:
 1180 0122 0EE0     		b	.L112
 1181              	.LVL119:
 1182              	.L110:
 323:Core/Src/cell_temp_handler.c ****                         }
 1183              		.loc 1 323 29 is_stmt 0 view .LVU306
 1184              	.LBE17:
 1185              	.LBB18:
 337:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature = -127.0f;
 1186              		.loc 1 337 17 is_stmt 1 view .LVU307
 337:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature = -127.0f;
 1187              		.loc 1 337 56 is_stmt 0 view .LVU308
 1188 0124 E300     		lsls	r3, r4, #3
 1189 0126 DBB2     		uxtb	r3, r3
 337:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature = -127.0f;
 1190              		.loc 1 337 68 view .LVU309
 1191 0128 664A     		ldr	r2, .L156
 1192 012a 92F84115 		ldrb	r1, [r2, #1345]	@ zero_extendqisi2
 337:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].temperature = -127.0f;
 1193              		.loc 1 337 25 view .LVU310
 1194 012e 0B44     		add	r3, r3, r1
 1195 0130 DBB2     		uxtb	r3, r3
 1196              	.LVL120:
 338:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].raw_adc = 0;
 1197              		.loc 1 338 17 is_stmt 1 view .LVU311
 338:Core/Src/cell_temp_handler.c ****                 temp_state.thermistors[therm_idx].raw_adc = 0;
 1198              		.loc 1 338 63 is_stmt 0 view .LVU312
 1199 0132 03EB4301 		add	r1, r3, r3, lsl #1
 1200 0136 02EBC101 		add	r1, r2, r1, lsl #3
 1201 013a 6648     		ldr	r0, .L156+16
 1202 013c 4860     		str	r0, [r1, #4]	@ float
 339:Core/Src/cell_temp_handler.c ****             }
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 35


 1203              		.loc 1 339 17 is_stmt 1 view .LVU313
 339:Core/Src/cell_temp_handler.c ****             }
 1204              		.loc 1 339 59 is_stmt 0 view .LVU314
 1205 013e 0023     		movs	r3, #0
 1206              	.LVL121:
 339:Core/Src/cell_temp_handler.c ****             }
 1207              		.loc 1 339 59 view .LVU315
 1208 0140 0B81     		strh	r3, [r1, #8]	@ movhi
 1209              	.LVL122:
 1210              	.L112:
 339:Core/Src/cell_temp_handler.c ****             }
 1211              		.loc 1 339 59 view .LVU316
 1212              	.LBE18:
 303:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1213              		.loc 1 303 58 is_stmt 1 discriminator 2 view .LVU317
 1214 0142 0134     		adds	r4, r4, #1
 1215              	.LVL123:
 303:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1216              		.loc 1 303 58 is_stmt 0 discriminator 2 view .LVU318
 1217 0144 E4B2     		uxtb	r4, r4
 1218              	.LVL124:
 1219              	.L109:
 303:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1220              		.loc 1 303 35 is_stmt 1 discriminator 1 view .LVU319
 1221 0146 062C     		cmp	r4, #6
 1222 0148 28D8     		bhi	.L148
 304:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 1223              		.loc 1 304 13 view .LVU320
 304:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 1224              		.loc 1 304 17 is_stmt 0 view .LVU321
 1225 014a 2046     		mov	r0, r4
 1226 014c FFF7FEFF 		bl	CellTemp_IsADCEnabled
 1227              	.LVL125:
 304:Core/Src/cell_temp_handler.c ****                 uint8_t therm_idx = adc * MUX_CHANNELS + temp_state.current_mux;
 1228              		.loc 1 304 16 discriminator 1 view .LVU322
 1229 0150 0028     		cmp	r0, #0
 1230 0152 E7D0     		beq	.L110
 1231              	.LBB19:
 305:Core/Src/cell_temp_handler.c ****                 thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 1232              		.loc 1 305 17 is_stmt 1 view .LVU323
 305:Core/Src/cell_temp_handler.c ****                 thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 1233              		.loc 1 305 56 is_stmt 0 view .LVU324
 1234 0154 E500     		lsls	r5, r4, #3
 1235 0156 EDB2     		uxtb	r5, r5
 305:Core/Src/cell_temp_handler.c ****                 thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 1236              		.loc 1 305 68 view .LVU325
 1237 0158 5A4B     		ldr	r3, .L156
 1238 015a 93F84125 		ldrb	r2, [r3, #1345]	@ zero_extendqisi2
 305:Core/Src/cell_temp_handler.c ****                 thermistor_data_t *therm = &temp_state.thermistors[therm_idx];
 1239              		.loc 1 305 25 view .LVU326
 1240 015e 1544     		add	r5, r5, r2
 1241 0160 EDB2     		uxtb	r5, r5
 1242              	.LVL126:
 306:Core/Src/cell_temp_handler.c ****                 
 1243              		.loc 1 306 17 is_stmt 1 view .LVU327
 309:Core/Src/cell_temp_handler.c ****                     therm->raw_adc = (uint16_t)(therm->adc_accumulator / therm->sample_count);
 1244              		.loc 1 309 17 view .LVU328
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 36


 309:Core/Src/cell_temp_handler.c ****                     therm->raw_adc = (uint16_t)(therm->adc_accumulator / therm->sample_count);
 1245              		.loc 1 309 26 is_stmt 0 view .LVU329
 1246 0162 05EB4502 		add	r2, r5, r5, lsl #1
 1247 0166 03EBC203 		add	r3, r3, r2, lsl #3
 1248 016a 9A8A     		ldrh	r2, [r3, #20]
 309:Core/Src/cell_temp_handler.c ****                     therm->raw_adc = (uint16_t)(therm->adc_accumulator / therm->sample_count);
 1249              		.loc 1 309 20 view .LVU330
 1250 016c 002A     		cmp	r2, #0
 1251 016e A5D1     		bne	.L149
 328:Core/Src/cell_temp_handler.c ****                     therm->temperature = -127.0f;
 1252              		.loc 1 328 21 is_stmt 1 view .LVU331
 328:Core/Src/cell_temp_handler.c ****                     therm->temperature = -127.0f;
 1253              		.loc 1 328 36 is_stmt 0 view .LVU332
 1254 0170 544B     		ldr	r3, .L156
 1255 0172 05EB4502 		add	r2, r5, r5, lsl #1
 1256 0176 03EBC202 		add	r2, r3, r2, lsl #3
 1257 017a 0021     		movs	r1, #0
 1258 017c 1181     		strh	r1, [r2, #8]	@ movhi
 329:Core/Src/cell_temp_handler.c ****                     // Only report sensor fault if fault detection is enabled for this thermistor
 1259              		.loc 1 329 21 is_stmt 1 view .LVU333
 329:Core/Src/cell_temp_handler.c ****                     // Only report sensor fault if fault detection is enabled for this thermistor
 1260              		.loc 1 329 40 is_stmt 0 view .LVU334
 1261 017e 05EB4502 		add	r2, r5, r5, lsl #1
 1262 0182 03EBC203 		add	r3, r3, r2, lsl #3
 1263 0186 534A     		ldr	r2, .L156+16
 1264 0188 5A60     		str	r2, [r3, #4]	@ float
 331:Core/Src/cell_temp_handler.c ****                         ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 1265              		.loc 1 331 21 is_stmt 1 view .LVU335
 331:Core/Src/cell_temp_handler.c ****                         ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 1266              		.loc 1 331 25 is_stmt 0 view .LVU336
 1267 018a 2846     		mov	r0, r5
 1268 018c FFF7FEFF 		bl	CellTemp_IsFaultDetectionEnabled
 1269              	.LVL127:
 331:Core/Src/cell_temp_handler.c ****                         ErrorMgr_SetError(ERROR_TEMP_SENSOR_FAULT);
 1270              		.loc 1 331 24 discriminator 1 view .LVU337
 1271 0190 0028     		cmp	r0, #0
 1272 0192 D6D0     		beq	.L112
 332:Core/Src/cell_temp_handler.c ****                     }
 1273              		.loc 1 332 25 is_stmt 1 view .LVU338
 1274 0194 0420     		movs	r0, #4
 1275 0196 FFF7FEFF 		bl	ErrorMgr_SetError
 1276              	.LVL128:
 1277 019a D2E7     		b	.L112
 1278              	.LVL129:
 1279              	.L148:
 332:Core/Src/cell_temp_handler.c ****                     }
 1280              		.loc 1 332 25 is_stmt 0 view .LVU339
 1281              	.LBE19:
 1282              	.LBE16:
 347:Core/Src/cell_temp_handler.c ****             // Just completed MUX 0-3 or MUX 4-7, so we have all 4 temps for a message
 1283              		.loc 1 347 9 is_stmt 1 view .LVU340
 347:Core/Src/cell_temp_handler.c ****             // Just completed MUX 0-3 or MUX 4-7, so we have all 4 temps for a message
 1284              		.loc 1 347 23 is_stmt 0 view .LVU341
 1285 019c 494B     		ldr	r3, .L156
 1286 019e 93F84135 		ldrb	r3, [r3, #1345]	@ zero_extendqisi2
 347:Core/Src/cell_temp_handler.c ****             // Just completed MUX 0-3 or MUX 4-7, so we have all 4 temps for a message
 1287              		.loc 1 347 12 view .LVU342
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 37


 1288 01a2 032B     		cmp	r3, #3
 1289 01a4 39D0     		beq	.L133
 347:Core/Src/cell_temp_handler.c ****             // Just completed MUX 0-3 or MUX 4-7, so we have all 4 temps for a message
 1290              		.loc 1 347 41 discriminator 1 view .LVU343
 1291 01a6 072B     		cmp	r3, #7
 1292 01a8 39D0     		beq	.L150
 1293              	.LVL130:
 1294              	.L120:
 370:Core/Src/cell_temp_handler.c ****         
 1295              		.loc 1 370 9 is_stmt 1 view .LVU344
 370:Core/Src/cell_temp_handler.c ****         
 1296              		.loc 1 370 19 is_stmt 0 view .LVU345
 1297 01aa 464A     		ldr	r2, .L156
 1298 01ac 92F84135 		ldrb	r3, [r2, #1345]	@ zero_extendqisi2
 370:Core/Src/cell_temp_handler.c ****         
 1299              		.loc 1 370 31 view .LVU346
 1300 01b0 0133     		adds	r3, r3, #1
 1301 01b2 DBB2     		uxtb	r3, r3
 1302 01b4 82F84135 		strb	r3, [r2, #1345]
 373:Core/Src/cell_temp_handler.c ****             temp_state.current_mux = 0;
 1303              		.loc 1 373 9 is_stmt 1 view .LVU347
 373:Core/Src/cell_temp_handler.c ****             temp_state.current_mux = 0;
 1304              		.loc 1 373 12 is_stmt 0 view .LVU348
 1305 01b8 072B     		cmp	r3, #7
 1306 01ba 32D8     		bhi	.L151
 1307              	.LVL131:
 1308              	.L125:
 373:Core/Src/cell_temp_handler.c ****             temp_state.current_mux = 0;
 1309              		.loc 1 373 12 view .LVU349
 1310              	.LBE9:
 263:Core/Src/cell_temp_handler.c ****     {
 1311              		.loc 1 263 5 is_stmt 1 view .LVU350
 1312              	.LBB31:
 266:Core/Src/cell_temp_handler.c ****         
 1313              		.loc 1 266 9 view .LVU351
 1314 01bc 414B     		ldr	r3, .L156
 1315 01be 93F84105 		ldrb	r0, [r3, #1345]	@ zero_extendqisi2
 1316 01c2 FFF7FEFF 		bl	CellTemp_SetMuxChannel
 1317              	.LVL132:
 269:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1318              		.loc 1 269 9 view .LVU352
 1319              	.LBB20:
 269:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1320              		.loc 1 269 14 view .LVU353
 269:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1321              		.loc 1 269 22 is_stmt 0 view .LVU354
 1322 01c6 3C46     		mov	r4, r7
 269:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1323              		.loc 1 269 9 view .LVU355
 1324 01c8 2BE7     		b	.L102
 1325              	.LVL133:
 1326              	.L152:
 269:Core/Src/cell_temp_handler.c ****             if (CellTemp_IsADCEnabled(adc)) {
 1327              		.loc 1 269 9 view .LVU356
 1328              	.LBE20:
 1329              	.LBB21:
 1330              	.LBB22:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 38


 354:Core/Src/cell_temp_handler.c ****                         uint8_t start_therm_idx = adc * MUX_CHANNELS;
 1331              		.loc 1 354 25 is_stmt 1 view .LVU357
 354:Core/Src/cell_temp_handler.c ****                         uint8_t start_therm_idx = adc * MUX_CHANNELS;
 1332              		.loc 1 354 33 is_stmt 0 view .LVU358
 1333 01ca 6000     		lsls	r0, r4, #1
 355:Core/Src/cell_temp_handler.c ****                         CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 1334              		.loc 1 355 25 is_stmt 1 view .LVU359
 355:Core/Src/cell_temp_handler.c ****                         CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 1335              		.loc 1 355 33 is_stmt 0 view .LVU360
 1336 01cc E100     		lsls	r1, r4, #3
 1337              	.LVL134:
 356:Core/Src/cell_temp_handler.c ****                         osDelay(2); // Small delay between messages
 1338              		.loc 1 356 25 is_stmt 1 view .LVU361
 1339 01ce 01F0F801 		and	r1, r1, #248
 1340              	.LVL135:
 356:Core/Src/cell_temp_handler.c ****                         osDelay(2); // Small delay between messages
 1341              		.loc 1 356 25 is_stmt 0 view .LVU362
 1342 01d2 00F0FE00 		and	r0, r0, #254
 1343 01d6 FFF7FEFF 		bl	CellTemp_SendTemperatureMessage
 1344              	.LVL136:
 357:Core/Src/cell_temp_handler.c ****                     } else {
 1345              		.loc 1 357 25 is_stmt 1 view .LVU363
 1346 01da 0220     		movs	r0, #2
 1347 01dc FFF7FEFF 		bl	osDelay
 1348              	.LVL137:
 1349              	.L121:
 357:Core/Src/cell_temp_handler.c ****                     } else {
 1350              		.loc 1 357 25 is_stmt 0 view .LVU364
 1351              	.LBE22:
 349:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 1352              		.loc 1 349 62 is_stmt 1 discriminator 2 view .LVU365
 1353 01e0 0134     		adds	r4, r4, #1
 1354              	.LVL138:
 349:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 1355              		.loc 1 349 62 is_stmt 0 discriminator 2 view .LVU366
 1356 01e2 E4B2     		uxtb	r4, r4
 1357              	.LVL139:
 1358              	.L123:
 349:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(adc)) {
 1359              		.loc 1 349 39 is_stmt 1 discriminator 1 view .LVU367
 1360 01e4 062C     		cmp	r4, #6
 1361 01e6 E0D8     		bhi	.L120
 350:Core/Src/cell_temp_handler.c ****                     // Determine which message to send based on current MUX
 1362              		.loc 1 350 17 view .LVU368
 350:Core/Src/cell_temp_handler.c ****                     // Determine which message to send based on current MUX
 1363              		.loc 1 350 21 is_stmt 0 view .LVU369
 1364 01e8 2046     		mov	r0, r4
 1365 01ea FFF7FEFF 		bl	CellTemp_IsADCEnabled
 1366              	.LVL140:
 350:Core/Src/cell_temp_handler.c ****                     // Determine which message to send based on current MUX
 1367              		.loc 1 350 20 discriminator 1 view .LVU370
 1368 01ee 0028     		cmp	r0, #0
 1369 01f0 F6D0     		beq	.L121
 352:Core/Src/cell_temp_handler.c ****                         // Send message 0 for this ADC (thermistors 0-3)
 1370              		.loc 1 352 21 is_stmt 1 view .LVU371
 352:Core/Src/cell_temp_handler.c ****                         // Send message 0 for this ADC (thermistors 0-3)
 1371              		.loc 1 352 35 is_stmt 0 view .LVU372
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 39


 1372 01f2 344B     		ldr	r3, .L156
 1373 01f4 93F84135 		ldrb	r3, [r3, #1345]	@ zero_extendqisi2
 352:Core/Src/cell_temp_handler.c ****                         // Send message 0 for this ADC (thermistors 0-3)
 1374              		.loc 1 352 24 view .LVU373
 1375 01f8 032B     		cmp	r3, #3
 1376 01fa E6D0     		beq	.L152
 1377              	.LBB23:
 360:Core/Src/cell_temp_handler.c ****                         uint8_t start_therm_idx = adc * MUX_CHANNELS + 4;
 1378              		.loc 1 360 25 is_stmt 1 view .LVU374
 360:Core/Src/cell_temp_handler.c ****                         uint8_t start_therm_idx = adc * MUX_CHANNELS + 4;
 1379              		.loc 1 360 51 is_stmt 0 view .LVU375
 1380 01fc 6000     		lsls	r0, r4, #1
 1381 01fe C0B2     		uxtb	r0, r0
 360:Core/Src/cell_temp_handler.c ****                         uint8_t start_therm_idx = adc * MUX_CHANNELS + 4;
 1382              		.loc 1 360 33 view .LVU376
 1383 0200 0130     		adds	r0, r0, #1
 1384              	.LVL141:
 361:Core/Src/cell_temp_handler.c ****                         CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 1385              		.loc 1 361 25 is_stmt 1 view .LVU377
 361:Core/Src/cell_temp_handler.c ****                         CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 1386              		.loc 1 361 70 is_stmt 0 view .LVU378
 1387 0202 E100     		lsls	r1, r4, #3
 1388 0204 C9B2     		uxtb	r1, r1
 361:Core/Src/cell_temp_handler.c ****                         CellTemp_SendTemperatureMessage(msg_idx, start_therm_idx);
 1389              		.loc 1 361 33 view .LVU379
 1390 0206 0431     		adds	r1, r1, #4
 1391              	.LVL142:
 362:Core/Src/cell_temp_handler.c ****                         osDelay(2); // Small delay between messages
 1392              		.loc 1 362 25 is_stmt 1 view .LVU380
 1393 0208 01F0FC01 		and	r1, r1, #252
 1394              	.LVL143:
 362:Core/Src/cell_temp_handler.c ****                         osDelay(2); // Small delay between messages
 1395              		.loc 1 362 25 is_stmt 0 view .LVU381
 1396 020c C0B2     		uxtb	r0, r0
 362:Core/Src/cell_temp_handler.c ****                         osDelay(2); // Small delay between messages
 1397              		.loc 1 362 25 view .LVU382
 1398 020e FFF7FEFF 		bl	CellTemp_SendTemperatureMessage
 1399              	.LVL144:
 363:Core/Src/cell_temp_handler.c ****                     }
 1400              		.loc 1 363 25 is_stmt 1 view .LVU383
 1401 0212 0220     		movs	r0, #2
 1402 0214 FFF7FEFF 		bl	osDelay
 1403              	.LVL145:
 1404 0218 E2E7     		b	.L121
 1405              	.LVL146:
 1406              	.L133:
 363:Core/Src/cell_temp_handler.c ****                     }
 1407              		.loc 1 363 25 is_stmt 0 view .LVU384
 1408              	.LBE23:
 1409              	.LBE21:
 1410 021a 3C46     		mov	r4, r7
 1411              	.LVL147:
 363:Core/Src/cell_temp_handler.c ****                     }
 1412              		.loc 1 363 25 view .LVU385
 1413 021c E2E7     		b	.L123
 1414              	.LVL148:
 1415              	.L150:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 40


 363:Core/Src/cell_temp_handler.c ****                     }
 1416              		.loc 1 363 25 view .LVU386
 1417 021e 3C46     		mov	r4, r7
 1418              	.LVL149:
 363:Core/Src/cell_temp_handler.c ****                     }
 1419              		.loc 1 363 25 view .LVU387
 1420 0220 E0E7     		b	.L123
 1421              	.L151:
 1422              	.LBB24:
 374:Core/Src/cell_temp_handler.c ****             temp_state.cycle_count++;
 1423              		.loc 1 374 13 is_stmt 1 view .LVU388
 374:Core/Src/cell_temp_handler.c ****             temp_state.cycle_count++;
 1424              		.loc 1 374 36 is_stmt 0 view .LVU389
 1425 0222 1346     		mov	r3, r2
 1426 0224 0022     		movs	r2, #0
 1427 0226 83F84125 		strb	r2, [r3, #1345]
 375:Core/Src/cell_temp_handler.c ****             
 1428              		.loc 1 375 13 is_stmt 1 view .LVU390
 375:Core/Src/cell_temp_handler.c ****             
 1429              		.loc 1 375 23 is_stmt 0 view .LVU391
 1430 022a D3F84425 		ldr	r2, [r3, #1348]
 375:Core/Src/cell_temp_handler.c ****             
 1431              		.loc 1 375 35 view .LVU392
 1432 022e 0132     		adds	r2, r2, #1
 1433 0230 C3F84425 		str	r2, [r3, #1348]
 379:Core/Src/cell_temp_handler.c ****             uint8_t any_under_temp = 0;
 1434              		.loc 1 379 13 is_stmt 1 view .LVU393
 1435              	.LVL150:
 380:Core/Src/cell_temp_handler.c ****             uint8_t any_sensor_fault = 0;
 1436              		.loc 1 380 13 view .LVU394
 381:Core/Src/cell_temp_handler.c ****             
 1437              		.loc 1 381 13 view .LVU395
 383:Core/Src/cell_temp_handler.c ****                 // Only check enabled ADC channels and thermistors with fault detection enabled
 1438              		.loc 1 383 13 view .LVU396
 1439              	.LBB25:
 383:Core/Src/cell_temp_handler.c ****                 // Only check enabled ADC channels and thermistors with fault detection enabled
 1440              		.loc 1 383 18 view .LVU397
 383:Core/Src/cell_temp_handler.c ****                 // Only check enabled ADC channels and thermistors with fault detection enabled
 1441              		.loc 1 383 26 is_stmt 0 view .LVU398
 1442 0234 3C46     		mov	r4, r7
 1443              	.LBE25:
 381:Core/Src/cell_temp_handler.c ****             
 1444              		.loc 1 381 21 view .LVU399
 1445 0236 3D46     		mov	r5, r7
 380:Core/Src/cell_temp_handler.c ****             uint8_t any_sensor_fault = 0;
 1446              		.loc 1 380 21 view .LVU400
 1447 0238 B846     		mov	r8, r7
 379:Core/Src/cell_temp_handler.c ****             uint8_t any_under_temp = 0;
 1448              		.loc 1 379 21 view .LVU401
 1449 023a 3E46     		mov	r6, r7
 1450              	.LVL151:
 1451              	.LBB30:
 383:Core/Src/cell_temp_handler.c ****                 // Only check enabled ADC channels and thermistors with fault detection enabled
 1452              		.loc 1 383 13 view .LVU402
 1453 023c 02E0     		b	.L126
 1454              	.LVL152:
 1455              	.L135:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 41


 1456              	.LBB26:
 1457              	.LBB27:
 391:Core/Src/cell_temp_handler.c ****                     } else if (temp > TEMP_MAX_CELSIUS) {
 1458              		.loc 1 391 42 view .LVU403
 1459 023e 0125     		movs	r5, #1
 1460              	.LVL153:
 1461              	.L127:
 391:Core/Src/cell_temp_handler.c ****                     } else if (temp > TEMP_MAX_CELSIUS) {
 1462              		.loc 1 391 42 view .LVU404
 1463              	.LBE27:
 1464              	.LBE26:
 383:Core/Src/cell_temp_handler.c ****                 // Only check enabled ADC channels and thermistors with fault detection enabled
 1465              		.loc 1 383 57 is_stmt 1 discriminator 2 view .LVU405
 1466 0240 0134     		adds	r4, r4, #1
 1467              	.LVL154:
 383:Core/Src/cell_temp_handler.c ****                 // Only check enabled ADC channels and thermistors with fault detection enabled
 1468              		.loc 1 383 57 is_stmt 0 discriminator 2 view .LVU406
 1469 0242 E4B2     		uxtb	r4, r4
 1470              	.LVL155:
 1471              	.L126:
 383:Core/Src/cell_temp_handler.c ****                 // Only check enabled ADC channels and thermistors with fault detection enabled
 1472              		.loc 1 383 35 is_stmt 1 discriminator 1 view .LVU407
 1473 0244 372C     		cmp	r4, #55
 1474 0246 2BD8     		bhi	.L153
 1475              	.LBB29:
 385:Core/Src/cell_temp_handler.c ****                 if (CellTemp_IsADCEnabled(therm_adc) && CellTemp_IsFaultDetectionEnabled(i)) {
 1476              		.loc 1 385 17 view .LVU408
 1477              	.LVL156:
 386:Core/Src/cell_temp_handler.c ****                     float temp = temp_state.thermistors[i].temperature;
 1478              		.loc 1 386 17 view .LVU409
 386:Core/Src/cell_temp_handler.c ****                     float temp = temp_state.thermistors[i].temperature;
 1479              		.loc 1 386 21 is_stmt 0 view .LVU410
 1480 0248 C4F3C700 		ubfx	r0, r4, #3, #8
 1481 024c FFF7FEFF 		bl	CellTemp_IsADCEnabled
 1482              	.LVL157:
 386:Core/Src/cell_temp_handler.c ****                     float temp = temp_state.thermistors[i].temperature;
 1483              		.loc 1 386 20 discriminator 1 view .LVU411
 1484 0250 0028     		cmp	r0, #0
 1485 0252 F5D0     		beq	.L127
 386:Core/Src/cell_temp_handler.c ****                     float temp = temp_state.thermistors[i].temperature;
 1486              		.loc 1 386 57 discriminator 1 view .LVU412
 1487 0254 2046     		mov	r0, r4
 1488 0256 FFF7FEFF 		bl	CellTemp_IsFaultDetectionEnabled
 1489              	.LVL158:
 386:Core/Src/cell_temp_handler.c ****                     float temp = temp_state.thermistors[i].temperature;
 1490              		.loc 1 386 54 discriminator 1 view .LVU413
 1491 025a 0028     		cmp	r0, #0
 1492 025c F0D0     		beq	.L127
 1493              	.LBB28:
 387:Core/Src/cell_temp_handler.c ****                     
 1494              		.loc 1 387 21 is_stmt 1 view .LVU414
 387:Core/Src/cell_temp_handler.c ****                     
 1495              		.loc 1 387 27 is_stmt 0 view .LVU415
 1496 025e 04EB4402 		add	r2, r4, r4, lsl #1
 1497 0262 184B     		ldr	r3, .L156
 1498 0264 03EBC203 		add	r3, r3, r2, lsl #3
 1499 0268 D3ED017A 		vldr.32	s15, [r3, #4]
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 42


 1500              	.LVL159:
 389:Core/Src/cell_temp_handler.c ****                         // Invalid reading - sensor fault
 1501              		.loc 1 389 21 is_stmt 1 view .LVU416
 389:Core/Src/cell_temp_handler.c ****                         // Invalid reading - sensor fault
 1502              		.loc 1 389 24 is_stmt 0 view .LVU417
 1503 026c 9FED177A 		vldr.32	s14, .L156+8
 1504 0270 F4EEC77A 		vcmpe.f32	s15, s14
 1505 0274 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1506 0278 E1D9     		bls	.L135
 392:Core/Src/cell_temp_handler.c ****                         // Over temperature
 1507              		.loc 1 392 28 is_stmt 1 view .LVU418
 392:Core/Src/cell_temp_handler.c ****                         // Over temperature
 1508              		.loc 1 392 31 is_stmt 0 view .LVU419
 1509 027a 9FED157A 		vldr.32	s14, .L156+12
 1510 027e F4EEC77A 		vcmpe.f32	s15, s14
 1511 0282 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1512 0286 09DC     		bgt	.L136
 395:Core/Src/cell_temp_handler.c ****                         // Under temperature
 1513              		.loc 1 395 28 is_stmt 1 view .LVU420
 395:Core/Src/cell_temp_handler.c ****                         // Under temperature
 1514              		.loc 1 395 31 is_stmt 0 view .LVU421
 1515 0288 BBEE047A 		vmov.f32	s14, #-2.0e+1
 1516 028c F4EEC77A 		vcmpe.f32	s15, s14
 1517 0290 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1518 0294 D4D5     		bpl	.L127
 397:Core/Src/cell_temp_handler.c ****                     }
 1519              		.loc 1 397 40 view .LVU422
 1520 0296 4FF00108 		mov	r8, #1
 1521              	.LVL160:
 397:Core/Src/cell_temp_handler.c ****                     }
 1522              		.loc 1 397 40 view .LVU423
 1523 029a D1E7     		b	.L127
 1524              	.LVL161:
 1525              	.L136:
 394:Core/Src/cell_temp_handler.c ****                     } else if (temp < TEMP_MIN_CELSIUS) {
 1526              		.loc 1 394 39 view .LVU424
 1527 029c 0126     		movs	r6, #1
 1528              	.LVL162:
 394:Core/Src/cell_temp_handler.c ****                     } else if (temp < TEMP_MIN_CELSIUS) {
 1529              		.loc 1 394 39 view .LVU425
 1530 029e CFE7     		b	.L127
 1531              	.LVL163:
 1532              	.L153:
 394:Core/Src/cell_temp_handler.c ****                     } else if (temp < TEMP_MIN_CELSIUS) {
 1533              		.loc 1 394 39 view .LVU426
 1534              	.LBE28:
 1535              	.LBE29:
 1536              	.LBE30:
 403:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_OVER_TEMP);
 1537              		.loc 1 403 13 is_stmt 1 view .LVU427
 403:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_OVER_TEMP);
 1538              		.loc 1 403 16 is_stmt 0 view .LVU428
 1539 02a0 46B1     		cbz	r6, .L154
 1540              	.L129:
 406:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_UNDER_TEMP);
 1541              		.loc 1 406 13 is_stmt 1 view .LVU429
 406:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_UNDER_TEMP);
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 43


 1542              		.loc 1 406 16 is_stmt 0 view .LVU430
 1543 02a2 B8F1000F 		cmp	r8, #0
 1544 02a6 09D0     		beq	.L155
 1545              	.L130:
 409:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_TEMP_SENSOR_FAULT);
 1546              		.loc 1 409 13 is_stmt 1 view .LVU431
 409:Core/Src/cell_temp_handler.c ****                 ErrorMgr_ClearError(ERROR_TEMP_SENSOR_FAULT);
 1547              		.loc 1 409 16 is_stmt 0 view .LVU432
 1548 02a8 002D     		cmp	r5, #0
 1549 02aa 87D1     		bne	.L125
 410:Core/Src/cell_temp_handler.c ****             }
 1550              		.loc 1 410 17 is_stmt 1 view .LVU433
 1551 02ac 0420     		movs	r0, #4
 1552 02ae FFF7FEFF 		bl	ErrorMgr_ClearError
 1553              	.LVL164:
 1554 02b2 83E7     		b	.L125
 1555              	.L154:
 404:Core/Src/cell_temp_handler.c ****             }
 1556              		.loc 1 404 17 view .LVU434
 1557 02b4 0120     		movs	r0, #1
 1558 02b6 FFF7FEFF 		bl	ErrorMgr_ClearError
 1559              	.LVL165:
 1560 02ba F2E7     		b	.L129
 1561              	.L155:
 407:Core/Src/cell_temp_handler.c ****             }
 1562              		.loc 1 407 17 view .LVU435
 1563 02bc 0220     		movs	r0, #2
 1564 02be FFF7FEFF 		bl	ErrorMgr_ClearError
 1565              	.LVL166:
 1566 02c2 F1E7     		b	.L130
 1567              	.L157:
 1568              		.align	2
 1569              	.L156:
 1570 02c4 00000000 		.word	temp_state
 1571 02c8 00000000 		.word	adc_channels
 1572 02cc 0000FCC2 		.word	-1023672320
 1573 02d0 00007042 		.word	1114636288
 1574 02d4 0000FEC2 		.word	-1023541248
 1575              	.LBE24:
 1576              	.LBE31:
 1577              		.cfi_endproc
 1578              	.LFE298:
 1580              		.section	.text.CellTemp_SendCANData,"ax",%progbits
 1581              		.align	1
 1582              		.global	CellTemp_SendCANData
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1587              	CellTemp_SendCANData:
 1588              	.LFB302:
 497:Core/Src/cell_temp_handler.c **** 
 498:Core/Src/cell_temp_handler.c **** /**
 499:Core/Src/cell_temp_handler.c ****   * @brief  Send temperature data over CAN bus (manual/on-demand)
 500:Core/Src/cell_temp_handler.c ****   * @note   In normal operation, CAN messages are sent automatically after each
 501:Core/Src/cell_temp_handler.c ****   *         ADC completes its 8 MUX readings (once per second per enabled ADC).
 502:Core/Src/cell_temp_handler.c ****   *         This function can be called manually to send all messages at once.
 503:Core/Src/cell_temp_handler.c ****   * @retval HAL_StatusTypeDef
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 44


 504:Core/Src/cell_temp_handler.c ****   */
 505:Core/Src/cell_temp_handler.c **** HAL_StatusTypeDef CellTemp_SendCANData(void)
 506:Core/Src/cell_temp_handler.c **** {
 1589              		.loc 1 506 1 view -0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
 1593 0000 38B5     		push	{r3, r4, r5, lr}
 1594              		.cfi_def_cfa_offset 16
 1595              		.cfi_offset 3, -16
 1596              		.cfi_offset 4, -12
 1597              		.cfi_offset 5, -8
 1598              		.cfi_offset 14, -4
 507:Core/Src/cell_temp_handler.c ****     HAL_StatusTypeDef result = HAL_OK;
 1599              		.loc 1 507 5 view .LVU437
 1600              	.LVL167:
 508:Core/Src/cell_temp_handler.c ****     
 509:Core/Src/cell_temp_handler.c ****     // Send 14 CAN messages to cover all 56 thermistors (4 per message)
 510:Core/Src/cell_temp_handler.c ****     // Only enabled ADC channels will have their messages sent
 511:Core/Src/cell_temp_handler.c ****     for (uint8_t msg = 0; msg < 14; msg++) {
 1601              		.loc 1 511 5 view .LVU438
 1602              	.LBB32:
 1603              		.loc 1 511 10 view .LVU439
 1604              		.loc 1 511 18 is_stmt 0 view .LVU440
 1605 0002 0024     		movs	r4, #0
 1606              	.LBE32:
 507:Core/Src/cell_temp_handler.c ****     HAL_StatusTypeDef result = HAL_OK;
 1607              		.loc 1 507 23 view .LVU441
 1608 0004 2546     		mov	r5, r4
 1609              	.LBB35:
 1610              		.loc 1 511 5 view .LVU442
 1611 0006 04E0     		b	.L159
 1612              	.LVL168:
 1613              	.L160:
 1614              	.LBB33:
 512:Core/Src/cell_temp_handler.c ****         uint8_t start_idx = msg * 4;
 513:Core/Src/cell_temp_handler.c ****         
 514:Core/Src/cell_temp_handler.c ****         if (CellTemp_SendTemperatureMessage(msg, start_idx) != HAL_OK) {
 515:Core/Src/cell_temp_handler.c ****             result = HAL_ERROR;
 516:Core/Src/cell_temp_handler.c ****         }
 517:Core/Src/cell_temp_handler.c ****         
 518:Core/Src/cell_temp_handler.c ****         // Small delay between messages to avoid bus congestion (5ms)
 519:Core/Src/cell_temp_handler.c ****         osDelay(5);
 1615              		.loc 1 519 9 is_stmt 1 view .LVU443
 1616 0008 0520     		movs	r0, #5
 1617 000a FFF7FEFF 		bl	osDelay
 1618              	.LVL169:
 1619              	.LBE33:
 511:Core/Src/cell_temp_handler.c ****         uint8_t start_idx = msg * 4;
 1620              		.loc 1 511 40 discriminator 2 view .LVU444
 1621 000e 0134     		adds	r4, r4, #1
 1622              	.LVL170:
 511:Core/Src/cell_temp_handler.c ****         uint8_t start_idx = msg * 4;
 1623              		.loc 1 511 40 is_stmt 0 discriminator 2 view .LVU445
 1624 0010 E4B2     		uxtb	r4, r4
 1625              	.LVL171:
 1626              	.L159:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 45


 511:Core/Src/cell_temp_handler.c ****         uint8_t start_idx = msg * 4;
 1627              		.loc 1 511 31 is_stmt 1 discriminator 1 view .LVU446
 1628 0012 0D2C     		cmp	r4, #13
 1629 0014 09D8     		bhi	.L164
 1630              	.LBB34:
 512:Core/Src/cell_temp_handler.c ****         uint8_t start_idx = msg * 4;
 1631              		.loc 1 512 9 view .LVU447
 512:Core/Src/cell_temp_handler.c ****         uint8_t start_idx = msg * 4;
 1632              		.loc 1 512 17 is_stmt 0 view .LVU448
 1633 0016 A100     		lsls	r1, r4, #2
 1634              	.LVL172:
 514:Core/Src/cell_temp_handler.c ****             result = HAL_ERROR;
 1635              		.loc 1 514 9 is_stmt 1 view .LVU449
 514:Core/Src/cell_temp_handler.c ****             result = HAL_ERROR;
 1636              		.loc 1 514 13 is_stmt 0 view .LVU450
 1637 0018 01F0FC01 		and	r1, r1, #252
 1638              	.LVL173:
 514:Core/Src/cell_temp_handler.c ****             result = HAL_ERROR;
 1639              		.loc 1 514 13 view .LVU451
 1640 001c 2046     		mov	r0, r4
 1641 001e FFF7FEFF 		bl	CellTemp_SendTemperatureMessage
 1642              	.LVL174:
 514:Core/Src/cell_temp_handler.c ****             result = HAL_ERROR;
 1643              		.loc 1 514 12 discriminator 1 view .LVU452
 1644 0022 0028     		cmp	r0, #0
 1645 0024 F0D0     		beq	.L160
 515:Core/Src/cell_temp_handler.c ****         }
 1646              		.loc 1 515 20 view .LVU453
 1647 0026 0125     		movs	r5, #1
 1648              	.LVL175:
 515:Core/Src/cell_temp_handler.c ****         }
 1649              		.loc 1 515 20 view .LVU454
 1650 0028 EEE7     		b	.L160
 1651              	.LVL176:
 1652              	.L164:
 515:Core/Src/cell_temp_handler.c ****         }
 1653              		.loc 1 515 20 view .LVU455
 1654              	.LBE34:
 1655              	.LBE35:
 520:Core/Src/cell_temp_handler.c ****     }
 521:Core/Src/cell_temp_handler.c ****     
 522:Core/Src/cell_temp_handler.c ****     return result;
 1656              		.loc 1 522 5 is_stmt 1 view .LVU456
 523:Core/Src/cell_temp_handler.c **** }
 1657              		.loc 1 523 1 is_stmt 0 view .LVU457
 1658 002a 2846     		mov	r0, r5
 1659 002c 38BD     		pop	{r3, r4, r5, pc}
 1660              		.loc 1 523 1 view .LVU458
 1661              		.cfi_endproc
 1662              	.LFE302:
 1664              		.section	.text.CellTemp_GetTemperatures,"ax",%progbits
 1665              		.align	1
 1666              		.global	CellTemp_GetTemperatures
 1667              		.syntax unified
 1668              		.thumb
 1669              		.thumb_func
 1671              	CellTemp_GetTemperatures:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 46


 1672              	.LVL177:
 1673              	.LFB303:
 524:Core/Src/cell_temp_handler.c **** 
 525:Core/Src/cell_temp_handler.c **** /**
 526:Core/Src/cell_temp_handler.c ****   * @brief  Get current temperature readings
 527:Core/Src/cell_temp_handler.c ****   * @param  temperatures: Array to store temperature readings
 528:Core/Src/cell_temp_handler.c ****   * @param  size: Size of array (should be TOTAL_THERMISTORS)
 529:Core/Src/cell_temp_handler.c ****   * @retval Number of valid readings
 530:Core/Src/cell_temp_handler.c ****   */
 531:Core/Src/cell_temp_handler.c **** uint8_t CellTemp_GetTemperatures(float *temperatures, uint8_t size)
 532:Core/Src/cell_temp_handler.c **** {
 1674              		.loc 1 532 1 is_stmt 1 view -0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
 1678              		.loc 1 532 1 is_stmt 0 view .LVU460
 1679 0000 10B5     		push	{r4, lr}
 1680              		.cfi_def_cfa_offset 8
 1681              		.cfi_offset 4, -8
 1682              		.cfi_offset 14, -4
 1683 0002 8646     		mov	lr, r0
 533:Core/Src/cell_temp_handler.c ****     uint8_t valid_count = 0;
 1684              		.loc 1 533 5 is_stmt 1 view .LVU461
 1685              	.LVL178:
 534:Core/Src/cell_temp_handler.c ****     uint8_t max_count = (size < TOTAL_THERMISTORS) ? size : TOTAL_THERMISTORS;
 1686              		.loc 1 534 5 view .LVU462
 1687              		.loc 1 534 13 is_stmt 0 view .LVU463
 1688 0004 3829     		cmp	r1, #56
 1689 0006 28BF     		it	cs
 1690 0008 3821     		movcs	r1, #56
 1691              	.LVL179:
 535:Core/Src/cell_temp_handler.c ****     
 536:Core/Src/cell_temp_handler.c ****     for (uint8_t i = 0; i < max_count; i++) {
 1692              		.loc 1 536 5 is_stmt 1 view .LVU464
 1693              	.LBB36:
 1694              		.loc 1 536 10 view .LVU465
 1695              		.loc 1 536 18 is_stmt 0 view .LVU466
 1696 000a 0023     		movs	r3, #0
 1697              	.LBE36:
 533:Core/Src/cell_temp_handler.c ****     uint8_t max_count = (size < TOTAL_THERMISTORS) ? size : TOTAL_THERMISTORS;
 1698              		.loc 1 533 13 view .LVU467
 1699 000c 1846     		mov	r0, r3
 1700              	.LVL180:
 1701              	.LBB37:
 1702              		.loc 1 536 5 view .LVU468
 1703 000e 01E0     		b	.L166
 1704              	.LVL181:
 1705              	.L167:
 1706              		.loc 1 536 41 is_stmt 1 discriminator 2 view .LVU469
 1707 0010 0133     		adds	r3, r3, #1
 1708              	.LVL182:
 1709              		.loc 1 536 41 is_stmt 0 discriminator 2 view .LVU470
 1710 0012 DBB2     		uxtb	r3, r3
 1711              	.LVL183:
 1712              	.L166:
 1713              		.loc 1 536 27 is_stmt 1 discriminator 1 view .LVU471
 1714 0014 8B42     		cmp	r3, r1
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 47


 1715 0016 14D2     		bcs	.L172
 537:Core/Src/cell_temp_handler.c ****         temperatures[i] = temp_state.thermistors[i].temperature;
 1716              		.loc 1 537 9 view .LVU472
 1717              		.loc 1 537 21 is_stmt 0 view .LVU473
 1718 0018 0EEB8302 		add	r2, lr, r3, lsl #2
 1719              		.loc 1 537 52 view .LVU474
 1720 001c 03EB430C 		add	ip, r3, r3, lsl #1
 1721 0020 084C     		ldr	r4, .L173
 1722 0022 04EBCC0C 		add	ip, r4, ip, lsl #3
 1723 0026 DCED017A 		vldr.32	s15, [ip, #4]
 1724              		.loc 1 537 25 view .LVU475
 1725 002a C2ED007A 		vstr.32	s15, [r2]
 538:Core/Src/cell_temp_handler.c ****         if (temperatures[i] > -126.0f) {
 1726              		.loc 1 538 9 is_stmt 1 view .LVU476
 1727              		.loc 1 538 12 is_stmt 0 view .LVU477
 1728 002e 9FED067A 		vldr.32	s14, .L173+4
 1729 0032 F4EEC77A 		vcmpe.f32	s15, s14
 1730 0036 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 1731 003a E9DD     		ble	.L167
 539:Core/Src/cell_temp_handler.c ****             valid_count++;
 1732              		.loc 1 539 13 is_stmt 1 view .LVU478
 1733              		.loc 1 539 24 is_stmt 0 view .LVU479
 1734 003c 0130     		adds	r0, r0, #1
 1735              	.LVL184:
 1736              		.loc 1 539 24 view .LVU480
 1737 003e C0B2     		uxtb	r0, r0
 1738              	.LVL185:
 1739              		.loc 1 539 24 view .LVU481
 1740 0040 E6E7     		b	.L167
 1741              	.LVL186:
 1742              	.L172:
 1743              		.loc 1 539 24 view .LVU482
 1744              	.LBE37:
 540:Core/Src/cell_temp_handler.c ****         }
 541:Core/Src/cell_temp_handler.c ****     }
 542:Core/Src/cell_temp_handler.c ****     
 543:Core/Src/cell_temp_handler.c ****     return valid_count;
 1745              		.loc 1 543 5 is_stmt 1 view .LVU483
 544:Core/Src/cell_temp_handler.c **** }
 1746              		.loc 1 544 1 is_stmt 0 view .LVU484
 1747 0042 10BD     		pop	{r4, pc}
 1748              	.L174:
 1749              		.align	2
 1750              	.L173:
 1751 0044 00000000 		.word	temp_state
 1752 0048 0000FCC2 		.word	-1023672320
 1753              		.cfi_endproc
 1754              	.LFE303:
 1756              		.section	.text.CellTemp_GetStats,"ax",%progbits
 1757              		.align	1
 1758              		.global	CellTemp_GetStats
 1759              		.syntax unified
 1760              		.thumb
 1761              		.thumb_func
 1763              	CellTemp_GetStats:
 1764              	.LVL187:
 1765              	.LFB304:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 48


 545:Core/Src/cell_temp_handler.c **** 
 546:Core/Src/cell_temp_handler.c **** /**
 547:Core/Src/cell_temp_handler.c ****   * @brief  Get monitoring statistics
 548:Core/Src/cell_temp_handler.c ****   * @param  cycle_count: Pointer to store cycle count
 549:Core/Src/cell_temp_handler.c ****   * @param  current_index: Pointer to store current thermistor index
 550:Core/Src/cell_temp_handler.c ****   * @retval None
 551:Core/Src/cell_temp_handler.c ****   */
 552:Core/Src/cell_temp_handler.c **** void CellTemp_GetStats(uint32_t *cycle_count, uint8_t *current_index)
 553:Core/Src/cell_temp_handler.c **** {
 1766              		.loc 1 553 1 is_stmt 1 view -0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 0
 1769              		@ frame_needed = 0, uses_anonymous_args = 0
 1770              		@ link register save eliminated.
 554:Core/Src/cell_temp_handler.c ****     if (cycle_count != NULL) {
 1771              		.loc 1 554 5 view .LVU486
 1772              		.loc 1 554 8 is_stmt 0 view .LVU487
 1773 0000 18B1     		cbz	r0, .L176
 555:Core/Src/cell_temp_handler.c ****         *cycle_count = temp_state.cycle_count;
 1774              		.loc 1 555 9 is_stmt 1 view .LVU488
 1775              		.loc 1 555 34 is_stmt 0 view .LVU489
 1776 0002 054A     		ldr	r2, .L178
 1777 0004 D2F84425 		ldr	r2, [r2, #1348]
 1778              		.loc 1 555 22 view .LVU490
 1779 0008 0260     		str	r2, [r0]
 1780              	.L176:
 556:Core/Src/cell_temp_handler.c ****     }
 557:Core/Src/cell_temp_handler.c ****     
 558:Core/Src/cell_temp_handler.c ****     if (current_index != NULL) {
 1781              		.loc 1 558 5 is_stmt 1 view .LVU491
 1782              		.loc 1 558 8 is_stmt 0 view .LVU492
 1783 000a 19B1     		cbz	r1, .L175
 559:Core/Src/cell_temp_handler.c ****         *current_index = temp_state.current_index;
 1784              		.loc 1 559 9 is_stmt 1 view .LVU493
 1785              		.loc 1 559 36 is_stmt 0 view .LVU494
 1786 000c 024B     		ldr	r3, .L178
 1787 000e 93F84235 		ldrb	r3, [r3, #1346]	@ zero_extendqisi2
 1788              		.loc 1 559 24 view .LVU495
 1789 0012 0B70     		strb	r3, [r1]
 1790              	.L175:
 560:Core/Src/cell_temp_handler.c ****     }
 561:Core/Src/cell_temp_handler.c **** }
 1791              		.loc 1 561 1 view .LVU496
 1792 0014 7047     		bx	lr
 1793              	.L179:
 1794 0016 00BF     		.align	2
 1795              	.L178:
 1796 0018 00000000 		.word	temp_state
 1797              		.cfi_endproc
 1798              	.LFE304:
 1800              		.section	.text.CellTemp_SetFaultMask,"ax",%progbits
 1801              		.align	1
 1802              		.global	CellTemp_SetFaultMask
 1803              		.syntax unified
 1804              		.thumb
 1805              		.thumb_func
 1807              	CellTemp_SetFaultMask:
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 49


 1808              	.LVL188:
 1809              	.LFB305:
 562:Core/Src/cell_temp_handler.c **** 
 563:Core/Src/cell_temp_handler.c **** /**
 564:Core/Src/cell_temp_handler.c ****   * @brief  Set thermistor fault detection mask
 565:Core/Src/cell_temp_handler.c ****   * @param  mask: 64-bit mask where each bit enables (1) or disables (0) fault detection for that t
 566:Core/Src/cell_temp_handler.c ****   * @note   Bit 0 = thermistor 0, bit 55 = thermistor 55. Bits 56-63 are ignored.
 567:Core/Src/cell_temp_handler.c ****   *         Thermistors with fault detection disabled will still be measured and reported,
 568:Core/Src/cell_temp_handler.c ****   *         but will not trigger temperature fault errors.
 569:Core/Src/cell_temp_handler.c ****   * @retval None
 570:Core/Src/cell_temp_handler.c ****   */
 571:Core/Src/cell_temp_handler.c **** void CellTemp_SetFaultMask(uint64_t mask)
 572:Core/Src/cell_temp_handler.c **** {
 1810              		.loc 1 572 1 is_stmt 1 view -0
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 0
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
 1814              		@ link register save eliminated.
 573:Core/Src/cell_temp_handler.c ****     thermistor_fault_mask = mask;
 1815              		.loc 1 573 5 view .LVU498
 1816              		.loc 1 573 27 is_stmt 0 view .LVU499
 1817 0000 014B     		ldr	r3, .L181
 1818 0002 C3E90001 		strd	r0, [r3]
 574:Core/Src/cell_temp_handler.c **** }
 1819              		.loc 1 574 1 view .LVU500
 1820 0006 7047     		bx	lr
 1821              	.L182:
 1822              		.align	2
 1823              	.L181:
 1824 0008 00000000 		.word	thermistor_fault_mask
 1825              		.cfi_endproc
 1826              	.LFE305:
 1828              		.section	.text.CellTemp_GetFaultMask,"ax",%progbits
 1829              		.align	1
 1830              		.global	CellTemp_GetFaultMask
 1831              		.syntax unified
 1832              		.thumb
 1833              		.thumb_func
 1835              	CellTemp_GetFaultMask:
 1836              	.LFB306:
 575:Core/Src/cell_temp_handler.c **** 
 576:Core/Src/cell_temp_handler.c **** /**
 577:Core/Src/cell_temp_handler.c ****   * @brief  Get current thermistor fault detection mask
 578:Core/Src/cell_temp_handler.c ****   * @retval 64-bit mask showing which thermistors have fault detection enabled (1) or disabled (0)
 579:Core/Src/cell_temp_handler.c ****   */
 580:Core/Src/cell_temp_handler.c **** uint64_t CellTemp_GetFaultMask(void)
 581:Core/Src/cell_temp_handler.c **** {
 1837              		.loc 1 581 1 is_stmt 1 view -0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 0
 1840              		@ frame_needed = 0, uses_anonymous_args = 0
 1841              		@ link register save eliminated.
 582:Core/Src/cell_temp_handler.c ****     return thermistor_fault_mask;
 1842              		.loc 1 582 5 view .LVU502
 583:Core/Src/cell_temp_handler.c **** }
 1843              		.loc 1 583 1 is_stmt 0 view .LVU503
 1844 0000 014B     		ldr	r3, .L184
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 50


 1845 0002 D3E90001 		ldrd	r0, [r3]
 1846 0006 7047     		bx	lr
 1847              	.L185:
 1848              		.align	2
 1849              	.L184:
 1850 0008 00000000 		.word	thermistor_fault_mask
 1851              		.cfi_endproc
 1852              	.LFE306:
 1854              		.section	.rodata.adc_channel_enabled,"a"
 1855              		.align	2
 1858              	adc_channel_enabled:
 1859 0000 01010101 		.ascii	"\001\001\001\001\001\001\001"
 1859      010101
 1860              		.section	.rodata.adc_channels,"a"
 1861              		.align	2
 1864              	adc_channels:
 1865 0000 2000F014 		.word	351272992
 1866 0004 40002019 		.word	421527616
 1867 0008 0008302E 		.word	774899712
 1868 000c 00018021 		.word	562036992
 1869 0010 0002B025 		.word	632291840
 1870 0014 0004002A 		.word	704644096
 1871 0018 0080F03E 		.word	1055948800
 1872              		.section	.data.thermistor_fault_mask,"aw"
 1873              		.align	3
 1876              	thermistor_fault_mask:
 1877 0000 FFFFFFFF 		.word	-1
 1878 0004 FFFFFFFF 		.word	-1
 1879              		.section	.bss.temp_state,"aw",%nobits
 1880              		.align	2
 1883              	temp_state:
 1884 0000 00000000 		.space	1356
 1884      00000000 
 1884      00000000 
 1884      00000000 
 1884      00000000 
 1885              		.text
 1886              	.Letext0:
 1887              		.file 2 "C:/Users/Ali/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tool
 1888              		.file 3 "C:/Users/Ali/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-tool
 1889              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l432xx.h"
 1890              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l4xx.h"
 1891              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_def.h"
 1892              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_gpio.h"
 1893              		.file 8 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_dma.h"
 1894              		.file 9 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_hal_adc.h"
 1895              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.h"
 1896              		.file 11 "Core/Inc/cell_temp_handler.h"
 1897              		.file 12 "Core/Inc/can_ids.h"
 1898              		.file 13 "Core/Inc/error_manager.h"
 1899              		.file 14 "Core/Inc/can_manager.h"
 1900              		.file 15 "C:/Users/Ali/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-too
 1901              		.file 16 "C:/Users/Ali/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-too
 1902              		.file 17 "<built-in>"
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 51


DEFINED SYMBOLS
                            *ABS*:00000000 cell_temp_handler.c
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:21     .text.CellTemp_IsADCEnabled:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:26     .text.CellTemp_IsADCEnabled:00000000 CellTemp_IsADCEnabled
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:55     .text.CellTemp_IsADCEnabled:00000010 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1858   .rodata.adc_channel_enabled:00000000 adc_channel_enabled
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:60     .text.CellTemp_IsFaultDetectionEnabled:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:65     .text.CellTemp_IsFaultDetectionEnabled:00000000 CellTemp_IsFaultDetectionEnabled
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:114    .text.CellTemp_IsFaultDetectionEnabled:00000034 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1876   .data.thermistor_fault_mask:00000000 thermistor_fault_mask
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:119    .text.CellTemp_ConfigureADCChannel:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:124    .text.CellTemp_ConfigureADCChannel:00000000 CellTemp_ConfigureADCChannel
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:182    .text.CellTemp_ConfigureADCChannel:00000034 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:187    .text.CellTemp_SendTemperatureMessage:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:192    .text.CellTemp_SendTemperatureMessage:00000000 CellTemp_SendTemperatureMessage
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:395    .text.CellTemp_SendTemperatureMessage:000000b4 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1883   .bss.temp_state:00000000 temp_state
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:403    .text.CellTemp_Init:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:409    .text.CellTemp_Init:00000000 CellTemp_Init
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:504    .text.CellTemp_Init:00000074 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:511    .text.CellTemp_ReadADC:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:517    .text.CellTemp_ReadADC:00000000 CellTemp_ReadADC
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:589    .text.CellTemp_ReadADC:0000003c $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:594    .text.CellTemp_SetMuxChannel:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:600    .text.CellTemp_SetMuxChannel:00000000 CellTemp_SetMuxChannel
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:695    .text.CellTemp_SetMuxChannel:00000070 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:700    .text.CellTemp_CalculateTemperature:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:706    .text.CellTemp_CalculateTemperature:00000000 CellTemp_CalculateTemperature
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:829    .text.CellTemp_CalculateTemperature:000000b0 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:844    .text.CellTemp_ReadThermistor:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:850    .text.CellTemp_ReadThermistor:00000000 CellTemp_ReadThermistor
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:908    .text.CellTemp_ReadThermistor:00000030 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1864   .rodata.adc_channels:00000000 adc_channels
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:914    .text.CellTemp_MonitorTask:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:920    .text.CellTemp_MonitorTask:00000000 CellTemp_MonitorTask
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1570   .text.CellTemp_MonitorTask:000002c4 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1581   .text.CellTemp_SendCANData:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1587   .text.CellTemp_SendCANData:00000000 CellTemp_SendCANData
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1665   .text.CellTemp_GetTemperatures:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1671   .text.CellTemp_GetTemperatures:00000000 CellTemp_GetTemperatures
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1751   .text.CellTemp_GetTemperatures:00000044 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1757   .text.CellTemp_GetStats:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1763   .text.CellTemp_GetStats:00000000 CellTemp_GetStats
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1796   .text.CellTemp_GetStats:00000018 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1801   .text.CellTemp_SetFaultMask:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1807   .text.CellTemp_SetFaultMask:00000000 CellTemp_SetFaultMask
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1824   .text.CellTemp_SetFaultMask:00000008 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1829   .text.CellTemp_GetFaultMask:00000000 $t
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1835   .text.CellTemp_GetFaultMask:00000000 CellTemp_GetFaultMask
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1850   .text.CellTemp_GetFaultMask:00000008 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1855   .rodata.adc_channel_enabled:00000000 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1861   .rodata.adc_channels:00000000 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1873   .data.thermistor_fault_mask:00000000 $d
C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s:1880   .bss.temp_state:00000000 $d

UNDEFINED SYMBOLS
HAL_ADC_ConfigChannel
ARM GAS  C:\Users\Ali\AppData\Local\Temp\cceEzaNu.s 			page 52


hadc1
CAN_SendMessage
CAN_TEMP_ID
memset
HAL_GPIO_WritePin
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_Stop
HAL_ADC_GetValue
osDelay
logf
osKernelGetTickCount
ErrorMgr_SetError
ErrorMgr_ClearError
